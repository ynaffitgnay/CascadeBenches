//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  8 21:25:15 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @inRdbfr = internal constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\A0\E8\D0hx\E8...
`define TAG_g_inRdbfr `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_inRdbfr_a {`TAG_g_inRdbfr, 23'd0}
// @ld_Bfr = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Bfr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Bfr_a {`TAG_g_ld_Bfr, 23'd4}
// @ld_Incnt = internal unnamed_addr global i32 0, align 4
`define TAG_g_ld_Incnt `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Incnt_a {`TAG_g_ld_Incnt, 23'd8}
// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
`define TAG_g_ld_Rdbfr `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_ld_Rdbfr_a {`TAG_g_ld_Rdbfr, 23'd0}
// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
`define TAG_g_ld_Rdptr `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_ld_Rdptr_a {`TAG_g_ld_Rdptr, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [10:0] rom_8_address_a;
reg [10:0] rom_8_address_b;
reg rom_8_write_enable_a;
reg rom_8_write_enable_b;
reg [7:0] rom_8_in_a;
reg [7:0] rom_8_in_b;
wire [7:0] rom_8_out_a;
wire [7:0] rom_8_out_b;

// @inRdbfr = internal constant [2048 x i8] c"\00hx0H \A0\C0\C0@8\F8\F8X\88\E0\C8\D0\B0H`(\B8\A0  x\A8@ H\B8\D8\F0\00\D8\C0@p0\A0\98(\B0  \F8\C8h\18\D8\F0\80\B0H\E8\F0\B80x0\C0@\A8\A0\80\A0\A0\E8\D0hx\E8...
rom_dual_port rom_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_8_address_a ),
	.address_b( rom_8_address_b ),
	.q_a( rom_8_out_a ),
	.q_b( rom_8_out_b)
);
defparam rom_8.width_a = 8;
defparam rom_8.width_b = 8;
defparam rom_8.widthad_a = 11;
defparam rom_8.widthad_b = 11;
defparam rom_8.numwords_a = 2048;
defparam rom_8.numwords_b = 2048;
defparam rom_8.latency = ram_latency;
defparam rom_8.init_file = "rom_8.mif";

reg [10:0] ram_8_address_a;
reg [10:0] ram_8_address_b;
reg ram_8_write_enable_a;
reg ram_8_write_enable_b;
reg [7:0] ram_8_in_a;
reg [7:0] ram_8_in_b;
wire [7:0] ram_8_out_a;
wire [7:0] ram_8_out_b;

// @ld_Rdbfr = internal global [2048 x i8] zeroinitializer, align 1
ram_dual_port ram_8 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_8_address_a ),
	.address_b( ram_8_address_b ),
	.wren_a( ram_8_write_enable_a ),
	.wren_b( ram_8_write_enable_b ),
	.data_a( ram_8_in_a ),
	.data_b( ram_8_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_8_out_a ),
	.q_b( ram_8_out_b)
);
defparam ram_8.width_a = 8;
defparam ram_8.width_b = 8;
defparam ram_8.widthad_a = 11;
defparam ram_8.widthad_b = 11;
defparam ram_8.width_be_a = 1;
defparam ram_8.width_be_b = 1;
defparam ram_8.numwords_a = 2048;
defparam ram_8.numwords_b = 2048;
defparam ram_8.latency = ram_latency;
defparam ram_8.init_file = "ram_8.mif";

reg [1:0] ram_32_address_a;
reg [1:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @ld_Rdptr = internal unnamed_addr global i8* null, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 2;
defparam ram_32.widthad_b = 2;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 3;
defparam ram_32.numwords_b = 3;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_rom_8_a;
assign select_rom_8_a = (tag_a == 2);
reg [ram_latency:0] select_rom_8_reg_a;
wire [7:0] memory_controller_rom_8_out_a;
assign memory_controller_rom_8_out_a = {8{ select_rom_8_reg_a[ram_latency]}} & rom_8_out_a;

wire select_ram_8_a;
assign select_ram_8_a = (tag_a == 3);
reg [ram_latency:0] select_ram_8_reg_a;
wire [7:0] memory_controller_ram_8_out_a;
assign memory_controller_ram_8_out_a = {8{ select_ram_8_reg_a[ram_latency]}} & ram_8_out_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 4);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	rom_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_rom_8_a}};
	rom_8_write_enable_a = memory_controller_write_enable_a & select_rom_8_a;
	rom_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_8_address_a = memory_controller_address_a [11-1+0:0] & {11{select_ram_8_a}};
	ram_8_write_enable_a = memory_controller_write_enable_a & select_ram_8_a;
	ram_8_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	ram_32_address_a = memory_controller_address_a [2-1+2:2] & {2{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_rom_8_out_a | memory_controller_ram_8_out_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_a[j+1] <= select_rom_8_reg_a[j];
select_ram_8_reg_a[j+1] <= select_ram_8_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_rom_8_reg_a[0] <= select_rom_8_a;
select_ram_8_reg_a[0] <= select_ram_8_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_rom_8_b;
assign select_rom_8_b = (tag_b == 2);
reg [ram_latency:0] select_rom_8_reg_b;
wire [7:0] memory_controller_rom_8_out_b;
assign memory_controller_rom_8_out_b = {8{ select_rom_8_reg_b[ram_latency]}} & rom_8_out_b;

wire select_ram_8_b;
assign select_ram_8_b = (tag_b == 3);
reg [ram_latency:0] select_ram_8_reg_b;
wire [7:0] memory_controller_ram_8_out_b;
assign memory_controller_ram_8_out_b = {8{ select_ram_8_reg_b[ram_latency]}} & ram_8_out_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 4);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	rom_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_rom_8_b}};
	rom_8_write_enable_b = memory_controller_write_enable_b & select_rom_8_b;
	rom_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_8_address_b = memory_controller_address_b [11-1+0:0] & {11{select_ram_8_b}};
	ram_8_write_enable_b = memory_controller_write_enable_b & select_ram_8_b;
	ram_8_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	ram_32_address_b = memory_controller_address_b [2-1+2:2] & {2{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_rom_8_out_b | memory_controller_ram_8_out_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_rom_8_reg_b[j+1] <= select_rom_8_reg_b[j];
select_ram_8_reg_b[j+1] <= select_ram_8_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_rom_8_reg_b[0] <= select_rom_8_b;
select_ram_8_reg_b[0] <= select_ram_8_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module Get_motion_code
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_Get_motion_code_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_5 = 8'd5;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_6 = 8'd6;
parameter [7:0] LEGUP_F_Get_motion_code_BB__6_7 = 8'd7;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8 = 8'd8;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9 = 8'd9;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii_10 = 8'd10;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii_11 = 8'd11;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii_12 = 8'd12;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii_13 = 8'd13;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii_14 = 8'd14;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiiipreheader_15 = 8'd15;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii_16 = 8'd16;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii_17 = 8'd17;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii_18 = 8'd18;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii_19 = 8'd19;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiiloopexit_20 = 8'd20;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21 = 8'd21;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_22 = 8'd22;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23 = 8'd23;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii_24 = 8'd24;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii_25 = 8'd25;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii_26 = 8'd26;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27 = 8'd27;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28 = 8'd28;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii_29 = 8'd29;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii_30 = 8'd30;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31 = 8'd31;
parameter [7:0] LEGUP_F_Get_motion_code_BB__52_32 = 8'd32;
parameter [7:0] LEGUP_F_Get_motion_code_BB__55_33 = 8'd33;
parameter [7:0] LEGUP_F_Get_motion_code_BB__55_34 = 8'd34;
parameter [7:0] LEGUP_F_Get_motion_code_BB__55_35 = 8'd35;
parameter [7:0] LEGUP_F_Get_motion_code_BB__63_36 = 8'd36;
parameter [7:0] LEGUP_F_Get_motion_code_BB__63_37 = 8'd37;
parameter [7:0] LEGUP_F_Get_motion_code_BB__63_38 = 8'd38;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39 = 8'd39;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40 = 8'd40;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi60_41 = 8'd41;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi60_42 = 8'd42;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi60_43 = 8'd43;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i63_44 = 8'd44;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i63_45 = 8'd45;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii67preheader_46 = 8'd46;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii67_47 = 8'd47;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii67_48 = 8'd48;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii67_49 = 8'd49;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii67_50 = 8'd50;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69loopexit_51 = 8'd51;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52 = 8'd52;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_53 = 8'd53;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54 = 8'd54;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti70_55 = 8'd55;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti70_56 = 8'd56;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti70_57 = 8'd57;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58 = 8'd58;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59 = 8'd59;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i72_60 = 8'd60;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i72_61 = 8'd61;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62 = 8'd62;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_63 = 8'd63;
parameter [7:0] LEGUP_F_Get_motion_code_BB__119_64 = 8'd64;
parameter [7:0] LEGUP_F_Get_motion_code_BB__119_65 = 8'd65;
parameter [7:0] LEGUP_F_Get_motion_code_BB__119_66 = 8'd66;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67 = 8'd67;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68 = 8'd68;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii46_69 = 8'd69;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii46_70 = 8'd70;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii46_71 = 8'd71;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii48_72 = 8'd72;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii48_73 = 8'd73;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii52preheader_74 = 8'd74;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii52_75 = 8'd75;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii52_76 = 8'd76;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii52_77 = 8'd77;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii52_78 = 8'd78;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54loopexit_79 = 8'd79;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80 = 8'd80;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_81 = 8'd81;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82 = 8'd82;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii55_83 = 8'd83;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii55_84 = 8'd84;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii55_85 = 8'd85;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86 = 8'd86;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_87 = 8'd87;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii58_88 = 8'd88;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii58_89 = 8'd89;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90 = 8'd90;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91 = 8'd91;
parameter [7:0] LEGUP_F_Get_motion_code_BB__167_92 = 8'd92;
parameter [7:0] LEGUP_F_Get_motion_code_BB__169_93 = 8'd93;
parameter [7:0] LEGUP_F_Get_motion_code_BB__169_94 = 8'd94;
parameter [7:0] LEGUP_F_Get_motion_code_BB__169_95 = 8'd95;
parameter [7:0] LEGUP_F_Get_motion_code_BB__177_96 = 8'd96;
parameter [7:0] LEGUP_F_Get_motion_code_BB__177_97 = 8'd97;
parameter [7:0] LEGUP_F_Get_motion_code_BB__177_98 = 8'd98;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99 = 8'd99;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100 = 8'd100;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi31_101 = 8'd101;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi31_102 = 8'd102;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi31_103 = 8'd103;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i34_104 = 8'd104;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i34_105 = 8'd105;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii38preheader_106 = 8'd106;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii38_107 = 8'd107;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii38_108 = 8'd108;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii38_109 = 8'd109;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii38_110 = 8'd110;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40loopexit_111 = 8'd111;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112 = 8'd112;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_113 = 8'd113;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114 = 8'd114;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti41_115 = 8'd115;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti41_116 = 8'd116;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti41_117 = 8'd117;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118 = 8'd118;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119 = 8'd119;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i43_120 = 8'd120;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i43_121 = 8'd121;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122 = 8'd122;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_123 = 8'd123;
parameter [7:0] LEGUP_F_Get_motion_code_BB__233_124 = 8'd124;
parameter [7:0] LEGUP_F_Get_motion_code_BB__233_125 = 8'd125;
parameter [7:0] LEGUP_F_Get_motion_code_BB__233_126 = 8'd126;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127 = 8'd127;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128 = 8'd128;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii17_129 = 8'd129;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii17_130 = 8'd130;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii17_131 = 8'd131;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii19_132 = 8'd132;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii19_133 = 8'd133;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii23preheader_134 = 8'd134;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii23_135 = 8'd135;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii23_136 = 8'd136;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii23_137 = 8'd137;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii23_138 = 8'd138;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25loopexit_139 = 8'd139;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140 = 8'd140;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_141 = 8'd141;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142 = 8'd142;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii26_143 = 8'd143;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii26_144 = 8'd144;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii26_145 = 8'd145;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146 = 8'd146;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_147 = 8'd147;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii29_148 = 8'd148;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii29_149 = 8'd149;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150 = 8'd150;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151 = 8'd151;
parameter [7:0] LEGUP_F_Get_motion_code_BB__281_152 = 8'd152;
parameter [7:0] LEGUP_F_Get_motion_code_BB__284_153 = 8'd153;
parameter [7:0] LEGUP_F_Get_motion_code_BB__284_154 = 8'd154;
parameter [7:0] LEGUP_F_Get_motion_code_BB__284_155 = 8'd155;
parameter [7:0] LEGUP_F_Get_motion_code_BB__291_156 = 8'd156;
parameter [7:0] LEGUP_F_Get_motion_code_BB__291_157 = 8'd157;
parameter [7:0] LEGUP_F_Get_motion_code_BB__291_158 = 8'd158;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159 = 8'd159;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderipreheader_160 = 8'd160;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_161 = 8'd161;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_162 = 8'd162;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderi_163 = 8'd163;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i_164 = 8'd164;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1i_165 = 8'd165;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiipreheader_166 = 8'd166;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii_167 = 8'd167;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii_168 = 8'd168;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii_169 = 8'd169;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiii_170 = 8'd170;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_171 = 8'd171;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172 = 8'd172;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_173 = 8'd173;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174 = 8'd174;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti_175 = 8'd175;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti_176 = 8'd176;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexiti_177 = 8'd177;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178 = 8'd178;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179 = 8'd179;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i_180 = 8'd180;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2i_181 = 8'd181;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182 = 8'd182;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_183 = 8'd183;
parameter [7:0] LEGUP_F_Get_motion_code_BB__347_184 = 8'd184;
parameter [7:0] LEGUP_F_Get_motion_code_BB__347_185 = 8'd185;
parameter [7:0] LEGUP_F_Get_motion_code_BB__347_186 = 8'd186;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187 = 8'd187;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188 = 8'd188;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii2_189 = 8'd189;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii2_190 = 8'd190;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheaderiii2_191 = 8'd191;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii4_192 = 8'd192;
parameter [7:0] LEGUP_F_Get_motion_code_BB_preheader1iii4_193 = 8'd193;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii8preheader_194 = 8'd194;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii8_195 = 8'd195;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii8_196 = 8'd196;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii8_197 = 8'd197;
parameter [7:0] LEGUP_F_Get_motion_code_BB_lrphiiiii8_198 = 8'd198;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10loopexit_199 = 8'd199;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200 = 8'd200;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_201 = 8'd201;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202 = 8'd202;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii11_203 = 8'd203;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii11_204 = 8'd204;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexitiii11_205 = 8'd205;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206 = 8'd206;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_207 = 8'd207;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii14_208 = 8'd208;
parameter [7:0] LEGUP_F_Get_motion_code_BB_loopexit2iii14_209 = 8'd209;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210 = 8'd210;
parameter [7:0] LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211 = 8'd211;
parameter [7:0] LEGUP_F_Get_motion_code_BB__395_212 = 8'd212;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] Get_motion_code_0_1;
reg [31:0] Get_motion_code_0_1_reg;
reg [31:0] Get_motion_code_0_2;
reg [31:0] Get_motion_code_0_2_reg;
reg [31:0] Get_motion_code_0_3;
reg [31:0] Get_motion_code_0_3_reg;
reg [31:0] Get_motion_code_0_4;
reg [31:0] Get_motion_code_0_4_reg;
reg  Get_motion_code_0_5;
reg  Get_motion_code_0_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_6_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_6_7_reg;
reg  Get_motion_code_6_8;
reg  Get_motion_code_6_8_reg;
reg [31:0] Get_motion_code_6_9;
reg [31:0] Get_motion_code_6_9_reg;
reg [31:0] Get_motion_code_preheader1iiipreheader_10;
reg [31:0] Get_motion_code_preheader1iiipreheader_10_reg;
reg [31:0] Get_motion_code_preheader1iiipreheader_11;
reg [31:0] Get_motion_code_preheader1iiipreheader_11_reg;
reg [31:0] Get_motion_code_preheaderiiipreheader_12;
reg [31:0] Get_motion_code_preheaderiiipreheader_12_reg;
reg  Get_motion_code_preheaderiiipreheader_13;
reg  Get_motion_code_preheaderiiipreheader_13_reg;
reg [31:0] Get_motion_code_preheaderiiipreheader_smax75;
reg [31:0] Get_motion_code_preheaderiiipreheader_smax75_reg;
reg [31:0] Get_motion_code_preheaderiiipreheader_14;
reg [31:0] Get_motion_code_preheaderiiipreheader_14_reg;
reg [31:0] Get_motion_code_preheaderiii_indvar64;
reg [31:0] Get_motion_code_preheaderiii_indvar64_reg;
reg [31:0] Get_motion_code_preheaderiii_15;
reg [31:0] Get_motion_code_preheaderiii_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii_scevgep66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii_scevgep66_reg;
reg [31:0] Get_motion_code_preheaderiii_16;
reg [31:0] Get_motion_code_preheaderiii_16_reg;
reg [31:0] Get_motion_code_preheaderiii_17;
reg [31:0] Get_motion_code_preheaderiii_17_reg;
reg [31:0] Get_motion_code_preheaderiii_18;
reg [31:0] Get_motion_code_preheaderiii_18_reg;
reg [31:0] Get_motion_code_preheaderiii_19;
reg [31:0] Get_motion_code_preheaderiii_19_reg;
reg [7:0] Get_motion_code_preheaderiii_20;
reg [7:0] Get_motion_code_preheaderiii_20_reg;
reg [31:0] Get_motion_code_preheaderiii_21;
reg [31:0] Get_motion_code_preheaderiii_21_reg;
reg [31:0] Get_motion_code_preheaderiii_22;
reg [31:0] Get_motion_code_preheaderiii_22_reg;
reg [31:0] Get_motion_code_preheaderiii_23;
reg [31:0] Get_motion_code_preheaderiii_23_reg;
reg  Get_motion_code_preheaderiii_24;
reg  Get_motion_code_preheaderiii_24_reg;
reg [31:0] Get_motion_code_preheaderiii_indvarnext65;
reg [31:0] Get_motion_code_preheaderiii_indvarnext65_reg;
reg [31:0] Get_motion_code_preheader1iii_indvar78;
reg [31:0] Get_motion_code_preheader1iii_indvar78_reg;
reg [31:0] Get_motion_code_preheader1iii_25;
reg [31:0] Get_motion_code_preheader1iii_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii_26_reg;
reg [31:0] Get_motion_code_preheader1iii_27;
reg [31:0] Get_motion_code_preheader1iii_27_reg;
reg [31:0] Get_motion_code_preheader1iii_28;
reg [31:0] Get_motion_code_preheader1iii_28_reg;
reg [31:0] Get_motion_code_preheader1iii_29;
reg [31:0] Get_motion_code_preheader1iii_29_reg;
reg [31:0] Get_motion_code_preheader1iii_30;
reg [31:0] Get_motion_code_preheader1iii_30_reg;
reg  Get_motion_code_preheader1iii_31;
reg  Get_motion_code_preheader1iii_31_reg;
reg [31:0] Get_motion_code_lrphiiiii_indvar67;
reg [31:0] Get_motion_code_lrphiiiii_indvar67_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii_p202iiiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii_p202iiiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii_p101iiiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii_p101iiiii_reg;
reg [7:0] Get_motion_code_lrphiiiii_32;
reg [7:0] Get_motion_code_lrphiiiii_32_reg;
reg [31:0] Get_motion_code_lrphiiiii_indvarnext68;
reg [31:0] Get_motion_code_lrphiiiii_indvarnext68_reg;
reg  Get_motion_code_lrphiiiii_exitcond69;
reg  Get_motion_code_lrphiiiii_exitcond69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii_34_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitiii_35;
reg [7:0] Get_motion_code_Fill_Bufferexitiii_35_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_36;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_36_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_37;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_37_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_38;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_38_reg;
reg  Get_motion_code_Fill_Bufferexitiii_39;
reg  Get_motion_code_Fill_Bufferexitiii_39_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_indvarnext79;
reg [31:0] Get_motion_code_Fill_Bufferexitiii_indvarnext79_reg;
reg [31:0] Get_motion_code_loopexitiii_40;
reg [31:0] Get_motion_code_loopexitiii_40_reg;
reg [31:0] Get_motion_code_loopexitiii_41;
reg [31:0] Get_motion_code_loopexitiii_41_reg;
reg [31:0] Get_motion_code_loopexitiii_42;
reg [31:0] Get_motion_code_loopexitiii_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii_scevgep76_reg;
reg [31:0] Get_motion_code_loopexitiii_43;
reg [31:0] Get_motion_code_loopexitiii_43_reg;
reg [31:0] Get_motion_code_loopexitiii_44;
reg [31:0] Get_motion_code_loopexitiii_44_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii_45;
reg [31:0] Get_motion_code_loopexit2iloopexitii_45_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii_46;
reg [31:0] Get_motion_code_loopexit2iloopexitii_46_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii_47;
reg [31:0] Get_motion_code_loopexit2iloopexitii_47_reg;
reg [31:0] Get_motion_code_loopexit2iii_48;
reg [31:0] Get_motion_code_loopexit2iii_48_reg;
reg [31:0] Get_motion_code_loopexit2iii_Incnt2iii;
reg [31:0] Get_motion_code_loopexit2iii_Incnt2iii_reg;
reg [31:0] Get_motion_code_Get_Bits1exit_49;
reg [31:0] Get_motion_code_Get_Bits1exit_49_reg;
reg [31:0] Get_motion_code_Get_Bits1exit_50;
reg [31:0] Get_motion_code_Get_Bits1exit_50_reg;
reg  Get_motion_code_Get_Bits1exit_51;
reg  Get_motion_code_Get_Bits1exit_51_reg;
reg [31:0] Get_motion_code_52_53;
reg [31:0] Get_motion_code_52_53_reg;
reg  Get_motion_code_52_54;
reg  Get_motion_code_52_54_reg;
reg [31:0] Get_motion_code_55_56;
reg [31:0] Get_motion_code_55_56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_55_57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_55_57_reg;
reg [7:0] Get_motion_code_55_58;
reg [7:0] Get_motion_code_55_58_reg;
reg [31:0] Get_motion_code_55_59;
reg [31:0] Get_motion_code_55_59_reg;
reg [31:0] Get_motion_code_55_60;
reg [31:0] Get_motion_code_55_60_reg;
reg [31:0] Get_motion_code_55_61;
reg [31:0] Get_motion_code_55_61_reg;
reg  Get_motion_code_55_62;
reg  Get_motion_code_55_62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_63_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_63_64_reg;
reg  Get_motion_code_63_65;
reg  Get_motion_code_63_65_reg;
reg [31:0] Get_motion_code_63_66;
reg [31:0] Get_motion_code_63_66_reg;
reg [31:0] Get_motion_code_63_67;
reg [31:0] Get_motion_code_63_67_reg;
reg [31:0] Get_motion_code_preheader1i63preheader_68;
reg [31:0] Get_motion_code_preheader1i63preheader_68_reg;
reg [31:0] Get_motion_code_preheader1i63preheader_69;
reg [31:0] Get_motion_code_preheader1i63preheader_69_reg;
reg [31:0] Get_motion_code_preheader1i63preheader_70;
reg [31:0] Get_motion_code_preheader1i63preheader_70_reg;
reg [31:0] Get_motion_code_preheader1i63preheader_71;
reg [31:0] Get_motion_code_preheader1i63preheader_71_reg;
reg [31:0] Get_motion_code_preheader1i63preheader_72;
reg [31:0] Get_motion_code_preheader1i63preheader_72_reg;
reg [31:0] Get_motion_code_preheaderi60preheader_73;
reg [31:0] Get_motion_code_preheaderi60preheader_73_reg;
reg [31:0] Get_motion_code_preheaderi60preheader_74;
reg [31:0] Get_motion_code_preheaderi60preheader_74_reg;
reg [31:0] Get_motion_code_preheaderi60preheader_75;
reg [31:0] Get_motion_code_preheaderi60preheader_75_reg;
reg [31:0] Get_motion_code_preheaderi60preheader_76;
reg [31:0] Get_motion_code_preheaderi60preheader_76_reg;
reg [31:0] Get_motion_code_preheaderi60preheader_77;
reg [31:0] Get_motion_code_preheaderi60preheader_77_reg;
reg [31:0] Get_motion_code_preheaderi60_indvar9;
reg [31:0] Get_motion_code_preheaderi60_indvar9_reg;
reg [31:0] Get_motion_code_preheaderi60_78;
reg [31:0] Get_motion_code_preheaderi60_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi60_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi60_scevgep11_reg;
reg [31:0] Get_motion_code_preheaderi60_79;
reg [31:0] Get_motion_code_preheaderi60_79_reg;
reg [31:0] Get_motion_code_preheaderi60_80;
reg [31:0] Get_motion_code_preheaderi60_80_reg;
reg [31:0] Get_motion_code_preheaderi60_81;
reg [31:0] Get_motion_code_preheaderi60_81_reg;
reg [31:0] Get_motion_code_preheaderi60_82;
reg [31:0] Get_motion_code_preheaderi60_82_reg;
reg [7:0] Get_motion_code_preheaderi60_83;
reg [7:0] Get_motion_code_preheaderi60_83_reg;
reg [31:0] Get_motion_code_preheaderi60_84;
reg [31:0] Get_motion_code_preheaderi60_84_reg;
reg [31:0] Get_motion_code_preheaderi60_85;
reg [31:0] Get_motion_code_preheaderi60_85_reg;
reg [31:0] Get_motion_code_preheaderi60_86;
reg [31:0] Get_motion_code_preheaderi60_86_reg;
reg  Get_motion_code_preheaderi60_87;
reg  Get_motion_code_preheaderi60_87_reg;
reg [31:0] Get_motion_code_preheaderi60_indvarnext10;
reg [31:0] Get_motion_code_preheaderi60_indvarnext10_reg;
reg [31:0] Get_motion_code_preheader1i63_indvar18;
reg [31:0] Get_motion_code_preheader1i63_indvar18_reg;
reg [31:0] Get_motion_code_preheader1i63_88;
reg [31:0] Get_motion_code_preheader1i63_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i63_89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i63_89_reg;
reg [31:0] Get_motion_code_preheader1i63_90;
reg [31:0] Get_motion_code_preheader1i63_90_reg;
reg [31:0] Get_motion_code_preheader1i63_91;
reg [31:0] Get_motion_code_preheader1i63_91_reg;
reg [31:0] Get_motion_code_preheader1i63_92;
reg [31:0] Get_motion_code_preheader1i63_92_reg;
reg [31:0] Get_motion_code_preheader1i63_93;
reg [31:0] Get_motion_code_preheader1i63_93_reg;
reg  Get_motion_code_preheader1i63_94;
reg  Get_motion_code_preheader1i63_94_reg;
reg [31:0] Get_motion_code_lrphiii67_indvar12;
reg [31:0] Get_motion_code_lrphiii67_indvar12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii67_p202iii64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii67_p202iii64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii67_p101iii65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii67_p101iii65_reg;
reg [7:0] Get_motion_code_lrphiii67_95;
reg [7:0] Get_motion_code_lrphiii67_95_reg;
reg [31:0] Get_motion_code_lrphiii67_indvarnext13;
reg [31:0] Get_motion_code_lrphiii67_indvarnext13_reg;
reg  Get_motion_code_lrphiii67_exitcond14;
reg  Get_motion_code_lrphiii67_exitcond14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti69_96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti69_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti69_97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti69_97_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti69_98;
reg [7:0] Get_motion_code_Fill_Bufferexiti69_98_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_99;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_99_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_100;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_100_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_101;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_101_reg;
reg  Get_motion_code_Fill_Bufferexiti69_102;
reg  Get_motion_code_Fill_Bufferexiti69_102_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_indvarnext19;
reg [31:0] Get_motion_code_Fill_Bufferexiti69_indvarnext19_reg;
reg [31:0] Get_motion_code_loopexiti70_103;
reg [31:0] Get_motion_code_loopexiti70_103_reg;
reg [31:0] Get_motion_code_loopexiti70_104;
reg [31:0] Get_motion_code_loopexiti70_104_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti70_scevgep68;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti70_scevgep68_reg;
reg [31:0] Get_motion_code_loopexiti70_105;
reg [31:0] Get_motion_code_loopexiti70_105_reg;
reg [31:0] Get_motion_code_loopexiti70_106;
reg [31:0] Get_motion_code_loopexiti70_106_reg;
reg [31:0] Get_motion_code_loopexiti70_107;
reg [31:0] Get_motion_code_loopexiti70_107_reg;
reg [31:0] Get_motion_code_loopexiti70_108;
reg [31:0] Get_motion_code_loopexiti70_108_reg;
reg [31:0] Get_motion_code_loopexit2i72loopexit_109;
reg [31:0] Get_motion_code_loopexit2i72loopexit_109_reg;
reg [31:0] Get_motion_code_loopexit2i72loopexit_110;
reg [31:0] Get_motion_code_loopexit2i72loopexit_110_reg;
reg [31:0] Get_motion_code_loopexit2i72loopexit_111;
reg [31:0] Get_motion_code_loopexit2i72loopexit_111_reg;
reg [31:0] Get_motion_code_loopexit2i72loopexit_112;
reg [31:0] Get_motion_code_loopexit2i72loopexit_112_reg;
reg [31:0] Get_motion_code_loopexit2i72_113;
reg [31:0] Get_motion_code_loopexit2i72_113_reg;
reg [31:0] Get_motion_code_loopexit2i72_Incnt2i71;
reg [31:0] Get_motion_code_loopexit2i72_Incnt2i71_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit73_114;
reg [31:0] Get_motion_code_Flush_Bufferexit73_114_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit73_115;
reg [31:0] Get_motion_code_Flush_Bufferexit73_115_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit73_116;
reg [31:0] Get_motion_code_Flush_Bufferexit73_116_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit73_117;
reg [31:0] Get_motion_code_Flush_Bufferexit73_117_reg;
reg  Get_motion_code_Flush_Bufferexit73_118;
reg  Get_motion_code_Flush_Bufferexit73_118_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_119_120;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_119_120_reg;
reg  Get_motion_code_119_121;
reg  Get_motion_code_119_121_reg;
reg [31:0] Get_motion_code_119_122;
reg [31:0] Get_motion_code_119_122_reg;
reg [31:0] Get_motion_code_preheader1iii48preheader_123;
reg [31:0] Get_motion_code_preheader1iii48preheader_123_reg;
reg [31:0] Get_motion_code_preheader1iii48preheader_124;
reg [31:0] Get_motion_code_preheader1iii48preheader_124_reg;
reg [31:0] Get_motion_code_preheaderiii46preheader_125;
reg [31:0] Get_motion_code_preheaderiii46preheader_125_reg;
reg  Get_motion_code_preheaderiii46preheader_126;
reg  Get_motion_code_preheaderiii46preheader_126_reg;
reg [31:0] Get_motion_code_preheaderiii46preheader_smax;
reg [31:0] Get_motion_code_preheaderiii46preheader_smax_reg;
reg [31:0] Get_motion_code_preheaderiii46preheader_127;
reg [31:0] Get_motion_code_preheaderiii46preheader_127_reg;
reg [31:0] Get_motion_code_preheaderiii46_indvar;
reg [31:0] Get_motion_code_preheaderiii46_indvar_reg;
reg [31:0] Get_motion_code_preheaderiii46_128;
reg [31:0] Get_motion_code_preheaderiii46_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii46_scevgep1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii46_scevgep1_reg;
reg [31:0] Get_motion_code_preheaderiii46_129;
reg [31:0] Get_motion_code_preheaderiii46_129_reg;
reg [31:0] Get_motion_code_preheaderiii46_130;
reg [31:0] Get_motion_code_preheaderiii46_130_reg;
reg [31:0] Get_motion_code_preheaderiii46_131;
reg [31:0] Get_motion_code_preheaderiii46_131_reg;
reg [31:0] Get_motion_code_preheaderiii46_132;
reg [31:0] Get_motion_code_preheaderiii46_132_reg;
reg [7:0] Get_motion_code_preheaderiii46_133;
reg [7:0] Get_motion_code_preheaderiii46_133_reg;
reg [31:0] Get_motion_code_preheaderiii46_134;
reg [31:0] Get_motion_code_preheaderiii46_134_reg;
reg [31:0] Get_motion_code_preheaderiii46_135;
reg [31:0] Get_motion_code_preheaderiii46_135_reg;
reg [31:0] Get_motion_code_preheaderiii46_136;
reg [31:0] Get_motion_code_preheaderiii46_136_reg;
reg  Get_motion_code_preheaderiii46_137;
reg  Get_motion_code_preheaderiii46_137_reg;
reg [31:0] Get_motion_code_preheaderiii46_indvarnext;
reg [31:0] Get_motion_code_preheaderiii46_indvarnext_reg;
reg [31:0] Get_motion_code_preheader1iii48_indvar7;
reg [31:0] Get_motion_code_preheader1iii48_indvar7_reg;
reg [31:0] Get_motion_code_preheader1iii48_138;
reg [31:0] Get_motion_code_preheader1iii48_138_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii48_139;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii48_139_reg;
reg [31:0] Get_motion_code_preheader1iii48_140;
reg [31:0] Get_motion_code_preheader1iii48_140_reg;
reg [31:0] Get_motion_code_preheader1iii48_141;
reg [31:0] Get_motion_code_preheader1iii48_141_reg;
reg [31:0] Get_motion_code_preheader1iii48_142;
reg [31:0] Get_motion_code_preheader1iii48_142_reg;
reg [31:0] Get_motion_code_preheader1iii48_143;
reg [31:0] Get_motion_code_preheader1iii48_143_reg;
reg  Get_motion_code_preheader1iii48_144;
reg  Get_motion_code_preheader1iii48_144_reg;
reg [31:0] Get_motion_code_lrphiiiii52_indvar2;
reg [31:0] Get_motion_code_lrphiiiii52_indvar2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii52_p202iiiii49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii52_p202iiiii49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii52_p101iiiii50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii52_p101iiiii50_reg;
reg [7:0] Get_motion_code_lrphiiiii52_145;
reg [7:0] Get_motion_code_lrphiiiii52_145_reg;
reg [31:0] Get_motion_code_lrphiiiii52_indvarnext3;
reg [31:0] Get_motion_code_lrphiiiii52_indvarnext3_reg;
reg  Get_motion_code_lrphiiiii52_exitcond;
reg  Get_motion_code_lrphiiiii52_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii54_146;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii54_146_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii54_147;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii54_147_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitiii54_148;
reg [7:0] Get_motion_code_Fill_Bufferexitiii54_148_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_149;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_149_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_150;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_150_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_151;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_151_reg;
reg  Get_motion_code_Fill_Bufferexitiii54_152;
reg  Get_motion_code_Fill_Bufferexitiii54_152_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_indvarnext8;
reg [31:0] Get_motion_code_Fill_Bufferexitiii54_indvarnext8_reg;
reg [31:0] Get_motion_code_loopexitiii55_153;
reg [31:0] Get_motion_code_loopexitiii55_153_reg;
reg [31:0] Get_motion_code_loopexitiii55_154;
reg [31:0] Get_motion_code_loopexitiii55_154_reg;
reg [31:0] Get_motion_code_loopexitiii55_155;
reg [31:0] Get_motion_code_loopexitiii55_155_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii55_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii55_scevgep_reg;
reg [31:0] Get_motion_code_loopexitiii55_156;
reg [31:0] Get_motion_code_loopexitiii55_156_reg;
reg [31:0] Get_motion_code_loopexitiii55_157;
reg [31:0] Get_motion_code_loopexitiii55_157_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_158;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_158_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_159;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_159_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_160;
reg [31:0] Get_motion_code_loopexit2iloopexitii56_160_reg;
reg [31:0] Get_motion_code_loopexit2iii58_Incnt2iii57;
reg [31:0] Get_motion_code_loopexit2iii58_Incnt2iii57_reg;
reg  Get_motion_code_Get_Bits1exit59_161;
reg  Get_motion_code_Get_Bits1exit59_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit59_162;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit59_162_reg;
reg [7:0] Get_motion_code_Get_Bits1exit59_163;
reg [7:0] Get_motion_code_Get_Bits1exit59_163_reg;
reg [31:0] Get_motion_code_Get_Bits1exit59_164;
reg [31:0] Get_motion_code_Get_Bits1exit59_164_reg;
reg [31:0] Get_motion_code_Get_Bits1exit59_165;
reg [31:0] Get_motion_code_Get_Bits1exit59_165_reg;
reg [31:0] Get_motion_code_Get_Bits1exit59_166;
reg [31:0] Get_motion_code_Get_Bits1exit59_166_reg;
reg  Get_motion_code_167_168;
reg  Get_motion_code_167_168_reg;
reg [31:0] Get_motion_code_169_170;
reg [31:0] Get_motion_code_169_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_169_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_169_171_reg;
reg [7:0] Get_motion_code_169_172;
reg [7:0] Get_motion_code_169_172_reg;
reg [31:0] Get_motion_code_169_173;
reg [31:0] Get_motion_code_169_173_reg;
reg [31:0] Get_motion_code_169_174;
reg [31:0] Get_motion_code_169_174_reg;
reg [31:0] Get_motion_code_169_175;
reg [31:0] Get_motion_code_169_175_reg;
reg  Get_motion_code_169_176;
reg  Get_motion_code_169_176_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_177_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_177_178_reg;
reg  Get_motion_code_177_179;
reg  Get_motion_code_177_179_reg;
reg [31:0] Get_motion_code_177_180;
reg [31:0] Get_motion_code_177_180_reg;
reg [31:0] Get_motion_code_177_181;
reg [31:0] Get_motion_code_177_181_reg;
reg [31:0] Get_motion_code_preheader1i34preheader_182;
reg [31:0] Get_motion_code_preheader1i34preheader_182_reg;
reg [31:0] Get_motion_code_preheader1i34preheader_183;
reg [31:0] Get_motion_code_preheader1i34preheader_183_reg;
reg [31:0] Get_motion_code_preheader1i34preheader_184;
reg [31:0] Get_motion_code_preheader1i34preheader_184_reg;
reg [31:0] Get_motion_code_preheader1i34preheader_185;
reg [31:0] Get_motion_code_preheader1i34preheader_185_reg;
reg [31:0] Get_motion_code_preheader1i34preheader_186;
reg [31:0] Get_motion_code_preheader1i34preheader_186_reg;
reg [31:0] Get_motion_code_preheaderi31preheader_187;
reg [31:0] Get_motion_code_preheaderi31preheader_187_reg;
reg [31:0] Get_motion_code_preheaderi31preheader_188;
reg [31:0] Get_motion_code_preheaderi31preheader_188_reg;
reg [31:0] Get_motion_code_preheaderi31preheader_189;
reg [31:0] Get_motion_code_preheaderi31preheader_189_reg;
reg [31:0] Get_motion_code_preheaderi31preheader_190;
reg [31:0] Get_motion_code_preheaderi31preheader_190_reg;
reg [31:0] Get_motion_code_preheaderi31preheader_191;
reg [31:0] Get_motion_code_preheaderi31preheader_191_reg;
reg [31:0] Get_motion_code_preheaderi31_indvar31;
reg [31:0] Get_motion_code_preheaderi31_indvar31_reg;
reg [31:0] Get_motion_code_preheaderi31_192;
reg [31:0] Get_motion_code_preheaderi31_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi31_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi31_scevgep33_reg;
reg [31:0] Get_motion_code_preheaderi31_193;
reg [31:0] Get_motion_code_preheaderi31_193_reg;
reg [31:0] Get_motion_code_preheaderi31_194;
reg [31:0] Get_motion_code_preheaderi31_194_reg;
reg [31:0] Get_motion_code_preheaderi31_195;
reg [31:0] Get_motion_code_preheaderi31_195_reg;
reg [31:0] Get_motion_code_preheaderi31_196;
reg [31:0] Get_motion_code_preheaderi31_196_reg;
reg [7:0] Get_motion_code_preheaderi31_197;
reg [7:0] Get_motion_code_preheaderi31_197_reg;
reg [31:0] Get_motion_code_preheaderi31_198;
reg [31:0] Get_motion_code_preheaderi31_198_reg;
reg [31:0] Get_motion_code_preheaderi31_199;
reg [31:0] Get_motion_code_preheaderi31_199_reg;
reg [31:0] Get_motion_code_preheaderi31_200;
reg [31:0] Get_motion_code_preheaderi31_200_reg;
reg  Get_motion_code_preheaderi31_201;
reg  Get_motion_code_preheaderi31_201_reg;
reg [31:0] Get_motion_code_preheaderi31_indvarnext32;
reg [31:0] Get_motion_code_preheaderi31_indvarnext32_reg;
reg [31:0] Get_motion_code_preheader1i34_indvar40;
reg [31:0] Get_motion_code_preheader1i34_indvar40_reg;
reg [31:0] Get_motion_code_preheader1i34_202;
reg [31:0] Get_motion_code_preheader1i34_202_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i34_203;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i34_203_reg;
reg [31:0] Get_motion_code_preheader1i34_204;
reg [31:0] Get_motion_code_preheader1i34_204_reg;
reg [31:0] Get_motion_code_preheader1i34_205;
reg [31:0] Get_motion_code_preheader1i34_205_reg;
reg [31:0] Get_motion_code_preheader1i34_206;
reg [31:0] Get_motion_code_preheader1i34_206_reg;
reg [31:0] Get_motion_code_preheader1i34_207;
reg [31:0] Get_motion_code_preheader1i34_207_reg;
reg  Get_motion_code_preheader1i34_208;
reg  Get_motion_code_preheader1i34_208_reg;
reg [31:0] Get_motion_code_lrphiii38_indvar34;
reg [31:0] Get_motion_code_lrphiii38_indvar34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii38_p202iii35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii38_p202iii35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii38_p101iii36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii38_p101iii36_reg;
reg [7:0] Get_motion_code_lrphiii38_209;
reg [7:0] Get_motion_code_lrphiii38_209_reg;
reg [31:0] Get_motion_code_lrphiii38_indvarnext35;
reg [31:0] Get_motion_code_lrphiii38_indvarnext35_reg;
reg  Get_motion_code_lrphiii38_exitcond36;
reg  Get_motion_code_lrphiii38_exitcond36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti40_210;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti40_210_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti40_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti40_211_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti40_212;
reg [7:0] Get_motion_code_Fill_Bufferexiti40_212_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_213;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_213_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_214;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_214_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_215;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_215_reg;
reg  Get_motion_code_Fill_Bufferexiti40_216;
reg  Get_motion_code_Fill_Bufferexiti40_216_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_indvarnext41;
reg [31:0] Get_motion_code_Fill_Bufferexiti40_indvarnext41_reg;
reg [31:0] Get_motion_code_loopexiti41_217;
reg [31:0] Get_motion_code_loopexiti41_217_reg;
reg [31:0] Get_motion_code_loopexiti41_218;
reg [31:0] Get_motion_code_loopexiti41_218_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti41_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti41_scevgep71_reg;
reg [31:0] Get_motion_code_loopexiti41_219;
reg [31:0] Get_motion_code_loopexiti41_219_reg;
reg [31:0] Get_motion_code_loopexiti41_220;
reg [31:0] Get_motion_code_loopexiti41_220_reg;
reg [31:0] Get_motion_code_loopexiti41_221;
reg [31:0] Get_motion_code_loopexiti41_221_reg;
reg [31:0] Get_motion_code_loopexiti41_222;
reg [31:0] Get_motion_code_loopexiti41_222_reg;
reg [31:0] Get_motion_code_loopexit2i43loopexit_223;
reg [31:0] Get_motion_code_loopexit2i43loopexit_223_reg;
reg [31:0] Get_motion_code_loopexit2i43loopexit_224;
reg [31:0] Get_motion_code_loopexit2i43loopexit_224_reg;
reg [31:0] Get_motion_code_loopexit2i43loopexit_225;
reg [31:0] Get_motion_code_loopexit2i43loopexit_225_reg;
reg [31:0] Get_motion_code_loopexit2i43loopexit_226;
reg [31:0] Get_motion_code_loopexit2i43loopexit_226_reg;
reg [31:0] Get_motion_code_loopexit2i43_227;
reg [31:0] Get_motion_code_loopexit2i43_227_reg;
reg [31:0] Get_motion_code_loopexit2i43_Incnt2i42;
reg [31:0] Get_motion_code_loopexit2i43_Incnt2i42_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit44_228;
reg [31:0] Get_motion_code_Flush_Bufferexit44_228_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit44_229;
reg [31:0] Get_motion_code_Flush_Bufferexit44_229_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit44_230;
reg [31:0] Get_motion_code_Flush_Bufferexit44_230_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit44_231;
reg [31:0] Get_motion_code_Flush_Bufferexit44_231_reg;
reg  Get_motion_code_Flush_Bufferexit44_232;
reg  Get_motion_code_Flush_Bufferexit44_232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_233_234;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_233_234_reg;
reg  Get_motion_code_233_235;
reg  Get_motion_code_233_235_reg;
reg [31:0] Get_motion_code_233_236;
reg [31:0] Get_motion_code_233_236_reg;
reg [31:0] Get_motion_code_preheader1iii19preheader_237;
reg [31:0] Get_motion_code_preheader1iii19preheader_237_reg;
reg [31:0] Get_motion_code_preheader1iii19preheader_238;
reg [31:0] Get_motion_code_preheader1iii19preheader_238_reg;
reg [31:0] Get_motion_code_preheaderiii17preheader_239;
reg [31:0] Get_motion_code_preheaderiii17preheader_239_reg;
reg  Get_motion_code_preheaderiii17preheader_240;
reg  Get_motion_code_preheaderiii17preheader_240_reg;
reg [31:0] Get_motion_code_preheaderiii17preheader_smax69;
reg [31:0] Get_motion_code_preheaderiii17preheader_smax69_reg;
reg [31:0] Get_motion_code_preheaderiii17preheader_241;
reg [31:0] Get_motion_code_preheaderiii17preheader_241_reg;
reg [31:0] Get_motion_code_preheaderiii17_indvar20;
reg [31:0] Get_motion_code_preheaderiii17_indvar20_reg;
reg [31:0] Get_motion_code_preheaderiii17_242;
reg [31:0] Get_motion_code_preheaderiii17_242_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii17_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii17_scevgep22_reg;
reg [31:0] Get_motion_code_preheaderiii17_243;
reg [31:0] Get_motion_code_preheaderiii17_243_reg;
reg [31:0] Get_motion_code_preheaderiii17_244;
reg [31:0] Get_motion_code_preheaderiii17_244_reg;
reg [31:0] Get_motion_code_preheaderiii17_245;
reg [31:0] Get_motion_code_preheaderiii17_245_reg;
reg [31:0] Get_motion_code_preheaderiii17_246;
reg [31:0] Get_motion_code_preheaderiii17_246_reg;
reg [7:0] Get_motion_code_preheaderiii17_247;
reg [7:0] Get_motion_code_preheaderiii17_247_reg;
reg [31:0] Get_motion_code_preheaderiii17_248;
reg [31:0] Get_motion_code_preheaderiii17_248_reg;
reg [31:0] Get_motion_code_preheaderiii17_249;
reg [31:0] Get_motion_code_preheaderiii17_249_reg;
reg [31:0] Get_motion_code_preheaderiii17_250;
reg [31:0] Get_motion_code_preheaderiii17_250_reg;
reg  Get_motion_code_preheaderiii17_251;
reg  Get_motion_code_preheaderiii17_251_reg;
reg [31:0] Get_motion_code_preheaderiii17_indvarnext21;
reg [31:0] Get_motion_code_preheaderiii17_indvarnext21_reg;
reg [31:0] Get_motion_code_preheader1iii19_indvar29;
reg [31:0] Get_motion_code_preheader1iii19_indvar29_reg;
reg [31:0] Get_motion_code_preheader1iii19_252;
reg [31:0] Get_motion_code_preheader1iii19_252_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii19_253;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii19_253_reg;
reg [31:0] Get_motion_code_preheader1iii19_254;
reg [31:0] Get_motion_code_preheader1iii19_254_reg;
reg [31:0] Get_motion_code_preheader1iii19_255;
reg [31:0] Get_motion_code_preheader1iii19_255_reg;
reg [31:0] Get_motion_code_preheader1iii19_256;
reg [31:0] Get_motion_code_preheader1iii19_256_reg;
reg [31:0] Get_motion_code_preheader1iii19_257;
reg [31:0] Get_motion_code_preheader1iii19_257_reg;
reg  Get_motion_code_preheader1iii19_258;
reg  Get_motion_code_preheader1iii19_258_reg;
reg [31:0] Get_motion_code_lrphiiiii23_indvar23;
reg [31:0] Get_motion_code_lrphiiiii23_indvar23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii23_p202iiiii20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii23_p202iiiii20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii23_p101iiiii21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii23_p101iiiii21_reg;
reg [7:0] Get_motion_code_lrphiiiii23_259;
reg [7:0] Get_motion_code_lrphiiiii23_259_reg;
reg [31:0] Get_motion_code_lrphiiiii23_indvarnext24;
reg [31:0] Get_motion_code_lrphiiiii23_indvarnext24_reg;
reg  Get_motion_code_lrphiiiii23_exitcond25;
reg  Get_motion_code_lrphiiiii23_exitcond25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii25_260;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii25_260_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii25_261;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii25_261_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitiii25_262;
reg [7:0] Get_motion_code_Fill_Bufferexitiii25_262_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_263;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_263_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_264;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_264_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_265;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_265_reg;
reg  Get_motion_code_Fill_Bufferexitiii25_266;
reg  Get_motion_code_Fill_Bufferexitiii25_266_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_indvarnext30;
reg [31:0] Get_motion_code_Fill_Bufferexitiii25_indvarnext30_reg;
reg [31:0] Get_motion_code_loopexitiii26_267;
reg [31:0] Get_motion_code_loopexitiii26_267_reg;
reg [31:0] Get_motion_code_loopexitiii26_268;
reg [31:0] Get_motion_code_loopexitiii26_268_reg;
reg [31:0] Get_motion_code_loopexitiii26_269;
reg [31:0] Get_motion_code_loopexitiii26_269_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii26_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii26_scevgep70_reg;
reg [31:0] Get_motion_code_loopexitiii26_270;
reg [31:0] Get_motion_code_loopexitiii26_270_reg;
reg [31:0] Get_motion_code_loopexitiii26_271;
reg [31:0] Get_motion_code_loopexitiii26_271_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_272;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_272_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_273;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_273_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_274;
reg [31:0] Get_motion_code_loopexit2iloopexitii27_274_reg;
reg [31:0] Get_motion_code_loopexit2iii29_Incnt2iii28;
reg [31:0] Get_motion_code_loopexit2iii29_Incnt2iii28_reg;
reg  Get_motion_code_Get_Bits1exit30_275;
reg  Get_motion_code_Get_Bits1exit30_275_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit30_276;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit30_276_reg;
reg [7:0] Get_motion_code_Get_Bits1exit30_277;
reg [7:0] Get_motion_code_Get_Bits1exit30_277_reg;
reg [31:0] Get_motion_code_Get_Bits1exit30_278;
reg [31:0] Get_motion_code_Get_Bits1exit30_278_reg;
reg [31:0] Get_motion_code_Get_Bits1exit30_279;
reg [31:0] Get_motion_code_Get_Bits1exit30_279_reg;
reg [31:0] Get_motion_code_Get_Bits1exit30_280;
reg [31:0] Get_motion_code_Get_Bits1exit30_280_reg;
reg [31:0] Get_motion_code_281_282;
reg [31:0] Get_motion_code_281_282_reg;
reg  Get_motion_code_281_283;
reg  Get_motion_code_281_283_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_284_285;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_284_285_reg;
reg [7:0] Get_motion_code_284_286;
reg [7:0] Get_motion_code_284_286_reg;
reg [31:0] Get_motion_code_284_287;
reg [31:0] Get_motion_code_284_287_reg;
reg [31:0] Get_motion_code_284_288;
reg [31:0] Get_motion_code_284_288_reg;
reg [31:0] Get_motion_code_284_289;
reg [31:0] Get_motion_code_284_289_reg;
reg  Get_motion_code_284_290;
reg  Get_motion_code_284_290_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_291_292;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_291_292_reg;
reg  Get_motion_code_291_293;
reg  Get_motion_code_291_293_reg;
reg [31:0] Get_motion_code_291_294;
reg [31:0] Get_motion_code_291_294_reg;
reg [31:0] Get_motion_code_291_295;
reg [31:0] Get_motion_code_291_295_reg;
reg [31:0] Get_motion_code_preheader1ipreheader_296;
reg [31:0] Get_motion_code_preheader1ipreheader_296_reg;
reg [31:0] Get_motion_code_preheader1ipreheader_297;
reg [31:0] Get_motion_code_preheader1ipreheader_297_reg;
reg [31:0] Get_motion_code_preheader1ipreheader_298;
reg [31:0] Get_motion_code_preheader1ipreheader_298_reg;
reg [31:0] Get_motion_code_preheader1ipreheader_299;
reg [31:0] Get_motion_code_preheader1ipreheader_299_reg;
reg [31:0] Get_motion_code_preheader1ipreheader_300;
reg [31:0] Get_motion_code_preheader1ipreheader_300_reg;
reg [31:0] Get_motion_code_preheaderipreheader_301;
reg [31:0] Get_motion_code_preheaderipreheader_301_reg;
reg [31:0] Get_motion_code_preheaderipreheader_302;
reg [31:0] Get_motion_code_preheaderipreheader_302_reg;
reg [31:0] Get_motion_code_preheaderipreheader_303;
reg [31:0] Get_motion_code_preheaderipreheader_303_reg;
reg [31:0] Get_motion_code_preheaderipreheader_304;
reg [31:0] Get_motion_code_preheaderipreheader_304_reg;
reg [31:0] Get_motion_code_preheaderipreheader_305;
reg [31:0] Get_motion_code_preheaderipreheader_305_reg;
reg [31:0] Get_motion_code_preheaderi_indvar53;
reg [31:0] Get_motion_code_preheaderi_indvar53_reg;
reg [31:0] Get_motion_code_preheaderi_306;
reg [31:0] Get_motion_code_preheaderi_306_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi_scevgep55;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderi_scevgep55_reg;
reg [31:0] Get_motion_code_preheaderi_307;
reg [31:0] Get_motion_code_preheaderi_307_reg;
reg [31:0] Get_motion_code_preheaderi_308;
reg [31:0] Get_motion_code_preheaderi_308_reg;
reg [31:0] Get_motion_code_preheaderi_309;
reg [31:0] Get_motion_code_preheaderi_309_reg;
reg [31:0] Get_motion_code_preheaderi_310;
reg [31:0] Get_motion_code_preheaderi_310_reg;
reg [7:0] Get_motion_code_preheaderi_311;
reg [7:0] Get_motion_code_preheaderi_311_reg;
reg [31:0] Get_motion_code_preheaderi_312;
reg [31:0] Get_motion_code_preheaderi_312_reg;
reg [31:0] Get_motion_code_preheaderi_313;
reg [31:0] Get_motion_code_preheaderi_313_reg;
reg [31:0] Get_motion_code_preheaderi_314;
reg [31:0] Get_motion_code_preheaderi_314_reg;
reg  Get_motion_code_preheaderi_315;
reg  Get_motion_code_preheaderi_315_reg;
reg [31:0] Get_motion_code_preheaderi_indvarnext54;
reg [31:0] Get_motion_code_preheaderi_indvarnext54_reg;
reg [31:0] Get_motion_code_preheader1i_indvar62;
reg [31:0] Get_motion_code_preheader1i_indvar62_reg;
reg [31:0] Get_motion_code_preheader1i_316;
reg [31:0] Get_motion_code_preheader1i_316_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1i_317_reg;
reg [31:0] Get_motion_code_preheader1i_318;
reg [31:0] Get_motion_code_preheader1i_318_reg;
reg [31:0] Get_motion_code_preheader1i_319;
reg [31:0] Get_motion_code_preheader1i_319_reg;
reg [31:0] Get_motion_code_preheader1i_320;
reg [31:0] Get_motion_code_preheader1i_320_reg;
reg [31:0] Get_motion_code_preheader1i_321;
reg [31:0] Get_motion_code_preheader1i_321_reg;
reg  Get_motion_code_preheader1i_322;
reg  Get_motion_code_preheader1i_322_reg;
reg [31:0] Get_motion_code_lrphiii_indvar56;
reg [31:0] Get_motion_code_lrphiii_indvar56_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii_p202iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii_p202iii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii_p101iii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiii_p101iii_reg;
reg [7:0] Get_motion_code_lrphiii_323;
reg [7:0] Get_motion_code_lrphiii_323_reg;
reg [31:0] Get_motion_code_lrphiii_indvarnext57;
reg [31:0] Get_motion_code_lrphiii_indvarnext57_reg;
reg  Get_motion_code_lrphiii_exitcond58;
reg  Get_motion_code_lrphiii_exitcond58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_324_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexiti_325_reg;
reg [7:0] Get_motion_code_Fill_Bufferexiti_326;
reg [7:0] Get_motion_code_Fill_Bufferexiti_326_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_327;
reg [31:0] Get_motion_code_Fill_Bufferexiti_327_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_328;
reg [31:0] Get_motion_code_Fill_Bufferexiti_328_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_329;
reg [31:0] Get_motion_code_Fill_Bufferexiti_329_reg;
reg  Get_motion_code_Fill_Bufferexiti_330;
reg  Get_motion_code_Fill_Bufferexiti_330_reg;
reg [31:0] Get_motion_code_Fill_Bufferexiti_indvarnext63;
reg [31:0] Get_motion_code_Fill_Bufferexiti_indvarnext63_reg;
reg [31:0] Get_motion_code_loopexiti_331;
reg [31:0] Get_motion_code_loopexiti_331_reg;
reg [31:0] Get_motion_code_loopexiti_332;
reg [31:0] Get_motion_code_loopexiti_332_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexiti_scevgep74_reg;
reg [31:0] Get_motion_code_loopexiti_333;
reg [31:0] Get_motion_code_loopexiti_333_reg;
reg [31:0] Get_motion_code_loopexiti_334;
reg [31:0] Get_motion_code_loopexiti_334_reg;
reg [31:0] Get_motion_code_loopexiti_335;
reg [31:0] Get_motion_code_loopexiti_335_reg;
reg [31:0] Get_motion_code_loopexiti_336;
reg [31:0] Get_motion_code_loopexiti_336_reg;
reg [31:0] Get_motion_code_loopexit2iloopexit_337;
reg [31:0] Get_motion_code_loopexit2iloopexit_337_reg;
reg [31:0] Get_motion_code_loopexit2iloopexit_338;
reg [31:0] Get_motion_code_loopexit2iloopexit_338_reg;
reg [31:0] Get_motion_code_loopexit2iloopexit_339;
reg [31:0] Get_motion_code_loopexit2iloopexit_339_reg;
reg [31:0] Get_motion_code_loopexit2iloopexit_340;
reg [31:0] Get_motion_code_loopexit2iloopexit_340_reg;
reg [31:0] Get_motion_code_loopexit2i_341;
reg [31:0] Get_motion_code_loopexit2i_341_reg;
reg [31:0] Get_motion_code_loopexit2i_Incnt2i;
reg [31:0] Get_motion_code_loopexit2i_Incnt2i_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_342;
reg [31:0] Get_motion_code_Flush_Bufferexit_342_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_343;
reg [31:0] Get_motion_code_Flush_Bufferexit_343_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_344;
reg [31:0] Get_motion_code_Flush_Bufferexit_344_reg;
reg [31:0] Get_motion_code_Flush_Bufferexit_345;
reg [31:0] Get_motion_code_Flush_Bufferexit_345_reg;
reg  Get_motion_code_Flush_Bufferexit_346;
reg  Get_motion_code_Flush_Bufferexit_346_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_347_348;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_347_348_reg;
reg  Get_motion_code_347_349;
reg  Get_motion_code_347_349_reg;
reg [31:0] Get_motion_code_347_350;
reg [31:0] Get_motion_code_347_350_reg;
reg [31:0] Get_motion_code_preheader1iii4preheader_351;
reg [31:0] Get_motion_code_preheader1iii4preheader_351_reg;
reg [31:0] Get_motion_code_preheader1iii4preheader_352;
reg [31:0] Get_motion_code_preheader1iii4preheader_352_reg;
reg [31:0] Get_motion_code_preheaderiii2preheader_353;
reg [31:0] Get_motion_code_preheaderiii2preheader_353_reg;
reg  Get_motion_code_preheaderiii2preheader_354;
reg  Get_motion_code_preheaderiii2preheader_354_reg;
reg [31:0] Get_motion_code_preheaderiii2preheader_smax72;
reg [31:0] Get_motion_code_preheaderiii2preheader_smax72_reg;
reg [31:0] Get_motion_code_preheaderiii2preheader_355;
reg [31:0] Get_motion_code_preheaderiii2preheader_355_reg;
reg [31:0] Get_motion_code_preheaderiii2_indvar42;
reg [31:0] Get_motion_code_preheaderiii2_indvar42_reg;
reg [31:0] Get_motion_code_preheaderiii2_356;
reg [31:0] Get_motion_code_preheaderiii2_356_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii2_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheaderiii2_scevgep44_reg;
reg [31:0] Get_motion_code_preheaderiii2_357;
reg [31:0] Get_motion_code_preheaderiii2_357_reg;
reg [31:0] Get_motion_code_preheaderiii2_358;
reg [31:0] Get_motion_code_preheaderiii2_358_reg;
reg [31:0] Get_motion_code_preheaderiii2_359;
reg [31:0] Get_motion_code_preheaderiii2_359_reg;
reg [31:0] Get_motion_code_preheaderiii2_360;
reg [31:0] Get_motion_code_preheaderiii2_360_reg;
reg [7:0] Get_motion_code_preheaderiii2_361;
reg [7:0] Get_motion_code_preheaderiii2_361_reg;
reg [31:0] Get_motion_code_preheaderiii2_362;
reg [31:0] Get_motion_code_preheaderiii2_362_reg;
reg [31:0] Get_motion_code_preheaderiii2_363;
reg [31:0] Get_motion_code_preheaderiii2_363_reg;
reg [31:0] Get_motion_code_preheaderiii2_364;
reg [31:0] Get_motion_code_preheaderiii2_364_reg;
reg  Get_motion_code_preheaderiii2_365;
reg  Get_motion_code_preheaderiii2_365_reg;
reg [31:0] Get_motion_code_preheaderiii2_indvarnext43;
reg [31:0] Get_motion_code_preheaderiii2_indvarnext43_reg;
reg [31:0] Get_motion_code_preheader1iii4_indvar51;
reg [31:0] Get_motion_code_preheader1iii4_indvar51_reg;
reg [31:0] Get_motion_code_preheader1iii4_366;
reg [31:0] Get_motion_code_preheader1iii4_366_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii4_367;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_preheader1iii4_367_reg;
reg [31:0] Get_motion_code_preheader1iii4_368;
reg [31:0] Get_motion_code_preheader1iii4_368_reg;
reg [31:0] Get_motion_code_preheader1iii4_369;
reg [31:0] Get_motion_code_preheader1iii4_369_reg;
reg [31:0] Get_motion_code_preheader1iii4_370;
reg [31:0] Get_motion_code_preheader1iii4_370_reg;
reg [31:0] Get_motion_code_preheader1iii4_371;
reg [31:0] Get_motion_code_preheader1iii4_371_reg;
reg  Get_motion_code_preheader1iii4_372;
reg  Get_motion_code_preheader1iii4_372_reg;
reg [31:0] Get_motion_code_lrphiiiii8_indvar45;
reg [31:0] Get_motion_code_lrphiiiii8_indvar45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii8_p202iiiii5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii8_p202iiiii5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii8_p101iiiii6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_lrphiiiii8_p101iiiii6_reg;
reg [7:0] Get_motion_code_lrphiiiii8_373;
reg [7:0] Get_motion_code_lrphiiiii8_373_reg;
reg [31:0] Get_motion_code_lrphiiiii8_indvarnext46;
reg [31:0] Get_motion_code_lrphiiiii8_indvarnext46_reg;
reg  Get_motion_code_lrphiiiii8_exitcond47;
reg  Get_motion_code_lrphiiiii8_exitcond47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii10_374;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii10_374_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii10_375;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Fill_Bufferexitiii10_375_reg;
reg [7:0] Get_motion_code_Fill_Bufferexitiii10_376;
reg [7:0] Get_motion_code_Fill_Bufferexitiii10_376_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_377;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_377_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_378;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_378_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_379;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_379_reg;
reg  Get_motion_code_Fill_Bufferexitiii10_380;
reg  Get_motion_code_Fill_Bufferexitiii10_380_reg;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_indvarnext52;
reg [31:0] Get_motion_code_Fill_Bufferexitiii10_indvarnext52_reg;
reg [31:0] Get_motion_code_loopexitiii11_381;
reg [31:0] Get_motion_code_loopexitiii11_381_reg;
reg [31:0] Get_motion_code_loopexitiii11_382;
reg [31:0] Get_motion_code_loopexitiii11_382_reg;
reg [31:0] Get_motion_code_loopexitiii11_383;
reg [31:0] Get_motion_code_loopexitiii11_383_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii11_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_loopexitiii11_scevgep73_reg;
reg [31:0] Get_motion_code_loopexitiii11_384;
reg [31:0] Get_motion_code_loopexitiii11_384_reg;
reg [31:0] Get_motion_code_loopexitiii11_385;
reg [31:0] Get_motion_code_loopexitiii11_385_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_386;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_386_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_387;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_387_reg;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_388;
reg [31:0] Get_motion_code_loopexit2iloopexitii12_388_reg;
reg [31:0] Get_motion_code_loopexit2iii14_Incnt2iii13;
reg [31:0] Get_motion_code_loopexit2iii14_Incnt2iii13_reg;
reg  Get_motion_code_Get_Bits1exit15_389;
reg  Get_motion_code_Get_Bits1exit15_389_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit15_390;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_Get_Bits1exit15_390_reg;
reg [7:0] Get_motion_code_Get_Bits1exit15_391;
reg [7:0] Get_motion_code_Get_Bits1exit15_391_reg;
reg [31:0] Get_motion_code_Get_Bits1exit15_392;
reg [31:0] Get_motion_code_Get_Bits1exit15_392_reg;
reg [31:0] Get_motion_code_Get_Bits1exit15_393;
reg [31:0] Get_motion_code_Get_Bits1exit15_393_reg;
reg [31:0] Get_motion_code_Get_Bits1exit15_394;
reg [31:0] Get_motion_code_Get_Bits1exit15_394_reg;
reg [31:0] Get_motion_code_395_0;
reg [31:0] Get_motion_code_395_0_reg;
wire [10:0] rom_8_address_a;
wire  rom_8_write_enable_a;
wire [7:0] rom_8_in_a;
wire [7:0] rom_8_out_a;
wire [10:0] rom_8_address_b;
wire  rom_8_write_enable_b;
wire [7:0] rom_8_in_b;
wire [7:0] rom_8_out_b;
wire [10:0] ram_8_address_a;
wire  ram_8_write_enable_a;
wire [7:0] ram_8_in_a;
wire [7:0] ram_8_out_a;
wire [10:0] ram_8_address_b;
wire  ram_8_write_enable_b;
wire [7:0] ram_8_in_b;
wire [7:0] ram_8_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [3:0] MVtab0_address_a;
reg  MVtab0_write_enable_a;
wire [7:0] MVtab0_in_a;
wire [7:0] MVtab0_out_a;
wire [3:0] MVtab0_address_b;
wire  MVtab0_write_enable_b;
wire [7:0] MVtab0_in_b;
wire [7:0] MVtab0_out_b;
reg [3:0] MVtab1_address_a;
reg  MVtab1_write_enable_a;
wire [7:0] MVtab1_in_a;
wire [7:0] MVtab1_out_a;
wire [3:0] MVtab1_address_b;
wire  MVtab1_write_enable_b;
wire [7:0] MVtab1_in_b;
wire [7:0] MVtab1_out_b;
reg [4:0] MVtab2_address_a;
reg  MVtab2_write_enable_a;
wire [7:0] MVtab2_in_a;
wire [7:0] MVtab2_out_a;
wire [4:0] MVtab2_address_b;
wire  MVtab2_write_enable_b;
wire [7:0] MVtab2_in_b;
wire [7:0] MVtab2_out_b;
reg  lpm_mult_Get_motion_code_preheaderiii_18_en;
reg [31:0] Get_motion_code_preheaderiii_18_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1iii_29_en;
reg [31:0] Get_motion_code_preheader1iii_29_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi60_81_en;
reg [31:0] Get_motion_code_preheaderi60_81_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1i63_92_en;
reg [31:0] Get_motion_code_preheader1i63_92_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderiii46_131_en;
reg [31:0] Get_motion_code_preheaderiii46_131_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1iii48_142_en;
reg [31:0] Get_motion_code_preheader1iii48_142_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi31_195_en;
reg [31:0] Get_motion_code_preheaderi31_195_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1i34_206_en;
reg [31:0] Get_motion_code_preheader1i34_206_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderiii17_245_en;
reg [31:0] Get_motion_code_preheaderiii17_245_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1iii19_256_en;
reg [31:0] Get_motion_code_preheader1iii19_256_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderi_309_en;
reg [31:0] Get_motion_code_preheaderi_309_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1i_320_en;
reg [31:0] Get_motion_code_preheader1i_320_stage0_reg;
reg  lpm_mult_Get_motion_code_preheaderiii2_359_en;
reg [31:0] Get_motion_code_preheaderiii2_359_stage0_reg;
reg  lpm_mult_Get_motion_code_preheader1iii4_370_en;
reg [31:0] Get_motion_code_preheader1iii4_370_stage0_reg;

// Local Rams


// @MVtab0 = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\FF\00", [2 x i8] c"\03\03", [2 x i8] c"\02\02", [2 x i8] c"\02\02", [2 x i8] c"\01\01", [2 x i8] c"\01\01", [2 x i8] c"\01\01", [2 ...
rom_dual_port MVtab0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab0_address_a ),
	.address_b( MVtab0_address_b ),
	.q_a( MVtab0_out_a ),
	.q_b( MVtab0_out_b)
);
defparam MVtab0.width_a = 8;
defparam MVtab0.width_b = 8;
defparam MVtab0.widthad_a = 4;
defparam MVtab0.widthad_b = 4;
defparam MVtab0.numwords_a = 16;
defparam MVtab0.numwords_b = 16;
defparam MVtab0.latency = 1;
defparam MVtab0.init_file = "MVtab0.mif";


// @MVtab1 = internal unnamed_addr constant [8 x [2 x i8]] [[2 x i8] c"\FF\00", [2 x i8] c"\FF\00", [2 x i8] c"\FF\00", [2 x i8] c"\07\06", [2 x i8] c"\06\06", [2 x i8] c"\05\06", [2 x i8] c"\04\05", [2 ...
rom_dual_port MVtab1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab1_address_a ),
	.address_b( MVtab1_address_b ),
	.q_a( MVtab1_out_a ),
	.q_b( MVtab1_out_b)
);
defparam MVtab1.width_a = 8;
defparam MVtab1.width_b = 8;
defparam MVtab1.widthad_a = 4;
defparam MVtab1.widthad_b = 4;
defparam MVtab1.numwords_a = 16;
defparam MVtab1.numwords_b = 16;
defparam MVtab1.latency = 1;
defparam MVtab1.init_file = "MVtab1.mif";


// @MVtab2 = internal unnamed_addr constant [12 x [2 x i8]] [[2 x i8] c"\10\09", [2 x i8] c"\0F\09", [2 x i8] c"\0E\09", [2 x i8] c"\0D\09", [2 x i8] c"\0C\09", [2 x i8] c"\0B\09", [2 x i8] c"\0A\08", [2...
rom_dual_port MVtab2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( MVtab2_address_a ),
	.address_b( MVtab2_address_b ),
	.q_a( MVtab2_out_a ),
	.q_b( MVtab2_out_b)
);
defparam MVtab2.width_a = 8;
defparam MVtab2.width_b = 8;
defparam MVtab2.widthad_a = 5;
defparam MVtab2.widthad_b = 5;
defparam MVtab2.numwords_a = 24;
defparam MVtab2.numwords_b = 24;
defparam MVtab2.latency = 1;
defparam MVtab2.init_file = "MVtab2.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__0_1;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_113;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_113:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114:
	if ((Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i34_104;
	else if ((Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40loopexit_111:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_53;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_53:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54:
	if ((Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i63_44;
	else if ((Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69loopexit_51:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_173;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_173:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174:
	if ((Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i_164;
	else if ((Get_motion_code_Fill_Bufferexiti_330_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_201;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_201:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202:
	if ((Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii4_192;
	else if ((Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10loopexit_199:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_141;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_141:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142:
	if ((Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii19_132;
	else if ((Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25loopexit_139:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_81;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_81:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82:
	if ((Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii48_72;
	else if ((Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54loopexit_79:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_22;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_22:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23:
	if ((Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii_13;
	else if ((Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiiloopexit_20:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21;
LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_171:
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_123;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_123:
	if ((Get_motion_code_Flush_Bufferexit44_232_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__233_124;
	else if ((Get_motion_code_Flush_Bufferexit44_232_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_63;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_63:
	if ((Get_motion_code_Flush_Bufferexit73_118_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__119_64;
	else if ((Get_motion_code_Flush_Bufferexit73_118_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_183;
LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_183:
	if ((Get_motion_code_Flush_Bufferexit_346_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__347_184;
	else if ((Get_motion_code_Flush_Bufferexit_346_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211:
		next_state = LEGUP_F_Get_motion_code_BB__395_212;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151:
		next_state = LEGUP_F_Get_motion_code_BB__395_212;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91:
		next_state = LEGUP_F_Get_motion_code_BB__395_212;
LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31:
	if ((Get_motion_code_Get_Bits1exit_51 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__52_32;
	else if ((Get_motion_code_Get_Bits1exit_51 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__395_212;
LEGUP_F_Get_motion_code_BB__0_1:
		next_state = LEGUP_F_Get_motion_code_BB__0_2;
LEGUP_F_Get_motion_code_BB__0_2:
		next_state = LEGUP_F_Get_motion_code_BB__0_3;
LEGUP_F_Get_motion_code_BB__0_3:
		next_state = LEGUP_F_Get_motion_code_BB__0_4;
LEGUP_F_Get_motion_code_BB__0_4:
	if ((Get_motion_code_0_5_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__6_5;
	else if ((Get_motion_code_0_5_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31;
LEGUP_F_Get_motion_code_BB__119_64:
		next_state = LEGUP_F_Get_motion_code_BB__119_65;
LEGUP_F_Get_motion_code_BB__119_65:
		next_state = LEGUP_F_Get_motion_code_BB__119_66;
LEGUP_F_Get_motion_code_BB__119_66:
	if ((Get_motion_code_119_121 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68;
	else if ((Get_motion_code_119_121 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67;
LEGUP_F_Get_motion_code_BB__167_92:
	if ((Get_motion_code_167_168 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__169_93;
	else if ((Get_motion_code_167_168 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__281_152;
LEGUP_F_Get_motion_code_BB__169_93:
		next_state = LEGUP_F_Get_motion_code_BB__169_94;
LEGUP_F_Get_motion_code_BB__169_94:
		next_state = LEGUP_F_Get_motion_code_BB__169_95;
LEGUP_F_Get_motion_code_BB__169_95:
	if ((Get_motion_code_169_176_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__177_96;
	else if ((Get_motion_code_169_176_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122;
LEGUP_F_Get_motion_code_BB__177_96:
		next_state = LEGUP_F_Get_motion_code_BB__177_97;
LEGUP_F_Get_motion_code_BB__177_97:
		next_state = LEGUP_F_Get_motion_code_BB__177_98;
LEGUP_F_Get_motion_code_BB__177_98:
	if ((Get_motion_code_177_179 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100;
	else if ((Get_motion_code_177_179 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99;
LEGUP_F_Get_motion_code_BB__233_124:
		next_state = LEGUP_F_Get_motion_code_BB__233_125;
LEGUP_F_Get_motion_code_BB__233_125:
		next_state = LEGUP_F_Get_motion_code_BB__233_126;
LEGUP_F_Get_motion_code_BB__233_126:
	if ((Get_motion_code_233_235 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128;
	else if ((Get_motion_code_233_235 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127;
LEGUP_F_Get_motion_code_BB__281_152:
	if ((Get_motion_code_281_283 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__395_212;
	else if ((Get_motion_code_281_283 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__284_153;
LEGUP_F_Get_motion_code_BB__284_153:
		next_state = LEGUP_F_Get_motion_code_BB__284_154;
LEGUP_F_Get_motion_code_BB__284_154:
		next_state = LEGUP_F_Get_motion_code_BB__284_155;
LEGUP_F_Get_motion_code_BB__284_155:
	if ((Get_motion_code_284_290_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__291_156;
	else if ((Get_motion_code_284_290_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182;
LEGUP_F_Get_motion_code_BB__291_156:
		next_state = LEGUP_F_Get_motion_code_BB__291_157;
LEGUP_F_Get_motion_code_BB__291_157:
		next_state = LEGUP_F_Get_motion_code_BB__291_158;
LEGUP_F_Get_motion_code_BB__291_158:
	if ((Get_motion_code_291_293 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderipreheader_160;
	else if ((Get_motion_code_291_293 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159;
LEGUP_F_Get_motion_code_BB__347_184:
		next_state = LEGUP_F_Get_motion_code_BB__347_185;
LEGUP_F_Get_motion_code_BB__347_185:
		next_state = LEGUP_F_Get_motion_code_BB__347_186;
LEGUP_F_Get_motion_code_BB__347_186:
	if ((Get_motion_code_347_349 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188;
	else if ((Get_motion_code_347_349 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187;
LEGUP_F_Get_motion_code_BB__395_212:
		next_state = LEGUP_0;
LEGUP_F_Get_motion_code_BB__52_32:
	if ((Get_motion_code_52_54 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__55_33;
	else if ((Get_motion_code_52_54 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB__167_92;
LEGUP_F_Get_motion_code_BB__55_33:
		next_state = LEGUP_F_Get_motion_code_BB__55_34;
LEGUP_F_Get_motion_code_BB__55_34:
		next_state = LEGUP_F_Get_motion_code_BB__55_35;
LEGUP_F_Get_motion_code_BB__55_35:
	if ((Get_motion_code_55_62_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB__63_36;
	else if ((Get_motion_code_55_62_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62;
LEGUP_F_Get_motion_code_BB__63_36:
		next_state = LEGUP_F_Get_motion_code_BB__63_37;
LEGUP_F_Get_motion_code_BB__63_37:
		next_state = LEGUP_F_Get_motion_code_BB__63_38;
LEGUP_F_Get_motion_code_BB__63_38:
	if ((Get_motion_code_63_65 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40;
	else if ((Get_motion_code_63_65 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39;
LEGUP_F_Get_motion_code_BB__6_5:
		next_state = LEGUP_F_Get_motion_code_BB__6_6;
LEGUP_F_Get_motion_code_BB__6_6:
		next_state = LEGUP_F_Get_motion_code_BB__6_7;
LEGUP_F_Get_motion_code_BB__6_7:
	if ((Get_motion_code_6_8 == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9;
	else if ((Get_motion_code_6_8 == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8;
LEGUP_F_Get_motion_code_BB_loopexit2i43_120:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i43_121;
LEGUP_F_Get_motion_code_BB_loopexit2i43_121:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122;
LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119;
LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i43_120;
LEGUP_F_Get_motion_code_BB_loopexit2i72_60:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i72_61;
LEGUP_F_Get_motion_code_BB_loopexit2i72_61:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62;
LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59;
LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i72_60;
LEGUP_F_Get_motion_code_BB_loopexit2i_180:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i_181;
LEGUP_F_Get_motion_code_BB_loopexit2i_181:
		next_state = LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182;
LEGUP_F_Get_motion_code_BB_loopexit2iii14_208:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii14_209;
LEGUP_F_Get_motion_code_BB_loopexit2iii14_209:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210;
LEGUP_F_Get_motion_code_BB_loopexit2iii29_148:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii29_149;
LEGUP_F_Get_motion_code_BB_loopexit2iii29_149:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150;
LEGUP_F_Get_motion_code_BB_loopexit2iii58_88:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii58_89;
LEGUP_F_Get_motion_code_BB_loopexit2iii58_89:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90;
LEGUP_F_Get_motion_code_BB_loopexit2iii_29:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii_30;
LEGUP_F_Get_motion_code_BB_loopexit2iii_30:
		next_state = LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i_180;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_207;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_207:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii14_208;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_147;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_147:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii29_148;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_87;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_87:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii58_88;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28;
LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii_29;
LEGUP_F_Get_motion_code_BB_loopexiti41_115:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti41_116;
LEGUP_F_Get_motion_code_BB_loopexiti41_116:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti41_117;
LEGUP_F_Get_motion_code_BB_loopexiti41_117:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i43_120;
LEGUP_F_Get_motion_code_BB_loopexiti70_55:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti70_56;
LEGUP_F_Get_motion_code_BB_loopexiti70_56:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti70_57;
LEGUP_F_Get_motion_code_BB_loopexiti70_57:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i72_60;
LEGUP_F_Get_motion_code_BB_loopexiti_175:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti_176;
LEGUP_F_Get_motion_code_BB_loopexiti_176:
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti_177;
LEGUP_F_Get_motion_code_BB_loopexiti_177:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2i_180;
LEGUP_F_Get_motion_code_BB_loopexitiii11_203:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii11_204;
LEGUP_F_Get_motion_code_BB_loopexitiii11_204:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii11_205;
LEGUP_F_Get_motion_code_BB_loopexitiii11_205:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii14_208;
LEGUP_F_Get_motion_code_BB_loopexitiii26_143:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii26_144;
LEGUP_F_Get_motion_code_BB_loopexitiii26_144:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii26_145;
LEGUP_F_Get_motion_code_BB_loopexitiii26_145:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii29_148;
LEGUP_F_Get_motion_code_BB_loopexitiii55_83:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii55_84;
LEGUP_F_Get_motion_code_BB_loopexitiii55_84:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii55_85;
LEGUP_F_Get_motion_code_BB_loopexitiii55_85:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii58_88;
LEGUP_F_Get_motion_code_BB_loopexitiii_24:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii_25;
LEGUP_F_Get_motion_code_BB_loopexitiii_25:
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii_26;
LEGUP_F_Get_motion_code_BB_loopexitiii_26:
		next_state = LEGUP_F_Get_motion_code_BB_loopexit2iii_29;
LEGUP_F_Get_motion_code_BB_lrphiii38_107:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38_108;
LEGUP_F_Get_motion_code_BB_lrphiii38_108:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38_109;
LEGUP_F_Get_motion_code_BB_lrphiii38_109:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38_110;
LEGUP_F_Get_motion_code_BB_lrphiii38_110:
	if ((Get_motion_code_lrphiii38_exitcond36_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40loopexit_111;
	else if ((Get_motion_code_lrphiii38_exitcond36_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38_107;
LEGUP_F_Get_motion_code_BB_lrphiii38preheader_106:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38_107;
LEGUP_F_Get_motion_code_BB_lrphiii67_47:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67_48;
LEGUP_F_Get_motion_code_BB_lrphiii67_48:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67_49;
LEGUP_F_Get_motion_code_BB_lrphiii67_49:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67_50;
LEGUP_F_Get_motion_code_BB_lrphiii67_50:
	if ((Get_motion_code_lrphiii67_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69loopexit_51;
	else if ((Get_motion_code_lrphiii67_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67_47;
LEGUP_F_Get_motion_code_BB_lrphiii67preheader_46:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67_47;
LEGUP_F_Get_motion_code_BB_lrphiii_167:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii_168;
LEGUP_F_Get_motion_code_BB_lrphiii_168:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii_169;
LEGUP_F_Get_motion_code_BB_lrphiii_169:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii_170;
LEGUP_F_Get_motion_code_BB_lrphiii_170:
	if ((Get_motion_code_lrphiii_exitcond58_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_171;
	else if ((Get_motion_code_lrphiii_exitcond58_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii_167;
LEGUP_F_Get_motion_code_BB_lrphiiiii23_135:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23_136;
LEGUP_F_Get_motion_code_BB_lrphiiiii23_136:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23_137;
LEGUP_F_Get_motion_code_BB_lrphiiiii23_137:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23_138;
LEGUP_F_Get_motion_code_BB_lrphiiiii23_138:
	if ((Get_motion_code_lrphiiiii23_exitcond25_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25loopexit_139;
	else if ((Get_motion_code_lrphiiiii23_exitcond25_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23_135;
LEGUP_F_Get_motion_code_BB_lrphiiiii23preheader_134:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23_135;
LEGUP_F_Get_motion_code_BB_lrphiiiii52_75:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52_76;
LEGUP_F_Get_motion_code_BB_lrphiiiii52_76:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52_77;
LEGUP_F_Get_motion_code_BB_lrphiiiii52_77:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52_78;
LEGUP_F_Get_motion_code_BB_lrphiiiii52_78:
	if ((Get_motion_code_lrphiiiii52_exitcond_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54loopexit_79;
	else if ((Get_motion_code_lrphiiiii52_exitcond_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52_75;
LEGUP_F_Get_motion_code_BB_lrphiiiii52preheader_74:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52_75;
LEGUP_F_Get_motion_code_BB_lrphiiiii8_195:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8_196;
LEGUP_F_Get_motion_code_BB_lrphiiiii8_196:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8_197;
LEGUP_F_Get_motion_code_BB_lrphiiiii8_197:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8_198;
LEGUP_F_Get_motion_code_BB_lrphiiiii8_198:
	if ((Get_motion_code_lrphiiiii8_exitcond47_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10loopexit_199;
	else if ((Get_motion_code_lrphiiiii8_exitcond47_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8_195;
LEGUP_F_Get_motion_code_BB_lrphiiiii8preheader_194:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8_195;
LEGUP_F_Get_motion_code_BB_lrphiiiii_16:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii_17;
LEGUP_F_Get_motion_code_BB_lrphiiiii_17:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii_18;
LEGUP_F_Get_motion_code_BB_lrphiiiii_18:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii_19;
LEGUP_F_Get_motion_code_BB_lrphiiiii_19:
	if ((Get_motion_code_lrphiiiii_exitcond69_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiiloopexit_20;
	else if ((Get_motion_code_lrphiiiii_exitcond69_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii_16;
LEGUP_F_Get_motion_code_BB_lrphiiiiipreheader_15:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii_16;
LEGUP_F_Get_motion_code_BB_lrphiiipreheader_166:
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii_167;
LEGUP_F_Get_motion_code_BB_preheader1i34_104:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i34_105;
LEGUP_F_Get_motion_code_BB_preheader1i34_105:
	if ((Get_motion_code_preheader1i34_208_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112;
	else if ((Get_motion_code_preheader1i34_208_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii38preheader_106;
LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i34_104;
LEGUP_F_Get_motion_code_BB_preheader1i63_44:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i63_45;
LEGUP_F_Get_motion_code_BB_preheader1i63_45:
	if ((Get_motion_code_preheader1i63_94_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52;
	else if ((Get_motion_code_preheader1i63_94_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiii67preheader_46;
LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i63_44;
LEGUP_F_Get_motion_code_BB_preheader1i_164:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i_165;
LEGUP_F_Get_motion_code_BB_preheader1i_165:
	if ((Get_motion_code_preheader1i_322_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172;
	else if ((Get_motion_code_preheader1i_322_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiipreheader_166;
LEGUP_F_Get_motion_code_BB_preheader1iii19_132:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii19_133;
LEGUP_F_Get_motion_code_BB_preheader1iii19_133:
	if ((Get_motion_code_preheader1iii19_258_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140;
	else if ((Get_motion_code_preheader1iii19_258_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii23preheader_134;
LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii19_132;
LEGUP_F_Get_motion_code_BB_preheader1iii48_72:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii48_73;
LEGUP_F_Get_motion_code_BB_preheader1iii48_73:
	if ((Get_motion_code_preheader1iii48_144_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80;
	else if ((Get_motion_code_preheader1iii48_144_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii52preheader_74;
LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii48_72;
LEGUP_F_Get_motion_code_BB_preheader1iii4_192:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii4_193;
LEGUP_F_Get_motion_code_BB_preheader1iii4_193:
	if ((Get_motion_code_preheader1iii4_372_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200;
	else if ((Get_motion_code_preheader1iii4_372_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiii8preheader_194;
LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii4_192;
LEGUP_F_Get_motion_code_BB_preheader1iii_13:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii_14;
LEGUP_F_Get_motion_code_BB_preheader1iii_14:
	if ((Get_motion_code_preheader1iii_31_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21;
	else if ((Get_motion_code_preheader1iii_31_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_lrphiiiiipreheader_15;
LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1iii_13;
LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159:
		next_state = LEGUP_F_Get_motion_code_BB_preheader1i_164;
LEGUP_F_Get_motion_code_BB_preheaderi31_101:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi31_102;
LEGUP_F_Get_motion_code_BB_preheaderi31_102:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi31_103;
LEGUP_F_Get_motion_code_BB_preheaderi31_103:
	if ((Get_motion_code_preheaderi31_201_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi31_101;
	else if ((Get_motion_code_preheaderi31_201_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti41_115;
LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi31_101;
LEGUP_F_Get_motion_code_BB_preheaderi60_41:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi60_42;
LEGUP_F_Get_motion_code_BB_preheaderi60_42:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi60_43;
LEGUP_F_Get_motion_code_BB_preheaderi60_43:
	if ((Get_motion_code_preheaderi60_87_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi60_41;
	else if ((Get_motion_code_preheaderi60_87_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti70_55;
LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi60_41;
LEGUP_F_Get_motion_code_BB_preheaderi_161:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_162;
LEGUP_F_Get_motion_code_BB_preheaderi_162:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_163;
LEGUP_F_Get_motion_code_BB_preheaderi_163:
	if ((Get_motion_code_preheaderi_315_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_161;
	else if ((Get_motion_code_preheaderi_315_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexiti_175;
LEGUP_F_Get_motion_code_BB_preheaderiii17_129:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii17_130;
LEGUP_F_Get_motion_code_BB_preheaderiii17_130:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii17_131;
LEGUP_F_Get_motion_code_BB_preheaderiii17_131:
	if ((Get_motion_code_preheaderiii17_251_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii17_129;
	else if ((Get_motion_code_preheaderiii17_251_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii26_143;
LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii17_129;
LEGUP_F_Get_motion_code_BB_preheaderiii2_189:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii2_190;
LEGUP_F_Get_motion_code_BB_preheaderiii2_190:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii2_191;
LEGUP_F_Get_motion_code_BB_preheaderiii2_191:
	if ((Get_motion_code_preheaderiii2_365_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii2_189;
	else if ((Get_motion_code_preheaderiii2_365_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii11_203;
LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii2_189;
LEGUP_F_Get_motion_code_BB_preheaderiii46_69:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii46_70;
LEGUP_F_Get_motion_code_BB_preheaderiii46_70:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii46_71;
LEGUP_F_Get_motion_code_BB_preheaderiii46_71:
	if ((Get_motion_code_preheaderiii46_137_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii46_69;
	else if ((Get_motion_code_preheaderiii46_137_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii55_83;
LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii46_69;
LEGUP_F_Get_motion_code_BB_preheaderiii_10:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii_11;
LEGUP_F_Get_motion_code_BB_preheaderiii_11:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii_12;
LEGUP_F_Get_motion_code_BB_preheaderiii_12:
	if ((Get_motion_code_preheaderiii_24_reg == 1'd1))
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii_10;
	else if ((Get_motion_code_preheaderiii_24_reg == 1'd0))
		next_state = LEGUP_F_Get_motion_code_BB_loopexitiii_24;
LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderiii_10;
LEGUP_F_Get_motion_code_BB_preheaderipreheader_160:
		next_state = LEGUP_F_Get_motion_code_BB_preheaderi_161;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
		Get_motion_code_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_1_reg <= Get_motion_code_0_1;
		if (start == 1'b0 && ^(Get_motion_code_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %2 = shl i32 %1, 1*/
		Get_motion_code_0_2 = (Get_motion_code_0_1 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %2 = shl i32 %1, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_2_reg <= Get_motion_code_0_2;
		if (start == 1'b0 && ^(Get_motion_code_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
		Get_motion_code_0_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_3_reg <= Get_motion_code_0_3;
		if (start == 1'b0 && ^(Get_motion_code_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %4 = add nsw i32 %3, -1*/
		Get_motion_code_0_4 = (Get_motion_code_0_3 + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %4 = add nsw i32 %3, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_4_reg <= Get_motion_code_0_4;
		if (start == 1'b0 && ^(Get_motion_code_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %0*/
	/*   %5 = icmp slt i32 %3, 26*/
		Get_motion_code_0_5 = ($signed(Get_motion_code_0_3) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %0*/
	/*   %5 = icmp slt i32 %3, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		Get_motion_code_0_5_reg <= Get_motion_code_0_5;
		if (start == 1'b0 && ^(Get_motion_code_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_6_7 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_7)) begin
		Get_motion_code_6_7_reg <= Get_motion_code_6_7;
		if (start == 1'b0 && ^(Get_motion_code_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %8 = icmp ult i8* %7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_6_8 = (Get_motion_code_6_7 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %8 = icmp ult i8* %7, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_7)) begin
		Get_motion_code_6_8_reg <= Get_motion_code_6_8;
		if (start == 1'b0 && ^(Get_motion_code_6_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_8_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %6*/
	/*   %9 = sub i32 25, %3*/
		Get_motion_code_6_9 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %6*/
	/*   %9 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		Get_motion_code_6_9_reg <= Get_motion_code_6_9;
		if (start == 1'b0 && ^(Get_motion_code_6_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_6_9_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i.preheader*/
	/*   %10 = add i32 %3, 7*/
		Get_motion_code_preheader1iiipreheader_10 = (Get_motion_code_0_3_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i.preheader*/
	/*   %10 = add i32 %3, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8)) begin
		Get_motion_code_preheader1iiipreheader_10_reg <= Get_motion_code_preheader1iiipreheader_10;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iiipreheader_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iiipreheader_10_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i.preheader*/
	/*   %11 = sub i32 25, %3*/
		Get_motion_code_preheader1iiipreheader_11 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i.preheader*/
	/*   %11 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8)) begin
		Get_motion_code_preheader1iiipreheader_11_reg <= Get_motion_code_preheader1iiipreheader_11;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iiipreheader_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iiipreheader_11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %12 = add i32 %3, 7*/
		Get_motion_code_preheaderiiipreheader_12 = (Get_motion_code_0_3_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %12 = add i32 %3, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9)) begin
		Get_motion_code_preheaderiiipreheader_12_reg <= Get_motion_code_preheaderiiipreheader_12;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiiipreheader_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiiipreheader_12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %13 = icmp sgt i32 %12, 25*/
		Get_motion_code_preheaderiiipreheader_13 = ($signed(Get_motion_code_preheaderiiipreheader_12) > $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %13 = icmp sgt i32 %12, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9)) begin
		Get_motion_code_preheaderiiipreheader_13_reg <= Get_motion_code_preheaderiiipreheader_13;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiiipreheader_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiiipreheader_13_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %smax75 = select i1 %13, i32 %12, i32 25*/
		Get_motion_code_preheaderiiipreheader_smax75 = (Get_motion_code_preheaderiiipreheader_13 ? Get_motion_code_preheaderiiipreheader_12 : 32'd25);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %smax75 = select i1 %13, i32 %12, i32 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9)) begin
		Get_motion_code_preheaderiiipreheader_smax75_reg <= Get_motion_code_preheaderiiipreheader_smax75;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiiipreheader_smax75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiiipreheader_smax75_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %14 = sub i32 25, %3*/
		Get_motion_code_preheaderiiipreheader_14 = (32'd25 - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i.preheader*/
	/*   %14 = sub i32 25, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9)) begin
		Get_motion_code_preheaderiiipreheader_14_reg <= Get_motion_code_preheaderiiipreheader_14;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiiipreheader_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiiipreheader_14_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %.preheader.i.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii_indvar64 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %.preheader.i.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii_24_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii_indvar64 = Get_motion_code_preheaderiii_indvarnext65_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %.preheader.i.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii_indvar64_reg <= Get_motion_code_preheaderiii_indvar64;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_indvar64_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar64 = phi i32 [ %indvar.next65, %.preheader.i.i.i ], [ 0, %.preheader.i.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii_24_reg == 1'd1))) begin
		Get_motion_code_preheaderiii_indvar64_reg <= Get_motion_code_preheaderiii_indvar64;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_indvar64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_indvar64_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %15 = phi i32 [ %23, %.preheader.i.i.i ], [ %2, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii_15 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %15 = phi i32 [ %23, %.preheader.i.i.i ], [ %2, %.preheader.i.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii_24_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii_15 = Get_motion_code_preheaderiii_23;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %15 = phi i32 [ %23, %.preheader.i.i.i ], [ %2, %.preheader.i.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiiipreheader_9) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii_15_reg <= Get_motion_code_preheaderiii_15;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_15_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %15 = phi i32 [ %23, %.preheader.i.i.i ], [ %2, %.preheader.i.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii_24_reg == 1'd1))) begin
		Get_motion_code_preheaderiii_15_reg <= Get_motion_code_preheaderiii_15;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_15_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %scevgep66 = getelementptr i8* %7, i32 %indvar64*/
		Get_motion_code_preheaderiii_scevgep66 = (Get_motion_code_6_7_reg + (1 * Get_motion_code_preheaderiii_indvar64_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %scevgep66 = getelementptr i8* %7, i32 %indvar64*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		Get_motion_code_preheaderiii_scevgep66_reg <= Get_motion_code_preheaderiii_scevgep66;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_scevgep66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_scevgep66_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %16 = shl i32 %indvar64, 3*/
		Get_motion_code_preheaderiii_16 = (Get_motion_code_preheaderiii_indvar64_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %16 = shl i32 %indvar64, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		Get_motion_code_preheaderiii_16_reg <= Get_motion_code_preheaderiii_16;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_16_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %17 = add i32 %12, %16*/
		Get_motion_code_preheaderiii_17 = (Get_motion_code_preheaderiiipreheader_12_reg + Get_motion_code_preheaderiii_16);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %17 = add i32 %12, %16*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		Get_motion_code_preheaderiii_17_reg <= Get_motion_code_preheaderiii_17;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_17_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderiii_18 = Get_motion_code_preheaderiii_18_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %18 = mul i32 %indvar64, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_11)) begin
		Get_motion_code_preheaderiii_18_reg <= Get_motion_code_preheaderiii_18;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_18_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %18 = mul i32 %indvar64, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_11)) begin
		Get_motion_code_preheaderiii_18_reg <= Get_motion_code_preheaderiii_18;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_18_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %19 = add i32 %14, %18*/
		Get_motion_code_preheaderiii_19 = (Get_motion_code_preheaderiiipreheader_14_reg + Get_motion_code_preheaderiii_18);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %19 = add i32 %14, %18*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_11)) begin
		Get_motion_code_preheaderiii_19_reg <= Get_motion_code_preheaderiii_19;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_19_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
		Get_motion_code_preheaderiii_20 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12)) begin
		Get_motion_code_preheaderiii_20_reg <= Get_motion_code_preheaderiii_20;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %21 = zext i8 %20 to i32*/
		Get_motion_code_preheaderiii_21 = Get_motion_code_preheaderiii_20;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %21 = zext i8 %20 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12)) begin
		Get_motion_code_preheaderiii_21_reg <= Get_motion_code_preheaderiii_21;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %22 = shl i32 %21, %19*/
		Get_motion_code_preheaderiii_22 = (Get_motion_code_preheaderiii_21 <<< (Get_motion_code_preheaderiii_19_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %22 = shl i32 %21, %19*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12)) begin
		Get_motion_code_preheaderiii_22_reg <= Get_motion_code_preheaderiii_22;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_22_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %23 = or i32 %22, %15*/
		Get_motion_code_preheaderiii_23 = (Get_motion_code_preheaderiii_22 | Get_motion_code_preheaderiii_15_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %23 = or i32 %22, %15*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_12)) begin
		Get_motion_code_preheaderiii_23_reg <= Get_motion_code_preheaderiii_23;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %24 = icmp slt i32 %17, 25*/
		Get_motion_code_preheaderiii_24 = ($signed(Get_motion_code_preheaderiii_17) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %24 = icmp slt i32 %17, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		Get_motion_code_preheaderiii_24_reg <= Get_motion_code_preheaderiii_24;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
		Get_motion_code_preheaderiii_indvarnext65 = (Get_motion_code_preheaderiii_indvar64_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %indvar.next65 = add i32 %indvar64, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		Get_motion_code_preheaderiii_indvarnext65_reg <= Get_motion_code_preheaderiii_indvarnext65;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii_indvarnext65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii_indvarnext65_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %indvar78 = phi i32 [ 0, %.preheader1.i.i.i.preheader ], [ %indvar.next79, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_indvar78 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %indvar78 = phi i32 [ 0, %.preheader1.i.i.i.preheader ], [ %indvar.next79, %Fill_Buffer.exit.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii_indvar78 = Get_motion_code_Fill_Bufferexitiii_indvarnext79_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %indvar78 = phi i32 [ 0, %.preheader1.i.i.i.preheader ], [ %indvar.next79, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_indvar78_reg <= Get_motion_code_preheader1iii_indvar78;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_indvar78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_indvar78_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %indvar78 = phi i32 [ 0, %.preheader1.i.i.i.preheader ], [ %indvar.next79, %Fill_Buffer.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) begin
		Get_motion_code_preheader1iii_indvar78_reg <= Get_motion_code_preheader1iii_indvar78;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_indvar78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_indvar78_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %25 = phi i32 [ %2, %.preheader1.i.i.i.preheader ], [ %38, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_25 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %25 = phi i32 [ %2, %.preheader1.i.i.i.preheader ], [ %38, %Fill_Buffer.exit.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii_25 = Get_motion_code_Fill_Bufferexitiii_38;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %25 = phi i32 [ %2, %.preheader1.i.i.i.preheader ], [ %38, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_25_reg <= Get_motion_code_preheader1iii_25;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_25_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %25 = phi i32 [ %2, %.preheader1.i.i.i.preheader ], [ %38, %Fill_Buffer.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) begin
		Get_motion_code_preheader1iii_25_reg <= Get_motion_code_preheader1iii_25;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %26 = phi i8* [ %7, %.preheader1.i.i.i.preheader ], [ %34, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_26 = Get_motion_code_6_7_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %26 = phi i8* [ %7, %.preheader1.i.i.i.preheader ], [ %34, %Fill_Buffer.exit.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii_26 = Get_motion_code_Fill_Bufferexitiii_34_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %26 = phi i8* [ %7, %.preheader1.i.i.i.preheader ], [ %34, %Fill_Buffer.exit.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iiipreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii_26_reg <= Get_motion_code_preheader1iii_26;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_26_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %26 = phi i8* [ %7, %.preheader1.i.i.i.preheader ], [ %34, %Fill_Buffer.exit.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii_39_reg == 1'd1))) begin
		Get_motion_code_preheader1iii_26_reg <= Get_motion_code_preheader1iii_26;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %27 = shl i32 %indvar78, 3*/
		Get_motion_code_preheader1iii_27 = (Get_motion_code_preheader1iii_indvar78_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %27 = shl i32 %indvar78, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_13)) begin
		Get_motion_code_preheader1iii_27_reg <= Get_motion_code_preheader1iii_27;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_27_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %28 = add i32 %10, %27*/
		Get_motion_code_preheader1iii_28 = (Get_motion_code_preheader1iiipreheader_10_reg + Get_motion_code_preheader1iii_27);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %28 = add i32 %10, %27*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_13)) begin
		Get_motion_code_preheader1iii_28_reg <= Get_motion_code_preheader1iii_28;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_28_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1iii_29 = Get_motion_code_preheader1iii_29_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %29 = mul i32 %indvar78, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_14)) begin
		Get_motion_code_preheader1iii_29_reg <= Get_motion_code_preheader1iii_29;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_29_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %29 = mul i32 %indvar78, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_14)) begin
		Get_motion_code_preheader1iii_29_reg <= Get_motion_code_preheader1iii_29;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %30 = add i32 %11, %29*/
		Get_motion_code_preheader1iii_30 = (Get_motion_code_preheader1iiipreheader_11_reg + Get_motion_code_preheader1iii_29);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %30 = add i32 %11, %29*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_14)) begin
		Get_motion_code_preheader1iii_30_reg <= Get_motion_code_preheader1iii_30;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %31 = icmp ult i8* %26, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1iii_31 = (Get_motion_code_preheader1iii_26_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %31 = icmp ult i8* %26, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_13)) begin
		Get_motion_code_preheader1iii_31_reg <= Get_motion_code_preheader1iii_31;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar67 = phi i32 [ 0, %.lr.ph.i.i.i.i.i.preheader ], [ %indvar.next68, %.lr.ph.i.i.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiiipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii_indvar67 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar67 = phi i32 [ 0, %.lr.ph.i.i.i.i.i.preheader ], [ %indvar.next68, %.lr.ph.i.i.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_19) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii_exitcond69_reg == 1'd0))) */ begin
		Get_motion_code_lrphiiiii_indvar67 = Get_motion_code_lrphiiiii_indvarnext68_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar67 = phi i32 [ 0, %.lr.ph.i.i.i.i.i.preheader ], [ %indvar.next68, %.lr.ph.i.i.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiiipreheader_15) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii_indvar67_reg <= Get_motion_code_lrphiiiii_indvar67;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_indvar67_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar67 = phi i32 [ 0, %.lr.ph.i.i.i.i.i.preheader ], [ %indvar.next68, %.lr.ph.i.i.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_19) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii_exitcond69_reg == 1'd0))) begin
		Get_motion_code_lrphiiiii_indvar67_reg <= Get_motion_code_lrphiiiii_indvar67;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_indvar67_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar67*/
		Get_motion_code_lrphiiiii_p202iiiii = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiiiii_indvar67_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %p2.02.i.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar67*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		Get_motion_code_lrphiiiii_p202iiiii_reg <= Get_motion_code_lrphiiiii_p202iiiii;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_p202iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_p202iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar67*/
		Get_motion_code_lrphiiiii_p101iiiii = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiiiii_indvar67_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %p1.01.i.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar67*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		Get_motion_code_lrphiiiii_p101iiiii_reg <= Get_motion_code_lrphiiiii_p101iiiii;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_p101iiiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_p101iiiii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
		Get_motion_code_lrphiiiii_32 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		Get_motion_code_lrphiiiii_32_reg <= Get_motion_code_lrphiiiii_32;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar.next68 = add i32 %indvar67, 1*/
		Get_motion_code_lrphiiiii_indvarnext68 = (Get_motion_code_lrphiiiii_indvar67_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %indvar.next68 = add i32 %indvar67, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		Get_motion_code_lrphiiiii_indvarnext68_reg <= Get_motion_code_lrphiiiii_indvarnext68;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_indvarnext68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_indvarnext68_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %exitcond69 = icmp eq i32 %indvar.next68, 2048*/
		Get_motion_code_lrphiiiii_exitcond69 = (Get_motion_code_lrphiiiii_indvarnext68 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %exitcond69 = icmp eq i32 %indvar.next68, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		Get_motion_code_lrphiiiii_exitcond69_reg <= Get_motion_code_lrphiiiii_exitcond69;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii_exitcond69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii_exitcond69_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %33 = phi i8* [ %26, %.preheader1.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_14) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii_31_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii_33 = Get_motion_code_preheader1iii_26_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %33 = phi i8* [ %26, %.preheader1.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiiloopexit_20) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitiii_33 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %33 = phi i8* [ %26, %.preheader1.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii_14) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii_31_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii_33_reg <= Get_motion_code_Fill_Bufferexitiii_33;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_33_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %33 = phi i8* [ %26, %.preheader1.i.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiiiloopexit_20) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitiii_33_reg <= Get_motion_code_Fill_Bufferexitiii_33;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %34 = getelementptr inbounds i8* %33, i32 1*/
		Get_motion_code_Fill_Bufferexitiii_34 = (Get_motion_code_Fill_Bufferexitiii_33_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %34 = getelementptr inbounds i8* %33, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		Get_motion_code_Fill_Bufferexitiii_34_reg <= Get_motion_code_Fill_Bufferexitiii_34;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexitiii_35 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23)) begin
		Get_motion_code_Fill_Bufferexitiii_35_reg <= Get_motion_code_Fill_Bufferexitiii_35;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %36 = zext i8 %35 to i32*/
		Get_motion_code_Fill_Bufferexitiii_36 = Get_motion_code_Fill_Bufferexitiii_35;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %36 = zext i8 %35 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23)) begin
		Get_motion_code_Fill_Bufferexitiii_36_reg <= Get_motion_code_Fill_Bufferexitiii_36;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_36_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %37 = shl i32 %36, %30*/
		Get_motion_code_Fill_Bufferexitiii_37 = (Get_motion_code_Fill_Bufferexitiii_36 <<< (Get_motion_code_preheader1iii_30_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %37 = shl i32 %36, %30*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23)) begin
		Get_motion_code_Fill_Bufferexitiii_37_reg <= Get_motion_code_Fill_Bufferexitiii_37;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_37_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %38 = or i32 %37, %25*/
		Get_motion_code_Fill_Bufferexitiii_38 = (Get_motion_code_Fill_Bufferexitiii_37 | Get_motion_code_preheader1iii_25_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %38 = or i32 %37, %25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_23)) begin
		Get_motion_code_Fill_Bufferexitiii_38_reg <= Get_motion_code_Fill_Bufferexitiii_38;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_38_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %39 = icmp slt i32 %28, 25*/
		Get_motion_code_Fill_Bufferexitiii_39 = ($signed(Get_motion_code_preheader1iii_28_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %39 = icmp slt i32 %28, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		Get_motion_code_Fill_Bufferexitiii_39_reg <= Get_motion_code_Fill_Bufferexitiii_39;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_39_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %indvar.next79 = add i32 %indvar78, 1*/
		Get_motion_code_Fill_Bufferexitiii_indvarnext79 = (Get_motion_code_preheader1iii_indvar78_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %indvar.next79 = add i32 %indvar78, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		Get_motion_code_Fill_Bufferexitiii_indvarnext79_reg <= Get_motion_code_Fill_Bufferexitiii_indvarnext79;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii_indvarnext79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii_indvarnext79_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %40 = sub i32 %smax75, %3*/
		Get_motion_code_loopexitiii_40 = (Get_motion_code_preheaderiiipreheader_smax75_reg - Get_motion_code_0_3_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %40 = sub i32 %smax75, %3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		Get_motion_code_loopexitiii_40_reg <= Get_motion_code_loopexitiii_40;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_40_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %41 = lshr i32 %40, 3*/
		Get_motion_code_loopexitiii_41 = (Get_motion_code_loopexitiii_40 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %41 = lshr i32 %40, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		Get_motion_code_loopexitiii_41_reg <= Get_motion_code_loopexitiii_41;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_41_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %42 = add nuw nsw i32 %41, 1*/
		Get_motion_code_loopexitiii_42 = (Get_motion_code_loopexitiii_41 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %42 = add nuw nsw i32 %41, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		Get_motion_code_loopexitiii_42_reg <= Get_motion_code_loopexitiii_42;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_42_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %scevgep76 = getelementptr i8* %7, i32 %42*/
		Get_motion_code_loopexitiii_scevgep76 = (Get_motion_code_6_7_reg + (1 * Get_motion_code_loopexitiii_42_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %scevgep76 = getelementptr i8* %7, i32 %42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		Get_motion_code_loopexitiii_scevgep76_reg <= Get_motion_code_loopexitiii_scevgep76;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_scevgep76_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %43 = and i32 %9, -8*/
		Get_motion_code_loopexitiii_43 = (Get_motion_code_6_9_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %43 = and i32 %9, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		Get_motion_code_loopexitiii_43_reg <= Get_motion_code_loopexitiii_43;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_43_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %44 = add i32 %12, %43*/
		Get_motion_code_loopexitiii_44 = (Get_motion_code_preheaderiiipreheader_12_reg + Get_motion_code_loopexitiii_43);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   %44 = add i32 %12, %43*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		Get_motion_code_loopexitiii_44_reg <= Get_motion_code_loopexitiii_44;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii_44_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %45 = and i32 %9, -8*/
		Get_motion_code_loopexit2iloopexitii_45 = (Get_motion_code_6_9_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %45 = and i32 %9, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		Get_motion_code_loopexit2iloopexitii_45_reg <= Get_motion_code_loopexit2iloopexitii_45;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii_45_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %46 = add i32 %3, 7*/
		Get_motion_code_loopexit2iloopexitii_46 = (Get_motion_code_0_3_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %46 = add i32 %3, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		Get_motion_code_loopexit2iloopexitii_46_reg <= Get_motion_code_loopexit2iloopexitii_46;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii_46_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %47 = add i32 %46, %45*/
		Get_motion_code_loopexit2iloopexitii_47 = (Get_motion_code_loopexit2iloopexitii_46 + Get_motion_code_loopexit2iloopexitii_45);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   %47 = add i32 %46, %45*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		Get_motion_code_loopexit2iloopexitii_47_reg <= Get_motion_code_loopexit2iloopexitii_47;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii_47_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %48 = phi i32 [ %23, %.loopexit.i.i.i ], [ %38, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_48 = Get_motion_code_preheaderiii_23_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %48 = phi i32 [ %23, %.loopexit.i.i.i ], [ %38, %.loopexit2.i.loopexit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2iii_48 = Get_motion_code_Fill_Bufferexitiii_38_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %48 = phi i32 [ %23, %.loopexit.i.i.i ], [ %38, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_48_reg <= Get_motion_code_loopexit2iii_48;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii_48_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %48 = phi i32 [ %23, %.loopexit.i.i.i ], [ %38, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_48_reg <= Get_motion_code_loopexit2iii_48;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii_48_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %Incnt.2.i.i.i = phi i32 [ %44, %.loopexit.i.i.i ], [ %47, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_Incnt2iii = Get_motion_code_loopexitiii_44_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %Incnt.2.i.i.i = phi i32 [ %44, %.loopexit.i.i.i ], [ %47, %.loopexit2.i.loopexit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2iii_Incnt2iii = Get_motion_code_loopexit2iloopexitii_47_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %Incnt.2.i.i.i = phi i32 [ %44, %.loopexit.i.i.i ], [ %47, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_26) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_Incnt2iii_reg <= Get_motion_code_loopexit2iii_Incnt2iii;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii_Incnt2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii_Incnt2iii_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   %Incnt.2.i.i.i = phi i32 [ %44, %.loopexit.i.i.i ], [ %47, %.loopexit2.i.loopexit.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_28) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii_Incnt2iii_reg <= Get_motion_code_loopexit2iii_Incnt2iii;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii_Incnt2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii_Incnt2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %49 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i.i, %.loopexit2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_49 = Get_motion_code_0_4_reg;
	end
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %49 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i.i, %.loopexit2.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Get_Bits1exit_49 = Get_motion_code_loopexit2iii_Incnt2iii_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %49 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i.i, %.loopexit2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_49_reg <= Get_motion_code_Get_Bits1exit_49;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit_49_reg"); $finish; end
	end
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %49 = phi i32 [ %4, %0 ], [ %Incnt.2.i.i.i, %.loopexit2.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_30) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_49_reg <= Get_motion_code_Get_Bits1exit_49;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit_49_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %50 = phi i32 [ %2, %0 ], [ %48, %.loopexit2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_50 = Get_motion_code_0_2_reg;
	end
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %50 = phi i32 [ %2, %0 ], [ %48, %.loopexit2.i.i.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_30) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Get_Bits1exit_50 = Get_motion_code_loopexit2iii_48_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %50 = phi i32 [ %2, %0 ], [ %48, %.loopexit2.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__0_4) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_0_5_reg == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_50_reg <= Get_motion_code_Get_Bits1exit_50;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit_50_reg"); $finish; end
	end
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %50 = phi i32 [ %2, %0 ], [ %48, %.loopexit2.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_30) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Get_Bits1exit_50_reg <= Get_motion_code_Get_Bits1exit_50;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %51 = icmp sgt i32 %1, -1*/
		Get_motion_code_Get_Bits1exit_51 = ($signed(Get_motion_code_0_1_reg) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit*/
	/*   %51 = icmp sgt i32 %1, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31)) begin
		Get_motion_code_Get_Bits1exit_51_reg <= Get_motion_code_Get_Bits1exit_51;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %52*/
	/*   %53 = lshr i32 %50, 23*/
		Get_motion_code_52_53 = (Get_motion_code_Get_Bits1exit_50_reg >>> (32'd23 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %52*/
	/*   %53 = lshr i32 %50, 23*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__52_32)) begin
		Get_motion_code_52_53_reg <= Get_motion_code_52_53;
		if (start == 1'b0 && ^(Get_motion_code_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %52*/
	/*   %54 = icmp ugt i32 %50, 536870911*/
		Get_motion_code_52_54 = (Get_motion_code_Get_Bits1exit_50_reg > 32'd536870911);
end
always @(posedge clk) begin
	/* Get_motion_code: %52*/
	/*   %54 = icmp ugt i32 %50, 536870911*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__52_32)) begin
		Get_motion_code_52_54_reg <= Get_motion_code_52_54;
		if (start == 1'b0 && ^(Get_motion_code_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %56 = lshr i32 %50, 29*/
		Get_motion_code_55_56 = (Get_motion_code_Get_Bits1exit_50_reg >>> (32'd29 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %56 = lshr i32 %50, 29*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_33)) begin
		Get_motion_code_55_56_reg <= Get_motion_code_55_56;
		if (start == 1'b0 && ^(Get_motion_code_55_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_56_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %57 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %56, i32 1*/
		Get_motion_code_55_57 = (1'd0 | ((2 * Get_motion_code_55_56) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %57 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %56, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_33)) begin
		Get_motion_code_55_57_reg <= Get_motion_code_55_57;
		if (start == 1'b0 && ^(Get_motion_code_55_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %58 = load i8* %57, align 1, !tbaa !7*/
		Get_motion_code_55_58 = MVtab0_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %58 = load i8* %57, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		Get_motion_code_55_58_reg <= Get_motion_code_55_58;
		if (start == 1'b0 && ^(Get_motion_code_55_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_58_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %59 = sext i8 %58 to i32*/
		Get_motion_code_55_59 = $signed(Get_motion_code_55_58);
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %59 = sext i8 %58 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		Get_motion_code_55_59_reg <= Get_motion_code_55_59;
		if (start == 1'b0 && ^(Get_motion_code_55_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_59_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %60 = shl i32 %50, %59*/
		Get_motion_code_55_60 = (Get_motion_code_Get_Bits1exit_50_reg <<< (Get_motion_code_55_59 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %60 = shl i32 %50, %59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		Get_motion_code_55_60_reg <= Get_motion_code_55_60;
		if (start == 1'b0 && ^(Get_motion_code_55_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_60_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %61 = sub nsw i32 %49, %59*/
		Get_motion_code_55_61 = (Get_motion_code_Get_Bits1exit_49_reg - Get_motion_code_55_59);
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %61 = sub nsw i32 %49, %59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		Get_motion_code_55_61_reg <= Get_motion_code_55_61;
		if (start == 1'b0 && ^(Get_motion_code_55_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_61_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %55*/
	/*   %62 = icmp slt i32 %61, 25*/
		Get_motion_code_55_62 = ($signed(Get_motion_code_55_61) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %55*/
	/*   %62 = icmp slt i32 %61, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		Get_motion_code_55_62_reg <= Get_motion_code_55_62;
		if (start == 1'b0 && ^(Get_motion_code_55_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_55_62_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_63_64 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_38)) begin
		Get_motion_code_63_64_reg <= Get_motion_code_63_64;
		if (start == 1'b0 && ^(Get_motion_code_63_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_63_64_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %63*/
	/*   %65 = icmp ult i8* %64, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_63_65 = (Get_motion_code_63_64 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %63*/
	/*   %65 = icmp ult i8* %64, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_38)) begin
		Get_motion_code_63_65_reg <= Get_motion_code_63_65;
		if (start == 1'b0 && ^(Get_motion_code_63_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_63_65_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %63*/
	/*   %66 = add nsw i32 %59, 24*/
		Get_motion_code_63_66 = (Get_motion_code_55_59_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %63*/
	/*   %66 = add nsw i32 %59, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		Get_motion_code_63_66_reg <= Get_motion_code_63_66;
		if (start == 1'b0 && ^(Get_motion_code_63_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_63_66_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %63*/
	/*   %67 = sub i32 %66, %49*/
		Get_motion_code_63_67 = (Get_motion_code_63_66 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %63*/
	/*   %67 = sub i32 %66, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		Get_motion_code_63_67_reg <= Get_motion_code_63_67;
		if (start == 1'b0 && ^(Get_motion_code_63_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_63_67_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %68 = add i32 %49, 8*/
		Get_motion_code_preheader1i63preheader_68 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %68 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39)) begin
		Get_motion_code_preheader1i63preheader_68_reg <= Get_motion_code_preheader1i63preheader_68;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63preheader_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63preheader_68_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %69 = sext i8 %58 to i32*/
		Get_motion_code_preheader1i63preheader_69 = $signed(Get_motion_code_55_58_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %69 = sext i8 %58 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39)) begin
		Get_motion_code_preheader1i63preheader_69_reg <= Get_motion_code_preheader1i63preheader_69;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63preheader_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63preheader_69_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %70 = sub i32 %68, %69*/
		Get_motion_code_preheader1i63preheader_70 = (Get_motion_code_preheader1i63preheader_68 - Get_motion_code_preheader1i63preheader_69);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %70 = sub i32 %68, %69*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39)) begin
		Get_motion_code_preheader1i63preheader_70_reg <= Get_motion_code_preheader1i63preheader_70;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63preheader_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63preheader_70_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %71 = add nsw i32 %69, 24*/
		Get_motion_code_preheader1i63preheader_71 = (Get_motion_code_preheader1i63preheader_69 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %71 = add nsw i32 %69, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39)) begin
		Get_motion_code_preheader1i63preheader_71_reg <= Get_motion_code_preheader1i63preheader_71;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63preheader_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63preheader_71_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %72 = sub i32 %71, %49*/
		Get_motion_code_preheader1i63preheader_72 = (Get_motion_code_preheader1i63preheader_71 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63.preheader*/
	/*   %72 = sub i32 %71, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39)) begin
		Get_motion_code_preheader1i63preheader_72_reg <= Get_motion_code_preheader1i63preheader_72;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63preheader_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63preheader_72_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %73 = add i32 %49, 8*/
		Get_motion_code_preheaderi60preheader_73 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %73 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40)) begin
		Get_motion_code_preheaderi60preheader_73_reg <= Get_motion_code_preheaderi60preheader_73;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60preheader_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60preheader_73_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %74 = sext i8 %58 to i32*/
		Get_motion_code_preheaderi60preheader_74 = $signed(Get_motion_code_55_58_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %74 = sext i8 %58 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40)) begin
		Get_motion_code_preheaderi60preheader_74_reg <= Get_motion_code_preheaderi60preheader_74;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60preheader_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60preheader_74_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %75 = sub i32 %73, %74*/
		Get_motion_code_preheaderi60preheader_75 = (Get_motion_code_preheaderi60preheader_73 - Get_motion_code_preheaderi60preheader_74);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %75 = sub i32 %73, %74*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40)) begin
		Get_motion_code_preheaderi60preheader_75_reg <= Get_motion_code_preheaderi60preheader_75;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60preheader_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60preheader_75_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %76 = add nsw i32 %74, 24*/
		Get_motion_code_preheaderi60preheader_76 = (Get_motion_code_preheaderi60preheader_74 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %76 = add nsw i32 %74, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40)) begin
		Get_motion_code_preheaderi60preheader_76_reg <= Get_motion_code_preheaderi60preheader_76;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60preheader_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60preheader_76_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %77 = sub i32 %76, %49*/
		Get_motion_code_preheaderi60preheader_77 = (Get_motion_code_preheaderi60preheader_76 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60.preheader*/
	/*   %77 = sub i32 %76, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40)) begin
		Get_motion_code_preheaderi60preheader_77_reg <= Get_motion_code_preheaderi60preheader_77;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60preheader_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60preheader_77_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar9 = phi i32 [ 0, %.preheader.i60.preheader ], [ %indvar.next10, %.preheader.i60 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi60_indvar9 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar9 = phi i32 [ 0, %.preheader.i60.preheader ], [ %indvar.next10, %.preheader.i60 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi60_87_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi60_indvar9 = Get_motion_code_preheaderi60_indvarnext10_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar9 = phi i32 [ 0, %.preheader.i60.preheader ], [ %indvar.next10, %.preheader.i60 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi60_indvar9_reg <= Get_motion_code_preheaderi60_indvar9;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_indvar9_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar9 = phi i32 [ 0, %.preheader.i60.preheader ], [ %indvar.next10, %.preheader.i60 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi60_87_reg == 1'd1))) begin
		Get_motion_code_preheaderi60_indvar9_reg <= Get_motion_code_preheaderi60_indvar9;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_indvar9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_indvar9_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %78 = phi i32 [ %60, %.preheader.i60.preheader ], [ %86, %.preheader.i60 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi60_78 = Get_motion_code_55_60_reg;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %78 = phi i32 [ %60, %.preheader.i60.preheader ], [ %86, %.preheader.i60 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi60_87_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi60_78 = Get_motion_code_preheaderi60_86;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %78 = phi i32 [ %60, %.preheader.i60.preheader ], [ %86, %.preheader.i60 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60preheader_40) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi60_78_reg <= Get_motion_code_preheaderi60_78;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_78_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %78 = phi i32 [ %60, %.preheader.i60.preheader ], [ %86, %.preheader.i60 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi60_87_reg == 1'd1))) begin
		Get_motion_code_preheaderi60_78_reg <= Get_motion_code_preheaderi60_78;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_78_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %scevgep11 = getelementptr i8* %64, i32 %indvar9*/
		Get_motion_code_preheaderi60_scevgep11 = (Get_motion_code_63_64_reg + (1 * Get_motion_code_preheaderi60_indvar9_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %scevgep11 = getelementptr i8* %64, i32 %indvar9*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		Get_motion_code_preheaderi60_scevgep11_reg <= Get_motion_code_preheaderi60_scevgep11;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %79 = shl i32 %indvar9, 3*/
		Get_motion_code_preheaderi60_79 = (Get_motion_code_preheaderi60_indvar9_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %79 = shl i32 %indvar9, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		Get_motion_code_preheaderi60_79_reg <= Get_motion_code_preheaderi60_79;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_79_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %80 = add i32 %75, %79*/
		Get_motion_code_preheaderi60_80 = (Get_motion_code_preheaderi60preheader_75_reg + Get_motion_code_preheaderi60_79);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %80 = add i32 %75, %79*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		Get_motion_code_preheaderi60_80_reg <= Get_motion_code_preheaderi60_80;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_80_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi60_81 = Get_motion_code_preheaderi60_81_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %81 = mul i32 %indvar9, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_42)) begin
		Get_motion_code_preheaderi60_81_reg <= Get_motion_code_preheaderi60_81;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_81_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %81 = mul i32 %indvar9, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_42)) begin
		Get_motion_code_preheaderi60_81_reg <= Get_motion_code_preheaderi60_81;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_81_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %82 = add i32 %77, %81*/
		Get_motion_code_preheaderi60_82 = (Get_motion_code_preheaderi60preheader_77_reg + Get_motion_code_preheaderi60_81);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %82 = add i32 %77, %81*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_42)) begin
		Get_motion_code_preheaderi60_82_reg <= Get_motion_code_preheaderi60_82;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_82_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
		Get_motion_code_preheaderi60_83 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43)) begin
		Get_motion_code_preheaderi60_83_reg <= Get_motion_code_preheaderi60_83;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_83_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %84 = zext i8 %83 to i32*/
		Get_motion_code_preheaderi60_84 = Get_motion_code_preheaderi60_83;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %84 = zext i8 %83 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43)) begin
		Get_motion_code_preheaderi60_84_reg <= Get_motion_code_preheaderi60_84;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_84_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %85 = shl i32 %84, %82*/
		Get_motion_code_preheaderi60_85 = (Get_motion_code_preheaderi60_84 <<< (Get_motion_code_preheaderi60_82_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %85 = shl i32 %84, %82*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43)) begin
		Get_motion_code_preheaderi60_85_reg <= Get_motion_code_preheaderi60_85;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_85_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %86 = or i32 %85, %78*/
		Get_motion_code_preheaderi60_86 = (Get_motion_code_preheaderi60_85 | Get_motion_code_preheaderi60_78_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %86 = or i32 %85, %78*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_43)) begin
		Get_motion_code_preheaderi60_86_reg <= Get_motion_code_preheaderi60_86;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_86_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %87 = icmp slt i32 %80, 25*/
		Get_motion_code_preheaderi60_87 = ($signed(Get_motion_code_preheaderi60_80) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %87 = icmp slt i32 %80, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		Get_motion_code_preheaderi60_87_reg <= Get_motion_code_preheaderi60_87;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_87_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
		Get_motion_code_preheaderi60_indvarnext10 = (Get_motion_code_preheaderi60_indvar9_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %indvar.next10 = add i32 %indvar9, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		Get_motion_code_preheaderi60_indvarnext10_reg <= Get_motion_code_preheaderi60_indvarnext10;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi60_indvarnext10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi60_indvarnext10_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %indvar18 = phi i32 [ 0, %.preheader1.i63.preheader ], [ %indvar.next19, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_indvar18 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %indvar18 = phi i32 [ 0, %.preheader1.i63.preheader ], [ %indvar.next19, %Fill_Buffer.exit.i69 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i63_indvar18 = Get_motion_code_Fill_Bufferexiti69_indvarnext19_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %indvar18 = phi i32 [ 0, %.preheader1.i63.preheader ], [ %indvar.next19, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_indvar18_reg <= Get_motion_code_preheader1i63_indvar18;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_indvar18_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %indvar18 = phi i32 [ 0, %.preheader1.i63.preheader ], [ %indvar.next19, %Fill_Buffer.exit.i69 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) begin
		Get_motion_code_preheader1i63_indvar18_reg <= Get_motion_code_preheader1i63_indvar18;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_indvar18_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %88 = phi i32 [ %60, %.preheader1.i63.preheader ], [ %101, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_88 = Get_motion_code_55_60_reg;
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %88 = phi i32 [ %60, %.preheader1.i63.preheader ], [ %101, %Fill_Buffer.exit.i69 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i63_88 = Get_motion_code_Fill_Bufferexiti69_101;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %88 = phi i32 [ %60, %.preheader1.i63.preheader ], [ %101, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_88_reg <= Get_motion_code_preheader1i63_88;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_88_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %88 = phi i32 [ %60, %.preheader1.i63.preheader ], [ %101, %Fill_Buffer.exit.i69 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) begin
		Get_motion_code_preheader1i63_88_reg <= Get_motion_code_preheader1i63_88;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_88_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %89 = phi i8* [ %64, %.preheader1.i63.preheader ], [ %97, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_89 = Get_motion_code_63_64_reg;
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %89 = phi i8* [ %64, %.preheader1.i63.preheader ], [ %97, %Fill_Buffer.exit.i69 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i63_89 = Get_motion_code_Fill_Bufferexiti69_97_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %89 = phi i8* [ %64, %.preheader1.i63.preheader ], [ %97, %Fill_Buffer.exit.i69 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63preheader_39) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i63_89_reg <= Get_motion_code_preheader1i63_89;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_89_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %89 = phi i8* [ %64, %.preheader1.i63.preheader ], [ %97, %Fill_Buffer.exit.i69 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti69_102_reg == 1'd1))) begin
		Get_motion_code_preheader1i63_89_reg <= Get_motion_code_preheader1i63_89;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_89_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %90 = shl i32 %indvar18, 3*/
		Get_motion_code_preheader1i63_90 = (Get_motion_code_preheader1i63_indvar18_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %90 = shl i32 %indvar18, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_44)) begin
		Get_motion_code_preheader1i63_90_reg <= Get_motion_code_preheader1i63_90;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_90_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %91 = add i32 %70, %90*/
		Get_motion_code_preheader1i63_91 = (Get_motion_code_preheader1i63preheader_70_reg + Get_motion_code_preheader1i63_90);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %91 = add i32 %70, %90*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_44)) begin
		Get_motion_code_preheader1i63_91_reg <= Get_motion_code_preheader1i63_91;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_91_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1i63_92 = Get_motion_code_preheader1i63_92_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %92 = mul i32 %indvar18, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_45)) begin
		Get_motion_code_preheader1i63_92_reg <= Get_motion_code_preheader1i63_92;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_92_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i63*/
	/*   %92 = mul i32 %indvar18, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_45)) begin
		Get_motion_code_preheader1i63_92_reg <= Get_motion_code_preheader1i63_92;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_92_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %93 = add i32 %72, %92*/
		Get_motion_code_preheader1i63_93 = (Get_motion_code_preheader1i63preheader_72_reg + Get_motion_code_preheader1i63_92);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %93 = add i32 %72, %92*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_45)) begin
		Get_motion_code_preheader1i63_93_reg <= Get_motion_code_preheader1i63_93;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_93_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %94 = icmp ult i8* %89, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1i63_94 = (Get_motion_code_preheader1i63_89_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %94 = icmp ult i8* %89, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_44)) begin
		Get_motion_code_preheader1i63_94_reg <= Get_motion_code_preheader1i63_94;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i63_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i63_94_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.i.i67.preheader ], [ %indvar.next13, %.lr.ph.i.i.i67 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67preheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii67_indvar12 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.i.i67.preheader ], [ %indvar.next13, %.lr.ph.i.i.i67 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_50) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii67_exitcond14_reg == 1'd0))) */ begin
		Get_motion_code_lrphiii67_indvar12 = Get_motion_code_lrphiii67_indvarnext13_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.i.i67.preheader ], [ %indvar.next13, %.lr.ph.i.i.i67 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67preheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii67_indvar12_reg <= Get_motion_code_lrphiii67_indvar12;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_indvar12_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.i.i67.preheader ], [ %indvar.next13, %.lr.ph.i.i.i67 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_50) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii67_exitcond14_reg == 1'd0))) begin
		Get_motion_code_lrphiii67_indvar12_reg <= Get_motion_code_lrphiii67_indvar12;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_indvar12_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %p2.02.i.i.i64 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar12*/
		Get_motion_code_lrphiii67_p202iii64 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiii67_indvar12_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %p2.02.i.i.i64 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		Get_motion_code_lrphiii67_p202iii64_reg <= Get_motion_code_lrphiii67_p202iii64;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_p202iii64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_p202iii64_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %p1.01.i.i.i65 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar12*/
		Get_motion_code_lrphiii67_p101iii65 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiii67_indvar12_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %p1.01.i.i.i65 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		Get_motion_code_lrphiii67_p101iii65_reg <= Get_motion_code_lrphiii67_p101iii65;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_p101iii65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_p101iii65_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
		Get_motion_code_lrphiii67_95 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		Get_motion_code_lrphiii67_95_reg <= Get_motion_code_lrphiii67_95;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_95_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
		Get_motion_code_lrphiii67_indvarnext13 = (Get_motion_code_lrphiii67_indvar12_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		Get_motion_code_lrphiii67_indvarnext13_reg <= Get_motion_code_lrphiii67_indvarnext13;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_indvarnext13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_indvarnext13_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 2048*/
		Get_motion_code_lrphiii67_exitcond14 = (Get_motion_code_lrphiii67_indvarnext13 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		Get_motion_code_lrphiii67_exitcond14_reg <= Get_motion_code_lrphiii67_exitcond14;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii67_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii67_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %96 = phi i8* [ %89, %.preheader1.i63 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i69.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_45) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i63_94_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti69_96 = Get_motion_code_preheader1i63_89_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %96 = phi i8* [ %89, %.preheader1.i63 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i69.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69loopexit_51) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti69_96 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %96 = phi i8* [ %89, %.preheader1.i63 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i69.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i63_45) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i63_94_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti69_96_reg <= Get_motion_code_Fill_Bufferexiti69_96;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_96_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %96 = phi i8* [ %89, %.preheader1.i63 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i69.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69loopexit_51) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti69_96_reg <= Get_motion_code_Fill_Bufferexiti69_96;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_96_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %97 = getelementptr inbounds i8* %96, i32 1*/
		Get_motion_code_Fill_Bufferexiti69_97 = (Get_motion_code_Fill_Bufferexiti69_96_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %97 = getelementptr inbounds i8* %96, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		Get_motion_code_Fill_Bufferexiti69_97_reg <= Get_motion_code_Fill_Bufferexiti69_97;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_97_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexiti69_98 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54)) begin
		Get_motion_code_Fill_Bufferexiti69_98_reg <= Get_motion_code_Fill_Bufferexiti69_98;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_98_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %99 = zext i8 %98 to i32*/
		Get_motion_code_Fill_Bufferexiti69_99 = Get_motion_code_Fill_Bufferexiti69_98;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %99 = zext i8 %98 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54)) begin
		Get_motion_code_Fill_Bufferexiti69_99_reg <= Get_motion_code_Fill_Bufferexiti69_99;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_99_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %100 = shl i32 %99, %93*/
		Get_motion_code_Fill_Bufferexiti69_100 = (Get_motion_code_Fill_Bufferexiti69_99 <<< (Get_motion_code_preheader1i63_93_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %100 = shl i32 %99, %93*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54)) begin
		Get_motion_code_Fill_Bufferexiti69_100_reg <= Get_motion_code_Fill_Bufferexiti69_100;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_100_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %101 = or i32 %100, %88*/
		Get_motion_code_Fill_Bufferexiti69_101 = (Get_motion_code_Fill_Bufferexiti69_100 | Get_motion_code_preheader1i63_88_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %101 = or i32 %100, %88*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_54)) begin
		Get_motion_code_Fill_Bufferexiti69_101_reg <= Get_motion_code_Fill_Bufferexiti69_101;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_101_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %102 = icmp slt i32 %91, 25*/
		Get_motion_code_Fill_Bufferexiti69_102 = ($signed(Get_motion_code_preheader1i63_91_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %102 = icmp slt i32 %91, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		Get_motion_code_Fill_Bufferexiti69_102_reg <= Get_motion_code_Fill_Bufferexiti69_102;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_102_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
		Get_motion_code_Fill_Bufferexiti69_indvarnext19 = (Get_motion_code_preheader1i63_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		Get_motion_code_Fill_Bufferexiti69_indvarnext19_reg <= Get_motion_code_Fill_Bufferexiti69_indvarnext19;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti69_indvarnext19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti69_indvarnext19_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %103 = lshr i32 %67, 3*/
		Get_motion_code_loopexiti70_103 = (Get_motion_code_63_67_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %103 = lshr i32 %67, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_103_reg <= Get_motion_code_loopexiti70_103;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_103_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %104 = add nuw nsw i32 %103, 1*/
		Get_motion_code_loopexiti70_104 = (Get_motion_code_loopexiti70_103 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %104 = add nuw nsw i32 %103, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_104_reg <= Get_motion_code_loopexiti70_104;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_104_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %scevgep68 = getelementptr i8* %64, i32 %104*/
		Get_motion_code_loopexiti70_scevgep68 = (Get_motion_code_63_64_reg + (1 * Get_motion_code_loopexiti70_104_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %scevgep68 = getelementptr i8* %64, i32 %104*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		Get_motion_code_loopexiti70_scevgep68_reg <= Get_motion_code_loopexiti70_scevgep68;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_scevgep68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_scevgep68_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %105 = and i32 %67, -8*/
		Get_motion_code_loopexiti70_105 = (Get_motion_code_63_67_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %105 = and i32 %67, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_105_reg <= Get_motion_code_loopexiti70_105;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_105_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %106 = add i32 %49, 8*/
		Get_motion_code_loopexiti70_106 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %106 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_106_reg <= Get_motion_code_loopexiti70_106;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_106_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %107 = sub i32 %106, %59*/
		Get_motion_code_loopexiti70_107 = (Get_motion_code_loopexiti70_106 - Get_motion_code_55_59_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %107 = sub i32 %106, %59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_107_reg <= Get_motion_code_loopexiti70_107;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_107_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %108 = add i32 %107, %105*/
		Get_motion_code_loopexiti70_108 = (Get_motion_code_loopexiti70_107 + Get_motion_code_loopexiti70_105);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i70*/
	/*   %108 = add i32 %107, %105*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		Get_motion_code_loopexiti70_108_reg <= Get_motion_code_loopexiti70_108;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti70_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti70_108_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %109 = and i32 %67, -8*/
		Get_motion_code_loopexit2i72loopexit_109 = (Get_motion_code_63_67_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %109 = and i32 %67, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		Get_motion_code_loopexit2i72loopexit_109_reg <= Get_motion_code_loopexit2i72loopexit_109;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72loopexit_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72loopexit_109_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %110 = add i32 %49, %109*/
		Get_motion_code_loopexit2i72loopexit_110 = (Get_motion_code_Get_Bits1exit_49_reg + Get_motion_code_loopexit2i72loopexit_109);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %110 = add i32 %49, %109*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		Get_motion_code_loopexit2i72loopexit_110_reg <= Get_motion_code_loopexit2i72loopexit_110;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72loopexit_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72loopexit_110_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %111 = add i32 %110, 8*/
		Get_motion_code_loopexit2i72loopexit_111 = (Get_motion_code_loopexit2i72loopexit_110 + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %111 = add i32 %110, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		Get_motion_code_loopexit2i72loopexit_111_reg <= Get_motion_code_loopexit2i72loopexit_111;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72loopexit_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72loopexit_111_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %112 = sub i32 %111, %59*/
		Get_motion_code_loopexit2i72loopexit_112 = (Get_motion_code_loopexit2i72loopexit_111 - Get_motion_code_55_59_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   %112 = sub i32 %111, %59*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		Get_motion_code_loopexit2i72loopexit_112_reg <= Get_motion_code_loopexit2i72loopexit_112;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72loopexit_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72loopexit_112_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %113 = phi i32 [ %86, %.loopexit.i70 ], [ %101, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_113 = Get_motion_code_preheaderi60_86_reg;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %113 = phi i32 [ %86, %.loopexit.i70 ], [ %101, %.loopexit2.i72.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i72_113 = Get_motion_code_Fill_Bufferexiti69_101_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %113 = phi i32 [ %86, %.loopexit.i70 ], [ %101, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_113_reg <= Get_motion_code_loopexit2i72_113;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72_113_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %113 = phi i32 [ %86, %.loopexit.i70 ], [ %101, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_113_reg <= Get_motion_code_loopexit2i72_113;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72_113_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %Incnt.2.i71 = phi i32 [ %108, %.loopexit.i70 ], [ %112, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_Incnt2i71 = Get_motion_code_loopexiti70_108_reg;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %Incnt.2.i71 = phi i32 [ %108, %.loopexit.i70 ], [ %112, %.loopexit2.i72.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i72_Incnt2i71 = Get_motion_code_loopexit2i72loopexit_112_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %Incnt.2.i71 = phi i32 [ %108, %.loopexit.i70 ], [ %112, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_57) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_Incnt2i71_reg <= Get_motion_code_loopexit2i72_Incnt2i71;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72_Incnt2i71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72_Incnt2i71_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   %Incnt.2.i71 = phi i32 [ %108, %.loopexit.i70 ], [ %112, %.loopexit2.i72.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_59) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i72_Incnt2i71_reg <= Get_motion_code_loopexit2i72_Incnt2i71;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i72_Incnt2i71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i72_Incnt2i71_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %114 = phi i32 [ %60, %55 ], [ %113, %.loopexit2.i72 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__55_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_55_62_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_114 = Get_motion_code_55_60_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %114 = phi i32 [ %60, %55 ], [ %113, %.loopexit2.i72 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit73_114 = Get_motion_code_loopexit2i72_113_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %114 = phi i32 [ %60, %55 ], [ %113, %.loopexit2.i72 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__55_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_55_62_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_114_reg <= Get_motion_code_Flush_Bufferexit73_114;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_114_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %114 = phi i32 [ %60, %55 ], [ %113, %.loopexit2.i72 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_61) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_114_reg <= Get_motion_code_Flush_Bufferexit73_114;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_114_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %115 = phi i32 [ %61, %55 ], [ %Incnt.2.i71, %.loopexit2.i72 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__55_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_55_62_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_115 = Get_motion_code_55_61_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %115 = phi i32 [ %61, %55 ], [ %Incnt.2.i71, %.loopexit2.i72 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit73_115 = Get_motion_code_loopexit2i72_Incnt2i71_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %115 = phi i32 [ %61, %55 ], [ %Incnt.2.i71, %.loopexit2.i72 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__55_35) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_55_62_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_115_reg <= Get_motion_code_Flush_Bufferexit73_115;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_115_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %115 = phi i32 [ %61, %55 ], [ %Incnt.2.i71, %.loopexit2.i72 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_61) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit73_115_reg <= Get_motion_code_Flush_Bufferexit73_115;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_115_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %116 = shl i32 %114, 1*/
		Get_motion_code_Flush_Bufferexit73_116 = (Get_motion_code_Flush_Bufferexit73_114_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %116 = shl i32 %114, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		Get_motion_code_Flush_Bufferexit73_116_reg <= Get_motion_code_Flush_Bufferexit73_116;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_116_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %117 = add nsw i32 %115, -1*/
		Get_motion_code_Flush_Bufferexit73_117 = (Get_motion_code_Flush_Bufferexit73_115_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %117 = add nsw i32 %115, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		Get_motion_code_Flush_Bufferexit73_117_reg <= Get_motion_code_Flush_Bufferexit73_117;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_117_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %118 = icmp slt i32 %115, 26*/
		Get_motion_code_Flush_Bufferexit73_118 = ($signed(Get_motion_code_Flush_Bufferexit73_115_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   %118 = icmp slt i32 %115, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		Get_motion_code_Flush_Bufferexit73_118_reg <= Get_motion_code_Flush_Bufferexit73_118;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit73_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit73_118_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_119_120 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_66)) begin
		Get_motion_code_119_120_reg <= Get_motion_code_119_120;
		if (start == 1'b0 && ^(Get_motion_code_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_119_120_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %119*/
	/*   %121 = icmp ult i8* %120, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_119_121 = (Get_motion_code_119_120 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %119*/
	/*   %121 = icmp ult i8* %120, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_66)) begin
		Get_motion_code_119_121_reg <= Get_motion_code_119_121;
		if (start == 1'b0 && ^(Get_motion_code_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_119_121_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %119*/
	/*   %122 = sub i32 25, %115*/
		Get_motion_code_119_122 = (32'd25 - Get_motion_code_Flush_Bufferexit73_115_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %119*/
	/*   %122 = sub i32 25, %115*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_64)) begin
		Get_motion_code_119_122_reg <= Get_motion_code_119_122;
		if (start == 1'b0 && ^(Get_motion_code_119_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_119_122_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48.preheader*/
	/*   %123 = add i32 %115, 7*/
		Get_motion_code_preheader1iii48preheader_123 = (Get_motion_code_Flush_Bufferexit73_115_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48.preheader*/
	/*   %123 = add i32 %115, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67)) begin
		Get_motion_code_preheader1iii48preheader_123_reg <= Get_motion_code_preheader1iii48preheader_123;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48preheader_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48preheader_123_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48.preheader*/
	/*   %124 = sub i32 25, %115*/
		Get_motion_code_preheader1iii48preheader_124 = (32'd25 - Get_motion_code_Flush_Bufferexit73_115_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48.preheader*/
	/*   %124 = sub i32 25, %115*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67)) begin
		Get_motion_code_preheader1iii48preheader_124_reg <= Get_motion_code_preheader1iii48preheader_124;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48preheader_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48preheader_124_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %125 = add i32 %115, 7*/
		Get_motion_code_preheaderiii46preheader_125 = (Get_motion_code_Flush_Bufferexit73_115_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %125 = add i32 %115, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68)) begin
		Get_motion_code_preheaderiii46preheader_125_reg <= Get_motion_code_preheaderiii46preheader_125;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46preheader_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46preheader_125_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %126 = icmp sgt i32 %125, 25*/
		Get_motion_code_preheaderiii46preheader_126 = ($signed(Get_motion_code_preheaderiii46preheader_125) > $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %126 = icmp sgt i32 %125, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68)) begin
		Get_motion_code_preheaderiii46preheader_126_reg <= Get_motion_code_preheaderiii46preheader_126;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46preheader_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46preheader_126_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %smax = select i1 %126, i32 %125, i32 25*/
		Get_motion_code_preheaderiii46preheader_smax = (Get_motion_code_preheaderiii46preheader_126 ? Get_motion_code_preheaderiii46preheader_125 : 32'd25);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %smax = select i1 %126, i32 %125, i32 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68)) begin
		Get_motion_code_preheaderiii46preheader_smax_reg <= Get_motion_code_preheaderiii46preheader_smax;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46preheader_smax) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46preheader_smax_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %127 = sub i32 25, %115*/
		Get_motion_code_preheaderiii46preheader_127 = (32'd25 - Get_motion_code_Flush_Bufferexit73_115_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46.preheader*/
	/*   %127 = sub i32 25, %115*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68)) begin
		Get_motion_code_preheaderiii46preheader_127_reg <= Get_motion_code_preheaderiii46preheader_127;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46preheader_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46preheader_127_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i.i.i46 ], [ 0, %.preheader.i.i.i46.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii46_indvar = 32'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i.i.i46 ], [ 0, %.preheader.i.i.i46.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii46_137_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii46_indvar = Get_motion_code_preheaderiii46_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i.i.i46 ], [ 0, %.preheader.i.i.i46.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii46_indvar_reg <= Get_motion_code_preheaderiii46_indvar;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_indvar_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader.i.i.i46 ], [ 0, %.preheader.i.i.i46.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii46_137_reg == 1'd1))) begin
		Get_motion_code_preheaderiii46_indvar_reg <= Get_motion_code_preheaderiii46_indvar;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %128 = phi i32 [ %136, %.preheader.i.i.i46 ], [ %116, %.preheader.i.i.i46.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii46_128 = Get_motion_code_Flush_Bufferexit73_116_reg;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %128 = phi i32 [ %136, %.preheader.i.i.i46 ], [ %116, %.preheader.i.i.i46.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii46_137_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii46_128 = Get_motion_code_preheaderiii46_136;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %128 = phi i32 [ %136, %.preheader.i.i.i46 ], [ %116, %.preheader.i.i.i46.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii46_128_reg <= Get_motion_code_preheaderiii46_128;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_128_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %128 = phi i32 [ %136, %.preheader.i.i.i46 ], [ %116, %.preheader.i.i.i46.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii46_137_reg == 1'd1))) begin
		Get_motion_code_preheaderiii46_128_reg <= Get_motion_code_preheaderiii46_128;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_128_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %scevgep1 = getelementptr i8* %120, i32 %indvar*/
		Get_motion_code_preheaderiii46_scevgep1 = (Get_motion_code_119_120_reg + (1 * Get_motion_code_preheaderiii46_indvar_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %scevgep1 = getelementptr i8* %120, i32 %indvar*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		Get_motion_code_preheaderiii46_scevgep1_reg <= Get_motion_code_preheaderiii46_scevgep1;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_scevgep1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_scevgep1_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %129 = shl i32 %indvar, 3*/
		Get_motion_code_preheaderiii46_129 = (Get_motion_code_preheaderiii46_indvar_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %129 = shl i32 %indvar, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		Get_motion_code_preheaderiii46_129_reg <= Get_motion_code_preheaderiii46_129;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_129_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %130 = add i32 %125, %129*/
		Get_motion_code_preheaderiii46_130 = (Get_motion_code_preheaderiii46preheader_125_reg + Get_motion_code_preheaderiii46_129);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %130 = add i32 %125, %129*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		Get_motion_code_preheaderiii46_130_reg <= Get_motion_code_preheaderiii46_130;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_130_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderiii46_131 = Get_motion_code_preheaderiii46_131_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %131 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_70)) begin
		Get_motion_code_preheaderiii46_131_reg <= Get_motion_code_preheaderiii46_131;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_131_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %131 = mul i32 %indvar, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_70)) begin
		Get_motion_code_preheaderiii46_131_reg <= Get_motion_code_preheaderiii46_131;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_131_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %132 = add i32 %127, %131*/
		Get_motion_code_preheaderiii46_132 = (Get_motion_code_preheaderiii46preheader_127_reg + Get_motion_code_preheaderiii46_131);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %132 = add i32 %127, %131*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_70)) begin
		Get_motion_code_preheaderiii46_132_reg <= Get_motion_code_preheaderiii46_132;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_132_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
		Get_motion_code_preheaderiii46_133 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71)) begin
		Get_motion_code_preheaderiii46_133_reg <= Get_motion_code_preheaderiii46_133;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_133_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %134 = zext i8 %133 to i32*/
		Get_motion_code_preheaderiii46_134 = Get_motion_code_preheaderiii46_133;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %134 = zext i8 %133 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71)) begin
		Get_motion_code_preheaderiii46_134_reg <= Get_motion_code_preheaderiii46_134;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_134_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %135 = shl i32 %134, %132*/
		Get_motion_code_preheaderiii46_135 = (Get_motion_code_preheaderiii46_134 <<< (Get_motion_code_preheaderiii46_132_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %135 = shl i32 %134, %132*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71)) begin
		Get_motion_code_preheaderiii46_135_reg <= Get_motion_code_preheaderiii46_135;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_135_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %136 = or i32 %135, %128*/
		Get_motion_code_preheaderiii46_136 = (Get_motion_code_preheaderiii46_135 | Get_motion_code_preheaderiii46_128_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %136 = or i32 %135, %128*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_71)) begin
		Get_motion_code_preheaderiii46_136_reg <= Get_motion_code_preheaderiii46_136;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_136_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %137 = icmp slt i32 %130, 25*/
		Get_motion_code_preheaderiii46_137 = ($signed(Get_motion_code_preheaderiii46_130) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %137 = icmp slt i32 %130, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		Get_motion_code_preheaderiii46_137_reg <= Get_motion_code_preheaderiii46_137;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_137_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar.next = add i32 %indvar, 1*/
		Get_motion_code_preheaderiii46_indvarnext = (Get_motion_code_preheaderiii46_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		Get_motion_code_preheaderiii46_indvarnext_reg <= Get_motion_code_preheaderiii46_indvarnext;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii46_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii46_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %indvar7 = phi i32 [ 0, %.preheader1.i.i.i48.preheader ], [ %indvar.next8, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_indvar7 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %indvar7 = phi i32 [ 0, %.preheader1.i.i.i48.preheader ], [ %indvar.next8, %Fill_Buffer.exit.i.i.i54 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii48_indvar7 = Get_motion_code_Fill_Bufferexitiii54_indvarnext8_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %indvar7 = phi i32 [ 0, %.preheader1.i.i.i48.preheader ], [ %indvar.next8, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_indvar7_reg <= Get_motion_code_preheader1iii48_indvar7;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_indvar7_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %indvar7 = phi i32 [ 0, %.preheader1.i.i.i48.preheader ], [ %indvar.next8, %Fill_Buffer.exit.i.i.i54 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) begin
		Get_motion_code_preheader1iii48_indvar7_reg <= Get_motion_code_preheader1iii48_indvar7;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_indvar7_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %138 = phi i32 [ %116, %.preheader1.i.i.i48.preheader ], [ %151, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_138 = Get_motion_code_Flush_Bufferexit73_116_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %138 = phi i32 [ %116, %.preheader1.i.i.i48.preheader ], [ %151, %Fill_Buffer.exit.i.i.i54 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii48_138 = Get_motion_code_Fill_Bufferexitiii54_151;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %138 = phi i32 [ %116, %.preheader1.i.i.i48.preheader ], [ %151, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_138_reg <= Get_motion_code_preheader1iii48_138;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_138_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %138 = phi i32 [ %116, %.preheader1.i.i.i48.preheader ], [ %151, %Fill_Buffer.exit.i.i.i54 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) begin
		Get_motion_code_preheader1iii48_138_reg <= Get_motion_code_preheader1iii48_138;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_138_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %139 = phi i8* [ %120, %.preheader1.i.i.i48.preheader ], [ %147, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_139 = Get_motion_code_119_120_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %139 = phi i8* [ %120, %.preheader1.i.i.i48.preheader ], [ %147, %Fill_Buffer.exit.i.i.i54 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii48_139 = Get_motion_code_Fill_Bufferexitiii54_147_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %139 = phi i8* [ %120, %.preheader1.i.i.i48.preheader ], [ %147, %Fill_Buffer.exit.i.i.i54 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48preheader_67) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii48_139_reg <= Get_motion_code_preheader1iii48_139;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_139_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %139 = phi i8* [ %120, %.preheader1.i.i.i48.preheader ], [ %147, %Fill_Buffer.exit.i.i.i54 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii54_152_reg == 1'd1))) begin
		Get_motion_code_preheader1iii48_139_reg <= Get_motion_code_preheader1iii48_139;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_139_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %140 = shl i32 %indvar7, 3*/
		Get_motion_code_preheader1iii48_140 = (Get_motion_code_preheader1iii48_indvar7_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %140 = shl i32 %indvar7, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_72)) begin
		Get_motion_code_preheader1iii48_140_reg <= Get_motion_code_preheader1iii48_140;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_140_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %141 = add i32 %123, %140*/
		Get_motion_code_preheader1iii48_141 = (Get_motion_code_preheader1iii48preheader_123_reg + Get_motion_code_preheader1iii48_140);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %141 = add i32 %123, %140*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_72)) begin
		Get_motion_code_preheader1iii48_141_reg <= Get_motion_code_preheader1iii48_141;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_141_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1iii48_142 = Get_motion_code_preheader1iii48_142_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %142 = mul i32 %indvar7, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_73)) begin
		Get_motion_code_preheader1iii48_142_reg <= Get_motion_code_preheader1iii48_142;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_142_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %142 = mul i32 %indvar7, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_73)) begin
		Get_motion_code_preheader1iii48_142_reg <= Get_motion_code_preheader1iii48_142;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_142_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %143 = add i32 %124, %142*/
		Get_motion_code_preheader1iii48_143 = (Get_motion_code_preheader1iii48preheader_124_reg + Get_motion_code_preheader1iii48_142);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %143 = add i32 %124, %142*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_73)) begin
		Get_motion_code_preheader1iii48_143_reg <= Get_motion_code_preheader1iii48_143;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_143_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %144 = icmp ult i8* %139, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1iii48_144 = (Get_motion_code_preheader1iii48_139_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %144 = icmp ult i8* %139, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_72)) begin
		Get_motion_code_preheader1iii48_144_reg <= Get_motion_code_preheader1iii48_144;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii48_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii48_144_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar2 = phi i32 [ 0, %.lr.ph.i.i.i.i.i52.preheader ], [ %indvar.next3, %.lr.ph.i.i.i.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52preheader_74) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii52_indvar2 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar2 = phi i32 [ 0, %.lr.ph.i.i.i.i.i52.preheader ], [ %indvar.next3, %.lr.ph.i.i.i.i.i52 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_78) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii52_exitcond_reg == 1'd0))) */ begin
		Get_motion_code_lrphiiiii52_indvar2 = Get_motion_code_lrphiiiii52_indvarnext3_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar2 = phi i32 [ 0, %.lr.ph.i.i.i.i.i52.preheader ], [ %indvar.next3, %.lr.ph.i.i.i.i.i52 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52preheader_74) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii52_indvar2_reg <= Get_motion_code_lrphiiiii52_indvar2;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_indvar2_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar2 = phi i32 [ 0, %.lr.ph.i.i.i.i.i52.preheader ], [ %indvar.next3, %.lr.ph.i.i.i.i.i52 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_78) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii52_exitcond_reg == 1'd0))) begin
		Get_motion_code_lrphiiiii52_indvar2_reg <= Get_motion_code_lrphiiiii52_indvar2;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_indvar2_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %p2.02.i.i.i.i.i49 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar2*/
		Get_motion_code_lrphiiiii52_p202iiiii49 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiiiii52_indvar2_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %p2.02.i.i.i.i.i49 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar2*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		Get_motion_code_lrphiiiii52_p202iiiii49_reg <= Get_motion_code_lrphiiiii52_p202iiiii49;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_p202iiiii49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_p202iiiii49_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %p1.01.i.i.i.i.i50 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar2*/
		Get_motion_code_lrphiiiii52_p101iiiii50 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiiiii52_indvar2_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %p1.01.i.i.i.i.i50 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar2*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		Get_motion_code_lrphiiiii52_p101iiiii50_reg <= Get_motion_code_lrphiiiii52_p101iiiii50;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_p101iiiii50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_p101iiiii50_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
		Get_motion_code_lrphiiiii52_145 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		Get_motion_code_lrphiiiii52_145_reg <= Get_motion_code_lrphiiiii52_145;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_145_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar.next3 = add i32 %indvar2, 1*/
		Get_motion_code_lrphiiiii52_indvarnext3 = (Get_motion_code_lrphiiiii52_indvar2_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %indvar.next3 = add i32 %indvar2, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		Get_motion_code_lrphiiiii52_indvarnext3_reg <= Get_motion_code_lrphiiiii52_indvarnext3;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_indvarnext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_indvarnext3_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %exitcond = icmp eq i32 %indvar.next3, 2048*/
		Get_motion_code_lrphiiiii52_exitcond = (Get_motion_code_lrphiiiii52_indvarnext3 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %exitcond = icmp eq i32 %indvar.next3, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		Get_motion_code_lrphiiiii52_exitcond_reg <= Get_motion_code_lrphiiiii52_exitcond;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii52_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii52_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %146 = phi i8* [ %139, %.preheader1.i.i.i48 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i54.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_73) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii48_144_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii54_146 = Get_motion_code_preheader1iii48_139_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %146 = phi i8* [ %139, %.preheader1.i.i.i48 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i54.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54loopexit_79) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitiii54_146 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %146 = phi i8* [ %139, %.preheader1.i.i.i48 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i54.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii48_73) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii48_144_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii54_146_reg <= Get_motion_code_Fill_Bufferexitiii54_146;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_146_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %146 = phi i8* [ %139, %.preheader1.i.i.i48 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i54.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54loopexit_79) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitiii54_146_reg <= Get_motion_code_Fill_Bufferexitiii54_146;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_146_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %147 = getelementptr inbounds i8* %146, i32 1*/
		Get_motion_code_Fill_Bufferexitiii54_147 = (Get_motion_code_Fill_Bufferexitiii54_146_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %147 = getelementptr inbounds i8* %146, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		Get_motion_code_Fill_Bufferexitiii54_147_reg <= Get_motion_code_Fill_Bufferexitiii54_147;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_147_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexitiii54_148 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82)) begin
		Get_motion_code_Fill_Bufferexitiii54_148_reg <= Get_motion_code_Fill_Bufferexitiii54_148;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_148_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %149 = zext i8 %148 to i32*/
		Get_motion_code_Fill_Bufferexitiii54_149 = Get_motion_code_Fill_Bufferexitiii54_148;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %149 = zext i8 %148 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82)) begin
		Get_motion_code_Fill_Bufferexitiii54_149_reg <= Get_motion_code_Fill_Bufferexitiii54_149;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_149_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %150 = shl i32 %149, %143*/
		Get_motion_code_Fill_Bufferexitiii54_150 = (Get_motion_code_Fill_Bufferexitiii54_149 <<< (Get_motion_code_preheader1iii48_143_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %150 = shl i32 %149, %143*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82)) begin
		Get_motion_code_Fill_Bufferexitiii54_150_reg <= Get_motion_code_Fill_Bufferexitiii54_150;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_150_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %151 = or i32 %150, %138*/
		Get_motion_code_Fill_Bufferexitiii54_151 = (Get_motion_code_Fill_Bufferexitiii54_150 | Get_motion_code_preheader1iii48_138_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %151 = or i32 %150, %138*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_82)) begin
		Get_motion_code_Fill_Bufferexitiii54_151_reg <= Get_motion_code_Fill_Bufferexitiii54_151;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_151_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %152 = icmp slt i32 %141, 25*/
		Get_motion_code_Fill_Bufferexitiii54_152 = ($signed(Get_motion_code_preheader1iii48_141_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %152 = icmp slt i32 %141, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		Get_motion_code_Fill_Bufferexitiii54_152_reg <= Get_motion_code_Fill_Bufferexitiii54_152;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_152_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
		Get_motion_code_Fill_Bufferexitiii54_indvarnext8 = (Get_motion_code_preheader1iii48_indvar7_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		Get_motion_code_Fill_Bufferexitiii54_indvarnext8_reg <= Get_motion_code_Fill_Bufferexitiii54_indvarnext8;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii54_indvarnext8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii54_indvarnext8_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %153 = sub i32 %smax, %115*/
		Get_motion_code_loopexitiii55_153 = (Get_motion_code_preheaderiii46preheader_smax_reg - Get_motion_code_Flush_Bufferexit73_115_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %153 = sub i32 %smax, %115*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		Get_motion_code_loopexitiii55_153_reg <= Get_motion_code_loopexitiii55_153;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_153_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %154 = lshr i32 %153, 3*/
		Get_motion_code_loopexitiii55_154 = (Get_motion_code_loopexitiii55_153 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %154 = lshr i32 %153, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		Get_motion_code_loopexitiii55_154_reg <= Get_motion_code_loopexitiii55_154;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_154_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %155 = add nuw nsw i32 %154, 1*/
		Get_motion_code_loopexitiii55_155 = (Get_motion_code_loopexitiii55_154 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %155 = add nuw nsw i32 %154, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		Get_motion_code_loopexitiii55_155_reg <= Get_motion_code_loopexitiii55_155;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_155_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %scevgep = getelementptr i8* %120, i32 %155*/
		Get_motion_code_loopexitiii55_scevgep = (Get_motion_code_119_120_reg + (1 * Get_motion_code_loopexitiii55_155_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %scevgep = getelementptr i8* %120, i32 %155*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		Get_motion_code_loopexitiii55_scevgep_reg <= Get_motion_code_loopexitiii55_scevgep;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %156 = and i32 %122, -8*/
		Get_motion_code_loopexitiii55_156 = (Get_motion_code_119_122_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %156 = and i32 %122, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		Get_motion_code_loopexitiii55_156_reg <= Get_motion_code_loopexitiii55_156;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_156_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %157 = add i32 %125, %156*/
		Get_motion_code_loopexitiii55_157 = (Get_motion_code_preheaderiii46preheader_125_reg + Get_motion_code_loopexitiii55_156);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   %157 = add i32 %125, %156*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		Get_motion_code_loopexitiii55_157_reg <= Get_motion_code_loopexitiii55_157;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii55_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii55_157_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %158 = and i32 %122, -8*/
		Get_motion_code_loopexit2iloopexitii56_158 = (Get_motion_code_119_122_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %158 = and i32 %122, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		Get_motion_code_loopexit2iloopexitii56_158_reg <= Get_motion_code_loopexit2iloopexitii56_158;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii56_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii56_158_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %159 = add i32 %115, 7*/
		Get_motion_code_loopexit2iloopexitii56_159 = (Get_motion_code_Flush_Bufferexit73_115_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %159 = add i32 %115, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		Get_motion_code_loopexit2iloopexitii56_159_reg <= Get_motion_code_loopexit2iloopexitii56_159;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii56_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii56_159_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %160 = add i32 %159, %158*/
		Get_motion_code_loopexit2iloopexitii56_160 = (Get_motion_code_loopexit2iloopexitii56_159 + Get_motion_code_loopexit2iloopexitii56_158);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   %160 = add i32 %159, %158*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		Get_motion_code_loopexit2iloopexitii56_160_reg <= Get_motion_code_loopexit2iloopexitii56_160;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii56_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii56_160_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   %Incnt.2.i.i.i57 = phi i32 [ %157, %.loopexit.i.i.i55 ], [ %160, %.loopexit2.i.loopexit.i.i56 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii58_Incnt2iii57 = Get_motion_code_loopexitiii55_157_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   %Incnt.2.i.i.i57 = phi i32 [ %157, %.loopexit.i.i.i55 ], [ %160, %.loopexit2.i.loopexit.i.i56 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_87) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2iii58_Incnt2iii57 = Get_motion_code_loopexit2iloopexitii56_160_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   %Incnt.2.i.i.i57 = phi i32 [ %157, %.loopexit.i.i.i55 ], [ %160, %.loopexit2.i.loopexit.i.i56 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_85) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii58_Incnt2iii57_reg <= Get_motion_code_loopexit2iii58_Incnt2iii57;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii58_Incnt2iii57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii58_Incnt2iii57_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   %Incnt.2.i.i.i57 = phi i32 [ %157, %.loopexit.i.i.i55 ], [ %160, %.loopexit2.i.loopexit.i.i56 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_87) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii58_Incnt2iii57_reg <= Get_motion_code_loopexit2iii58_Incnt2iii57;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii58_Incnt2iii57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii58_Incnt2iii57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %161 = icmp slt i32 %114, 0*/
		Get_motion_code_Get_Bits1exit59_161 = ($signed(Get_motion_code_Flush_Bufferexit73_114_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %161 = icmp slt i32 %114, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90)) begin
		Get_motion_code_Get_Bits1exit59_161_reg <= Get_motion_code_Get_Bits1exit59_161;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_161_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %162 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %56, i32 0*/
		Get_motion_code_Get_Bits1exit59_162 = (1'd0 | (2 * Get_motion_code_55_56_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %162 = getelementptr inbounds [8 x [2 x i8]]* @MVtab0, i32 0, i32 %56, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90)) begin
		Get_motion_code_Get_Bits1exit59_162_reg <= Get_motion_code_Get_Bits1exit59_162;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_162_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %163 = load i8* %162, align 1, !tbaa !7*/
		Get_motion_code_Get_Bits1exit59_163 = MVtab0_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %163 = load i8* %162, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91)) begin
		Get_motion_code_Get_Bits1exit59_163_reg <= Get_motion_code_Get_Bits1exit59_163;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_163_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %164 = sext i8 %163 to i32*/
		Get_motion_code_Get_Bits1exit59_164 = $signed(Get_motion_code_Get_Bits1exit59_163);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %164 = sext i8 %163 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91)) begin
		Get_motion_code_Get_Bits1exit59_164_reg <= Get_motion_code_Get_Bits1exit59_164;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_164_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %165 = sub nsw i32 0, %164*/
		Get_motion_code_Get_Bits1exit59_165 = (32'd0 - Get_motion_code_Get_Bits1exit59_164);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %165 = sub nsw i32 0, %164*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91)) begin
		Get_motion_code_Get_Bits1exit59_165_reg <= Get_motion_code_Get_Bits1exit59_165;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_165_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %166 = select i1 %161, i32 %165, i32 %164*/
		Get_motion_code_Get_Bits1exit59_166 = (Get_motion_code_Get_Bits1exit59_161_reg ? Get_motion_code_Get_Bits1exit59_165 : Get_motion_code_Get_Bits1exit59_164);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %166 = select i1 %161, i32 %165, i32 %164*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91)) begin
		Get_motion_code_Get_Bits1exit59_166_reg <= Get_motion_code_Get_Bits1exit59_166;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit59_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit59_166_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %167*/
	/*   %168 = icmp ugt i32 %50, 201326591*/
		Get_motion_code_167_168 = (Get_motion_code_Get_Bits1exit_50_reg > 32'd201326591);
end
always @(posedge clk) begin
	/* Get_motion_code: %167*/
	/*   %168 = icmp ugt i32 %50, 201326591*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__167_92)) begin
		Get_motion_code_167_168_reg <= Get_motion_code_167_168;
		if (start == 1'b0 && ^(Get_motion_code_167_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_167_168_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %170 = lshr i32 %50, 26*/
		Get_motion_code_169_170 = (Get_motion_code_Get_Bits1exit_50_reg >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %170 = lshr i32 %50, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_93)) begin
		Get_motion_code_169_170_reg <= Get_motion_code_169_170;
		if (start == 1'b0 && ^(Get_motion_code_169_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_170_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %171 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %170, i32 1*/
		Get_motion_code_169_171 = (1'd0 | ((2 * Get_motion_code_169_170) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %171 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %170, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_93)) begin
		Get_motion_code_169_171_reg <= Get_motion_code_169_171;
		if (start == 1'b0 && ^(Get_motion_code_169_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_171_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %172 = load i8* %171, align 1, !tbaa !7*/
		Get_motion_code_169_172 = MVtab1_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %172 = load i8* %171, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		Get_motion_code_169_172_reg <= Get_motion_code_169_172;
		if (start == 1'b0 && ^(Get_motion_code_169_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_172_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %173 = sext i8 %172 to i32*/
		Get_motion_code_169_173 = $signed(Get_motion_code_169_172);
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %173 = sext i8 %172 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		Get_motion_code_169_173_reg <= Get_motion_code_169_173;
		if (start == 1'b0 && ^(Get_motion_code_169_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_173_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %174 = shl i32 %50, %173*/
		Get_motion_code_169_174 = (Get_motion_code_Get_Bits1exit_50_reg <<< (Get_motion_code_169_173 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %174 = shl i32 %50, %173*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		Get_motion_code_169_174_reg <= Get_motion_code_169_174;
		if (start == 1'b0 && ^(Get_motion_code_169_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_174_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %175 = sub nsw i32 %49, %173*/
		Get_motion_code_169_175 = (Get_motion_code_Get_Bits1exit_49_reg - Get_motion_code_169_173);
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %175 = sub nsw i32 %49, %173*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		Get_motion_code_169_175_reg <= Get_motion_code_169_175;
		if (start == 1'b0 && ^(Get_motion_code_169_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_175_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %169*/
	/*   %176 = icmp slt i32 %175, 25*/
		Get_motion_code_169_176 = ($signed(Get_motion_code_169_175) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %169*/
	/*   %176 = icmp slt i32 %175, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		Get_motion_code_169_176_reg <= Get_motion_code_169_176;
		if (start == 1'b0 && ^(Get_motion_code_169_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_169_176_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_177_178 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_98)) begin
		Get_motion_code_177_178_reg <= Get_motion_code_177_178;
		if (start == 1'b0 && ^(Get_motion_code_177_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_177_178_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %177*/
	/*   %179 = icmp ult i8* %178, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_177_179 = (Get_motion_code_177_178 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %177*/
	/*   %179 = icmp ult i8* %178, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_98)) begin
		Get_motion_code_177_179_reg <= Get_motion_code_177_179;
		if (start == 1'b0 && ^(Get_motion_code_177_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_177_179_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %177*/
	/*   %180 = add nsw i32 %173, 24*/
		Get_motion_code_177_180 = (Get_motion_code_169_173_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %177*/
	/*   %180 = add nsw i32 %173, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		Get_motion_code_177_180_reg <= Get_motion_code_177_180;
		if (start == 1'b0 && ^(Get_motion_code_177_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_177_180_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %177*/
	/*   %181 = sub i32 %180, %49*/
		Get_motion_code_177_181 = (Get_motion_code_177_180 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %177*/
	/*   %181 = sub i32 %180, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		Get_motion_code_177_181_reg <= Get_motion_code_177_181;
		if (start == 1'b0 && ^(Get_motion_code_177_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_177_181_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %182 = add i32 %49, 8*/
		Get_motion_code_preheader1i34preheader_182 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %182 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99)) begin
		Get_motion_code_preheader1i34preheader_182_reg <= Get_motion_code_preheader1i34preheader_182;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34preheader_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34preheader_182_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %183 = sext i8 %172 to i32*/
		Get_motion_code_preheader1i34preheader_183 = $signed(Get_motion_code_169_172_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %183 = sext i8 %172 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99)) begin
		Get_motion_code_preheader1i34preheader_183_reg <= Get_motion_code_preheader1i34preheader_183;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34preheader_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34preheader_183_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %184 = sub i32 %182, %183*/
		Get_motion_code_preheader1i34preheader_184 = (Get_motion_code_preheader1i34preheader_182 - Get_motion_code_preheader1i34preheader_183);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %184 = sub i32 %182, %183*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99)) begin
		Get_motion_code_preheader1i34preheader_184_reg <= Get_motion_code_preheader1i34preheader_184;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34preheader_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34preheader_184_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %185 = add nsw i32 %183, 24*/
		Get_motion_code_preheader1i34preheader_185 = (Get_motion_code_preheader1i34preheader_183 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %185 = add nsw i32 %183, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99)) begin
		Get_motion_code_preheader1i34preheader_185_reg <= Get_motion_code_preheader1i34preheader_185;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34preheader_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34preheader_185_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %186 = sub i32 %185, %49*/
		Get_motion_code_preheader1i34preheader_186 = (Get_motion_code_preheader1i34preheader_185 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34.preheader*/
	/*   %186 = sub i32 %185, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99)) begin
		Get_motion_code_preheader1i34preheader_186_reg <= Get_motion_code_preheader1i34preheader_186;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34preheader_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34preheader_186_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %187 = add i32 %49, 8*/
		Get_motion_code_preheaderi31preheader_187 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %187 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100)) begin
		Get_motion_code_preheaderi31preheader_187_reg <= Get_motion_code_preheaderi31preheader_187;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31preheader_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31preheader_187_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %188 = sext i8 %172 to i32*/
		Get_motion_code_preheaderi31preheader_188 = $signed(Get_motion_code_169_172_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %188 = sext i8 %172 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100)) begin
		Get_motion_code_preheaderi31preheader_188_reg <= Get_motion_code_preheaderi31preheader_188;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31preheader_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31preheader_188_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %189 = sub i32 %187, %188*/
		Get_motion_code_preheaderi31preheader_189 = (Get_motion_code_preheaderi31preheader_187 - Get_motion_code_preheaderi31preheader_188);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %189 = sub i32 %187, %188*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100)) begin
		Get_motion_code_preheaderi31preheader_189_reg <= Get_motion_code_preheaderi31preheader_189;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31preheader_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31preheader_189_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %190 = add nsw i32 %188, 24*/
		Get_motion_code_preheaderi31preheader_190 = (Get_motion_code_preheaderi31preheader_188 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %190 = add nsw i32 %188, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100)) begin
		Get_motion_code_preheaderi31preheader_190_reg <= Get_motion_code_preheaderi31preheader_190;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31preheader_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31preheader_190_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %191 = sub i32 %190, %49*/
		Get_motion_code_preheaderi31preheader_191 = (Get_motion_code_preheaderi31preheader_190 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31.preheader*/
	/*   %191 = sub i32 %190, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100)) begin
		Get_motion_code_preheaderi31preheader_191_reg <= Get_motion_code_preheaderi31preheader_191;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31preheader_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31preheader_191_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar31 = phi i32 [ 0, %.preheader.i31.preheader ], [ %indvar.next32, %.preheader.i31 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi31_indvar31 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar31 = phi i32 [ 0, %.preheader.i31.preheader ], [ %indvar.next32, %.preheader.i31 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi31_201_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi31_indvar31 = Get_motion_code_preheaderi31_indvarnext32_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar31 = phi i32 [ 0, %.preheader.i31.preheader ], [ %indvar.next32, %.preheader.i31 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi31_indvar31_reg <= Get_motion_code_preheaderi31_indvar31;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_indvar31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_indvar31_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar31 = phi i32 [ 0, %.preheader.i31.preheader ], [ %indvar.next32, %.preheader.i31 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi31_201_reg == 1'd1))) begin
		Get_motion_code_preheaderi31_indvar31_reg <= Get_motion_code_preheaderi31_indvar31;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_indvar31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_indvar31_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %192 = phi i32 [ %174, %.preheader.i31.preheader ], [ %200, %.preheader.i31 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi31_192 = Get_motion_code_169_174_reg;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %192 = phi i32 [ %174, %.preheader.i31.preheader ], [ %200, %.preheader.i31 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi31_201_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi31_192 = Get_motion_code_preheaderi31_200;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %192 = phi i32 [ %174, %.preheader.i31.preheader ], [ %200, %.preheader.i31 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31preheader_100) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi31_192_reg <= Get_motion_code_preheaderi31_192;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_192_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %192 = phi i32 [ %174, %.preheader.i31.preheader ], [ %200, %.preheader.i31 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi31_201_reg == 1'd1))) begin
		Get_motion_code_preheaderi31_192_reg <= Get_motion_code_preheaderi31_192;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_192_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %scevgep33 = getelementptr i8* %178, i32 %indvar31*/
		Get_motion_code_preheaderi31_scevgep33 = (Get_motion_code_177_178_reg + (1 * Get_motion_code_preheaderi31_indvar31_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %scevgep33 = getelementptr i8* %178, i32 %indvar31*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		Get_motion_code_preheaderi31_scevgep33_reg <= Get_motion_code_preheaderi31_scevgep33;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %193 = shl i32 %indvar31, 3*/
		Get_motion_code_preheaderi31_193 = (Get_motion_code_preheaderi31_indvar31_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %193 = shl i32 %indvar31, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		Get_motion_code_preheaderi31_193_reg <= Get_motion_code_preheaderi31_193;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_193_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %194 = add i32 %189, %193*/
		Get_motion_code_preheaderi31_194 = (Get_motion_code_preheaderi31preheader_189_reg + Get_motion_code_preheaderi31_193);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %194 = add i32 %189, %193*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		Get_motion_code_preheaderi31_194_reg <= Get_motion_code_preheaderi31_194;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_194_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi31_195 = Get_motion_code_preheaderi31_195_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %195 = mul i32 %indvar31, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_102)) begin
		Get_motion_code_preheaderi31_195_reg <= Get_motion_code_preheaderi31_195;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_195_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %195 = mul i32 %indvar31, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_102)) begin
		Get_motion_code_preheaderi31_195_reg <= Get_motion_code_preheaderi31_195;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_195_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %196 = add i32 %191, %195*/
		Get_motion_code_preheaderi31_196 = (Get_motion_code_preheaderi31preheader_191_reg + Get_motion_code_preheaderi31_195);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %196 = add i32 %191, %195*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_102)) begin
		Get_motion_code_preheaderi31_196_reg <= Get_motion_code_preheaderi31_196;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_196_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
		Get_motion_code_preheaderi31_197 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103)) begin
		Get_motion_code_preheaderi31_197_reg <= Get_motion_code_preheaderi31_197;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_197_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %198 = zext i8 %197 to i32*/
		Get_motion_code_preheaderi31_198 = Get_motion_code_preheaderi31_197;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %198 = zext i8 %197 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103)) begin
		Get_motion_code_preheaderi31_198_reg <= Get_motion_code_preheaderi31_198;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_198_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %199 = shl i32 %198, %196*/
		Get_motion_code_preheaderi31_199 = (Get_motion_code_preheaderi31_198 <<< (Get_motion_code_preheaderi31_196_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %199 = shl i32 %198, %196*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103)) begin
		Get_motion_code_preheaderi31_199_reg <= Get_motion_code_preheaderi31_199;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_199_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %200 = or i32 %199, %192*/
		Get_motion_code_preheaderi31_200 = (Get_motion_code_preheaderi31_199 | Get_motion_code_preheaderi31_192_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %200 = or i32 %199, %192*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_103)) begin
		Get_motion_code_preheaderi31_200_reg <= Get_motion_code_preheaderi31_200;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_200_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %201 = icmp slt i32 %194, 25*/
		Get_motion_code_preheaderi31_201 = ($signed(Get_motion_code_preheaderi31_194) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %201 = icmp slt i32 %194, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		Get_motion_code_preheaderi31_201_reg <= Get_motion_code_preheaderi31_201;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_201_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar.next32 = add i32 %indvar31, 1*/
		Get_motion_code_preheaderi31_indvarnext32 = (Get_motion_code_preheaderi31_indvar31_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %indvar.next32 = add i32 %indvar31, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		Get_motion_code_preheaderi31_indvarnext32_reg <= Get_motion_code_preheaderi31_indvarnext32;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi31_indvarnext32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi31_indvarnext32_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %indvar40 = phi i32 [ 0, %.preheader1.i34.preheader ], [ %indvar.next41, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_indvar40 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %indvar40 = phi i32 [ 0, %.preheader1.i34.preheader ], [ %indvar.next41, %Fill_Buffer.exit.i40 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i34_indvar40 = Get_motion_code_Fill_Bufferexiti40_indvarnext41_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %indvar40 = phi i32 [ 0, %.preheader1.i34.preheader ], [ %indvar.next41, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_indvar40_reg <= Get_motion_code_preheader1i34_indvar40;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_indvar40_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %indvar40 = phi i32 [ 0, %.preheader1.i34.preheader ], [ %indvar.next41, %Fill_Buffer.exit.i40 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) begin
		Get_motion_code_preheader1i34_indvar40_reg <= Get_motion_code_preheader1i34_indvar40;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_indvar40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_indvar40_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %202 = phi i32 [ %174, %.preheader1.i34.preheader ], [ %215, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_202 = Get_motion_code_169_174_reg;
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %202 = phi i32 [ %174, %.preheader1.i34.preheader ], [ %215, %Fill_Buffer.exit.i40 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i34_202 = Get_motion_code_Fill_Bufferexiti40_215;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %202 = phi i32 [ %174, %.preheader1.i34.preheader ], [ %215, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_202_reg <= Get_motion_code_preheader1i34_202;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_202_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %202 = phi i32 [ %174, %.preheader1.i34.preheader ], [ %215, %Fill_Buffer.exit.i40 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) begin
		Get_motion_code_preheader1i34_202_reg <= Get_motion_code_preheader1i34_202;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_202_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %203 = phi i8* [ %178, %.preheader1.i34.preheader ], [ %211, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_203 = Get_motion_code_177_178_reg;
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %203 = phi i8* [ %178, %.preheader1.i34.preheader ], [ %211, %Fill_Buffer.exit.i40 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i34_203 = Get_motion_code_Fill_Bufferexiti40_211_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %203 = phi i8* [ %178, %.preheader1.i34.preheader ], [ %211, %Fill_Buffer.exit.i40 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34preheader_99) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i34_203_reg <= Get_motion_code_preheader1i34_203;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_203_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %203 = phi i8* [ %178, %.preheader1.i34.preheader ], [ %211, %Fill_Buffer.exit.i40 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti40_216_reg == 1'd1))) begin
		Get_motion_code_preheader1i34_203_reg <= Get_motion_code_preheader1i34_203;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_203_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %204 = shl i32 %indvar40, 3*/
		Get_motion_code_preheader1i34_204 = (Get_motion_code_preheader1i34_indvar40_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %204 = shl i32 %indvar40, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_104)) begin
		Get_motion_code_preheader1i34_204_reg <= Get_motion_code_preheader1i34_204;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_204_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %205 = add i32 %184, %204*/
		Get_motion_code_preheader1i34_205 = (Get_motion_code_preheader1i34preheader_184_reg + Get_motion_code_preheader1i34_204);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %205 = add i32 %184, %204*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_104)) begin
		Get_motion_code_preheader1i34_205_reg <= Get_motion_code_preheader1i34_205;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_205_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1i34_206 = Get_motion_code_preheader1i34_206_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %206 = mul i32 %indvar40, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_105)) begin
		Get_motion_code_preheader1i34_206_reg <= Get_motion_code_preheader1i34_206;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_206_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i34*/
	/*   %206 = mul i32 %indvar40, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_105)) begin
		Get_motion_code_preheader1i34_206_reg <= Get_motion_code_preheader1i34_206;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_206_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %207 = add i32 %186, %206*/
		Get_motion_code_preheader1i34_207 = (Get_motion_code_preheader1i34preheader_186_reg + Get_motion_code_preheader1i34_206);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %207 = add i32 %186, %206*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_105)) begin
		Get_motion_code_preheader1i34_207_reg <= Get_motion_code_preheader1i34_207;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_207_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %208 = icmp ult i8* %203, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1i34_208 = (Get_motion_code_preheader1i34_203_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %208 = icmp ult i8* %203, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_104)) begin
		Get_motion_code_preheader1i34_208_reg <= Get_motion_code_preheader1i34_208;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i34_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i34_208_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar34 = phi i32 [ 0, %.lr.ph.i.i.i38.preheader ], [ %indvar.next35, %.lr.ph.i.i.i38 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38preheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii38_indvar34 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar34 = phi i32 [ 0, %.lr.ph.i.i.i38.preheader ], [ %indvar.next35, %.lr.ph.i.i.i38 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_110) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii38_exitcond36_reg == 1'd0))) */ begin
		Get_motion_code_lrphiii38_indvar34 = Get_motion_code_lrphiii38_indvarnext35_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar34 = phi i32 [ 0, %.lr.ph.i.i.i38.preheader ], [ %indvar.next35, %.lr.ph.i.i.i38 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38preheader_106) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii38_indvar34_reg <= Get_motion_code_lrphiii38_indvar34;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_indvar34_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar34 = phi i32 [ 0, %.lr.ph.i.i.i38.preheader ], [ %indvar.next35, %.lr.ph.i.i.i38 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_110) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii38_exitcond36_reg == 1'd0))) begin
		Get_motion_code_lrphiii38_indvar34_reg <= Get_motion_code_lrphiii38_indvar34;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_indvar34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_indvar34_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %p2.02.i.i.i35 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar34*/
		Get_motion_code_lrphiii38_p202iii35 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiii38_indvar34_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %p2.02.i.i.i35 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar34*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		Get_motion_code_lrphiii38_p202iii35_reg <= Get_motion_code_lrphiii38_p202iii35;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_p202iii35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_p202iii35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %p1.01.i.i.i36 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar34*/
		Get_motion_code_lrphiii38_p101iii36 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiii38_indvar34_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %p1.01.i.i.i36 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar34*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		Get_motion_code_lrphiii38_p101iii36_reg <= Get_motion_code_lrphiii38_p101iii36;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_p101iii36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_p101iii36_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
		Get_motion_code_lrphiii38_209 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		Get_motion_code_lrphiii38_209_reg <= Get_motion_code_lrphiii38_209;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_209_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
		Get_motion_code_lrphiii38_indvarnext35 = (Get_motion_code_lrphiii38_indvar34_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %indvar.next35 = add i32 %indvar34, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		Get_motion_code_lrphiii38_indvarnext35_reg <= Get_motion_code_lrphiii38_indvarnext35;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_indvarnext35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_indvarnext35_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %exitcond36 = icmp eq i32 %indvar.next35, 2048*/
		Get_motion_code_lrphiii38_exitcond36 = (Get_motion_code_lrphiii38_indvarnext35 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %exitcond36 = icmp eq i32 %indvar.next35, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		Get_motion_code_lrphiii38_exitcond36_reg <= Get_motion_code_lrphiii38_exitcond36;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii38_exitcond36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii38_exitcond36_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %210 = phi i8* [ %203, %.preheader1.i34 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i40.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_105) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i34_208_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti40_210 = Get_motion_code_preheader1i34_203_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %210 = phi i8* [ %203, %.preheader1.i34 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i40.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40loopexit_111) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti40_210 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %210 = phi i8* [ %203, %.preheader1.i34 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i40.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i34_105) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i34_208_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti40_210_reg <= Get_motion_code_Fill_Bufferexiti40_210;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_210_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %210 = phi i8* [ %203, %.preheader1.i34 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i40.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40loopexit_111) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti40_210_reg <= Get_motion_code_Fill_Bufferexiti40_210;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_210_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %211 = getelementptr inbounds i8* %210, i32 1*/
		Get_motion_code_Fill_Bufferexiti40_211 = (Get_motion_code_Fill_Bufferexiti40_210_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %211 = getelementptr inbounds i8* %210, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		Get_motion_code_Fill_Bufferexiti40_211_reg <= Get_motion_code_Fill_Bufferexiti40_211;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_211_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexiti40_212 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114)) begin
		Get_motion_code_Fill_Bufferexiti40_212_reg <= Get_motion_code_Fill_Bufferexiti40_212;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_212_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %213 = zext i8 %212 to i32*/
		Get_motion_code_Fill_Bufferexiti40_213 = Get_motion_code_Fill_Bufferexiti40_212;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %213 = zext i8 %212 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114)) begin
		Get_motion_code_Fill_Bufferexiti40_213_reg <= Get_motion_code_Fill_Bufferexiti40_213;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_213_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %214 = shl i32 %213, %207*/
		Get_motion_code_Fill_Bufferexiti40_214 = (Get_motion_code_Fill_Bufferexiti40_213 <<< (Get_motion_code_preheader1i34_207_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %214 = shl i32 %213, %207*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114)) begin
		Get_motion_code_Fill_Bufferexiti40_214_reg <= Get_motion_code_Fill_Bufferexiti40_214;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_214_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %215 = or i32 %214, %202*/
		Get_motion_code_Fill_Bufferexiti40_215 = (Get_motion_code_Fill_Bufferexiti40_214 | Get_motion_code_preheader1i34_202_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %215 = or i32 %214, %202*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_114)) begin
		Get_motion_code_Fill_Bufferexiti40_215_reg <= Get_motion_code_Fill_Bufferexiti40_215;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_215_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %216 = icmp slt i32 %205, 25*/
		Get_motion_code_Fill_Bufferexiti40_216 = ($signed(Get_motion_code_preheader1i34_205_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %216 = icmp slt i32 %205, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		Get_motion_code_Fill_Bufferexiti40_216_reg <= Get_motion_code_Fill_Bufferexiti40_216;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_216_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %indvar.next41 = add i32 %indvar40, 1*/
		Get_motion_code_Fill_Bufferexiti40_indvarnext41 = (Get_motion_code_preheader1i34_indvar40_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %indvar.next41 = add i32 %indvar40, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		Get_motion_code_Fill_Bufferexiti40_indvarnext41_reg <= Get_motion_code_Fill_Bufferexiti40_indvarnext41;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti40_indvarnext41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti40_indvarnext41_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %217 = lshr i32 %181, 3*/
		Get_motion_code_loopexiti41_217 = (Get_motion_code_177_181_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %217 = lshr i32 %181, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_217_reg <= Get_motion_code_loopexiti41_217;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_217_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %218 = add nuw nsw i32 %217, 1*/
		Get_motion_code_loopexiti41_218 = (Get_motion_code_loopexiti41_217 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %218 = add nuw nsw i32 %217, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_218_reg <= Get_motion_code_loopexiti41_218;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_218_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %scevgep71 = getelementptr i8* %178, i32 %218*/
		Get_motion_code_loopexiti41_scevgep71 = (Get_motion_code_177_178_reg + (1 * Get_motion_code_loopexiti41_218_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %scevgep71 = getelementptr i8* %178, i32 %218*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		Get_motion_code_loopexiti41_scevgep71_reg <= Get_motion_code_loopexiti41_scevgep71;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %219 = and i32 %181, -8*/
		Get_motion_code_loopexiti41_219 = (Get_motion_code_177_181_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %219 = and i32 %181, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_219_reg <= Get_motion_code_loopexiti41_219;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_219_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %220 = add i32 %49, 8*/
		Get_motion_code_loopexiti41_220 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %220 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_220_reg <= Get_motion_code_loopexiti41_220;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_220_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %221 = sub i32 %220, %173*/
		Get_motion_code_loopexiti41_221 = (Get_motion_code_loopexiti41_220 - Get_motion_code_169_173_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %221 = sub i32 %220, %173*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_221_reg <= Get_motion_code_loopexiti41_221;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_221_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %222 = add i32 %221, %219*/
		Get_motion_code_loopexiti41_222 = (Get_motion_code_loopexiti41_221 + Get_motion_code_loopexiti41_219);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i41*/
	/*   %222 = add i32 %221, %219*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		Get_motion_code_loopexiti41_222_reg <= Get_motion_code_loopexiti41_222;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti41_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti41_222_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %223 = and i32 %181, -8*/
		Get_motion_code_loopexit2i43loopexit_223 = (Get_motion_code_177_181_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %223 = and i32 %181, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		Get_motion_code_loopexit2i43loopexit_223_reg <= Get_motion_code_loopexit2i43loopexit_223;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43loopexit_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43loopexit_223_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %224 = add i32 %49, %223*/
		Get_motion_code_loopexit2i43loopexit_224 = (Get_motion_code_Get_Bits1exit_49_reg + Get_motion_code_loopexit2i43loopexit_223);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %224 = add i32 %49, %223*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		Get_motion_code_loopexit2i43loopexit_224_reg <= Get_motion_code_loopexit2i43loopexit_224;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43loopexit_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43loopexit_224_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %225 = add i32 %224, 8*/
		Get_motion_code_loopexit2i43loopexit_225 = (Get_motion_code_loopexit2i43loopexit_224 + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %225 = add i32 %224, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		Get_motion_code_loopexit2i43loopexit_225_reg <= Get_motion_code_loopexit2i43loopexit_225;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43loopexit_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43loopexit_225_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %226 = sub i32 %225, %173*/
		Get_motion_code_loopexit2i43loopexit_226 = (Get_motion_code_loopexit2i43loopexit_225 - Get_motion_code_169_173_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   %226 = sub i32 %225, %173*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		Get_motion_code_loopexit2i43loopexit_226_reg <= Get_motion_code_loopexit2i43loopexit_226;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43loopexit_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43loopexit_226_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %227 = phi i32 [ %200, %.loopexit.i41 ], [ %215, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_227 = Get_motion_code_preheaderi31_200_reg;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %227 = phi i32 [ %200, %.loopexit.i41 ], [ %215, %.loopexit2.i43.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i43_227 = Get_motion_code_Fill_Bufferexiti40_215_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %227 = phi i32 [ %200, %.loopexit.i41 ], [ %215, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_227_reg <= Get_motion_code_loopexit2i43_227;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43_227_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %227 = phi i32 [ %200, %.loopexit.i41 ], [ %215, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_227_reg <= Get_motion_code_loopexit2i43_227;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43_227_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %Incnt.2.i42 = phi i32 [ %222, %.loopexit.i41 ], [ %226, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_Incnt2i42 = Get_motion_code_loopexiti41_222_reg;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %Incnt.2.i42 = phi i32 [ %222, %.loopexit.i41 ], [ %226, %.loopexit2.i43.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i43_Incnt2i42 = Get_motion_code_loopexit2i43loopexit_226_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %Incnt.2.i42 = phi i32 [ %222, %.loopexit.i41 ], [ %226, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_117) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_Incnt2i42_reg <= Get_motion_code_loopexit2i43_Incnt2i42;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43_Incnt2i42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43_Incnt2i42_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   %Incnt.2.i42 = phi i32 [ %222, %.loopexit.i41 ], [ %226, %.loopexit2.i43.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_119) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i43_Incnt2i42_reg <= Get_motion_code_loopexit2i43_Incnt2i42;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i43_Incnt2i42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i43_Incnt2i42_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %228 = phi i32 [ %174, %169 ], [ %227, %.loopexit2.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__169_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_169_176_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_228 = Get_motion_code_169_174_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %228 = phi i32 [ %174, %169 ], [ %227, %.loopexit2.i43 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit44_228 = Get_motion_code_loopexit2i43_227_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %228 = phi i32 [ %174, %169 ], [ %227, %.loopexit2.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__169_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_169_176_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_228_reg <= Get_motion_code_Flush_Bufferexit44_228;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_228_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %228 = phi i32 [ %174, %169 ], [ %227, %.loopexit2.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_121) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_228_reg <= Get_motion_code_Flush_Bufferexit44_228;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_228_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %229 = phi i32 [ %175, %169 ], [ %Incnt.2.i42, %.loopexit2.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__169_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_169_176_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_229 = Get_motion_code_169_175_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %229 = phi i32 [ %175, %169 ], [ %Incnt.2.i42, %.loopexit2.i43 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_121) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit44_229 = Get_motion_code_loopexit2i43_Incnt2i42_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %229 = phi i32 [ %175, %169 ], [ %Incnt.2.i42, %.loopexit2.i43 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__169_95) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_169_176_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_229_reg <= Get_motion_code_Flush_Bufferexit44_229;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_229_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %229 = phi i32 [ %175, %169 ], [ %Incnt.2.i42, %.loopexit2.i43 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_121) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit44_229_reg <= Get_motion_code_Flush_Bufferexit44_229;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_229_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %230 = shl i32 %228, 1*/
		Get_motion_code_Flush_Bufferexit44_230 = (Get_motion_code_Flush_Bufferexit44_228_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %230 = shl i32 %228, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		Get_motion_code_Flush_Bufferexit44_230_reg <= Get_motion_code_Flush_Bufferexit44_230;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_230_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %231 = add nsw i32 %229, -1*/
		Get_motion_code_Flush_Bufferexit44_231 = (Get_motion_code_Flush_Bufferexit44_229_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %231 = add nsw i32 %229, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		Get_motion_code_Flush_Bufferexit44_231_reg <= Get_motion_code_Flush_Bufferexit44_231;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_231_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %232 = icmp slt i32 %229, 26*/
		Get_motion_code_Flush_Bufferexit44_232 = ($signed(Get_motion_code_Flush_Bufferexit44_229_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   %232 = icmp slt i32 %229, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		Get_motion_code_Flush_Bufferexit44_232_reg <= Get_motion_code_Flush_Bufferexit44_232;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit44_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit44_232_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_233_234 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_126)) begin
		Get_motion_code_233_234_reg <= Get_motion_code_233_234;
		if (start == 1'b0 && ^(Get_motion_code_233_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_233_234_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %233*/
	/*   %235 = icmp ult i8* %234, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_233_235 = (Get_motion_code_233_234 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %233*/
	/*   %235 = icmp ult i8* %234, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_126)) begin
		Get_motion_code_233_235_reg <= Get_motion_code_233_235;
		if (start == 1'b0 && ^(Get_motion_code_233_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_233_235_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %233*/
	/*   %236 = sub i32 25, %229*/
		Get_motion_code_233_236 = (32'd25 - Get_motion_code_Flush_Bufferexit44_229_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %233*/
	/*   %236 = sub i32 25, %229*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_124)) begin
		Get_motion_code_233_236_reg <= Get_motion_code_233_236;
		if (start == 1'b0 && ^(Get_motion_code_233_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_233_236_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19.preheader*/
	/*   %237 = add i32 %229, 7*/
		Get_motion_code_preheader1iii19preheader_237 = (Get_motion_code_Flush_Bufferexit44_229_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19.preheader*/
	/*   %237 = add i32 %229, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127)) begin
		Get_motion_code_preheader1iii19preheader_237_reg <= Get_motion_code_preheader1iii19preheader_237;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19preheader_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19preheader_237_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19.preheader*/
	/*   %238 = sub i32 25, %229*/
		Get_motion_code_preheader1iii19preheader_238 = (32'd25 - Get_motion_code_Flush_Bufferexit44_229_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19.preheader*/
	/*   %238 = sub i32 25, %229*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127)) begin
		Get_motion_code_preheader1iii19preheader_238_reg <= Get_motion_code_preheader1iii19preheader_238;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19preheader_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19preheader_238_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %239 = add i32 %229, 7*/
		Get_motion_code_preheaderiii17preheader_239 = (Get_motion_code_Flush_Bufferexit44_229_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %239 = add i32 %229, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128)) begin
		Get_motion_code_preheaderiii17preheader_239_reg <= Get_motion_code_preheaderiii17preheader_239;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17preheader_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17preheader_239_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %240 = icmp sgt i32 %239, 25*/
		Get_motion_code_preheaderiii17preheader_240 = ($signed(Get_motion_code_preheaderiii17preheader_239) > $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %240 = icmp sgt i32 %239, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128)) begin
		Get_motion_code_preheaderiii17preheader_240_reg <= Get_motion_code_preheaderiii17preheader_240;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17preheader_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17preheader_240_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %smax69 = select i1 %240, i32 %239, i32 25*/
		Get_motion_code_preheaderiii17preheader_smax69 = (Get_motion_code_preheaderiii17preheader_240 ? Get_motion_code_preheaderiii17preheader_239 : 32'd25);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %smax69 = select i1 %240, i32 %239, i32 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128)) begin
		Get_motion_code_preheaderiii17preheader_smax69_reg <= Get_motion_code_preheaderiii17preheader_smax69;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17preheader_smax69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17preheader_smax69_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %241 = sub i32 25, %229*/
		Get_motion_code_preheaderiii17preheader_241 = (32'd25 - Get_motion_code_Flush_Bufferexit44_229_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17.preheader*/
	/*   %241 = sub i32 25, %229*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128)) begin
		Get_motion_code_preheaderiii17preheader_241_reg <= Get_motion_code_preheaderiii17preheader_241;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17preheader_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17preheader_241_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar20 = phi i32 [ %indvar.next21, %.preheader.i.i.i17 ], [ 0, %.preheader.i.i.i17.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii17_indvar20 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar20 = phi i32 [ %indvar.next21, %.preheader.i.i.i17 ], [ 0, %.preheader.i.i.i17.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii17_251_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii17_indvar20 = Get_motion_code_preheaderiii17_indvarnext21_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar20 = phi i32 [ %indvar.next21, %.preheader.i.i.i17 ], [ 0, %.preheader.i.i.i17.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii17_indvar20_reg <= Get_motion_code_preheaderiii17_indvar20;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_indvar20_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar20 = phi i32 [ %indvar.next21, %.preheader.i.i.i17 ], [ 0, %.preheader.i.i.i17.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii17_251_reg == 1'd1))) begin
		Get_motion_code_preheaderiii17_indvar20_reg <= Get_motion_code_preheaderiii17_indvar20;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_indvar20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_indvar20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %242 = phi i32 [ %250, %.preheader.i.i.i17 ], [ %230, %.preheader.i.i.i17.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii17_242 = Get_motion_code_Flush_Bufferexit44_230_reg;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %242 = phi i32 [ %250, %.preheader.i.i.i17 ], [ %230, %.preheader.i.i.i17.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii17_251_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii17_242 = Get_motion_code_preheaderiii17_250;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %242 = phi i32 [ %250, %.preheader.i.i.i17 ], [ %230, %.preheader.i.i.i17.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17preheader_128) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii17_242_reg <= Get_motion_code_preheaderiii17_242;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_242_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %242 = phi i32 [ %250, %.preheader.i.i.i17 ], [ %230, %.preheader.i.i.i17.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii17_251_reg == 1'd1))) begin
		Get_motion_code_preheaderiii17_242_reg <= Get_motion_code_preheaderiii17_242;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_242_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %scevgep22 = getelementptr i8* %234, i32 %indvar20*/
		Get_motion_code_preheaderiii17_scevgep22 = (Get_motion_code_233_234_reg + (1 * Get_motion_code_preheaderiii17_indvar20_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %scevgep22 = getelementptr i8* %234, i32 %indvar20*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		Get_motion_code_preheaderiii17_scevgep22_reg <= Get_motion_code_preheaderiii17_scevgep22;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %243 = shl i32 %indvar20, 3*/
		Get_motion_code_preheaderiii17_243 = (Get_motion_code_preheaderiii17_indvar20_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %243 = shl i32 %indvar20, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		Get_motion_code_preheaderiii17_243_reg <= Get_motion_code_preheaderiii17_243;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_243_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %244 = add i32 %239, %243*/
		Get_motion_code_preheaderiii17_244 = (Get_motion_code_preheaderiii17preheader_239_reg + Get_motion_code_preheaderiii17_243);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %244 = add i32 %239, %243*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		Get_motion_code_preheaderiii17_244_reg <= Get_motion_code_preheaderiii17_244;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_244_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderiii17_245 = Get_motion_code_preheaderiii17_245_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %245 = mul i32 %indvar20, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_130)) begin
		Get_motion_code_preheaderiii17_245_reg <= Get_motion_code_preheaderiii17_245;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_245_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %245 = mul i32 %indvar20, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_130)) begin
		Get_motion_code_preheaderiii17_245_reg <= Get_motion_code_preheaderiii17_245;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_245_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %246 = add i32 %241, %245*/
		Get_motion_code_preheaderiii17_246 = (Get_motion_code_preheaderiii17preheader_241_reg + Get_motion_code_preheaderiii17_245);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %246 = add i32 %241, %245*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_130)) begin
		Get_motion_code_preheaderiii17_246_reg <= Get_motion_code_preheaderiii17_246;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_246_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
		Get_motion_code_preheaderiii17_247 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131)) begin
		Get_motion_code_preheaderiii17_247_reg <= Get_motion_code_preheaderiii17_247;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_247_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %248 = zext i8 %247 to i32*/
		Get_motion_code_preheaderiii17_248 = Get_motion_code_preheaderiii17_247;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %248 = zext i8 %247 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131)) begin
		Get_motion_code_preheaderiii17_248_reg <= Get_motion_code_preheaderiii17_248;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_248_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %249 = shl i32 %248, %246*/
		Get_motion_code_preheaderiii17_249 = (Get_motion_code_preheaderiii17_248 <<< (Get_motion_code_preheaderiii17_246_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %249 = shl i32 %248, %246*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131)) begin
		Get_motion_code_preheaderiii17_249_reg <= Get_motion_code_preheaderiii17_249;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_249_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %250 = or i32 %249, %242*/
		Get_motion_code_preheaderiii17_250 = (Get_motion_code_preheaderiii17_249 | Get_motion_code_preheaderiii17_242_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %250 = or i32 %249, %242*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_131)) begin
		Get_motion_code_preheaderiii17_250_reg <= Get_motion_code_preheaderiii17_250;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_250_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %251 = icmp slt i32 %244, 25*/
		Get_motion_code_preheaderiii17_251 = ($signed(Get_motion_code_preheaderiii17_244) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %251 = icmp slt i32 %244, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		Get_motion_code_preheaderiii17_251_reg <= Get_motion_code_preheaderiii17_251;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_251_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar.next21 = add i32 %indvar20, 1*/
		Get_motion_code_preheaderiii17_indvarnext21 = (Get_motion_code_preheaderiii17_indvar20_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %indvar.next21 = add i32 %indvar20, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		Get_motion_code_preheaderiii17_indvarnext21_reg <= Get_motion_code_preheaderiii17_indvarnext21;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii17_indvarnext21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii17_indvarnext21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %indvar29 = phi i32 [ 0, %.preheader1.i.i.i19.preheader ], [ %indvar.next30, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_indvar29 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %indvar29 = phi i32 [ 0, %.preheader1.i.i.i19.preheader ], [ %indvar.next30, %Fill_Buffer.exit.i.i.i25 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii19_indvar29 = Get_motion_code_Fill_Bufferexitiii25_indvarnext30_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %indvar29 = phi i32 [ 0, %.preheader1.i.i.i19.preheader ], [ %indvar.next30, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_indvar29_reg <= Get_motion_code_preheader1iii19_indvar29;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_indvar29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_indvar29_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %indvar29 = phi i32 [ 0, %.preheader1.i.i.i19.preheader ], [ %indvar.next30, %Fill_Buffer.exit.i.i.i25 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) begin
		Get_motion_code_preheader1iii19_indvar29_reg <= Get_motion_code_preheader1iii19_indvar29;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_indvar29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_indvar29_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %252 = phi i32 [ %230, %.preheader1.i.i.i19.preheader ], [ %265, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_252 = Get_motion_code_Flush_Bufferexit44_230_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %252 = phi i32 [ %230, %.preheader1.i.i.i19.preheader ], [ %265, %Fill_Buffer.exit.i.i.i25 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii19_252 = Get_motion_code_Fill_Bufferexitiii25_265;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %252 = phi i32 [ %230, %.preheader1.i.i.i19.preheader ], [ %265, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_252_reg <= Get_motion_code_preheader1iii19_252;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_252_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %252 = phi i32 [ %230, %.preheader1.i.i.i19.preheader ], [ %265, %Fill_Buffer.exit.i.i.i25 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) begin
		Get_motion_code_preheader1iii19_252_reg <= Get_motion_code_preheader1iii19_252;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_252_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %253 = phi i8* [ %234, %.preheader1.i.i.i19.preheader ], [ %261, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_253 = Get_motion_code_233_234_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %253 = phi i8* [ %234, %.preheader1.i.i.i19.preheader ], [ %261, %Fill_Buffer.exit.i.i.i25 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii19_253 = Get_motion_code_Fill_Bufferexitiii25_261_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %253 = phi i8* [ %234, %.preheader1.i.i.i19.preheader ], [ %261, %Fill_Buffer.exit.i.i.i25 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19preheader_127) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii19_253_reg <= Get_motion_code_preheader1iii19_253;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_253_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %253 = phi i8* [ %234, %.preheader1.i.i.i19.preheader ], [ %261, %Fill_Buffer.exit.i.i.i25 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii25_266_reg == 1'd1))) begin
		Get_motion_code_preheader1iii19_253_reg <= Get_motion_code_preheader1iii19_253;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_253_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %254 = shl i32 %indvar29, 3*/
		Get_motion_code_preheader1iii19_254 = (Get_motion_code_preheader1iii19_indvar29_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %254 = shl i32 %indvar29, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_132)) begin
		Get_motion_code_preheader1iii19_254_reg <= Get_motion_code_preheader1iii19_254;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_254_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %255 = add i32 %237, %254*/
		Get_motion_code_preheader1iii19_255 = (Get_motion_code_preheader1iii19preheader_237_reg + Get_motion_code_preheader1iii19_254);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %255 = add i32 %237, %254*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_132)) begin
		Get_motion_code_preheader1iii19_255_reg <= Get_motion_code_preheader1iii19_255;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_255_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1iii19_256 = Get_motion_code_preheader1iii19_256_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %256 = mul i32 %indvar29, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_133)) begin
		Get_motion_code_preheader1iii19_256_reg <= Get_motion_code_preheader1iii19_256;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_256_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %256 = mul i32 %indvar29, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_133)) begin
		Get_motion_code_preheader1iii19_256_reg <= Get_motion_code_preheader1iii19_256;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_256_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %257 = add i32 %238, %256*/
		Get_motion_code_preheader1iii19_257 = (Get_motion_code_preheader1iii19preheader_238_reg + Get_motion_code_preheader1iii19_256);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %257 = add i32 %238, %256*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_133)) begin
		Get_motion_code_preheader1iii19_257_reg <= Get_motion_code_preheader1iii19_257;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_257_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %258 = icmp ult i8* %253, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1iii19_258 = (Get_motion_code_preheader1iii19_253_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %258 = icmp ult i8* %253, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_132)) begin
		Get_motion_code_preheader1iii19_258_reg <= Get_motion_code_preheader1iii19_258;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii19_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii19_258_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar23 = phi i32 [ 0, %.lr.ph.i.i.i.i.i23.preheader ], [ %indvar.next24, %.lr.ph.i.i.i.i.i23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23preheader_134) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii23_indvar23 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar23 = phi i32 [ 0, %.lr.ph.i.i.i.i.i23.preheader ], [ %indvar.next24, %.lr.ph.i.i.i.i.i23 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_138) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii23_exitcond25_reg == 1'd0))) */ begin
		Get_motion_code_lrphiiiii23_indvar23 = Get_motion_code_lrphiiiii23_indvarnext24_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar23 = phi i32 [ 0, %.lr.ph.i.i.i.i.i23.preheader ], [ %indvar.next24, %.lr.ph.i.i.i.i.i23 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23preheader_134) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii23_indvar23_reg <= Get_motion_code_lrphiiiii23_indvar23;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_indvar23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_indvar23_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar23 = phi i32 [ 0, %.lr.ph.i.i.i.i.i23.preheader ], [ %indvar.next24, %.lr.ph.i.i.i.i.i23 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_138) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii23_exitcond25_reg == 1'd0))) begin
		Get_motion_code_lrphiiiii23_indvar23_reg <= Get_motion_code_lrphiiiii23_indvar23;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_indvar23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_indvar23_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %p2.02.i.i.i.i.i20 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar23*/
		Get_motion_code_lrphiiiii23_p202iiiii20 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiiiii23_indvar23_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %p2.02.i.i.i.i.i20 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar23*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		Get_motion_code_lrphiiiii23_p202iiiii20_reg <= Get_motion_code_lrphiiiii23_p202iiiii20;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_p202iiiii20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_p202iiiii20_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %p1.01.i.i.i.i.i21 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar23*/
		Get_motion_code_lrphiiiii23_p101iiiii21 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiiiii23_indvar23_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %p1.01.i.i.i.i.i21 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar23*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		Get_motion_code_lrphiiiii23_p101iiiii21_reg <= Get_motion_code_lrphiiiii23_p101iiiii21;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_p101iiiii21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_p101iiiii21_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
		Get_motion_code_lrphiiiii23_259 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		Get_motion_code_lrphiiiii23_259_reg <= Get_motion_code_lrphiiiii23_259;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_259_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar.next24 = add i32 %indvar23, 1*/
		Get_motion_code_lrphiiiii23_indvarnext24 = (Get_motion_code_lrphiiiii23_indvar23_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %indvar.next24 = add i32 %indvar23, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		Get_motion_code_lrphiiiii23_indvarnext24_reg <= Get_motion_code_lrphiiiii23_indvarnext24;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_indvarnext24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_indvarnext24_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %exitcond25 = icmp eq i32 %indvar.next24, 2048*/
		Get_motion_code_lrphiiiii23_exitcond25 = (Get_motion_code_lrphiiiii23_indvarnext24 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %exitcond25 = icmp eq i32 %indvar.next24, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		Get_motion_code_lrphiiiii23_exitcond25_reg <= Get_motion_code_lrphiiiii23_exitcond25;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii23_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii23_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %260 = phi i8* [ %253, %.preheader1.i.i.i19 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i25.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_133) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii19_258_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii25_260 = Get_motion_code_preheader1iii19_253_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %260 = phi i8* [ %253, %.preheader1.i.i.i19 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i25.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25loopexit_139) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitiii25_260 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %260 = phi i8* [ %253, %.preheader1.i.i.i19 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i25.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii19_133) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii19_258_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii25_260_reg <= Get_motion_code_Fill_Bufferexitiii25_260;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_260_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %260 = phi i8* [ %253, %.preheader1.i.i.i19 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i25.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25loopexit_139) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitiii25_260_reg <= Get_motion_code_Fill_Bufferexitiii25_260;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_260_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %261 = getelementptr inbounds i8* %260, i32 1*/
		Get_motion_code_Fill_Bufferexitiii25_261 = (Get_motion_code_Fill_Bufferexitiii25_260_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %261 = getelementptr inbounds i8* %260, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		Get_motion_code_Fill_Bufferexitiii25_261_reg <= Get_motion_code_Fill_Bufferexitiii25_261;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_261_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexitiii25_262 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142)) begin
		Get_motion_code_Fill_Bufferexitiii25_262_reg <= Get_motion_code_Fill_Bufferexitiii25_262;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_262_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %263 = zext i8 %262 to i32*/
		Get_motion_code_Fill_Bufferexitiii25_263 = Get_motion_code_Fill_Bufferexitiii25_262;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %263 = zext i8 %262 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142)) begin
		Get_motion_code_Fill_Bufferexitiii25_263_reg <= Get_motion_code_Fill_Bufferexitiii25_263;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_263_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %264 = shl i32 %263, %257*/
		Get_motion_code_Fill_Bufferexitiii25_264 = (Get_motion_code_Fill_Bufferexitiii25_263 <<< (Get_motion_code_preheader1iii19_257_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %264 = shl i32 %263, %257*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142)) begin
		Get_motion_code_Fill_Bufferexitiii25_264_reg <= Get_motion_code_Fill_Bufferexitiii25_264;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_264_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %265 = or i32 %264, %252*/
		Get_motion_code_Fill_Bufferexitiii25_265 = (Get_motion_code_Fill_Bufferexitiii25_264 | Get_motion_code_preheader1iii19_252_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %265 = or i32 %264, %252*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_142)) begin
		Get_motion_code_Fill_Bufferexitiii25_265_reg <= Get_motion_code_Fill_Bufferexitiii25_265;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_265_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %266 = icmp slt i32 %255, 25*/
		Get_motion_code_Fill_Bufferexitiii25_266 = ($signed(Get_motion_code_preheader1iii19_255_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %266 = icmp slt i32 %255, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		Get_motion_code_Fill_Bufferexitiii25_266_reg <= Get_motion_code_Fill_Bufferexitiii25_266;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_266_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %indvar.next30 = add i32 %indvar29, 1*/
		Get_motion_code_Fill_Bufferexitiii25_indvarnext30 = (Get_motion_code_preheader1iii19_indvar29_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %indvar.next30 = add i32 %indvar29, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		Get_motion_code_Fill_Bufferexitiii25_indvarnext30_reg <= Get_motion_code_Fill_Bufferexitiii25_indvarnext30;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii25_indvarnext30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii25_indvarnext30_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %267 = sub i32 %smax69, %229*/
		Get_motion_code_loopexitiii26_267 = (Get_motion_code_preheaderiii17preheader_smax69_reg - Get_motion_code_Flush_Bufferexit44_229_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %267 = sub i32 %smax69, %229*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		Get_motion_code_loopexitiii26_267_reg <= Get_motion_code_loopexitiii26_267;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_267_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %268 = lshr i32 %267, 3*/
		Get_motion_code_loopexitiii26_268 = (Get_motion_code_loopexitiii26_267 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %268 = lshr i32 %267, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		Get_motion_code_loopexitiii26_268_reg <= Get_motion_code_loopexitiii26_268;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_268_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %269 = add nuw nsw i32 %268, 1*/
		Get_motion_code_loopexitiii26_269 = (Get_motion_code_loopexitiii26_268 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %269 = add nuw nsw i32 %268, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		Get_motion_code_loopexitiii26_269_reg <= Get_motion_code_loopexitiii26_269;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_269_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %scevgep70 = getelementptr i8* %234, i32 %269*/
		Get_motion_code_loopexitiii26_scevgep70 = (Get_motion_code_233_234_reg + (1 * Get_motion_code_loopexitiii26_269_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %scevgep70 = getelementptr i8* %234, i32 %269*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		Get_motion_code_loopexitiii26_scevgep70_reg <= Get_motion_code_loopexitiii26_scevgep70;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %270 = and i32 %236, -8*/
		Get_motion_code_loopexitiii26_270 = (Get_motion_code_233_236_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %270 = and i32 %236, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		Get_motion_code_loopexitiii26_270_reg <= Get_motion_code_loopexitiii26_270;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_270_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %271 = add i32 %239, %270*/
		Get_motion_code_loopexitiii26_271 = (Get_motion_code_preheaderiii17preheader_239_reg + Get_motion_code_loopexitiii26_270);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   %271 = add i32 %239, %270*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		Get_motion_code_loopexitiii26_271_reg <= Get_motion_code_loopexitiii26_271;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii26_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii26_271_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %272 = and i32 %236, -8*/
		Get_motion_code_loopexit2iloopexitii27_272 = (Get_motion_code_233_236_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %272 = and i32 %236, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		Get_motion_code_loopexit2iloopexitii27_272_reg <= Get_motion_code_loopexit2iloopexitii27_272;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii27_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii27_272_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %273 = add i32 %229, 7*/
		Get_motion_code_loopexit2iloopexitii27_273 = (Get_motion_code_Flush_Bufferexit44_229_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %273 = add i32 %229, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		Get_motion_code_loopexit2iloopexitii27_273_reg <= Get_motion_code_loopexit2iloopexitii27_273;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii27_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii27_273_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %274 = add i32 %273, %272*/
		Get_motion_code_loopexit2iloopexitii27_274 = (Get_motion_code_loopexit2iloopexitii27_273 + Get_motion_code_loopexit2iloopexitii27_272);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   %274 = add i32 %273, %272*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		Get_motion_code_loopexit2iloopexitii27_274_reg <= Get_motion_code_loopexit2iloopexitii27_274;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii27_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii27_274_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   %Incnt.2.i.i.i28 = phi i32 [ %271, %.loopexit.i.i.i26 ], [ %274, %.loopexit2.i.loopexit.i.i27 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii29_Incnt2iii28 = Get_motion_code_loopexitiii26_271_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   %Incnt.2.i.i.i28 = phi i32 [ %271, %.loopexit.i.i.i26 ], [ %274, %.loopexit2.i.loopexit.i.i27 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_147) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2iii29_Incnt2iii28 = Get_motion_code_loopexit2iloopexitii27_274_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   %Incnt.2.i.i.i28 = phi i32 [ %271, %.loopexit.i.i.i26 ], [ %274, %.loopexit2.i.loopexit.i.i27 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_145) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii29_Incnt2iii28_reg <= Get_motion_code_loopexit2iii29_Incnt2iii28;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii29_Incnt2iii28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii29_Incnt2iii28_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   %Incnt.2.i.i.i28 = phi i32 [ %271, %.loopexit.i.i.i26 ], [ %274, %.loopexit2.i.loopexit.i.i27 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_147) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii29_Incnt2iii28_reg <= Get_motion_code_loopexit2iii29_Incnt2iii28;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii29_Incnt2iii28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii29_Incnt2iii28_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %275 = icmp slt i32 %228, 0*/
		Get_motion_code_Get_Bits1exit30_275 = ($signed(Get_motion_code_Flush_Bufferexit44_228_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %275 = icmp slt i32 %228, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150)) begin
		Get_motion_code_Get_Bits1exit30_275_reg <= Get_motion_code_Get_Bits1exit30_275;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_275_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %276 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %170, i32 0*/
		Get_motion_code_Get_Bits1exit30_276 = (1'd0 | (2 * Get_motion_code_169_170_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %276 = getelementptr inbounds [8 x [2 x i8]]* @MVtab1, i32 0, i32 %170, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150)) begin
		Get_motion_code_Get_Bits1exit30_276_reg <= Get_motion_code_Get_Bits1exit30_276;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_276_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %277 = load i8* %276, align 1, !tbaa !7*/
		Get_motion_code_Get_Bits1exit30_277 = MVtab1_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %277 = load i8* %276, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151)) begin
		Get_motion_code_Get_Bits1exit30_277_reg <= Get_motion_code_Get_Bits1exit30_277;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_277) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_277_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %278 = sext i8 %277 to i32*/
		Get_motion_code_Get_Bits1exit30_278 = $signed(Get_motion_code_Get_Bits1exit30_277);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %278 = sext i8 %277 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151)) begin
		Get_motion_code_Get_Bits1exit30_278_reg <= Get_motion_code_Get_Bits1exit30_278;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_278_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %279 = sub nsw i32 0, %278*/
		Get_motion_code_Get_Bits1exit30_279 = (32'd0 - Get_motion_code_Get_Bits1exit30_278);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %279 = sub nsw i32 0, %278*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151)) begin
		Get_motion_code_Get_Bits1exit30_279_reg <= Get_motion_code_Get_Bits1exit30_279;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_279_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %280 = select i1 %275, i32 %279, i32 %278*/
		Get_motion_code_Get_Bits1exit30_280 = (Get_motion_code_Get_Bits1exit30_275_reg ? Get_motion_code_Get_Bits1exit30_279 : Get_motion_code_Get_Bits1exit30_278);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %280 = select i1 %275, i32 %279, i32 %278*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151)) begin
		Get_motion_code_Get_Bits1exit30_280_reg <= Get_motion_code_Get_Bits1exit30_280;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit30_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit30_280_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %281*/
	/*   %282 = add nsw i32 %53, -12*/
		Get_motion_code_281_282 = (Get_motion_code_52_53_reg + -32'd12);
end
always @(posedge clk) begin
	/* Get_motion_code: %281*/
	/*   %282 = add nsw i32 %53, -12*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__281_152)) begin
		Get_motion_code_281_282_reg <= Get_motion_code_281_282;
		if (start == 1'b0 && ^(Get_motion_code_281_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_281_282_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %281*/
	/*   %283 = icmp slt i32 %282, 0*/
		Get_motion_code_281_283 = ($signed(Get_motion_code_281_282) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %281*/
	/*   %283 = icmp slt i32 %282, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__281_152)) begin
		Get_motion_code_281_283_reg <= Get_motion_code_281_283;
		if (start == 1'b0 && ^(Get_motion_code_281_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_281_283_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %285 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %282, i32 1*/
		Get_motion_code_284_285 = (1'd0 | ((2 * Get_motion_code_281_282_reg) + (1 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %285 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %282, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_153)) begin
		Get_motion_code_284_285_reg <= Get_motion_code_284_285;
		if (start == 1'b0 && ^(Get_motion_code_284_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_285_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %286 = load i8* %285, align 1, !tbaa !7*/
		Get_motion_code_284_286 = MVtab2_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %286 = load i8* %285, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		Get_motion_code_284_286_reg <= Get_motion_code_284_286;
		if (start == 1'b0 && ^(Get_motion_code_284_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_286_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %287 = sext i8 %286 to i32*/
		Get_motion_code_284_287 = $signed(Get_motion_code_284_286);
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %287 = sext i8 %286 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		Get_motion_code_284_287_reg <= Get_motion_code_284_287;
		if (start == 1'b0 && ^(Get_motion_code_284_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_287_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %288 = shl i32 %50, %287*/
		Get_motion_code_284_288 = (Get_motion_code_Get_Bits1exit_50_reg <<< (Get_motion_code_284_287 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %288 = shl i32 %50, %287*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		Get_motion_code_284_288_reg <= Get_motion_code_284_288;
		if (start == 1'b0 && ^(Get_motion_code_284_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_288_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %289 = sub nsw i32 %49, %287*/
		Get_motion_code_284_289 = (Get_motion_code_Get_Bits1exit_49_reg - Get_motion_code_284_287);
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %289 = sub nsw i32 %49, %287*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		Get_motion_code_284_289_reg <= Get_motion_code_284_289;
		if (start == 1'b0 && ^(Get_motion_code_284_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_289_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %284*/
	/*   %290 = icmp slt i32 %289, 25*/
		Get_motion_code_284_290 = ($signed(Get_motion_code_284_289) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %284*/
	/*   %290 = icmp slt i32 %289, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		Get_motion_code_284_290_reg <= Get_motion_code_284_290;
		if (start == 1'b0 && ^(Get_motion_code_284_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_284_290_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_291_292 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_158)) begin
		Get_motion_code_291_292_reg <= Get_motion_code_291_292;
		if (start == 1'b0 && ^(Get_motion_code_291_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_291_292_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %291*/
	/*   %293 = icmp ult i8* %292, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_291_293 = (Get_motion_code_291_292 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %291*/
	/*   %293 = icmp ult i8* %292, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_158)) begin
		Get_motion_code_291_293_reg <= Get_motion_code_291_293;
		if (start == 1'b0 && ^(Get_motion_code_291_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_291_293_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %291*/
	/*   %294 = add nsw i32 %287, 24*/
		Get_motion_code_291_294 = (Get_motion_code_284_287_reg + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %291*/
	/*   %294 = add nsw i32 %287, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		Get_motion_code_291_294_reg <= Get_motion_code_291_294;
		if (start == 1'b0 && ^(Get_motion_code_291_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_291_294_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %291*/
	/*   %295 = sub i32 %294, %49*/
		Get_motion_code_291_295 = (Get_motion_code_291_294 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %291*/
	/*   %295 = sub i32 %294, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		Get_motion_code_291_295_reg <= Get_motion_code_291_295;
		if (start == 1'b0 && ^(Get_motion_code_291_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_291_295_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %296 = add i32 %49, 8*/
		Get_motion_code_preheader1ipreheader_296 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %296 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159)) begin
		Get_motion_code_preheader1ipreheader_296_reg <= Get_motion_code_preheader1ipreheader_296;
		if (start == 1'b0 && ^(Get_motion_code_preheader1ipreheader_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1ipreheader_296_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %297 = sext i8 %286 to i32*/
		Get_motion_code_preheader1ipreheader_297 = $signed(Get_motion_code_284_286_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %297 = sext i8 %286 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159)) begin
		Get_motion_code_preheader1ipreheader_297_reg <= Get_motion_code_preheader1ipreheader_297;
		if (start == 1'b0 && ^(Get_motion_code_preheader1ipreheader_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1ipreheader_297_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %298 = sub i32 %296, %297*/
		Get_motion_code_preheader1ipreheader_298 = (Get_motion_code_preheader1ipreheader_296 - Get_motion_code_preheader1ipreheader_297);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %298 = sub i32 %296, %297*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159)) begin
		Get_motion_code_preheader1ipreheader_298_reg <= Get_motion_code_preheader1ipreheader_298;
		if (start == 1'b0 && ^(Get_motion_code_preheader1ipreheader_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1ipreheader_298_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %299 = add nsw i32 %297, 24*/
		Get_motion_code_preheader1ipreheader_299 = (Get_motion_code_preheader1ipreheader_297 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %299 = add nsw i32 %297, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159)) begin
		Get_motion_code_preheader1ipreheader_299_reg <= Get_motion_code_preheader1ipreheader_299;
		if (start == 1'b0 && ^(Get_motion_code_preheader1ipreheader_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1ipreheader_299_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %300 = sub i32 %299, %49*/
		Get_motion_code_preheader1ipreheader_300 = (Get_motion_code_preheader1ipreheader_299 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.preheader*/
	/*   %300 = sub i32 %299, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159)) begin
		Get_motion_code_preheader1ipreheader_300_reg <= Get_motion_code_preheader1ipreheader_300;
		if (start == 1'b0 && ^(Get_motion_code_preheader1ipreheader_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1ipreheader_300_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %301 = add i32 %49, 8*/
		Get_motion_code_preheaderipreheader_301 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %301 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160)) begin
		Get_motion_code_preheaderipreheader_301_reg <= Get_motion_code_preheaderipreheader_301;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_301_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %302 = sext i8 %286 to i32*/
		Get_motion_code_preheaderipreheader_302 = $signed(Get_motion_code_284_286_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %302 = sext i8 %286 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160)) begin
		Get_motion_code_preheaderipreheader_302_reg <= Get_motion_code_preheaderipreheader_302;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_302_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %303 = sub i32 %301, %302*/
		Get_motion_code_preheaderipreheader_303 = (Get_motion_code_preheaderipreheader_301 - Get_motion_code_preheaderipreheader_302);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %303 = sub i32 %301, %302*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160)) begin
		Get_motion_code_preheaderipreheader_303_reg <= Get_motion_code_preheaderipreheader_303;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_303_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %304 = add nsw i32 %302, 24*/
		Get_motion_code_preheaderipreheader_304 = (Get_motion_code_preheaderipreheader_302 + 32'd24);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %304 = add nsw i32 %302, 24*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160)) begin
		Get_motion_code_preheaderipreheader_304_reg <= Get_motion_code_preheaderipreheader_304;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_304_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %305 = sub i32 %304, %49*/
		Get_motion_code_preheaderipreheader_305 = (Get_motion_code_preheaderipreheader_304 - Get_motion_code_Get_Bits1exit_49_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.preheader*/
	/*   %305 = sub i32 %304, %49*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160)) begin
		Get_motion_code_preheaderipreheader_305_reg <= Get_motion_code_preheaderipreheader_305;
		if (start == 1'b0 && ^(Get_motion_code_preheaderipreheader_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderipreheader_305_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar53 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next54, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_indvar53 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar53 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next54, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_315_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi_indvar53 = Get_motion_code_preheaderi_indvarnext54_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar53 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next54, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_indvar53_reg <= Get_motion_code_preheaderi_indvar53;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvar53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvar53_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar53 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next54, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_315_reg == 1'd1))) begin
		Get_motion_code_preheaderi_indvar53_reg <= Get_motion_code_preheaderi_indvar53;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvar53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvar53_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %306 = phi i32 [ %288, %.preheader.i.preheader ], [ %314, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_306 = Get_motion_code_284_288_reg;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %306 = phi i32 [ %288, %.preheader.i.preheader ], [ %314, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_315_reg == 1'd1))) */ begin
		Get_motion_code_preheaderi_306 = Get_motion_code_preheaderi_314;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %306 = phi i32 [ %288, %.preheader.i.preheader ], [ %314, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderipreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderi_306_reg <= Get_motion_code_preheaderi_306;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_306_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %306 = phi i32 [ %288, %.preheader.i.preheader ], [ %314, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderi_315_reg == 1'd1))) begin
		Get_motion_code_preheaderi_306_reg <= Get_motion_code_preheaderi_306;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_306_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %scevgep55 = getelementptr i8* %292, i32 %indvar53*/
		Get_motion_code_preheaderi_scevgep55 = (Get_motion_code_291_292_reg + (1 * Get_motion_code_preheaderi_indvar53_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %scevgep55 = getelementptr i8* %292, i32 %indvar53*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		Get_motion_code_preheaderi_scevgep55_reg <= Get_motion_code_preheaderi_scevgep55;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_scevgep55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_scevgep55_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %307 = shl i32 %indvar53, 3*/
		Get_motion_code_preheaderi_307 = (Get_motion_code_preheaderi_indvar53_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %307 = shl i32 %indvar53, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		Get_motion_code_preheaderi_307_reg <= Get_motion_code_preheaderi_307;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_307_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %308 = add i32 %303, %307*/
		Get_motion_code_preheaderi_308 = (Get_motion_code_preheaderipreheader_303_reg + Get_motion_code_preheaderi_307);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %308 = add i32 %303, %307*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		Get_motion_code_preheaderi_308_reg <= Get_motion_code_preheaderi_308;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_308_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderi_309 = Get_motion_code_preheaderi_309_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %309 = mul i32 %indvar53, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_162)) begin
		Get_motion_code_preheaderi_309_reg <= Get_motion_code_preheaderi_309;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_309_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %309 = mul i32 %indvar53, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_162)) begin
		Get_motion_code_preheaderi_309_reg <= Get_motion_code_preheaderi_309;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_309_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %310 = add i32 %305, %309*/
		Get_motion_code_preheaderi_310 = (Get_motion_code_preheaderipreheader_305_reg + Get_motion_code_preheaderi_309);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %310 = add i32 %305, %309*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_162)) begin
		Get_motion_code_preheaderi_310_reg <= Get_motion_code_preheaderi_310;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_310_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
		Get_motion_code_preheaderi_311 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163)) begin
		Get_motion_code_preheaderi_311_reg <= Get_motion_code_preheaderi_311;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_311_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %312 = zext i8 %311 to i32*/
		Get_motion_code_preheaderi_312 = Get_motion_code_preheaderi_311;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %312 = zext i8 %311 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163)) begin
		Get_motion_code_preheaderi_312_reg <= Get_motion_code_preheaderi_312;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_312_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %313 = shl i32 %312, %310*/
		Get_motion_code_preheaderi_313 = (Get_motion_code_preheaderi_312 <<< (Get_motion_code_preheaderi_310_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %313 = shl i32 %312, %310*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163)) begin
		Get_motion_code_preheaderi_313_reg <= Get_motion_code_preheaderi_313;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_313_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %314 = or i32 %313, %306*/
		Get_motion_code_preheaderi_314 = (Get_motion_code_preheaderi_313 | Get_motion_code_preheaderi_306_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %314 = or i32 %313, %306*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_163)) begin
		Get_motion_code_preheaderi_314_reg <= Get_motion_code_preheaderi_314;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_314_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %315 = icmp slt i32 %308, 25*/
		Get_motion_code_preheaderi_315 = ($signed(Get_motion_code_preheaderi_308) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %315 = icmp slt i32 %308, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		Get_motion_code_preheaderi_315_reg <= Get_motion_code_preheaderi_315;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_315_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar.next54 = add i32 %indvar53, 1*/
		Get_motion_code_preheaderi_indvarnext54 = (Get_motion_code_preheaderi_indvar53_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %indvar.next54 = add i32 %indvar53, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		Get_motion_code_preheaderi_indvarnext54_reg <= Get_motion_code_preheaderi_indvarnext54;
		if (start == 1'b0 && ^(Get_motion_code_preheaderi_indvarnext54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderi_indvarnext54_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar62 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next63, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_indvar62 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar62 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next63, %Fill_Buffer.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i_indvar62 = Get_motion_code_Fill_Bufferexiti_indvarnext63_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar62 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next63, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_indvar62_reg <= Get_motion_code_preheader1i_indvar62;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_indvar62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_indvar62_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %indvar62 = phi i32 [ 0, %.preheader1.i.preheader ], [ %indvar.next63, %Fill_Buffer.exit.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) begin
		Get_motion_code_preheader1i_indvar62_reg <= Get_motion_code_preheader1i_indvar62;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_indvar62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_indvar62_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %316 = phi i32 [ %288, %.preheader1.i.preheader ], [ %329, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_316 = Get_motion_code_284_288_reg;
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %316 = phi i32 [ %288, %.preheader1.i.preheader ], [ %329, %Fill_Buffer.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i_316 = Get_motion_code_Fill_Bufferexiti_329;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %316 = phi i32 [ %288, %.preheader1.i.preheader ], [ %329, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_316_reg <= Get_motion_code_preheader1i_316;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_316_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %316 = phi i32 [ %288, %.preheader1.i.preheader ], [ %329, %Fill_Buffer.exit.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) begin
		Get_motion_code_preheader1i_316_reg <= Get_motion_code_preheader1i_316;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_316_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %317 = phi i8* [ %292, %.preheader1.i.preheader ], [ %325, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_317 = Get_motion_code_291_292_reg;
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %317 = phi i8* [ %292, %.preheader1.i.preheader ], [ %325, %Fill_Buffer.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) */ begin
		Get_motion_code_preheader1i_317 = Get_motion_code_Fill_Bufferexiti_325_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %317 = phi i8* [ %292, %.preheader1.i.preheader ], [ %325, %Fill_Buffer.exit.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1ipreheader_159) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1i_317_reg <= Get_motion_code_preheader1i_317;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_317_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %317 = phi i8* [ %292, %.preheader1.i.preheader ], [ %325, %Fill_Buffer.exit.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexiti_330_reg == 1'd1))) begin
		Get_motion_code_preheader1i_317_reg <= Get_motion_code_preheader1i_317;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_317_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %318 = shl i32 %indvar62, 3*/
		Get_motion_code_preheader1i_318 = (Get_motion_code_preheader1i_indvar62_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %318 = shl i32 %indvar62, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_164)) begin
		Get_motion_code_preheader1i_318_reg <= Get_motion_code_preheader1i_318;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_318_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %319 = add i32 %298, %318*/
		Get_motion_code_preheader1i_319 = (Get_motion_code_preheader1ipreheader_298_reg + Get_motion_code_preheader1i_318);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %319 = add i32 %298, %318*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_164)) begin
		Get_motion_code_preheader1i_319_reg <= Get_motion_code_preheader1i_319;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_319_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1i_320 = Get_motion_code_preheader1i_320_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %320 = mul i32 %indvar62, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_165)) begin
		Get_motion_code_preheader1i_320_reg <= Get_motion_code_preheader1i_320;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_320_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i*/
	/*   %320 = mul i32 %indvar62, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_165)) begin
		Get_motion_code_preheader1i_320_reg <= Get_motion_code_preheader1i_320;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_320_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %321 = add i32 %300, %320*/
		Get_motion_code_preheader1i_321 = (Get_motion_code_preheader1ipreheader_300_reg + Get_motion_code_preheader1i_320);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %321 = add i32 %300, %320*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_165)) begin
		Get_motion_code_preheader1i_321_reg <= Get_motion_code_preheader1i_321;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_321_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %322 = icmp ult i8* %317, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1i_322 = (Get_motion_code_preheader1i_317_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %322 = icmp ult i8* %317, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_164)) begin
		Get_motion_code_preheader1i_322_reg <= Get_motion_code_preheader1i_322;
		if (start == 1'b0 && ^(Get_motion_code_preheader1i_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1i_322_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar56 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next57, %.lr.ph.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiipreheader_166) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii_indvar56 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar56 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next57, %.lr.ph.i.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_170) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii_exitcond58_reg == 1'd0))) */ begin
		Get_motion_code_lrphiii_indvar56 = Get_motion_code_lrphiii_indvarnext57_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar56 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next57, %.lr.ph.i.i.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiipreheader_166) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiii_indvar56_reg <= Get_motion_code_lrphiii_indvar56;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_indvar56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_indvar56_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar56 = phi i32 [ 0, %.lr.ph.i.i.i.preheader ], [ %indvar.next57, %.lr.ph.i.i.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_170) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiii_exitcond58_reg == 1'd0))) begin
		Get_motion_code_lrphiii_indvar56_reg <= Get_motion_code_lrphiii_indvar56;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_indvar56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_indvar56_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %p2.02.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar56*/
		Get_motion_code_lrphiii_p202iii = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiii_indvar56_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %p2.02.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar56*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		Get_motion_code_lrphiii_p202iii_reg <= Get_motion_code_lrphiii_p202iii;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_p202iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_p202iii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %p1.01.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar56*/
		Get_motion_code_lrphiii_p101iii = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiii_indvar56_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %p1.01.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar56*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		Get_motion_code_lrphiii_p101iii_reg <= Get_motion_code_lrphiii_p101iii;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_p101iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_p101iii_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
		Get_motion_code_lrphiii_323 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		Get_motion_code_lrphiii_323_reg <= Get_motion_code_lrphiii_323;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_323_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar.next57 = add i32 %indvar56, 1*/
		Get_motion_code_lrphiii_indvarnext57 = (Get_motion_code_lrphiii_indvar56_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %indvar.next57 = add i32 %indvar56, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		Get_motion_code_lrphiii_indvarnext57_reg <= Get_motion_code_lrphiii_indvarnext57;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_indvarnext57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_indvarnext57_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %exitcond58 = icmp eq i32 %indvar.next57, 2048*/
		Get_motion_code_lrphiii_exitcond58 = (Get_motion_code_lrphiii_indvarnext57 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %exitcond58 = icmp eq i32 %indvar.next57, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		Get_motion_code_lrphiii_exitcond58_reg <= Get_motion_code_lrphiii_exitcond58;
		if (start == 1'b0 && ^(Get_motion_code_lrphiii_exitcond58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiii_exitcond58_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %324 = phi i8* [ %317, %.preheader1.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_165) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i_322_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti_324 = Get_motion_code_preheader1i_317_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %324 = phi i8* [ %317, %.preheader1.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_171) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexiti_324 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %324 = phi i8* [ %317, %.preheader1.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1i_165) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1i_322_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexiti_324_reg <= Get_motion_code_Fill_Bufferexiti_324;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_324_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %324 = phi i8* [ %317, %.preheader1.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiloopexit_171) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexiti_324_reg <= Get_motion_code_Fill_Bufferexiti_324;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_324_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %325 = getelementptr inbounds i8* %324, i32 1*/
		Get_motion_code_Fill_Bufferexiti_325 = (Get_motion_code_Fill_Bufferexiti_324_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %325 = getelementptr inbounds i8* %324, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		Get_motion_code_Fill_Bufferexiti_325_reg <= Get_motion_code_Fill_Bufferexiti_325;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_325_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexiti_326 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174)) begin
		Get_motion_code_Fill_Bufferexiti_326_reg <= Get_motion_code_Fill_Bufferexiti_326;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_326_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %327 = zext i8 %326 to i32*/
		Get_motion_code_Fill_Bufferexiti_327 = Get_motion_code_Fill_Bufferexiti_326;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %327 = zext i8 %326 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174)) begin
		Get_motion_code_Fill_Bufferexiti_327_reg <= Get_motion_code_Fill_Bufferexiti_327;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_327_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %328 = shl i32 %327, %321*/
		Get_motion_code_Fill_Bufferexiti_328 = (Get_motion_code_Fill_Bufferexiti_327 <<< (Get_motion_code_preheader1i_321_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %328 = shl i32 %327, %321*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174)) begin
		Get_motion_code_Fill_Bufferexiti_328_reg <= Get_motion_code_Fill_Bufferexiti_328;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_328_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %329 = or i32 %328, %316*/
		Get_motion_code_Fill_Bufferexiti_329 = (Get_motion_code_Fill_Bufferexiti_328 | Get_motion_code_preheader1i_316_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %329 = or i32 %328, %316*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_174)) begin
		Get_motion_code_Fill_Bufferexiti_329_reg <= Get_motion_code_Fill_Bufferexiti_329;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_329_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %330 = icmp slt i32 %319, 25*/
		Get_motion_code_Fill_Bufferexiti_330 = ($signed(Get_motion_code_preheader1i_319_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %330 = icmp slt i32 %319, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		Get_motion_code_Fill_Bufferexiti_330_reg <= Get_motion_code_Fill_Bufferexiti_330;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_330_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %indvar.next63 = add i32 %indvar62, 1*/
		Get_motion_code_Fill_Bufferexiti_indvarnext63 = (Get_motion_code_preheader1i_indvar62_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %indvar.next63 = add i32 %indvar62, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		Get_motion_code_Fill_Bufferexiti_indvarnext63_reg <= Get_motion_code_Fill_Bufferexiti_indvarnext63;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexiti_indvarnext63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexiti_indvarnext63_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %331 = lshr i32 %295, 3*/
		Get_motion_code_loopexiti_331 = (Get_motion_code_291_295_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %331 = lshr i32 %295, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_331_reg <= Get_motion_code_loopexiti_331;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_331_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %332 = add nuw nsw i32 %331, 1*/
		Get_motion_code_loopexiti_332 = (Get_motion_code_loopexiti_331 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %332 = add nuw nsw i32 %331, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_332_reg <= Get_motion_code_loopexiti_332;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_332_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %scevgep74 = getelementptr i8* %292, i32 %332*/
		Get_motion_code_loopexiti_scevgep74 = (Get_motion_code_291_292_reg + (1 * Get_motion_code_loopexiti_332_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %scevgep74 = getelementptr i8* %292, i32 %332*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		Get_motion_code_loopexiti_scevgep74_reg <= Get_motion_code_loopexiti_scevgep74;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %333 = and i32 %295, -8*/
		Get_motion_code_loopexiti_333 = (Get_motion_code_291_295_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %333 = and i32 %295, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_333_reg <= Get_motion_code_loopexiti_333;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_333_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %334 = add i32 %49, 8*/
		Get_motion_code_loopexiti_334 = (Get_motion_code_Get_Bits1exit_49_reg + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %334 = add i32 %49, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_334_reg <= Get_motion_code_loopexiti_334;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_334_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %335 = sub i32 %334, %287*/
		Get_motion_code_loopexiti_335 = (Get_motion_code_loopexiti_334 - Get_motion_code_284_287_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %335 = sub i32 %334, %287*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_335_reg <= Get_motion_code_loopexiti_335;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_335_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %336 = add i32 %335, %333*/
		Get_motion_code_loopexiti_336 = (Get_motion_code_loopexiti_335 + Get_motion_code_loopexiti_333);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i*/
	/*   %336 = add i32 %335, %333*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		Get_motion_code_loopexiti_336_reg <= Get_motion_code_loopexiti_336;
		if (start == 1'b0 && ^(Get_motion_code_loopexiti_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexiti_336_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %337 = and i32 %295, -8*/
		Get_motion_code_loopexit2iloopexit_337 = (Get_motion_code_291_295_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %337 = and i32 %295, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		Get_motion_code_loopexit2iloopexit_337_reg <= Get_motion_code_loopexit2iloopexit_337;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexit_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexit_337_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %338 = add i32 %49, %337*/
		Get_motion_code_loopexit2iloopexit_338 = (Get_motion_code_Get_Bits1exit_49_reg + Get_motion_code_loopexit2iloopexit_337);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %338 = add i32 %49, %337*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		Get_motion_code_loopexit2iloopexit_338_reg <= Get_motion_code_loopexit2iloopexit_338;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexit_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexit_338_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %339 = add i32 %338, 8*/
		Get_motion_code_loopexit2iloopexit_339 = (Get_motion_code_loopexit2iloopexit_338 + 32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %339 = add i32 %338, 8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		Get_motion_code_loopexit2iloopexit_339_reg <= Get_motion_code_loopexit2iloopexit_339;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexit_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexit_339_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %340 = sub i32 %339, %287*/
		Get_motion_code_loopexit2iloopexit_340 = (Get_motion_code_loopexit2iloopexit_339 - Get_motion_code_284_287_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   %340 = sub i32 %339, %287*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		Get_motion_code_loopexit2iloopexit_340_reg <= Get_motion_code_loopexit2iloopexit_340;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexit_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexit_340_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i*/
	/*   %341 = phi i32 [ %314, %.loopexit.i ], [ %329, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_341 = Get_motion_code_preheaderi_314_reg;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   %341 = phi i32 [ %314, %.loopexit.i ], [ %329, %.loopexit2.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i_341 = Get_motion_code_Fill_Bufferexiti_329_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i*/
	/*   %341 = phi i32 [ %314, %.loopexit.i ], [ %329, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_341_reg <= Get_motion_code_loopexit2i_341;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i_341_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   %341 = phi i32 [ %314, %.loopexit.i ], [ %329, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_341_reg <= Get_motion_code_loopexit2i_341;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i_341_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i*/
	/*   %Incnt.2.i = phi i32 [ %336, %.loopexit.i ], [ %340, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_Incnt2i = Get_motion_code_loopexiti_336_reg;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   %Incnt.2.i = phi i32 [ %336, %.loopexit.i ], [ %340, %.loopexit2.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2i_Incnt2i = Get_motion_code_loopexit2iloopexit_340_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i*/
	/*   %Incnt.2.i = phi i32 [ %336, %.loopexit.i ], [ %340, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_177) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_Incnt2i_reg <= Get_motion_code_loopexit2i_Incnt2i;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i_Incnt2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i_Incnt2i_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   %Incnt.2.i = phi i32 [ %336, %.loopexit.i ], [ %340, %.loopexit2.i.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_179) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2i_Incnt2i_reg <= Get_motion_code_loopexit2i_Incnt2i;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2i_Incnt2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2i_Incnt2i_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %342 = phi i32 [ %288, %284 ], [ %341, %.loopexit2.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__284_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_284_290_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_342 = Get_motion_code_284_288_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %342 = phi i32 [ %288, %284 ], [ %341, %.loopexit2.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_181) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit_342 = Get_motion_code_loopexit2i_341_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %342 = phi i32 [ %288, %284 ], [ %341, %.loopexit2.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__284_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_284_290_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_342_reg <= Get_motion_code_Flush_Bufferexit_342;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_342_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %342 = phi i32 [ %288, %284 ], [ %341, %.loopexit2.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_181) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_342_reg <= Get_motion_code_Flush_Bufferexit_342;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_342_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %343 = phi i32 [ %289, %284 ], [ %Incnt.2.i, %.loopexit2.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__284_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_284_290_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_343 = Get_motion_code_284_289_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %343 = phi i32 [ %289, %284 ], [ %Incnt.2.i, %.loopexit2.i ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_181) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Flush_Bufferexit_343 = Get_motion_code_loopexit2i_Incnt2i_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %343 = phi i32 [ %289, %284 ], [ %Incnt.2.i, %.loopexit2.i ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__284_155) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_284_290_reg == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_343_reg <= Get_motion_code_Flush_Bufferexit_343;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_343_reg"); $finish; end
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %343 = phi i32 [ %289, %284 ], [ %Incnt.2.i, %.loopexit2.i ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_181) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Flush_Bufferexit_343_reg <= Get_motion_code_Flush_Bufferexit_343;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_343_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %344 = shl i32 %342, 1*/
		Get_motion_code_Flush_Bufferexit_344 = (Get_motion_code_Flush_Bufferexit_342_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %344 = shl i32 %342, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		Get_motion_code_Flush_Bufferexit_344_reg <= Get_motion_code_Flush_Bufferexit_344;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_344_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %345 = add nsw i32 %343, -1*/
		Get_motion_code_Flush_Bufferexit_345 = (Get_motion_code_Flush_Bufferexit_343_reg + -32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %345 = add nsw i32 %343, -1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		Get_motion_code_Flush_Bufferexit_345_reg <= Get_motion_code_Flush_Bufferexit_345;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_345_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %346 = icmp slt i32 %343, 26*/
		Get_motion_code_Flush_Bufferexit_346 = ($signed(Get_motion_code_Flush_Bufferexit_343_reg) < $signed(32'd26));
end
always @(posedge clk) begin
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   %346 = icmp slt i32 %343, 26*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		Get_motion_code_Flush_Bufferexit_346_reg <= Get_motion_code_Flush_Bufferexit_346;
		if (start == 1'b0 && ^(Get_motion_code_Flush_Bufferexit_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Flush_Bufferexit_346_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
		Get_motion_code_347_348 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_186)) begin
		Get_motion_code_347_348_reg <= Get_motion_code_347_348;
		if (start == 1'b0 && ^(Get_motion_code_347_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_347_348_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %347*/
	/*   %349 = icmp ult i8* %348, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		Get_motion_code_347_349 = (Get_motion_code_347_348 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* Get_motion_code: %347*/
	/*   %349 = icmp ult i8* %348, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_186)) begin
		Get_motion_code_347_349_reg <= Get_motion_code_347_349;
		if (start == 1'b0 && ^(Get_motion_code_347_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_347_349_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %347*/
	/*   %350 = sub i32 25, %343*/
		Get_motion_code_347_350 = (32'd25 - Get_motion_code_Flush_Bufferexit_343_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %347*/
	/*   %350 = sub i32 25, %343*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_184)) begin
		Get_motion_code_347_350_reg <= Get_motion_code_347_350;
		if (start == 1'b0 && ^(Get_motion_code_347_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_347_350_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4.preheader*/
	/*   %351 = add i32 %343, 7*/
		Get_motion_code_preheader1iii4preheader_351 = (Get_motion_code_Flush_Bufferexit_343_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4.preheader*/
	/*   %351 = add i32 %343, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187)) begin
		Get_motion_code_preheader1iii4preheader_351_reg <= Get_motion_code_preheader1iii4preheader_351;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4preheader_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4preheader_351_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4.preheader*/
	/*   %352 = sub i32 25, %343*/
		Get_motion_code_preheader1iii4preheader_352 = (32'd25 - Get_motion_code_Flush_Bufferexit_343_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4.preheader*/
	/*   %352 = sub i32 25, %343*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187)) begin
		Get_motion_code_preheader1iii4preheader_352_reg <= Get_motion_code_preheader1iii4preheader_352;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4preheader_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4preheader_352_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %353 = add i32 %343, 7*/
		Get_motion_code_preheaderiii2preheader_353 = (Get_motion_code_Flush_Bufferexit_343_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %353 = add i32 %343, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188)) begin
		Get_motion_code_preheaderiii2preheader_353_reg <= Get_motion_code_preheaderiii2preheader_353;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2preheader_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2preheader_353_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %354 = icmp sgt i32 %353, 25*/
		Get_motion_code_preheaderiii2preheader_354 = ($signed(Get_motion_code_preheaderiii2preheader_353) > $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %354 = icmp sgt i32 %353, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188)) begin
		Get_motion_code_preheaderiii2preheader_354_reg <= Get_motion_code_preheaderiii2preheader_354;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2preheader_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2preheader_354_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %smax72 = select i1 %354, i32 %353, i32 25*/
		Get_motion_code_preheaderiii2preheader_smax72 = (Get_motion_code_preheaderiii2preheader_354 ? Get_motion_code_preheaderiii2preheader_353 : 32'd25);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %smax72 = select i1 %354, i32 %353, i32 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188)) begin
		Get_motion_code_preheaderiii2preheader_smax72_reg <= Get_motion_code_preheaderiii2preheader_smax72;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2preheader_smax72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2preheader_smax72_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %355 = sub i32 25, %343*/
		Get_motion_code_preheaderiii2preheader_355 = (32'd25 - Get_motion_code_Flush_Bufferexit_343_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2.preheader*/
	/*   %355 = sub i32 25, %343*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188)) begin
		Get_motion_code_preheaderiii2preheader_355_reg <= Get_motion_code_preheaderiii2preheader_355;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2preheader_355) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2preheader_355_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar42 = phi i32 [ %indvar.next43, %.preheader.i.i.i2 ], [ 0, %.preheader.i.i.i2.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii2_indvar42 = 32'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar42 = phi i32 [ %indvar.next43, %.preheader.i.i.i2 ], [ 0, %.preheader.i.i.i2.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii2_365_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii2_indvar42 = Get_motion_code_preheaderiii2_indvarnext43_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar42 = phi i32 [ %indvar.next43, %.preheader.i.i.i2 ], [ 0, %.preheader.i.i.i2.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii2_indvar42_reg <= Get_motion_code_preheaderiii2_indvar42;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_indvar42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_indvar42_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar42 = phi i32 [ %indvar.next43, %.preheader.i.i.i2 ], [ 0, %.preheader.i.i.i2.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii2_365_reg == 1'd1))) begin
		Get_motion_code_preheaderiii2_indvar42_reg <= Get_motion_code_preheaderiii2_indvar42;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_indvar42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_indvar42_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %356 = phi i32 [ %364, %.preheader.i.i.i2 ], [ %344, %.preheader.i.i.i2.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii2_356 = Get_motion_code_Flush_Bufferexit_344_reg;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %356 = phi i32 [ %364, %.preheader.i.i.i2 ], [ %344, %.preheader.i.i.i2.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii2_365_reg == 1'd1))) */ begin
		Get_motion_code_preheaderiii2_356 = Get_motion_code_preheaderiii2_364;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %356 = phi i32 [ %364, %.preheader.i.i.i2 ], [ %344, %.preheader.i.i.i2.preheader ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2preheader_188) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheaderiii2_356_reg <= Get_motion_code_preheaderiii2_356;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_356_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %356 = phi i32 [ %364, %.preheader.i.i.i2 ], [ %344, %.preheader.i.i.i2.preheader ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheaderiii2_365_reg == 1'd1))) begin
		Get_motion_code_preheaderiii2_356_reg <= Get_motion_code_preheaderiii2_356;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_356_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %scevgep44 = getelementptr i8* %348, i32 %indvar42*/
		Get_motion_code_preheaderiii2_scevgep44 = (Get_motion_code_347_348_reg + (1 * Get_motion_code_preheaderiii2_indvar42_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %scevgep44 = getelementptr i8* %348, i32 %indvar42*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		Get_motion_code_preheaderiii2_scevgep44_reg <= Get_motion_code_preheaderiii2_scevgep44;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %357 = shl i32 %indvar42, 3*/
		Get_motion_code_preheaderiii2_357 = (Get_motion_code_preheaderiii2_indvar42_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %357 = shl i32 %indvar42, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		Get_motion_code_preheaderiii2_357_reg <= Get_motion_code_preheaderiii2_357;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_357_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %358 = add i32 %353, %357*/
		Get_motion_code_preheaderiii2_358 = (Get_motion_code_preheaderiii2preheader_353_reg + Get_motion_code_preheaderiii2_357);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %358 = add i32 %353, %357*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		Get_motion_code_preheaderiii2_358_reg <= Get_motion_code_preheaderiii2_358;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_358_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheaderiii2_359 = Get_motion_code_preheaderiii2_359_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %359 = mul i32 %indvar42, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_190)) begin
		Get_motion_code_preheaderiii2_359_reg <= Get_motion_code_preheaderiii2_359;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_359_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %359 = mul i32 %indvar42, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_190)) begin
		Get_motion_code_preheaderiii2_359_reg <= Get_motion_code_preheaderiii2_359;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_359_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %360 = add i32 %355, %359*/
		Get_motion_code_preheaderiii2_360 = (Get_motion_code_preheaderiii2preheader_355_reg + Get_motion_code_preheaderiii2_359);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %360 = add i32 %355, %359*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_190)) begin
		Get_motion_code_preheaderiii2_360_reg <= Get_motion_code_preheaderiii2_360;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_360_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
		Get_motion_code_preheaderiii2_361 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191)) begin
		Get_motion_code_preheaderiii2_361_reg <= Get_motion_code_preheaderiii2_361;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_361) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_361_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %362 = zext i8 %361 to i32*/
		Get_motion_code_preheaderiii2_362 = Get_motion_code_preheaderiii2_361;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %362 = zext i8 %361 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191)) begin
		Get_motion_code_preheaderiii2_362_reg <= Get_motion_code_preheaderiii2_362;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_362_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %363 = shl i32 %362, %360*/
		Get_motion_code_preheaderiii2_363 = (Get_motion_code_preheaderiii2_362 <<< (Get_motion_code_preheaderiii2_360_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %363 = shl i32 %362, %360*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191)) begin
		Get_motion_code_preheaderiii2_363_reg <= Get_motion_code_preheaderiii2_363;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_363_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %364 = or i32 %363, %356*/
		Get_motion_code_preheaderiii2_364 = (Get_motion_code_preheaderiii2_363 | Get_motion_code_preheaderiii2_356_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %364 = or i32 %363, %356*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_191)) begin
		Get_motion_code_preheaderiii2_364_reg <= Get_motion_code_preheaderiii2_364;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_364_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %365 = icmp slt i32 %358, 25*/
		Get_motion_code_preheaderiii2_365 = ($signed(Get_motion_code_preheaderiii2_358) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %365 = icmp slt i32 %358, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		Get_motion_code_preheaderiii2_365_reg <= Get_motion_code_preheaderiii2_365;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_365_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar.next43 = add i32 %indvar42, 1*/
		Get_motion_code_preheaderiii2_indvarnext43 = (Get_motion_code_preheaderiii2_indvar42_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %indvar.next43 = add i32 %indvar42, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		Get_motion_code_preheaderiii2_indvarnext43_reg <= Get_motion_code_preheaderiii2_indvarnext43;
		if (start == 1'b0 && ^(Get_motion_code_preheaderiii2_indvarnext43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheaderiii2_indvarnext43_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %indvar51 = phi i32 [ 0, %.preheader1.i.i.i4.preheader ], [ %indvar.next52, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_indvar51 = 32'd0;
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %indvar51 = phi i32 [ 0, %.preheader1.i.i.i4.preheader ], [ %indvar.next52, %Fill_Buffer.exit.i.i.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii4_indvar51 = Get_motion_code_Fill_Bufferexitiii10_indvarnext52_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %indvar51 = phi i32 [ 0, %.preheader1.i.i.i4.preheader ], [ %indvar.next52, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_indvar51_reg <= Get_motion_code_preheader1iii4_indvar51;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_indvar51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_indvar51_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %indvar51 = phi i32 [ 0, %.preheader1.i.i.i4.preheader ], [ %indvar.next52, %Fill_Buffer.exit.i.i.i10 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) begin
		Get_motion_code_preheader1iii4_indvar51_reg <= Get_motion_code_preheader1iii4_indvar51;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_indvar51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_indvar51_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %366 = phi i32 [ %344, %.preheader1.i.i.i4.preheader ], [ %379, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_366 = Get_motion_code_Flush_Bufferexit_344_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %366 = phi i32 [ %344, %.preheader1.i.i.i4.preheader ], [ %379, %Fill_Buffer.exit.i.i.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii4_366 = Get_motion_code_Fill_Bufferexitiii10_379;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %366 = phi i32 [ %344, %.preheader1.i.i.i4.preheader ], [ %379, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_366_reg <= Get_motion_code_preheader1iii4_366;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_366_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %366 = phi i32 [ %344, %.preheader1.i.i.i4.preheader ], [ %379, %Fill_Buffer.exit.i.i.i10 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) begin
		Get_motion_code_preheader1iii4_366_reg <= Get_motion_code_preheader1iii4_366;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_366_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %367 = phi i8* [ %348, %.preheader1.i.i.i4.preheader ], [ %375, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_367 = Get_motion_code_347_348_reg;
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %367 = phi i8* [ %348, %.preheader1.i.i.i4.preheader ], [ %375, %Fill_Buffer.exit.i.i.i10 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) */ begin
		Get_motion_code_preheader1iii4_367 = Get_motion_code_Fill_Bufferexitiii10_375_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %367 = phi i8* [ %348, %.preheader1.i.i.i4.preheader ], [ %375, %Fill_Buffer.exit.i.i.i10 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4preheader_187) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_preheader1iii4_367_reg <= Get_motion_code_preheader1iii4_367;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_367_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %367 = phi i8* [ %348, %.preheader1.i.i.i4.preheader ], [ %375, %Fill_Buffer.exit.i.i.i10 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Fill_Bufferexitiii10_380_reg == 1'd1))) begin
		Get_motion_code_preheader1iii4_367_reg <= Get_motion_code_preheader1iii4_367;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_367) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_367_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %368 = shl i32 %indvar51, 3*/
		Get_motion_code_preheader1iii4_368 = (Get_motion_code_preheader1iii4_indvar51_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %368 = shl i32 %indvar51, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_192)) begin
		Get_motion_code_preheader1iii4_368_reg <= Get_motion_code_preheader1iii4_368;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_368_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %369 = add i32 %351, %368*/
		Get_motion_code_preheader1iii4_369 = (Get_motion_code_preheader1iii4preheader_351_reg + Get_motion_code_preheader1iii4_368);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %369 = add i32 %351, %368*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_192)) begin
		Get_motion_code_preheader1iii4_369_reg <= Get_motion_code_preheader1iii4_369;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_369_reg"); $finish; end
	end
end
always @(*) begin
	Get_motion_code_preheader1iii4_370 = Get_motion_code_preheader1iii4_370_stage0_reg;
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %370 = mul i32 %indvar51, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_193)) begin
		Get_motion_code_preheader1iii4_370_reg <= Get_motion_code_preheader1iii4_370;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_370_reg"); $finish; end
	end
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %370 = mul i32 %indvar51, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_193)) begin
		Get_motion_code_preheader1iii4_370_reg <= Get_motion_code_preheader1iii4_370;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_370_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %371 = add i32 %352, %370*/
		Get_motion_code_preheader1iii4_371 = (Get_motion_code_preheader1iii4preheader_352_reg + Get_motion_code_preheader1iii4_370);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %371 = add i32 %352, %370*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_193)) begin
		Get_motion_code_preheader1iii4_371_reg <= Get_motion_code_preheader1iii4_371;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_371_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %372 = icmp ult i8* %367, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		Get_motion_code_preheader1iii4_372 = (Get_motion_code_preheader1iii4_367_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %372 = icmp ult i8* %367, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_192)) begin
		Get_motion_code_preheader1iii4_372_reg <= Get_motion_code_preheader1iii4_372;
		if (start == 1'b0 && ^(Get_motion_code_preheader1iii4_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_preheader1iii4_372_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar45 = phi i32 [ 0, %.lr.ph.i.i.i.i.i8.preheader ], [ %indvar.next46, %.lr.ph.i.i.i.i.i8 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8preheader_194) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii8_indvar45 = 32'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar45 = phi i32 [ 0, %.lr.ph.i.i.i.i.i8.preheader ], [ %indvar.next46, %.lr.ph.i.i.i.i.i8 ]*/
	else /* if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_198) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii8_exitcond47_reg == 1'd0))) */ begin
		Get_motion_code_lrphiiiii8_indvar45 = Get_motion_code_lrphiiiii8_indvarnext46_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar45 = phi i32 [ 0, %.lr.ph.i.i.i.i.i8.preheader ], [ %indvar.next46, %.lr.ph.i.i.i.i.i8 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8preheader_194) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_lrphiiiii8_indvar45_reg <= Get_motion_code_lrphiiiii8_indvar45;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_indvar45_reg"); $finish; end
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar45 = phi i32 [ 0, %.lr.ph.i.i.i.i.i8.preheader ], [ %indvar.next46, %.lr.ph.i.i.i.i.i8 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_198) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_lrphiiiii8_exitcond47_reg == 1'd0))) begin
		Get_motion_code_lrphiiiii8_indvar45_reg <= Get_motion_code_lrphiiiii8_indvar45;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_indvar45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_indvar45_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %p2.02.i.i.i.i.i5 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar45*/
		Get_motion_code_lrphiiiii8_p202iiiii5 = (`TAG_g_inRdbfr_a | (1 * Get_motion_code_lrphiiiii8_indvar45_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %p2.02.i.i.i.i.i5 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar45*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		Get_motion_code_lrphiiiii8_p202iiiii5_reg <= Get_motion_code_lrphiiiii8_p202iiiii5;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_p202iiiii5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_p202iiiii5_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %p1.01.i.i.i.i.i6 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar45*/
		Get_motion_code_lrphiiiii8_p101iiiii6 = (`TAG_g_ld_Rdbfr_a | (1 * Get_motion_code_lrphiiiii8_indvar45_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %p1.01.i.i.i.i.i6 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar45*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		Get_motion_code_lrphiiiii8_p101iiiii6_reg <= Get_motion_code_lrphiiiii8_p101iiiii6;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_p101iiiii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_p101iiiii6_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
		Get_motion_code_lrphiiiii8_373 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		Get_motion_code_lrphiiiii8_373_reg <= Get_motion_code_lrphiiiii8_373;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_373) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_373_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
		Get_motion_code_lrphiiiii8_indvarnext46 = (Get_motion_code_lrphiiiii8_indvar45_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %indvar.next46 = add i32 %indvar45, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		Get_motion_code_lrphiiiii8_indvarnext46_reg <= Get_motion_code_lrphiiiii8_indvarnext46;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_indvarnext46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_indvarnext46_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %exitcond47 = icmp eq i32 %indvar.next46, 2048*/
		Get_motion_code_lrphiiiii8_exitcond47 = (Get_motion_code_lrphiiiii8_indvarnext46 == 32'd2048);
end
always @(posedge clk) begin
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %exitcond47 = icmp eq i32 %indvar.next46, 2048*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		Get_motion_code_lrphiiiii8_exitcond47_reg <= Get_motion_code_lrphiiiii8_exitcond47;
		if (start == 1'b0 && ^(Get_motion_code_lrphiiiii8_exitcond47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_lrphiiiii8_exitcond47_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %374 = phi i8* [ %367, %.preheader1.i.i.i4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i10.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_193) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii4_372_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii10_374 = Get_motion_code_preheader1iii4_367_reg;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %374 = phi i8* [ %367, %.preheader1.i.i.i4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i10.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10loopexit_199) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_Fill_Bufferexitiii10_374 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %374 = phi i8* [ %367, %.preheader1.i.i.i4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i10.loopexit ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_preheader1iii4_193) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_preheader1iii4_372_reg == 1'd1))) begin
		Get_motion_code_Fill_Bufferexitiii10_374_reg <= Get_motion_code_Fill_Bufferexitiii10_374;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_374_reg"); $finish; end
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %374 = phi i8* [ %367, %.preheader1.i.i.i4 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.i10.loopexit ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10loopexit_199) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_Fill_Bufferexitiii10_374_reg <= Get_motion_code_Fill_Bufferexitiii10_374;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_374_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %375 = getelementptr inbounds i8* %374, i32 1*/
		Get_motion_code_Fill_Bufferexitiii10_375 = (Get_motion_code_Fill_Bufferexitiii10_374_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %375 = getelementptr inbounds i8* %374, i32 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		Get_motion_code_Fill_Bufferexitiii10_375_reg <= Get_motion_code_Fill_Bufferexitiii10_375;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_375_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
		Get_motion_code_Fill_Bufferexitiii10_376 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202)) begin
		Get_motion_code_Fill_Bufferexitiii10_376_reg <= Get_motion_code_Fill_Bufferexitiii10_376;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_376_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %377 = zext i8 %376 to i32*/
		Get_motion_code_Fill_Bufferexitiii10_377 = Get_motion_code_Fill_Bufferexitiii10_376;
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %377 = zext i8 %376 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202)) begin
		Get_motion_code_Fill_Bufferexitiii10_377_reg <= Get_motion_code_Fill_Bufferexitiii10_377;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_377_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %378 = shl i32 %377, %371*/
		Get_motion_code_Fill_Bufferexitiii10_378 = (Get_motion_code_Fill_Bufferexitiii10_377 <<< (Get_motion_code_preheader1iii4_371_reg % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %378 = shl i32 %377, %371*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202)) begin
		Get_motion_code_Fill_Bufferexitiii10_378_reg <= Get_motion_code_Fill_Bufferexitiii10_378;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_378_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %379 = or i32 %378, %366*/
		Get_motion_code_Fill_Bufferexitiii10_379 = (Get_motion_code_Fill_Bufferexitiii10_378 | Get_motion_code_preheader1iii4_366_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %379 = or i32 %378, %366*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_202)) begin
		Get_motion_code_Fill_Bufferexitiii10_379_reg <= Get_motion_code_Fill_Bufferexitiii10_379;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_379) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_379_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %380 = icmp slt i32 %369, 25*/
		Get_motion_code_Fill_Bufferexitiii10_380 = ($signed(Get_motion_code_preheader1iii4_369_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %380 = icmp slt i32 %369, 25*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		Get_motion_code_Fill_Bufferexitiii10_380_reg <= Get_motion_code_Fill_Bufferexitiii10_380;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_380_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %indvar.next52 = add i32 %indvar51, 1*/
		Get_motion_code_Fill_Bufferexitiii10_indvarnext52 = (Get_motion_code_preheader1iii4_indvar51_reg + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %indvar.next52 = add i32 %indvar51, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		Get_motion_code_Fill_Bufferexitiii10_indvarnext52_reg <= Get_motion_code_Fill_Bufferexitiii10_indvarnext52;
		if (start == 1'b0 && ^(Get_motion_code_Fill_Bufferexitiii10_indvarnext52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Fill_Bufferexitiii10_indvarnext52_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %381 = sub i32 %smax72, %343*/
		Get_motion_code_loopexitiii11_381 = (Get_motion_code_preheaderiii2preheader_smax72_reg - Get_motion_code_Flush_Bufferexit_343_reg);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %381 = sub i32 %smax72, %343*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		Get_motion_code_loopexitiii11_381_reg <= Get_motion_code_loopexitiii11_381;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_381_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %382 = lshr i32 %381, 3*/
		Get_motion_code_loopexitiii11_382 = (Get_motion_code_loopexitiii11_381 >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %382 = lshr i32 %381, 3*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		Get_motion_code_loopexitiii11_382_reg <= Get_motion_code_loopexitiii11_382;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_382_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %383 = add nuw nsw i32 %382, 1*/
		Get_motion_code_loopexitiii11_383 = (Get_motion_code_loopexitiii11_382 + 32'd1);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %383 = add nuw nsw i32 %382, 1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		Get_motion_code_loopexitiii11_383_reg <= Get_motion_code_loopexitiii11_383;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_383_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %scevgep73 = getelementptr i8* %348, i32 %383*/
		Get_motion_code_loopexitiii11_scevgep73 = (Get_motion_code_347_348_reg + (1 * Get_motion_code_loopexitiii11_383_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %scevgep73 = getelementptr i8* %348, i32 %383*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		Get_motion_code_loopexitiii11_scevgep73_reg <= Get_motion_code_loopexitiii11_scevgep73;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %384 = and i32 %350, -8*/
		Get_motion_code_loopexitiii11_384 = (Get_motion_code_347_350_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %384 = and i32 %350, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		Get_motion_code_loopexitiii11_384_reg <= Get_motion_code_loopexitiii11_384;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_384_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %385 = add i32 %353, %384*/
		Get_motion_code_loopexitiii11_385 = (Get_motion_code_preheaderiii2preheader_353_reg + Get_motion_code_loopexitiii11_384);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   %385 = add i32 %353, %384*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		Get_motion_code_loopexitiii11_385_reg <= Get_motion_code_loopexitiii11_385;
		if (start == 1'b0 && ^(Get_motion_code_loopexitiii11_385) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexitiii11_385_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %386 = and i32 %350, -8*/
		Get_motion_code_loopexit2iloopexitii12_386 = (Get_motion_code_347_350_reg & -32'd8);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %386 = and i32 %350, -8*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		Get_motion_code_loopexit2iloopexitii12_386_reg <= Get_motion_code_loopexit2iloopexitii12_386;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii12_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii12_386_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %387 = add i32 %343, 7*/
		Get_motion_code_loopexit2iloopexitii12_387 = (Get_motion_code_Flush_Bufferexit_343_reg + 32'd7);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %387 = add i32 %343, 7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		Get_motion_code_loopexit2iloopexitii12_387_reg <= Get_motion_code_loopexit2iloopexitii12_387;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii12_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii12_387_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %388 = add i32 %387, %386*/
		Get_motion_code_loopexit2iloopexitii12_388 = (Get_motion_code_loopexit2iloopexitii12_387 + Get_motion_code_loopexit2iloopexitii12_386);
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   %388 = add i32 %387, %386*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		Get_motion_code_loopexit2iloopexitii12_388_reg <= Get_motion_code_loopexit2iloopexitii12_388;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iloopexitii12_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iloopexitii12_388_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   %Incnt.2.i.i.i13 = phi i32 [ %385, %.loopexit.i.i.i11 ], [ %388, %.loopexit2.i.loopexit.i.i12 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii14_Incnt2iii13 = Get_motion_code_loopexitiii11_385_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   %Incnt.2.i.i.i13 = phi i32 [ %385, %.loopexit.i.i.i11 ], [ %388, %.loopexit2.i.loopexit.i.i12 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_207) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_loopexit2iii14_Incnt2iii13 = Get_motion_code_loopexit2iloopexitii12_388_reg;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   %Incnt.2.i.i.i13 = phi i32 [ %385, %.loopexit.i.i.i11 ], [ %388, %.loopexit2.i.loopexit.i.i12 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_205) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii14_Incnt2iii13_reg <= Get_motion_code_loopexit2iii14_Incnt2iii13;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii14_Incnt2iii13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii14_Incnt2iii13_reg"); $finish; end
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   %Incnt.2.i.i.i13 = phi i32 [ %385, %.loopexit.i.i.i11 ], [ %388, %.loopexit2.i.loopexit.i.i12 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_207) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_loopexit2iii14_Incnt2iii13_reg <= Get_motion_code_loopexit2iii14_Incnt2iii13;
		if (start == 1'b0 && ^(Get_motion_code_loopexit2iii14_Incnt2iii13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_loopexit2iii14_Incnt2iii13_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %389 = icmp slt i32 %342, 0*/
		Get_motion_code_Get_Bits1exit15_389 = ($signed(Get_motion_code_Flush_Bufferexit_342_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %389 = icmp slt i32 %342, 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210)) begin
		Get_motion_code_Get_Bits1exit15_389_reg <= Get_motion_code_Get_Bits1exit15_389;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_389_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %390 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %282, i32 0*/
		Get_motion_code_Get_Bits1exit15_390 = (1'd0 | (2 * Get_motion_code_281_282_reg));
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %390 = getelementptr inbounds [12 x [2 x i8]]* @MVtab2, i32 0, i32 %282, i32 0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210)) begin
		Get_motion_code_Get_Bits1exit15_390_reg <= Get_motion_code_Get_Bits1exit15_390;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_390_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %391 = load i8* %390, align 1, !tbaa !7*/
		Get_motion_code_Get_Bits1exit15_391 = MVtab2_out_a;
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %391 = load i8* %390, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211)) begin
		Get_motion_code_Get_Bits1exit15_391_reg <= Get_motion_code_Get_Bits1exit15_391;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_391_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %392 = sext i8 %391 to i32*/
		Get_motion_code_Get_Bits1exit15_392 = $signed(Get_motion_code_Get_Bits1exit15_391);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %392 = sext i8 %391 to i32*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211)) begin
		Get_motion_code_Get_Bits1exit15_392_reg <= Get_motion_code_Get_Bits1exit15_392;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_392_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %393 = sub nsw i32 0, %392*/
		Get_motion_code_Get_Bits1exit15_393 = (32'd0 - Get_motion_code_Get_Bits1exit15_392);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %393 = sub nsw i32 0, %392*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211)) begin
		Get_motion_code_Get_Bits1exit15_393_reg <= Get_motion_code_Get_Bits1exit15_393;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_393_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %394 = select i1 %389, i32 %393, i32 %392*/
		Get_motion_code_Get_Bits1exit15_394 = (Get_motion_code_Get_Bits1exit15_389_reg ? Get_motion_code_Get_Bits1exit15_393 : Get_motion_code_Get_Bits1exit15_392);
end
always @(posedge clk) begin
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %394 = select i1 %389, i32 %393, i32 %392*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211)) begin
		Get_motion_code_Get_Bits1exit15_394_reg <= Get_motion_code_Get_Bits1exit15_394;
		if (start == 1'b0 && ^(Get_motion_code_Get_Bits1exit15_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_Get_Bits1exit15_394_reg"); $finish; end
	end
end
always @(*) begin
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Get_Bits1exit_51 == 1'd0))) begin
		Get_motion_code_395_0 = 32'd0;
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	else if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_395_0 = Get_motion_code_Get_Bits1exit59_166;
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	else if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_395_0 = Get_motion_code_Get_Bits1exit30_280;
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	else if ((((cur_state == LEGUP_F_Get_motion_code_BB__281_152) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_281_283 == 1'd1))) begin
		Get_motion_code_395_0 = 32'd0;
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	else /* if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211) & (memory_controller_waitrequest == 1'd0))) */ begin
		Get_motion_code_395_0 = Get_motion_code_Get_Bits1exit15_394;
	end
end
always @(posedge clk) begin
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit_31) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_Get_Bits1exit_51 == 1'd0))) begin
		Get_motion_code_395_0_reg <= Get_motion_code_395_0;
		if (start == 1'b0 && ^(Get_motion_code_395_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_395_0_reg"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_91) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_395_0_reg <= Get_motion_code_395_0;
		if (start == 1'b0 && ^(Get_motion_code_395_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_395_0_reg"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_151) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_395_0_reg <= Get_motion_code_395_0;
		if (start == 1'b0 && ^(Get_motion_code_395_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_395_0_reg"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if ((((cur_state == LEGUP_F_Get_motion_code_BB__281_152) & (memory_controller_waitrequest == 1'd0)) & (Get_motion_code_281_283 == 1'd1))) begin
		Get_motion_code_395_0_reg <= Get_motion_code_395_0;
		if (start == 1'b0 && ^(Get_motion_code_395_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_395_0_reg"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   %.0 = phi i32 [ %166, %Get_Bits1.exit59 ], [ %280, %Get_Bits1.exit30 ], [ %394, %Get_Bits1.exit15 ], [ 0, %Get_Bits1.exit ], [ 0, %281 ]*/
	if (((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_211) & (memory_controller_waitrequest == 1'd0))) begin
		Get_motion_code_395_0_reg <= Get_motion_code_395_0;
		if (start == 1'b0 && ^(Get_motion_code_395_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_395_0_reg"); $finish; end
	end
end
always @(*) begin
	MVtab0_address_a = 1'd0;
	/* Get_motion_code: %55*/
	/*   %58 = load i8* %57, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_33)) begin
		MVtab0_address_a = (Get_motion_code_55_57 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %163 = load i8* %162, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90)) begin
		MVtab0_address_a = (Get_motion_code_Get_Bits1exit59_162 >>> 3'd0);
	end
end
always @(*) begin
	MVtab0_write_enable_a = 1'd0;
	/* Get_motion_code: %55*/
	/*   %58 = load i8* %57, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_33)) begin
		MVtab0_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits1.exit59*/
	/*   %163 = load i8* %162, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit59_90)) begin
		MVtab0_write_enable_a = 1'd0;
	end
end
always @(*) begin
	MVtab1_address_a = 1'd0;
	/* Get_motion_code: %169*/
	/*   %172 = load i8* %171, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_93)) begin
		MVtab1_address_a = (Get_motion_code_169_171 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %277 = load i8* %276, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150)) begin
		MVtab1_address_a = (Get_motion_code_Get_Bits1exit30_276 >>> 3'd0);
	end
end
always @(*) begin
	MVtab1_write_enable_a = 1'd0;
	/* Get_motion_code: %169*/
	/*   %172 = load i8* %171, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_93)) begin
		MVtab1_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits1.exit30*/
	/*   %277 = load i8* %276, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit30_150)) begin
		MVtab1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	MVtab2_address_a = 1'd0;
	/* Get_motion_code: %284*/
	/*   %286 = load i8* %285, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_153)) begin
		MVtab2_address_a = (Get_motion_code_284_285 >>> 3'd0);
	end
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %391 = load i8* %390, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210)) begin
		MVtab2_address_a = (Get_motion_code_Get_Bits1exit15_390 >>> 3'd0);
	end
end
always @(*) begin
	MVtab2_write_enable_a = 1'd0;
	/* Get_motion_code: %284*/
	/*   %286 = load i8* %285, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_153)) begin
		MVtab2_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %Get_Bits1.exit15*/
	/*   %391 = load i8* %390, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Get_Bits1exit15_210)) begin
		MVtab2_write_enable_a = 1'd0;
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderiii_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %18 = mul i32 %indvar64, -8*/
	if ((lpm_mult_Get_motion_code_preheaderiii_18_en == 1'd1)) begin
		Get_motion_code_preheaderiii_18_stage0_reg <= (Get_motion_code_preheaderiii_indvar64_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1iii_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i*/
	/*   %29 = mul i32 %indvar78, -8*/
	if ((lpm_mult_Get_motion_code_preheader1iii_29_en == 1'd1)) begin
		Get_motion_code_preheader1iii_29_stage0_reg <= (Get_motion_code_preheader1iii_indvar78_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi60_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i60*/
	/*   %81 = mul i32 %indvar9, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi60_81_en == 1'd1)) begin
		Get_motion_code_preheaderi60_81_stage0_reg <= (Get_motion_code_preheaderi60_indvar9_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1i63_92_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i63*/
	/*   %92 = mul i32 %indvar18, -8*/
	if ((lpm_mult_Get_motion_code_preheader1i63_92_en == 1'd1)) begin
		Get_motion_code_preheader1i63_92_stage0_reg <= (Get_motion_code_preheader1i63_indvar18_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderiii46_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %131 = mul i32 %indvar, -8*/
	if ((lpm_mult_Get_motion_code_preheaderiii46_131_en == 1'd1)) begin
		Get_motion_code_preheaderiii46_131_stage0_reg <= (Get_motion_code_preheaderiii46_indvar_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1iii48_142_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i48*/
	/*   %142 = mul i32 %indvar7, -8*/
	if ((lpm_mult_Get_motion_code_preheader1iii48_142_en == 1'd1)) begin
		Get_motion_code_preheader1iii48_142_stage0_reg <= (Get_motion_code_preheader1iii48_indvar7_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi31_195_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i31*/
	/*   %195 = mul i32 %indvar31, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi31_195_en == 1'd1)) begin
		Get_motion_code_preheaderi31_195_stage0_reg <= (Get_motion_code_preheaderi31_indvar31_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1i34_206_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i34*/
	/*   %206 = mul i32 %indvar40, -8*/
	if ((lpm_mult_Get_motion_code_preheader1i34_206_en == 1'd1)) begin
		Get_motion_code_preheader1i34_206_stage0_reg <= (Get_motion_code_preheader1i34_indvar40_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderiii17_245_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %245 = mul i32 %indvar20, -8*/
	if ((lpm_mult_Get_motion_code_preheaderiii17_245_en == 1'd1)) begin
		Get_motion_code_preheaderiii17_245_stage0_reg <= (Get_motion_code_preheaderiii17_indvar20_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1iii19_256_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i19*/
	/*   %256 = mul i32 %indvar29, -8*/
	if ((lpm_mult_Get_motion_code_preheader1iii19_256_en == 1'd1)) begin
		Get_motion_code_preheader1iii19_256_stage0_reg <= (Get_motion_code_preheader1iii19_indvar29_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderi_309_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i*/
	/*   %309 = mul i32 %indvar53, -8*/
	if ((lpm_mult_Get_motion_code_preheaderi_309_en == 1'd1)) begin
		Get_motion_code_preheaderi_309_stage0_reg <= (Get_motion_code_preheaderi_indvar53_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1i_320_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i*/
	/*   %320 = mul i32 %indvar62, -8*/
	if ((lpm_mult_Get_motion_code_preheader1i_320_en == 1'd1)) begin
		Get_motion_code_preheader1i_320_stage0_reg <= (Get_motion_code_preheader1i_indvar62_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheaderiii2_359_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %359 = mul i32 %indvar42, -8*/
	if ((lpm_mult_Get_motion_code_preheaderiii2_359_en == 1'd1)) begin
		Get_motion_code_preheaderiii2_359_stage0_reg <= (Get_motion_code_preheaderiii2_indvar42_reg * -32'd8);
	end
end
always @(*) begin
	lpm_mult_Get_motion_code_preheader1iii4_370_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* Get_motion_code: %.preheader1.i.i.i4*/
	/*   %370 = mul i32 %indvar51, -8*/
	if ((lpm_mult_Get_motion_code_preheader1iii4_370_en == 1'd1)) begin
		Get_motion_code_preheader1iii4_370_stage0_reg <= (Get_motion_code_preheader1iii4_indvar51_reg * -32'd8);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   ret i32 %.0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__395_212)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   store i8 %32, i8* %p1.01.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i8* %scevgep76, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i8* %34, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %60, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   store i8 %95, i8* %p1.01.i.i.i65, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i8* %scevgep68, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i8* %97, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %116, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   store i8 %145, i8* %p1.01.i.i.i.i.i50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i8* %147, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %174, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   store i8 %209, i8* %p1.01.i.i.i36, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i8* %scevgep71, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i8* %211, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %230, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_124)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   store i8 %259, i8* %p1.01.i.i.i.i.i21, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i8* %scevgep70, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i8* %261, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %288, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   store i8 %323, i8* %p1.01.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i8* %scevgep74, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i8* %325, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %344, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_184)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   store i8 %373, i8* %p1.01.i.i.i.i.i6, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i8* %scevgep73, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i8* %375, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		memory_controller_address_a = Get_motion_code_preheaderiii_scevgep66;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   store i8 %32, i8* %p1.01.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		memory_controller_address_a = Get_motion_code_lrphiiiii_p101iiiii_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i8* %scevgep76, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i8* %34, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %60, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		memory_controller_address_a = Get_motion_code_preheaderi60_scevgep11;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   store i8 %95, i8* %p1.01.i.i.i65, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		memory_controller_address_a = Get_motion_code_lrphiii67_p101iii65_reg;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i8* %scevgep68, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i8* %97, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %116, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_64)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		memory_controller_address_a = Get_motion_code_preheaderiii46_scevgep1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   store i8 %145, i8* %p1.01.i.i.i.i.i50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		memory_controller_address_a = Get_motion_code_lrphiiiii52_p101iiiii50_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i8* %147, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %174, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		memory_controller_address_a = Get_motion_code_preheaderi31_scevgep33;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   store i8 %209, i8* %p1.01.i.i.i36, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		memory_controller_address_a = Get_motion_code_lrphiii38_p101iii36_reg;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i8* %scevgep71, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i8* %211, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %230, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_124)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		memory_controller_address_a = Get_motion_code_preheaderiii17_scevgep22;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   store i8 %259, i8* %p1.01.i.i.i.i.i21, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		memory_controller_address_a = Get_motion_code_lrphiiiii23_p101iiiii21_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i8* %scevgep70, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i8* %261, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %288, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		memory_controller_address_a = Get_motion_code_preheaderi_scevgep55;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   store i8 %323, i8* %p1.01.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		memory_controller_address_a = Get_motion_code_lrphiii_p101iii_reg;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i8* %scevgep74, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i8* %325, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %344, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_184)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		memory_controller_address_a = Get_motion_code_preheaderiii2_scevgep44;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   store i8 %373, i8* %p1.01.i.i.i.i.i6, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		memory_controller_address_a = Get_motion_code_lrphiiiii8_p101iiiii6_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i8* %scevgep73, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i8* %375, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   store i8 %32, i8* %p1.01.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i8* %scevgep76, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i8* %34, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %60, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   store i8 %95, i8* %p1.01.i.i.i65, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i8* %scevgep68, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i8* %97, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %116, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   store i8 %145, i8* %p1.01.i.i.i.i.i50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i8* %147, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %174, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   store i8 %209, i8* %p1.01.i.i.i36, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i8* %scevgep71, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i8* %211, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %230, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_124)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   store i8 %259, i8* %p1.01.i.i.i.i.i21, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i8* %scevgep70, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i8* %261, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %288, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   store i8 %323, i8* %p1.01.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i8* %scevgep74, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i8* %325, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %344, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_184)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   store i8 %373, i8* %p1.01.i.i.i.i.i6, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i8* %scevgep73, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i8* %375, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_in_a = Get_motion_code_0_2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   store i8 %32, i8* %p1.01.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		memory_controller_in_a = Get_motion_code_lrphiiiii_32;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i8* %scevgep76, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		memory_controller_in_a = Get_motion_code_loopexitiii_scevgep76;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i8* %34, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexitiii_34_reg;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %60, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_in_a = Get_motion_code_55_60;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   store i8 %95, i8* %p1.01.i.i.i65, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		memory_controller_in_a = Get_motion_code_lrphiii67_95;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i8* %scevgep68, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		memory_controller_in_a = Get_motion_code_loopexiti70_scevgep68;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i8* %97, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexiti69_97_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %116, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit73_116;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   store i8 %145, i8* %p1.01.i.i.i.i.i50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		memory_controller_in_a = Get_motion_code_lrphiiiii52_145;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		memory_controller_in_a = Get_motion_code_loopexitiii55_scevgep;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i8* %147, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexitiii54_147_reg;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %174, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_in_a = Get_motion_code_169_174;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   store i8 %209, i8* %p1.01.i.i.i36, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		memory_controller_in_a = Get_motion_code_lrphiii38_209;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i8* %scevgep71, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		memory_controller_in_a = Get_motion_code_loopexiti41_scevgep71;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i8* %211, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexiti40_211_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %230, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit44_230;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   store i8 %259, i8* %p1.01.i.i.i.i.i21, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		memory_controller_in_a = Get_motion_code_lrphiiiii23_259;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i8* %scevgep70, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		memory_controller_in_a = Get_motion_code_loopexitiii26_scevgep70;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i8* %261, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexitiii25_261_reg;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %288, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_in_a = Get_motion_code_284_288;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   store i8 %323, i8* %p1.01.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		memory_controller_in_a = Get_motion_code_lrphiii_323;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i8* %scevgep74, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		memory_controller_in_a = Get_motion_code_loopexiti_scevgep74;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i8* %325, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexiti_325_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %344, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_in_a = Get_motion_code_Flush_Bufferexit_344;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   store i8 %373, i8* %p1.01.i.i.i.i.i6, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		memory_controller_in_a = Get_motion_code_lrphiiiii8_373;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i8* %scevgep73, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		memory_controller_in_a = Get_motion_code_loopexitiii11_scevgep73;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i8* %375, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_in_a = Get_motion_code_Fill_Bufferexitiii10_375_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %1 = load i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %2, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %6*/
	/*   %7 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__6_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i.i.i*/
	/*   %20 = load i8* %scevgep66, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii_10)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   store i8 %32, i8* %p1.01.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_18)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i8* %scevgep76, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i8* %34, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %60, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %63*/
	/*   %64 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__63_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i60*/
	/*   %83 = load i8* %scevgep11, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi60_41)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   store i8 %95, i8* %p1.01.i.i.i65, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_49)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i8* %scevgep68, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_56)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i8* %97, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %116, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %119*/
	/*   %120 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__119_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i.i.i46*/
	/*   %133 = load i8* %scevgep1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii46_69)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   store i8 %145, i8* %p1.01.i.i.i.i.i50, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_77)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i8* %scevgep, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i8* %147, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %174, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %177*/
	/*   %178 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__177_96)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i31*/
	/*   %197 = load i8* %scevgep33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi31_101)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   store i8 %209, i8* %p1.01.i.i.i36, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_109)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i8* %scevgep71, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_116)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i8* %211, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %230, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %233*/
	/*   %234 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__233_124)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i.i.i17*/
	/*   %247 = load i8* %scevgep22, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii17_129)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   store i8 %259, i8* %p1.01.i.i.i.i.i21, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_137)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i8* %scevgep70, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i8* %261, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %288, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %291*/
	/*   %292 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__291_156)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i*/
	/*   %311 = load i8* %scevgep55, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderi_161)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   store i8 %323, i8* %p1.01.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_169)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i8* %scevgep74, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_176)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i8* %325, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %344, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %347*/
	/*   %348 = load i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__347_184)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.preheader.i.i.i2*/
	/*   %361 = load i8* %scevgep44, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_preheaderiii2_189)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   store i8 %373, i8* %p1.01.i.i.i.i.i6, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_197)) begin
		memory_controller_size_a = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i8* %scevgep73, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_204)) begin
		memory_controller_size_a = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i8* %375, i8** @ld_Rdptr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i32 %23, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i32 %38, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %61, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i32 %86, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i32 %101, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   store i32 %Incnt.2.i71, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %117, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i32 %136, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i32 %151, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   store i32 %Incnt.2.i.i.i57, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii58_88)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %175, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i32 %200, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i32 %215, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   store i32 %Incnt.2.i42, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_120)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %231, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i32 %250, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i32 %265, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   store i32 %Incnt.2.i.i.i28, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii29_148)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %289, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i32 %314, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i32 %329, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_180)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %345, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i32 %364, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i32 %379, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   store i32 %Incnt.2.i.i.i13, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii14_208)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		memory_controller_address_b = Get_motion_code_lrphiiiii_p202iiiii;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitiii_33_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i32 %23, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i32 %38, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_29)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %61, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		memory_controller_address_b = Get_motion_code_lrphiii67_p202iii64;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti69_96_reg;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i32 %86, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i32 %101, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   store i32 %Incnt.2.i71, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_60)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %117, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		memory_controller_address_b = Get_motion_code_lrphiiiii52_p202iiiii49;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitiii54_146_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i32 %136, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i32 %151, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   store i32 %Incnt.2.i.i.i57, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii58_88)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %175, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		memory_controller_address_b = Get_motion_code_lrphiii38_p202iii35;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti40_210_reg;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i32 %200, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i32 %215, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   store i32 %Incnt.2.i42, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_120)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %231, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		memory_controller_address_b = Get_motion_code_lrphiiiii23_p202iiiii20;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitiii25_260_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i32 %250, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i32 %265, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   store i32 %Incnt.2.i.i.i28, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii29_148)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %289, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		memory_controller_address_b = Get_motion_code_lrphiii_p202iii;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexiti_324_reg;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i32 %314, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i32 %329, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_180)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %345, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		memory_controller_address_b = Get_motion_code_lrphiiiii8_p202iiiii5;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		memory_controller_address_b = Get_motion_code_Fill_Bufferexitiii10_374_reg;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i32 %364, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i32 %379, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   store i32 %Incnt.2.i.i.i13, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii14_208)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i32 %23, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i32 %38, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %61, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i32 %86, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i32 %101, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   store i32 %Incnt.2.i71, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_60)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %117, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i32 %136, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i32 %151, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   store i32 %Incnt.2.i.i.i57, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii58_88)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %175, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i32 %200, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i32 %215, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   store i32 %Incnt.2.i42, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_120)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %231, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i32 %250, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i32 %265, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   store i32 %Incnt.2.i.i.i28, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii29_148)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %289, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i32 %314, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i32 %329, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_180)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %345, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i32 %364, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i32 %379, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   store i32 %Incnt.2.i.i.i13, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii14_208)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_in_b = Get_motion_code_0_4;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i32 %23, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		memory_controller_in_b = Get_motion_code_preheaderiii_23_reg;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i32 %38, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexitiii_38_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_29)) begin
		memory_controller_in_b = Get_motion_code_loopexit2iii_Incnt2iii_reg;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %61, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_in_b = Get_motion_code_55_61;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i32 %86, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		memory_controller_in_b = Get_motion_code_preheaderi60_86_reg;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i32 %101, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexiti69_101_reg;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   store i32 %Incnt.2.i71, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_60)) begin
		memory_controller_in_b = Get_motion_code_loopexit2i72_Incnt2i71_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %117, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit73_117;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i32 %136, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		memory_controller_in_b = Get_motion_code_preheaderiii46_136_reg;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i32 %151, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexitiii54_151_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   store i32 %Incnt.2.i.i.i57, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii58_88)) begin
		memory_controller_in_b = Get_motion_code_loopexit2iii58_Incnt2iii57_reg;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %175, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_in_b = Get_motion_code_169_175;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i32 %200, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		memory_controller_in_b = Get_motion_code_preheaderi31_200_reg;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i32 %215, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexiti40_215_reg;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   store i32 %Incnt.2.i42, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_120)) begin
		memory_controller_in_b = Get_motion_code_loopexit2i43_Incnt2i42_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %231, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit44_231;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i32 %250, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		memory_controller_in_b = Get_motion_code_preheaderiii17_250_reg;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i32 %265, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexitiii25_265_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   store i32 %Incnt.2.i.i.i28, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii29_148)) begin
		memory_controller_in_b = Get_motion_code_loopexit2iii29_Incnt2iii28_reg;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %289, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_in_b = Get_motion_code_284_289;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i32 %314, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		memory_controller_in_b = Get_motion_code_preheaderi_314_reg;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i32 %329, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexiti_329_reg;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_180)) begin
		memory_controller_in_b = Get_motion_code_loopexit2i_Incnt2i_reg;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %345, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_in_b = Get_motion_code_Flush_Bufferexit_345;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i32 %364, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		memory_controller_in_b = Get_motion_code_preheaderiii2_364_reg;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i32 %379, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_in_b = Get_motion_code_Fill_Bufferexitiii10_379_reg;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   store i32 %Incnt.2.i.i.i13, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii14_208)) begin
		memory_controller_in_b = Get_motion_code_loopexit2iii14_Incnt2iii13_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* Get_motion_code: %0*/
	/*   %3 = load i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %0*/
	/*   store i32 %4, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i*/
	/*   %32 = load i8* %p2.02.i.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii_16)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i*/
	/*   %35 = load i8* %33, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii_21)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i*/
	/*   store i32 %23, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i*/
	/*   store i32 %38, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.i.i*/
	/*   store i32 %Incnt.2.i.i.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %55*/
	/*   store i32 %61, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__55_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i67*/
	/*   %95 = load i8* %p2.02.i.i.i64, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii67_47)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i69*/
	/*   %98 = load i8* %96, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti69_52)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i70*/
	/*   store i32 %86, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti70_55)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i72.loopexit*/
	/*   store i32 %101, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72loopexit_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i72*/
	/*   store i32 %Incnt.2.i71, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i72_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit73*/
	/*   store i32 %117, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit73_62)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i52*/
	/*   %145 = load i8* %p2.02.i.i.i.i.i49, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii52_75)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i54*/
	/*   %148 = load i8* %146, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii54_80)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i55*/
	/*   store i32 %136, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii55_83)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i56*/
	/*   store i32 %151, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii56_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.i.i58*/
	/*   store i32 %Incnt.2.i.i.i57, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii58_88)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %169*/
	/*   store i32 %175, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__169_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i38*/
	/*   %209 = load i8* %p2.02.i.i.i35, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii38_107)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i40*/
	/*   %212 = load i8* %210, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti40_112)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i41*/
	/*   store i32 %200, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti41_115)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i43.loopexit*/
	/*   store i32 %215, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43loopexit_118)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i43*/
	/*   store i32 %Incnt.2.i42, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i43_120)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit44*/
	/*   store i32 %231, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit44_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i23*/
	/*   %259 = load i8* %p2.02.i.i.i.i.i20, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii23_135)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i25*/
	/*   %262 = load i8* %260, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii25_140)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i26*/
	/*   store i32 %250, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii26_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i27*/
	/*   store i32 %265, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii27_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.i.i29*/
	/*   store i32 %Incnt.2.i.i.i28, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii29_148)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %284*/
	/*   store i32 %289, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__284_154)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i*/
	/*   %323 = load i8* %p2.02.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiii_167)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i*/
	/*   %326 = load i8* %324, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexiti_172)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i*/
	/*   store i32 %314, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexiti_175)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit*/
	/*   store i32 %329, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexit_178)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i*/
	/*   store i32 %Incnt.2.i, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2i_180)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %Flush_Buffer.exit*/
	/*   store i32 %345, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Flush_Bufferexit_182)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.lr.ph.i.i.i.i.i8*/
	/*   %373 = load i8* %p2.02.i.i.i.i.i5, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_lrphiiiii8_195)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %Fill_Buffer.exit.i.i.i10*/
	/*   %376 = load i8* %374, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_Fill_Bufferexitiii10_200)) begin
		memory_controller_size_b = 2'd0;
	end
	/* Get_motion_code: %.loopexit.i.i.i11*/
	/*   store i32 %364, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexitiii11_203)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.loopexit.i.i12*/
	/*   store i32 %379, i32* @ld_Bfr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iloopexitii12_206)) begin
		memory_controller_size_b = 2'd2;
	end
	/* Get_motion_code: %.loopexit2.i.i.i14*/
	/*   store i32 %Incnt.2.i.i.i13, i32* @ld_Incnt, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB_loopexit2iii14_208)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* Get_motion_code: %395*/
	/*   ret i32 %.0*/
	if ((cur_state == LEGUP_F_Get_motion_code_BB__395_212)) begin
		return_val <= Get_motion_code_395_0_reg;
		if (start == 1'b0 && ^(Get_motion_code_395_0_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__0_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB__0_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_lrphiiii_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexiti_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__12_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__12_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__12_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__12_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__18_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__18_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__18_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB_preheader1iipreheader_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB_preheader1ii_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB_lrphiiii4preheader_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB_lrphiiii4_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB_lrphiiii4_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB_lrphiiii4_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB_lrphiiii4_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitii_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB_loopexitii_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB_loopexitii_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB_loopexitii_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexit_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__41_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__46_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB_decode_motion_vectorexitii_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB_decode_motion_vectorexitii_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__53_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__53_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__53_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__53_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__59_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__59_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__59_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB_preheader1ii7preheader_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB_preheader1ii7_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB_lrphiiii11preheader_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB_lrphiiii11_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB_lrphiiii11_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB_lrphiiii11_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB_lrphiiii11_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitii12loopexit_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB_Fill_Bufferexitii12_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB_loopexitii14_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB_loopexitii14_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB_loopexitii14_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti15_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB_loopexit2iloopexiti15_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii17_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB_loopexit2ii17_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB_Get_Bitsexit18_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__82_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__87_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB_motion_vectorsexit_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB_motion_vectorsexit_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__106_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB__108_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB__110_74 = 7'd74;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [6:0] LEGUP_function_call_13 = 7'd13;
parameter [6:0] LEGUP_function_call_42 = 7'd42;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_lrphiiii_indvar12;
reg [31:0] main_lrphiiii_indvar12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p202iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p202iiii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p101iiii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii_p101iiii_reg;
reg [7:0] main_lrphiiii_1;
reg [7:0] main_lrphiiii_1_reg;
reg [31:0] main_lrphiiii_indvarnext13;
reg [31:0] main_lrphiiii_indvarnext13_reg;
reg  main_lrphiiii_exitcond14;
reg  main_lrphiiii_exitcond14_reg;
reg [7:0] main_Get_Bitsexiti_2;
reg [7:0] main_Get_Bitsexiti_2_reg;
reg [31:0] main_Get_Bitsexiti_3;
reg [31:0] main_Get_Bitsexiti_3_reg;
reg [31:0] main_Get_Bitsexiti_4;
reg [31:0] main_Get_Bitsexiti_4_reg;
reg [7:0] main_Get_Bitsexiti_prei;
reg [7:0] main_Get_Bitsexiti_prei_reg;
reg [31:0] main_Get_Bitsexiti_phitmpi;
reg [31:0] main_Get_Bitsexiti_phitmpi_reg;
reg [31:0] main_Get_Bitsexiti_phitmp3i;
reg [31:0] main_Get_Bitsexiti_phitmp3i_reg;
reg [31:0] main_Get_Bitsexiti_5;
reg [31:0] main_Get_Bitsexiti_5_reg;
reg [7:0] main_Get_Bitsexiti_pre1i;
reg [7:0] main_Get_Bitsexiti_pre1i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp4i;
reg [31:0] main_Get_Bitsexiti_phitmp4i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp5i;
reg [31:0] main_Get_Bitsexiti_phitmp5i_reg;
reg [31:0] main_Get_Bitsexiti_6;
reg [31:0] main_Get_Bitsexiti_6_reg;
reg [7:0] main_Get_Bitsexiti_pre2i;
reg [7:0] main_Get_Bitsexiti_pre2i_reg;
reg [31:0] main_Get_Bitsexiti_phitmp6i;
reg [31:0] main_Get_Bitsexiti_phitmp6i_reg;
reg [31:0] main_Get_Bitsexiti_7;
reg [31:0] main_Get_Bitsexiti_7_reg;
reg [31:0] main_Get_Bitsexiti_8;
reg [31:0] main_Get_Bitsexiti_8_reg;
reg [31:0] main_Get_Bitsexiti_9;
reg [31:0] main_Get_Bitsexiti_9_reg;
reg [31:0] main_Get_Bitsexiti_10;
reg [31:0] main_Get_Bitsexiti_10_reg;
reg  main_Get_Bitsexiti_11;
reg  main_Get_Bitsexiti_11_reg;
reg [31:0] main_12_13;
reg [31:0] main_12_13_reg;
reg [31:0] main_12_14;
reg [31:0] main_12_14_reg;
reg [31:0] main_12_15;
reg [31:0] main_12_15_reg;
reg [31:0] main_12_16;
reg [31:0] main_12_16_reg;
reg  main_12_17;
reg  main_12_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_18_19_reg;
reg  main_18_20;
reg  main_18_20_reg;
reg [31:0] main_18_21;
reg [31:0] main_18_21_reg;
reg [31:0] main_preheader1iipreheader_22;
reg [31:0] main_preheader1iipreheader_22_reg;
reg [31:0] main_preheader1ii_indvar10;
reg [31:0] main_preheader1ii_indvar10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii_23_reg;
reg [31:0] main_preheader1ii_24;
reg [31:0] main_preheader1ii_24_reg;
reg [31:0] main_preheader1ii_25;
reg [31:0] main_preheader1ii_25_reg;
reg  main_preheader1ii_26;
reg  main_preheader1ii_26_reg;
reg [31:0] main_lrphiiii4_indvar5;
reg [31:0] main_lrphiiii4_indvar5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii4_p202iiii1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii4_p202iiii1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii4_p101iiii2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii4_p101iiii2_reg;
reg [7:0] main_lrphiiii4_27;
reg [7:0] main_lrphiiii4_27_reg;
reg [31:0] main_lrphiiii4_indvarnext6;
reg [31:0] main_lrphiiii4_indvarnext6_reg;
reg  main_lrphiiii4_exitcond7;
reg  main_lrphiiii4_exitcond7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_28;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii_29_reg;
reg  main_Fill_Bufferexitii_30;
reg  main_Fill_Bufferexitii_30_reg;
reg [31:0] main_Fill_Bufferexitii_indvarnext11;
reg [31:0] main_Fill_Bufferexitii_indvarnext11_reg;
reg [31:0] main_loopexitii_31;
reg [31:0] main_loopexitii_31_reg;
reg [31:0] main_loopexitii_32;
reg [31:0] main_loopexitii_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii_scevgepi;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii_scevgepi_reg;
reg [31:0] main_loopexitii_33;
reg [31:0] main_loopexitii_33_reg;
reg [31:0] main_loopexitii_34;
reg [31:0] main_loopexitii_34_reg;
reg [31:0] main_loopexitii_35;
reg [31:0] main_loopexitii_35_reg;
reg [31:0] main_loopexit2iloopexiti_36;
reg [31:0] main_loopexit2iloopexiti_36_reg;
reg [31:0] main_loopexit2iloopexiti_37;
reg [31:0] main_loopexit2iloopexiti_37_reg;
reg [31:0] main_loopexit2iloopexiti_38;
reg [31:0] main_loopexit2iloopexiti_38_reg;
reg [31:0] main_loopexit2ii_Incnt2ii;
reg [31:0] main_loopexit2ii_Incnt2ii_reg;
reg  main_Get_Bitsexit_39;
reg  main_Get_Bitsexit_39_reg;
reg [31:0] main_Get_Bitsexit_40;
reg [31:0] main_Get_Bitsexit_40_reg;
reg [31:0] main_41_42;
reg [31:0] main_41_42_reg;
reg [31:0] main_41_43;
reg [31:0] main_41_43_reg;
reg  main_41_44;
reg  main_41_44_reg;
reg [31:0] main_41_45;
reg [31:0] main_41_45_reg;
reg [31:0] main_41_;
reg [31:0] main_41__reg;
reg [31:0] main_46_47;
reg [31:0] main_46_47_reg;
reg [31:0] main_46_neg1iii;
reg [31:0] main_46_neg1iii_reg;
reg [31:0] main_46_neg2iii;
reg [31:0] main_46_neg2iii_reg;
reg [31:0] main_46_48;
reg [31:0] main_46_48_reg;
reg  main_46_49;
reg  main_46_49_reg;
reg [31:0] main_46_50;
reg [31:0] main_46_50_reg;
reg [31:0] main_46_12;
reg [31:0] main_46_12_reg;
reg [31:0] main_decode_motion_vectorexitii_vec0iii;
reg [31:0] main_decode_motion_vectorexitii_vec0iii_reg;
reg [31:0] main_decode_motion_vectorexitii_51;
reg [31:0] main_decode_motion_vectorexitii_51_reg;
reg  main_decode_motion_vectorexitii_52;
reg  main_decode_motion_vectorexitii_52_reg;
reg [31:0] main_53_54;
reg [31:0] main_53_54_reg;
reg [31:0] main_53_55;
reg [31:0] main_53_55_reg;
reg [31:0] main_53_56;
reg [31:0] main_53_56_reg;
reg [31:0] main_53_57;
reg [31:0] main_53_57_reg;
reg  main_53_58;
reg  main_53_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_59_60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_59_60_reg;
reg  main_59_61;
reg  main_59_61_reg;
reg [31:0] main_59_62;
reg [31:0] main_59_62_reg;
reg [31:0] main_preheader1ii7preheader_63;
reg [31:0] main_preheader1ii7preheader_63_reg;
reg [31:0] main_preheader1ii7_indvar3;
reg [31:0] main_preheader1ii7_indvar3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii7_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader1ii7_64_reg;
reg [31:0] main_preheader1ii7_65;
reg [31:0] main_preheader1ii7_65_reg;
reg [31:0] main_preheader1ii7_66;
reg [31:0] main_preheader1ii7_66_reg;
reg  main_preheader1ii7_67;
reg  main_preheader1ii7_67_reg;
reg [31:0] main_lrphiiii11_indvar;
reg [31:0] main_lrphiiii11_indvar_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii11_p202iiii8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii11_p202iiii8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii11_p101iiii9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphiiii11_p101iiii9_reg;
reg [7:0] main_lrphiiii11_68;
reg [7:0] main_lrphiiii11_68_reg;
reg [31:0] main_lrphiiii11_indvarnext;
reg [31:0] main_lrphiiii11_indvarnext_reg;
reg  main_lrphiiii11_exitcond;
reg  main_lrphiiii11_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii12_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii12_69_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii12_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Fill_Bufferexitii12_70_reg;
reg  main_Fill_Bufferexitii12_71;
reg  main_Fill_Bufferexitii12_71_reg;
reg [31:0] main_Fill_Bufferexitii12_indvarnext4;
reg [31:0] main_Fill_Bufferexitii12_indvarnext4_reg;
reg [31:0] main_loopexitii14_72;
reg [31:0] main_loopexitii14_72_reg;
reg [31:0] main_loopexitii14_73;
reg [31:0] main_loopexitii14_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii14_scevgepi13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_loopexitii14_scevgepi13_reg;
reg [31:0] main_loopexitii14_74;
reg [31:0] main_loopexitii14_74_reg;
reg [31:0] main_loopexitii14_75;
reg [31:0] main_loopexitii14_75_reg;
reg [31:0] main_loopexitii14_76;
reg [31:0] main_loopexitii14_76_reg;
reg [31:0] main_loopexit2iloopexiti15_77;
reg [31:0] main_loopexit2iloopexiti15_77_reg;
reg [31:0] main_loopexit2iloopexiti15_78;
reg [31:0] main_loopexit2iloopexiti15_78_reg;
reg [31:0] main_loopexit2iloopexiti15_79;
reg [31:0] main_loopexit2iloopexiti15_79_reg;
reg [31:0] main_loopexit2ii17_Incnt2ii16;
reg [31:0] main_loopexit2ii17_Incnt2ii16_reg;
reg  main_Get_Bitsexit18_80;
reg  main_Get_Bitsexit18_80_reg;
reg [31:0] main_Get_Bitsexit18_81;
reg [31:0] main_Get_Bitsexit18_81_reg;
reg [31:0] main_82_83;
reg [31:0] main_82_83_reg;
reg [31:0] main_82_84;
reg [31:0] main_82_84_reg;
reg  main_82_85;
reg  main_82_85_reg;
reg [31:0] main_82_86;
reg [31:0] main_82_86_reg;
reg [31:0] main_82_13;
reg [31:0] main_82_13_reg;
reg [31:0] main_87_88;
reg [31:0] main_87_88_reg;
reg [31:0] main_87_neg1i4ii;
reg [31:0] main_87_neg1i4ii_reg;
reg [31:0] main_87_neg2i5ii;
reg [31:0] main_87_neg2i5ii_reg;
reg [31:0] main_87_89;
reg [31:0] main_87_89_reg;
reg  main_87_90;
reg  main_87_90_reg;
reg [31:0] main_87_91;
reg [31:0] main_87_91_reg;
reg [31:0] main_87_14;
reg [31:0] main_87_14_reg;
reg [31:0] main_motion_vectorsexit_vec0i6ii;
reg [31:0] main_motion_vectorsexit_vec0i6ii_reg;
reg [31:0] main_motion_vectorsexit_masklobit;
reg [31:0] main_motion_vectorsexit_masklobit_reg;
reg [31:0] main_motion_vectorsexit_92;
reg [31:0] main_motion_vectorsexit_92_reg;
reg  main_motion_vectorsexit_93;
reg  main_motion_vectorsexit_93_reg;
reg [31:0] main_motion_vectorsexit_94;
reg [31:0] main_motion_vectorsexit_94_reg;
reg [31:0] main_motion_vectorsexit_95;
reg [31:0] main_motion_vectorsexit_95_reg;
reg [31:0] main_motion_vectorsexit_iimask;
reg [31:0] main_motion_vectorsexit_iimask_reg;
reg  main_motion_vectorsexit_96;
reg  main_motion_vectorsexit_96_reg;
reg [31:0] main_motion_vectorsexit_97;
reg [31:0] main_motion_vectorsexit_97_reg;
reg [31:0] main_motion_vectorsexit_98;
reg [31:0] main_motion_vectorsexit_98_reg;
reg [31:0] main_motion_vectorsexit_99;
reg [31:0] main_motion_vectorsexit_99_reg;
reg [31:0] main_motion_vectorsexit_100;
reg [31:0] main_motion_vectorsexit_100_reg;
reg [31:0] main_motion_vectorsexit_101;
reg [31:0] main_motion_vectorsexit_101_reg;
reg [31:0] main_motion_vectorsexit_102;
reg [31:0] main_motion_vectorsexit_102_reg;
reg [31:0] main_motion_vectorsexit_103;
reg [31:0] main_motion_vectorsexit_103_reg;
reg  main_motion_vectorsexit_105;
reg  main_motion_vectorsexit_105_reg;
wire [10:0] rom_8_address_a;
wire  rom_8_write_enable_a;
wire [7:0] rom_8_in_a;
wire [7:0] rom_8_out_a;
wire [10:0] rom_8_address_b;
wire  rom_8_write_enable_b;
wire [7:0] rom_8_in_b;
wire [7:0] rom_8_out_b;
wire [10:0] ram_8_address_a;
wire  ram_8_write_enable_a;
wire [7:0] ram_8_in_a;
wire [7:0] ram_8_out_a;
wire [10:0] ram_8_address_b;
wire  ram_8_write_enable_b;
wire [7:0] ram_8_in_b;
wire [7:0] ram_8_out_b;
wire  ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire  ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [3:0] MVtab0_address_a;
wire  MVtab0_write_enable_a;
wire [7:0] MVtab0_in_a;
wire [7:0] MVtab0_out_a;
wire [3:0] MVtab0_address_b;
wire  MVtab0_write_enable_b;
wire [7:0] MVtab0_in_b;
wire [7:0] MVtab0_out_b;
wire [3:0] MVtab1_address_a;
wire  MVtab1_write_enable_a;
wire [7:0] MVtab1_in_a;
wire [7:0] MVtab1_out_a;
wire [3:0] MVtab1_address_b;
wire  MVtab1_write_enable_b;
wire [7:0] MVtab1_in_b;
wire [7:0] MVtab1_out_b;
wire [4:0] MVtab2_address_a;
wire  MVtab2_write_enable_a;
wire [7:0] MVtab2_in_a;
wire [7:0] MVtab2_out_a;
wire [4:0] MVtab2_address_b;
wire  MVtab2_write_enable_b;
wire [7:0] MVtab2_in_b;
wire [7:0] MVtab2_out_b;
reg  Get_motion_code_start;
wire  Get_motion_code_memory_controller_enable_a;
wire  Get_motion_code_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_out_a;
wire [1:0] Get_motion_code_memory_controller_size_a;
wire  Get_motion_code_memory_controller_enable_b;
wire  Get_motion_code_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] Get_motion_code_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] Get_motion_code_memory_controller_out_b;
wire [1:0] Get_motion_code_memory_controller_size_b;
reg  Get_motion_code_memory_controller_waitrequest;
reg  Get_motion_code_finish_final;
reg  Get_motion_code_finish_reg;
wire  Get_motion_code_finish;
wire [31:0] Get_motion_code_return_val;
reg [31:0] Get_motion_code_return_val_reg;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


Get_motion_code Get_motion_code (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (Get_motion_code_memory_controller_enable_a),
	.memory_controller_address_a (Get_motion_code_memory_controller_address_a),
	.memory_controller_write_enable_a (Get_motion_code_memory_controller_write_enable_a),
	.memory_controller_in_a (Get_motion_code_memory_controller_in_a),
	.memory_controller_size_a (Get_motion_code_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (Get_motion_code_memory_controller_enable_b),
	.memory_controller_address_b (Get_motion_code_memory_controller_address_b),
	.memory_controller_write_enable_b (Get_motion_code_memory_controller_write_enable_b),
	.memory_controller_in_b (Get_motion_code_memory_controller_in_b),
	.memory_controller_size_b (Get_motion_code_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (Get_motion_code_start),
	.finish (Get_motion_code_finish),
	.return_val (Get_motion_code_return_val)
);

defparam
	Get_motion_code.tag_offset = tag_offset;

// Local Rams


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %motion_vectors.exit*/
	/*   %104 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %103) #1*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		$write("Result: %d\n", $signed(main_motion_vectorsexit_103));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_motion_vectorsexit_103) === 1'bX) finish <= 0;
	end
	/* main: %106*/
	/*   %107 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__106_72)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %108*/
	/*   %109 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__108_73)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_Fill_Bufferexitii12_59:
	if ((main_Fill_Bufferexitii12_71 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1ii7_52;
	else if ((main_Fill_Bufferexitii12_71 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti15_63;
LEGUP_F_main_BB_Fill_Bufferexitii12loopexit_58:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii12_59;
LEGUP_F_main_BB_Fill_Bufferexitii_30:
	if ((main_Fill_Bufferexitii_30 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1ii_23;
	else if ((main_Fill_Bufferexitii_30 == 1'd0))
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti_34;
LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_29:
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_30;
LEGUP_F_main_BB_Get_Bitsexit18_67:
	if ((main_Get_Bitsexit18_80 == 1'd1))
		next_state = LEGUP_F_main_BB__82_68;
	else if ((main_Get_Bitsexit18_80 == 1'd0))
		next_state = LEGUP_F_main_BB__87_69;
LEGUP_F_main_BB_Get_Bitsexit_38:
	if ((main_Get_Bitsexit_39 == 1'd1))
		next_state = LEGUP_F_main_BB__41_39;
	else if ((main_Get_Bitsexit_39 == 1'd0))
		next_state = LEGUP_F_main_BB__46_40;
LEGUP_F_main_BB_Get_Bitsexiti_10:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_11;
LEGUP_F_main_BB_Get_Bitsexiti_11:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_12;
LEGUP_F_main_BB_Get_Bitsexiti_12:
		next_state = LEGUP_function_call_13;
LEGUP_F_main_BB_Get_Bitsexiti_14:
	if ((main_Get_Bitsexiti_11 == 1'd1))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_41;
	else if ((main_Get_Bitsexiti_11 == 1'd0))
		next_state = LEGUP_F_main_BB__12_15;
LEGUP_F_main_BB_Get_Bitsexiti_8:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_9;
LEGUP_F_main_BB_Get_Bitsexiti_9:
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_10;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB_lrphiiii_4;
LEGUP_F_main_BB__106_72:
		next_state = LEGUP_F_main_BB__110_74;
LEGUP_F_main_BB__108_73:
		next_state = LEGUP_F_main_BB__110_74;
LEGUP_F_main_BB__110_74:
		next_state = LEGUP_0;
LEGUP_F_main_BB__12_15:
		next_state = LEGUP_F_main_BB__12_16;
LEGUP_F_main_BB__12_16:
		next_state = LEGUP_F_main_BB__12_17;
LEGUP_F_main_BB__12_17:
		next_state = LEGUP_F_main_BB__12_18;
LEGUP_F_main_BB__12_18:
	if ((main_12_17_reg == 1'd1))
		next_state = LEGUP_F_main_BB__18_19;
	else if ((main_12_17_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexit_38;
LEGUP_F_main_BB__18_19:
		next_state = LEGUP_F_main_BB__18_20;
LEGUP_F_main_BB__18_20:
		next_state = LEGUP_F_main_BB__18_21;
LEGUP_F_main_BB__18_21:
	if ((main_18_20 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitii_31;
	else if ((main_18_20 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1iipreheader_22;
LEGUP_F_main_BB__41_39:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_41;
LEGUP_F_main_BB__46_40:
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_41;
LEGUP_F_main_BB__53_44:
		next_state = LEGUP_F_main_BB__53_45;
LEGUP_F_main_BB__53_45:
		next_state = LEGUP_F_main_BB__53_46;
LEGUP_F_main_BB__53_46:
		next_state = LEGUP_F_main_BB__53_47;
LEGUP_F_main_BB__53_47:
	if ((main_53_58_reg == 1'd1))
		next_state = LEGUP_F_main_BB__59_48;
	else if ((main_53_58_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Get_Bitsexit18_67;
LEGUP_F_main_BB__59_48:
		next_state = LEGUP_F_main_BB__59_49;
LEGUP_F_main_BB__59_49:
		next_state = LEGUP_F_main_BB__59_50;
LEGUP_F_main_BB__59_50:
	if ((main_59_61 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitii14_60;
	else if ((main_59_61 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1ii7preheader_51;
LEGUP_F_main_BB__82_68:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_70;
LEGUP_F_main_BB__87_69:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_70;
LEGUP_F_main_BB_decode_motion_vectorexitii_41:
		next_state = LEGUP_function_call_42;
LEGUP_F_main_BB_decode_motion_vectorexitii_43:
	if ((main_decode_motion_vectorexitii_52 == 1'd1))
		next_state = LEGUP_F_main_BB_motion_vectorsexit_70;
	else if ((main_decode_motion_vectorexitii_52 == 1'd0))
		next_state = LEGUP_F_main_BB__53_44;
LEGUP_F_main_BB_loopexit2ii17_65:
		next_state = LEGUP_F_main_BB_loopexit2ii17_66;
LEGUP_F_main_BB_loopexit2ii17_66:
		next_state = LEGUP_F_main_BB_Get_Bitsexit18_67;
LEGUP_F_main_BB_loopexit2ii_36:
		next_state = LEGUP_F_main_BB_loopexit2ii_37;
LEGUP_F_main_BB_loopexit2ii_37:
		next_state = LEGUP_F_main_BB_Get_Bitsexit_38;
LEGUP_F_main_BB_loopexit2iloopexiti15_63:
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti15_64;
LEGUP_F_main_BB_loopexit2iloopexiti15_64:
		next_state = LEGUP_F_main_BB_loopexit2ii17_65;
LEGUP_F_main_BB_loopexit2iloopexiti_34:
		next_state = LEGUP_F_main_BB_loopexit2iloopexiti_35;
LEGUP_F_main_BB_loopexit2iloopexiti_35:
		next_state = LEGUP_F_main_BB_loopexit2ii_36;
LEGUP_F_main_BB_loopexitii14_60:
		next_state = LEGUP_F_main_BB_loopexitii14_61;
LEGUP_F_main_BB_loopexitii14_61:
		next_state = LEGUP_F_main_BB_loopexitii14_62;
LEGUP_F_main_BB_loopexitii14_62:
		next_state = LEGUP_F_main_BB_loopexit2ii17_65;
LEGUP_F_main_BB_loopexitii_31:
		next_state = LEGUP_F_main_BB_loopexitii_32;
LEGUP_F_main_BB_loopexitii_32:
		next_state = LEGUP_F_main_BB_loopexitii_33;
LEGUP_F_main_BB_loopexitii_33:
		next_state = LEGUP_F_main_BB_loopexit2ii_36;
LEGUP_F_main_BB_lrphiiii11_54:
		next_state = LEGUP_F_main_BB_lrphiiii11_55;
LEGUP_F_main_BB_lrphiiii11_55:
		next_state = LEGUP_F_main_BB_lrphiiii11_56;
LEGUP_F_main_BB_lrphiiii11_56:
		next_state = LEGUP_F_main_BB_lrphiiii11_57;
LEGUP_F_main_BB_lrphiiii11_57:
	if ((main_lrphiiii11_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii12loopexit_58;
	else if ((main_lrphiiii11_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii11_54;
LEGUP_F_main_BB_lrphiiii11preheader_53:
		next_state = LEGUP_F_main_BB_lrphiiii11_54;
LEGUP_F_main_BB_lrphiiii4_25:
		next_state = LEGUP_F_main_BB_lrphiiii4_26;
LEGUP_F_main_BB_lrphiiii4_26:
		next_state = LEGUP_F_main_BB_lrphiiii4_27;
LEGUP_F_main_BB_lrphiiii4_27:
		next_state = LEGUP_F_main_BB_lrphiiii4_28;
LEGUP_F_main_BB_lrphiiii4_28:
	if ((main_lrphiiii4_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_29;
	else if ((main_lrphiiii4_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii4_25;
LEGUP_F_main_BB_lrphiiii4preheader_24:
		next_state = LEGUP_F_main_BB_lrphiiii4_25;
LEGUP_F_main_BB_lrphiiii_4:
		next_state = LEGUP_F_main_BB_lrphiiii_5;
LEGUP_F_main_BB_lrphiiii_5:
		next_state = LEGUP_F_main_BB_lrphiiii_6;
LEGUP_F_main_BB_lrphiiii_6:
		next_state = LEGUP_F_main_BB_lrphiiii_7;
LEGUP_F_main_BB_lrphiiii_7:
	if ((main_lrphiiii_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_8;
	else if ((main_lrphiiii_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii_4;
LEGUP_F_main_BB_motion_vectorsexit_70:
		next_state = LEGUP_F_main_BB_motion_vectorsexit_71;
LEGUP_F_main_BB_motion_vectorsexit_71:
	if ((main_motion_vectorsexit_105 == 1'd1))
		next_state = LEGUP_F_main_BB__106_72;
	else if ((main_motion_vectorsexit_105 == 1'd0))
		next_state = LEGUP_F_main_BB__108_73;
LEGUP_F_main_BB_preheader1ii7_52:
	if ((main_preheader1ii7_67 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii12_59;
	else if ((main_preheader1ii7_67 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii11preheader_53;
LEGUP_F_main_BB_preheader1ii7preheader_51:
		next_state = LEGUP_F_main_BB_preheader1ii7_52;
LEGUP_F_main_BB_preheader1ii_23:
	if ((main_preheader1ii_26 == 1'd1))
		next_state = LEGUP_F_main_BB_Fill_Bufferexitii_30;
	else if ((main_preheader1ii_26 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphiiii4preheader_24;
LEGUP_F_main_BB_preheader1iipreheader_22:
		next_state = LEGUP_F_main_BB_preheader1ii_23;
LEGUP_function_call_13:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_Get_Bitsexiti_14;
LEGUP_function_call_42:
	if ((Get_motion_code_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_decode_motion_vectorexitii_43;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar12 = phi i32 [ %indvar.next13, %.lr.ph.i.i.i.i ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_indvar12 = 32'd0;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar12 = phi i32 [ %indvar.next13, %.lr.ph.i.i.i.i ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcond14_reg == 1'd0))) */ begin
		main_lrphiiii_indvar12 = main_lrphiiii_indvarnext13_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar12 = phi i32 [ %indvar.next13, %.lr.ph.i.i.i.i ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii_indvar12_reg <= main_lrphiiii_indvar12;
		if (start == 1'b0 && ^(main_lrphiiii_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_indvar12_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar12 = phi i32 [ %indvar.next13, %.lr.ph.i.i.i.i ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii_7) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii_exitcond14_reg == 1'd0))) begin
		main_lrphiiii_indvar12_reg <= main_lrphiiii_indvar12;
		if (start == 1'b0 && ^(main_lrphiiii_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_indvar12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar12*/
		main_lrphiiii_p202iiii = (`TAG_g_inRdbfr_a | (1 * main_lrphiiii_indvar12_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p2.02.i.i.i.i = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_p202iiii_reg <= main_lrphiiii_p202iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p202iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p202iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar12*/
		main_lrphiiii_p101iiii = (`TAG_g_ld_Rdbfr_a | (1 * main_lrphiiii_indvar12_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %p1.01.i.i.i.i = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar12*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_p101iiii_reg <= main_lrphiiii_p101iiii;
		if (start == 1'b0 && ^(main_lrphiiii_p101iiii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_p101iiii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
		main_lrphiiii_1 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		main_lrphiiii_1_reg <= main_lrphiiii_1;
		if (start == 1'b0 && ^(main_lrphiiii_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
		main_lrphiiii_indvarnext13 = (main_lrphiiii_indvar12_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_indvarnext13_reg <= main_lrphiiii_indvarnext13;
		if (start == 1'b0 && ^(main_lrphiiii_indvarnext13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_indvarnext13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 2048*/
		main_lrphiiii_exitcond14 = (main_lrphiiii_indvarnext13 == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, 2048*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		main_lrphiiii_exitcond14_reg <= main_lrphiiii_exitcond14;
		if (start == 1'b0 && ^(main_lrphiiii_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
		main_Get_Bitsexiti_2 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_2_reg <= main_Get_Bitsexiti_2;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %3 = zext i8 %2 to i32*/
		main_Get_Bitsexiti_3 = main_Get_Bitsexiti_2;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %3 = zext i8 %2 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_3_reg <= main_Get_Bitsexiti_3;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %4 = shl nuw i32 %3, 24*/
		main_Get_Bitsexiti_4 = (main_Get_Bitsexiti_3 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %4 = shl nuw i32 %3, 24*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_4_reg <= main_Get_Bitsexiti_4;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
		main_Get_Bitsexiti_prei = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_prei_reg <= main_Get_Bitsexiti_prei;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp.i = zext i8 %.pre.i to i32*/
		main_Get_Bitsexiti_phitmpi = main_Get_Bitsexiti_prei;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp.i = zext i8 %.pre.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_phitmpi_reg <= main_Get_Bitsexiti_phitmpi;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp3.i = shl nuw nsw i32 %phitmp.i, 16*/
		main_Get_Bitsexiti_phitmp3i = (main_Get_Bitsexiti_phitmpi <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp3.i = shl nuw nsw i32 %phitmp.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_phitmp3i_reg <= main_Get_Bitsexiti_phitmp3i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %5 = or i32 %4, %phitmp3.i*/
		main_Get_Bitsexiti_5 = (main_Get_Bitsexiti_4 | main_Get_Bitsexiti_phitmp3i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %5 = or i32 %4, %phitmp3.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		main_Get_Bitsexiti_5_reg <= main_Get_Bitsexiti_5;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
		main_Get_Bitsexiti_pre1i = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_pre1i_reg <= main_Get_Bitsexiti_pre1i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_pre1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_pre1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp4.i = zext i8 %.pre1.i to i32*/
		main_Get_Bitsexiti_phitmp4i = main_Get_Bitsexiti_pre1i;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp4.i = zext i8 %.pre1.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp4i_reg <= main_Get_Bitsexiti_phitmp4i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp5.i = shl nuw nsw i32 %phitmp4.i, 8*/
		main_Get_Bitsexiti_phitmp5i = (main_Get_Bitsexiti_phitmp4i <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp5.i = shl nuw nsw i32 %phitmp4.i, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp5i_reg <= main_Get_Bitsexiti_phitmp5i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %6 = or i32 %5, %phitmp5.i*/
		main_Get_Bitsexiti_6 = (main_Get_Bitsexiti_5_reg | main_Get_Bitsexiti_phitmp5i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %6 = or i32 %5, %phitmp5.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_6_reg <= main_Get_Bitsexiti_6;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
		main_Get_Bitsexiti_pre2i = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_pre2i_reg <= main_Get_Bitsexiti_pre2i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_pre2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_pre2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp6.i = zext i8 %.pre2.i to i32*/
		main_Get_Bitsexiti_phitmp6i = main_Get_Bitsexiti_pre2i;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %phitmp6.i = zext i8 %.pre2.i to i32*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_phitmp6i_reg <= main_Get_Bitsexiti_phitmp6i;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_phitmp6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_phitmp6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %7 = or i32 %6, %phitmp6.i*/
		main_Get_Bitsexiti_7 = (main_Get_Bitsexiti_6 | main_Get_Bitsexiti_phitmp6i);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %7 = or i32 %6, %phitmp6.i*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_7_reg <= main_Get_Bitsexiti_7;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %8 = shl i32 %7, 1*/
		main_Get_Bitsexiti_8 = (main_Get_Bitsexiti_7 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %8 = shl i32 %7, 1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_8_reg <= main_Get_Bitsexiti_8;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %9 = or i32 %8, 136314880*/
		main_Get_Bitsexiti_9 = (main_Get_Bitsexiti_8 | 32'd136314880);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %9 = or i32 %8, 136314880*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		main_Get_Bitsexiti_9_reg <= main_Get_Bitsexiti_9;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
		main_Get_Bitsexiti_10 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		main_Get_Bitsexiti_10_reg <= main_Get_Bitsexiti_10;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %11 = icmp eq i32 %10, 0*/
		main_Get_Bitsexiti_11 = (main_Get_Bitsexiti_10_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %11 = icmp eq i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14)) begin
		main_Get_Bitsexiti_11_reg <= main_Get_Bitsexiti_11;
		if (start == 1'b0 && ^(main_Get_Bitsexiti_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexiti_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
		main_12_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %14 = lshr i32 %13, 24*/
		main_12_14 = (main_12_13 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %14 = lshr i32 %13, 24*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_14_reg <= main_12_14;
		if (start == 1'b0 && ^(main_12_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
		main_12_15 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_15_reg <= main_12_15;
		if (start == 1'b0 && ^(main_12_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %16 = add nsw i32 %15, -200*/
		main_12_16 = (main_12_15 + -32'd200);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %16 = add nsw i32 %15, -200*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_16_reg <= main_12_16;
		if (start == 1'b0 && ^(main_12_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %12*/
	/*   %17 = icmp slt i32 %16, 25*/
		main_12_17 = ($signed(main_12_16) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %17 = icmp slt i32 %16, 25*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_17_reg <= main_12_17;
		if (start == 1'b0 && ^(main_12_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
		main_18_19 = memory_controller_out_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_21)) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %20 = icmp ult i8* %19, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_18_20 = (main_18_19 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %20 = icmp ult i8* %19, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__18_21)) begin
		main_18_20_reg <= main_18_20;
		if (start == 1'b0 && ^(main_18_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %21 = sub i32 224, %15*/
		main_18_21 = (32'd224 - main_12_15_reg);
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %21 = sub i32 224, %15*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		main_18_21_reg <= main_18_21;
		if (start == 1'b0 && ^(main_18_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i.preheader*/
	/*   %22 = add i32 %15, -192*/
		main_preheader1iipreheader_22 = (main_12_15_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i.preheader*/
	/*   %22 = add i32 %15, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheader1iipreheader_22)) begin
		main_preheader1iipreheader_22_reg <= main_preheader1iipreheader_22;
		if (start == 1'b0 && ^(main_preheader1iipreheader_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1iipreheader_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i.i.preheader ], [ %indvar.next11, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_indvar10 = 32'd0;
	end
	/* main: %.preheader1.i.i*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i.i.preheader ], [ %indvar.next11, %Fill_Buffer.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_30 == 1'd1))) */ begin
		main_preheader1ii_indvar10 = main_Fill_Bufferexitii_indvarnext11;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i.i.preheader ], [ %indvar.next11, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_indvar10_reg <= main_preheader1ii_indvar10;
		if (start == 1'b0 && ^(main_preheader1ii_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_indvar10_reg"); $finish; end
	end
	/* main: %.preheader1.i.i*/
	/*   %indvar10 = phi i32 [ 0, %.preheader1.i.i.preheader ], [ %indvar.next11, %Fill_Buffer.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_30 == 1'd1))) begin
		main_preheader1ii_indvar10_reg <= main_preheader1ii_indvar10;
		if (start == 1'b0 && ^(main_preheader1ii_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_indvar10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %23 = phi i8* [ %19, %.preheader1.i.i.preheader ], [ %29, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_23 = main_18_19_reg;
	end
	/* main: %.preheader1.i.i*/
	/*   %23 = phi i8* [ %19, %.preheader1.i.i.preheader ], [ %29, %Fill_Buffer.exit.i.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_30 == 1'd1))) */ begin
		main_preheader1ii_23 = main_Fill_Bufferexitii_29;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %23 = phi i8* [ %19, %.preheader1.i.i.preheader ], [ %29, %Fill_Buffer.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1iipreheader_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii_23_reg <= main_preheader1ii_23;
		if (start == 1'b0 && ^(main_preheader1ii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_23_reg"); $finish; end
	end
	/* main: %.preheader1.i.i*/
	/*   %23 = phi i8* [ %19, %.preheader1.i.i.preheader ], [ %29, %Fill_Buffer.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii_30 == 1'd1))) begin
		main_preheader1ii_23_reg <= main_preheader1ii_23;
		if (start == 1'b0 && ^(main_preheader1ii_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %24 = shl i32 %indvar10, 3*/
		main_preheader1ii_24 = (main_preheader1ii_indvar10_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %24 = shl i32 %indvar10, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_23)) begin
		main_preheader1ii_24_reg <= main_preheader1ii_24;
		if (start == 1'b0 && ^(main_preheader1ii_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %25 = add i32 %22, %24*/
		main_preheader1ii_25 = (main_preheader1iipreheader_22_reg + main_preheader1ii_24);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %25 = add i32 %22, %24*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_23)) begin
		main_preheader1ii_25_reg <= main_preheader1ii_25;
		if (start == 1'b0 && ^(main_preheader1ii_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i*/
	/*   %26 = icmp ult i8* %23, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader1ii_26 = (main_preheader1ii_23_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i*/
	/*   %26 = icmp ult i8* %23, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii_23)) begin
		main_preheader1ii_26_reg <= main_preheader1ii_26;
		if (start == 1'b0 && ^(main_preheader1ii_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar5 = phi i32 [ 0, %.lr.ph.i.i.i.i4.preheader ], [ %indvar.next6, %.lr.ph.i.i.i.i4 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiii4preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii4_indvar5 = 32'd0;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar5 = phi i32 [ 0, %.lr.ph.i.i.i.i4.preheader ], [ %indvar.next6, %.lr.ph.i.i.i.i4 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii4_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii4_exitcond7_reg == 1'd0))) */ begin
		main_lrphiiii4_indvar5 = main_lrphiiii4_indvarnext6_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar5 = phi i32 [ 0, %.lr.ph.i.i.i.i4.preheader ], [ %indvar.next6, %.lr.ph.i.i.i.i4 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiii4preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii4_indvar5_reg <= main_lrphiiii4_indvar5;
		if (start == 1'b0 && ^(main_lrphiiii4_indvar5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_indvar5_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar5 = phi i32 [ 0, %.lr.ph.i.i.i.i4.preheader ], [ %indvar.next6, %.lr.ph.i.i.i.i4 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii4_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii4_exitcond7_reg == 1'd0))) begin
		main_lrphiiii4_indvar5_reg <= main_lrphiiii4_indvar5;
		if (start == 1'b0 && ^(main_lrphiiii4_indvar5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_indvar5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %p2.02.i.i.i.i1 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar5*/
		main_lrphiiii4_p202iiii1 = (`TAG_g_inRdbfr_a | (1 * main_lrphiiii4_indvar5_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %p2.02.i.i.i.i1 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar5*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		main_lrphiiii4_p202iiii1_reg <= main_lrphiiii4_p202iiii1;
		if (start == 1'b0 && ^(main_lrphiiii4_p202iiii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_p202iiii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %p1.01.i.i.i.i2 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar5*/
		main_lrphiiii4_p101iiii2 = (`TAG_g_ld_Rdbfr_a | (1 * main_lrphiiii4_indvar5_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %p1.01.i.i.i.i2 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar5*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		main_lrphiiii4_p101iiii2_reg <= main_lrphiiii4_p101iiii2;
		if (start == 1'b0 && ^(main_lrphiiii4_p101iiii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_p101iiii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
		main_lrphiiii4_27 = memory_controller_out_b[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		main_lrphiiii4_27_reg <= main_lrphiiii4_27;
		if (start == 1'b0 && ^(main_lrphiiii4_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar.next6 = add i32 %indvar5, 1*/
		main_lrphiiii4_indvarnext6 = (main_lrphiiii4_indvar5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %indvar.next6 = add i32 %indvar5, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		main_lrphiiii4_indvarnext6_reg <= main_lrphiiii4_indvarnext6;
		if (start == 1'b0 && ^(main_lrphiiii4_indvarnext6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_indvarnext6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %exitcond7 = icmp eq i32 %indvar.next6, 2048*/
		main_lrphiiii4_exitcond7 = (main_lrphiiii4_indvarnext6 == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %exitcond7 = icmp eq i32 %indvar.next6, 2048*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		main_lrphiiii4_exitcond7_reg <= main_lrphiiii4_exitcond7;
		if (start == 1'b0 && ^(main_lrphiiii4_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii4_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %28 = phi i8* [ %23, %.preheader1.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii_23) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii_26 == 1'd1))) begin
		main_Fill_Bufferexitii_28 = main_preheader1ii_23_reg;
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %28 = phi i8* [ %23, %.preheader1.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Fill_Bufferexitii_28 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %28 = phi i8* [ %23, %.preheader1.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii_23) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii_26 == 1'd1))) begin
		main_Fill_Bufferexitii_28_reg <= main_Fill_Bufferexitii_28;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_28_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %28 = phi i8* [ %23, %.preheader1.i.i ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitiiloopexit_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_Fill_Bufferexitii_28_reg <= main_Fill_Bufferexitii_28;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %29 = getelementptr inbounds i8* %28, i32 1*/
		main_Fill_Bufferexitii_29 = (main_Fill_Bufferexitii_28_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %29 = getelementptr inbounds i8* %28, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30)) begin
		main_Fill_Bufferexitii_29_reg <= main_Fill_Bufferexitii_29;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %30 = icmp slt i32 %25, 25*/
		main_Fill_Bufferexitii_30 = ($signed(main_preheader1ii_25_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %30 = icmp slt i32 %25, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30)) begin
		main_Fill_Bufferexitii_30_reg <= main_Fill_Bufferexitii_30;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
		main_Fill_Bufferexitii_indvarnext11 = (main_preheader1ii_indvar10_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii_30)) begin
		main_Fill_Bufferexitii_indvarnext11_reg <= main_Fill_Bufferexitii_indvarnext11;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii_indvarnext11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii_indvarnext11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %31 = lshr i32 %21, 3*/
		main_loopexitii_31 = (main_18_21_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %31 = lshr i32 %21, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		main_loopexitii_31_reg <= main_loopexitii_31;
		if (start == 1'b0 && ^(main_loopexitii_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %32 = add nuw nsw i32 %31, 1*/
		main_loopexitii_32 = (main_loopexitii_31 + 32'd1);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %32 = add nuw nsw i32 %31, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		main_loopexitii_32_reg <= main_loopexitii_32;
		if (start == 1'b0 && ^(main_loopexitii_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %scevgep.i = getelementptr i8* %19, i32 %32*/
		main_loopexitii_scevgepi = (main_18_19_reg + (1 * main_loopexitii_32_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %scevgep.i = getelementptr i8* %19, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		main_loopexitii_scevgepi_reg <= main_loopexitii_scevgepi;
		if (start == 1'b0 && ^(main_loopexitii_scevgepi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_scevgepi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %33 = and i32 %21, -8*/
		main_loopexitii_33 = (main_18_21_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %33 = and i32 %21, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		main_loopexitii_33_reg <= main_loopexitii_33;
		if (start == 1'b0 && ^(main_loopexitii_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %34 = add i32 %15, -192*/
		main_loopexitii_34 = (main_12_15_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %34 = add i32 %15, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		main_loopexitii_34_reg <= main_loopexitii_34;
		if (start == 1'b0 && ^(main_loopexitii_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i*/
	/*   %35 = add i32 %34, %33*/
		main_loopexitii_35 = (main_loopexitii_34 + main_loopexitii_33);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i*/
	/*   %35 = add i32 %34, %33*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		main_loopexitii_35_reg <= main_loopexitii_35;
		if (start == 1'b0 && ^(main_loopexitii_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %36 = and i32 %21, -8*/
		main_loopexit2iloopexiti_36 = (main_18_21_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %36 = and i32 %21, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		main_loopexit2iloopexiti_36_reg <= main_loopexit2iloopexiti_36;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %37 = add i32 %15, %36*/
		main_loopexit2iloopexiti_37 = (main_12_15_reg + main_loopexit2iloopexiti_36);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %37 = add i32 %15, %36*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		main_loopexit2iloopexiti_37_reg <= main_loopexit2iloopexiti_37;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %38 = add i32 %37, -192*/
		main_loopexit2iloopexiti_38 = (main_loopexit2iloopexiti_37 + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i*/
	/*   %38 = add i32 %37, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		main_loopexit2iloopexiti_38_reg <= main_loopexit2iloopexiti_38;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.i*/
	/*   %Incnt.2.i.i = phi i32 [ %35, %.loopexit.i.i ], [ %38, %.loopexit2.i.loopexit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii_Incnt2ii = main_loopexitii_35_reg;
	end
	/* main: %.loopexit2.i.i*/
	/*   %Incnt.2.i.i = phi i32 [ %35, %.loopexit.i.i ], [ %38, %.loopexit2.i.loopexit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit2ii_Incnt2ii = main_loopexit2iloopexiti_38_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.i*/
	/*   %Incnt.2.i.i = phi i32 [ %35, %.loopexit.i.i ], [ %38, %.loopexit2.i.loopexit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii_33) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii_Incnt2ii_reg <= main_loopexit2ii_Incnt2ii;
		if (start == 1'b0 && ^(main_loopexit2ii_Incnt2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii_Incnt2ii_reg"); $finish; end
	end
	/* main: %.loopexit2.i.i*/
	/*   %Incnt.2.i.i = phi i32 [ %35, %.loopexit.i.i ], [ %38, %.loopexit2.i.loopexit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_35) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii_Incnt2ii_reg <= main_loopexit2ii_Incnt2ii;
		if (start == 1'b0 && ^(main_loopexit2ii_Incnt2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii_Incnt2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %39 = icmp sgt i32 %10, 0*/
		main_Get_Bitsexit_39 = ($signed(main_Get_Bitsexiti_10_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %39 = icmp sgt i32 %10, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_38)) begin
		main_Get_Bitsexit_39_reg <= main_Get_Bitsexit_39;
		if (start == 1'b0 && ^(main_Get_Bitsexit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit*/
	/*   %40 = shl i32 %10, 8*/
		main_Get_Bitsexit_40 = (main_Get_Bitsexiti_10_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit*/
	/*   %40 = shl i32 %10, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit_38)) begin
		main_Get_Bitsexit_40_reg <= main_Get_Bitsexit_40;
		if (start == 1'b0 && ^(main_Get_Bitsexit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %42 = or i32 %14, %40*/
		main_41_42 = (main_12_14_reg | main_Get_Bitsexit_40_reg);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %42 = or i32 %14, %40*/
	if ((cur_state == LEGUP_F_main_BB__41_39)) begin
		main_41_42_reg <= main_41_42;
		if (start == 1'b0 && ^(main_41_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %43 = add i32 %42, -210*/
		main_41_43 = (main_41_42 + -32'd210);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %43 = add i32 %42, -210*/
	if ((cur_state == LEGUP_F_main_BB__41_39)) begin
		main_41_43_reg <= main_41_43;
		if (start == 1'b0 && ^(main_41_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %44 = icmp slt i32 %43, 4096*/
		main_41_44 = ($signed(main_41_43) < $signed(32'd4096));
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %44 = icmp slt i32 %43, 4096*/
	if ((cur_state == LEGUP_F_main_BB__41_39)) begin
		main_41_44_reg <= main_41_44;
		if (start == 1'b0 && ^(main_41_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %45 = add i32 %42, -8402*/
		main_41_45 = (main_41_42 + -32'd8402);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %45 = add i32 %42, -8402*/
	if ((cur_state == LEGUP_F_main_BB__41_39)) begin
		main_41_45_reg <= main_41_45;
		if (start == 1'b0 && ^(main_41_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %41*/
	/*   %. = select i1 %44, i32 %43, i32 %45*/
		main_41_ = (main_41_44 ? main_41_43 : main_41_45);
end
always @(posedge clk) begin
	/* main: %41*/
	/*   %. = select i1 %44, i32 %43, i32 %45*/
	if ((cur_state == LEGUP_F_main_BB__41_39)) begin
		main_41__reg <= main_41_;
		if (start == 1'b0 && ^(main_41_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_41__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %47 = xor i32 %40, -256*/
		main_46_47 = (main_Get_Bitsexit_40_reg ^ -32'd256);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %47 = xor i32 %40, -256*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_47_reg <= main_46_47;
		if (start == 1'b0 && ^(main_46_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %.neg1.i.i.i = xor i32 %14, -1*/
		main_46_neg1iii = (main_12_14_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %.neg1.i.i.i = xor i32 %14, -1*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_neg1iii_reg <= main_46_neg1iii;
		if (start == 1'b0 && ^(main_46_neg1iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_neg1iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %47*/
		main_46_neg2iii = (main_46_neg1iii - main_46_47);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %.neg2.i.i.i = sub i32 %.neg1.i.i.i, %47*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_neg2iii_reg <= main_46_neg2iii;
		if (start == 1'b0 && ^(main_46_neg2iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_neg2iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %48 = add i32 %.neg2.i.i.i, 45*/
		main_46_48 = (main_46_neg2iii + 32'd45);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %48 = add i32 %.neg2.i.i.i, 45*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_48_reg <= main_46_48;
		if (start == 1'b0 && ^(main_46_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %49 = icmp slt i32 %48, -4096*/
		main_46_49 = ($signed(main_46_48) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %49 = icmp slt i32 %48, -4096*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_49_reg <= main_46_49;
		if (start == 1'b0 && ^(main_46_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %50 = add i32 %.neg2.i.i.i, 8237*/
		main_46_50 = (main_46_neg2iii + 32'd8237);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %50 = add i32 %.neg2.i.i.i, 8237*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_50_reg <= main_46_50;
		if (start == 1'b0 && ^(main_46_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %46*/
	/*   %.12 = select i1 %49, i32 %50, i32 %48*/
		main_46_12 = (main_46_49 ? main_46_50 : main_46_48);
end
always @(posedge clk) begin
	/* main: %46*/
	/*   %.12 = select i1 %49, i32 %50, i32 %48*/
	if ((cur_state == LEGUP_F_main_BB__46_40)) begin
		main_46_12_reg <= main_46_12;
		if (start == 1'b0 && ^(main_46_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_46_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_Get_Bitsexiti_11 == 1'd1))) begin
		main_decode_motion_vectorexitii_vec0iii = 32'd45;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	else if (((cur_state == LEGUP_F_main_BB__41_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii = main_41_;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__46_40) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_decode_motion_vectorexitii_vec0iii = main_46_12;
	end
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_Get_Bitsexiti_11 == 1'd1))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	if (((cur_state == LEGUP_F_main_BB__41_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %vec.0.i.i.i = phi i32 [ 45, %Get_Bits.exit.i ], [ %., %41 ], [ %.12, %46 ]*/
	if (((cur_state == LEGUP_F_main_BB__46_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_decode_motion_vectorexitii_vec0iii_reg <= main_decode_motion_vectorexitii_vec0iii;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_vec0iii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_vec0iii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
		main_decode_motion_vectorexitii_51 = Get_motion_code_return_val_reg;
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		main_decode_motion_vectorexitii_51_reg <= main_decode_motion_vectorexitii_51;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %52 = icmp eq i32 %51, 0*/
		main_decode_motion_vectorexitii_52 = (main_decode_motion_vectorexitii_51_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %52 = icmp eq i32 %51, 0*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_43)) begin
		main_decode_motion_vectorexitii_52_reg <= main_decode_motion_vectorexitii_52;
		if (start == 1'b0 && ^(main_decode_motion_vectorexitii_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decode_motion_vectorexitii_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
		main_53_54 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		main_53_54_reg <= main_53_54;
		if (start == 1'b0 && ^(main_53_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %55 = lshr i32 %54, 24*/
		main_53_55 = (main_53_54 >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %55 = lshr i32 %54, 24*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		main_53_55_reg <= main_53_55;
		if (start == 1'b0 && ^(main_53_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
		main_53_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		main_53_56_reg <= main_53_56;
		if (start == 1'b0 && ^(main_53_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %57 = add nsw i32 %56, -200*/
		main_53_57 = (main_53_56 + -32'd200);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %57 = add nsw i32 %56, -200*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		main_53_57_reg <= main_53_57;
		if (start == 1'b0 && ^(main_53_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %53*/
	/*   %58 = icmp slt i32 %57, 25*/
		main_53_58 = ($signed(main_53_57) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %58 = icmp slt i32 %57, 25*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		main_53_58_reg <= main_53_58;
		if (start == 1'b0 && ^(main_53_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
		main_59_60 = memory_controller_out_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0];
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__59_50)) begin
		main_59_60_reg <= main_59_60;
		if (start == 1'b0 && ^(main_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %61 = icmp ult i8* %60, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
		main_59_61 = (main_59_60 < (`TAG_g_ld_Rdbfr_a | (1 * 32'd2044)));
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %61 = icmp ult i8* %60, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2044)*/
	if ((cur_state == LEGUP_F_main_BB__59_50)) begin
		main_59_61_reg <= main_59_61;
		if (start == 1'b0 && ^(main_59_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %62 = sub i32 224, %56*/
		main_59_62 = (32'd224 - main_53_56_reg);
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %62 = sub i32 224, %56*/
	if ((cur_state == LEGUP_F_main_BB__59_48)) begin
		main_59_62_reg <= main_59_62;
		if (start == 1'b0 && ^(main_59_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7.preheader*/
	/*   %63 = add i32 %56, -192*/
		main_preheader1ii7preheader_63 = (main_53_56_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7.preheader*/
	/*   %63 = add i32 %56, -192*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii7preheader_51)) begin
		main_preheader1ii7preheader_63_reg <= main_preheader1ii7preheader_63;
		if (start == 1'b0 && ^(main_preheader1ii7preheader_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7preheader_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7*/
	/*   %indvar3 = phi i32 [ 0, %.preheader1.i.i7.preheader ], [ %indvar.next4, %Fill_Buffer.exit.i.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ii7preheader_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii7_indvar3 = 32'd0;
	end
	/* main: %.preheader1.i.i7*/
	/*   %indvar3 = phi i32 [ 0, %.preheader1.i.i7.preheader ], [ %indvar.next4, %Fill_Buffer.exit.i.i12 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii12_71 == 1'd1))) */ begin
		main_preheader1ii7_indvar3 = main_Fill_Bufferexitii12_indvarnext4;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7*/
	/*   %indvar3 = phi i32 [ 0, %.preheader1.i.i7.preheader ], [ %indvar.next4, %Fill_Buffer.exit.i.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ii7preheader_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii7_indvar3_reg <= main_preheader1ii7_indvar3;
		if (start == 1'b0 && ^(main_preheader1ii7_indvar3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_indvar3_reg"); $finish; end
	end
	/* main: %.preheader1.i.i7*/
	/*   %indvar3 = phi i32 [ 0, %.preheader1.i.i7.preheader ], [ %indvar.next4, %Fill_Buffer.exit.i.i12 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii12_71 == 1'd1))) begin
		main_preheader1ii7_indvar3_reg <= main_preheader1ii7_indvar3;
		if (start == 1'b0 && ^(main_preheader1ii7_indvar3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_indvar3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7*/
	/*   %64 = phi i8* [ %60, %.preheader1.i.i7.preheader ], [ %70, %Fill_Buffer.exit.i.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ii7preheader_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii7_64 = main_59_60_reg;
	end
	/* main: %.preheader1.i.i7*/
	/*   %64 = phi i8* [ %60, %.preheader1.i.i7.preheader ], [ %70, %Fill_Buffer.exit.i.i12 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii12_71 == 1'd1))) */ begin
		main_preheader1ii7_64 = main_Fill_Bufferexitii12_70;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7*/
	/*   %64 = phi i8* [ %60, %.preheader1.i.i7.preheader ], [ %70, %Fill_Buffer.exit.i.i12 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1ii7preheader_51) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1ii7_64_reg <= main_preheader1ii7_64;
		if (start == 1'b0 && ^(main_preheader1ii7_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_64_reg"); $finish; end
	end
	/* main: %.preheader1.i.i7*/
	/*   %64 = phi i8* [ %60, %.preheader1.i.i7.preheader ], [ %70, %Fill_Buffer.exit.i.i12 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59) & (memory_controller_waitrequest == 1'd0)) & (main_Fill_Bufferexitii12_71 == 1'd1))) begin
		main_preheader1ii7_64_reg <= main_preheader1ii7_64;
		if (start == 1'b0 && ^(main_preheader1ii7_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7*/
	/*   %65 = shl i32 %indvar3, 3*/
		main_preheader1ii7_65 = (main_preheader1ii7_indvar3_reg <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7*/
	/*   %65 = shl i32 %indvar3, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii7_52)) begin
		main_preheader1ii7_65_reg <= main_preheader1ii7_65;
		if (start == 1'b0 && ^(main_preheader1ii7_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7*/
	/*   %66 = add i32 %63, %65*/
		main_preheader1ii7_66 = (main_preheader1ii7preheader_63_reg + main_preheader1ii7_65);
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7*/
	/*   %66 = add i32 %63, %65*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii7_52)) begin
		main_preheader1ii7_66_reg <= main_preheader1ii7_66;
		if (start == 1'b0 && ^(main_preheader1ii7_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1.i.i7*/
	/*   %67 = icmp ult i8* %64, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
		main_preheader1ii7_67 = (main_preheader1ii7_64_reg < (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1)));
end
always @(posedge clk) begin
	/* main: %.preheader1.i.i7*/
	/*   %67 = icmp ult i8* %64, getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0)*/
	if ((cur_state == LEGUP_F_main_BB_preheader1ii7_52)) begin
		main_preheader1ii7_67_reg <= main_preheader1ii7_67;
		if (start == 1'b0 && ^(main_preheader1ii7_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1ii7_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.i.i.i.i11.preheader ], [ %indvar.next, %.lr.ph.i.i.i.i11 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiii11preheader_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii11_indvar = 32'd0;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.i.i.i.i11.preheader ], [ %indvar.next, %.lr.ph.i.i.i.i11 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphiiii11_57) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii11_exitcond_reg == 1'd0))) */ begin
		main_lrphiiii11_indvar = main_lrphiiii11_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.i.i.i.i11.preheader ], [ %indvar.next, %.lr.ph.i.i.i.i11 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiiii11preheader_53) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphiiii11_indvar_reg <= main_lrphiiii11_indvar;
		if (start == 1'b0 && ^(main_lrphiiii11_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar = phi i32 [ 0, %.lr.ph.i.i.i.i11.preheader ], [ %indvar.next, %.lr.ph.i.i.i.i11 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphiiii11_57) & (memory_controller_waitrequest == 1'd0)) & (main_lrphiiii11_exitcond_reg == 1'd0))) begin
		main_lrphiiii11_indvar_reg <= main_lrphiiii11_indvar;
		if (start == 1'b0 && ^(main_lrphiiii11_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %p2.02.i.i.i.i8 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar*/
		main_lrphiiii11_p202iiii8 = (`TAG_g_inRdbfr_a | (1 * main_lrphiiii11_indvar_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %p2.02.i.i.i.i8 = getelementptr [2048 x i8]* @inRdbfr, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		main_lrphiiii11_p202iiii8_reg <= main_lrphiiii11_p202iiii8;
		if (start == 1'b0 && ^(main_lrphiiii11_p202iiii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_p202iiii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %p1.01.i.i.i.i9 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar*/
		main_lrphiiii11_p101iiii9 = (`TAG_g_ld_Rdbfr_a | (1 * main_lrphiiii11_indvar_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %p1.01.i.i.i.i9 = getelementptr [2048 x i8]* @ld_Rdbfr, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		main_lrphiiii11_p101iiii9_reg <= main_lrphiiii11_p101iiii9;
		if (start == 1'b0 && ^(main_lrphiiii11_p101iiii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_p101iiii9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
		main_lrphiiii11_68 = memory_controller_out_a[7:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		main_lrphiiii11_68_reg <= main_lrphiiii11_68;
		if (start == 1'b0 && ^(main_lrphiiii11_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_lrphiiii11_indvarnext = (main_lrphiiii11_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		main_lrphiiii11_indvarnext_reg <= main_lrphiiii11_indvarnext;
		if (start == 1'b0 && ^(main_lrphiiii11_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %exitcond = icmp eq i32 %indvar.next, 2048*/
		main_lrphiiii11_exitcond = (main_lrphiiii11_indvarnext == 32'd2048);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %exitcond = icmp eq i32 %indvar.next, 2048*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		main_lrphiiii11_exitcond_reg <= main_lrphiiii11_exitcond;
		if (start == 1'b0 && ^(main_lrphiiii11_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphiiii11_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %69 = phi i8* [ %64, %.preheader1.i.i7 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i12.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii7_52) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii7_67 == 1'd1))) begin
		main_Fill_Bufferexitii12_69 = main_preheader1ii7_64_reg;
	end
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %69 = phi i8* [ %64, %.preheader1.i.i7 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i12.loopexit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12loopexit_58) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Fill_Bufferexitii12_69 = `TAG_g_ld_Rdbfr_a;
	end
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %69 = phi i8* [ %64, %.preheader1.i.i7 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i12.loopexit ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader1ii7_52) & (memory_controller_waitrequest == 1'd0)) & (main_preheader1ii7_67 == 1'd1))) begin
		main_Fill_Bufferexitii12_69_reg <= main_Fill_Bufferexitii12_69;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii12_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii12_69_reg"); $finish; end
	end
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %69 = phi i8* [ %64, %.preheader1.i.i7 ], [ getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), %Fill_Buffer.exit.i.i12.loopexit ]*/
	if (((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12loopexit_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_Fill_Bufferexitii12_69_reg <= main_Fill_Bufferexitii12_69;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii12_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii12_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %70 = getelementptr inbounds i8* %69, i32 1*/
		main_Fill_Bufferexitii12_70 = (main_Fill_Bufferexitii12_69_reg + (1 * 32'd1));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %70 = getelementptr inbounds i8* %69, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59)) begin
		main_Fill_Bufferexitii12_70_reg <= main_Fill_Bufferexitii12_70;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii12_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii12_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %71 = icmp slt i32 %66, 25*/
		main_Fill_Bufferexitii12_71 = ($signed(main_preheader1ii7_66_reg) < $signed(32'd25));
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %71 = icmp slt i32 %66, 25*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59)) begin
		main_Fill_Bufferexitii12_71_reg <= main_Fill_Bufferexitii12_71;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii12_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii12_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %indvar.next4 = add i32 %indvar3, 1*/
		main_Fill_Bufferexitii12_indvarnext4 = (main_preheader1ii7_indvar3_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %Fill_Buffer.exit.i.i12*/
	/*   %indvar.next4 = add i32 %indvar3, 1*/
	if ((cur_state == LEGUP_F_main_BB_Fill_Bufferexitii12_59)) begin
		main_Fill_Bufferexitii12_indvarnext4_reg <= main_Fill_Bufferexitii12_indvarnext4;
		if (start == 1'b0 && ^(main_Fill_Bufferexitii12_indvarnext4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Fill_Bufferexitii12_indvarnext4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %72 = lshr i32 %62, 3*/
		main_loopexitii14_72 = (main_59_62_reg >>> (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %72 = lshr i32 %62, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		main_loopexitii14_72_reg <= main_loopexitii14_72;
		if (start == 1'b0 && ^(main_loopexitii14_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %73 = add nuw nsw i32 %72, 1*/
		main_loopexitii14_73 = (main_loopexitii14_72 + 32'd1);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %73 = add nuw nsw i32 %72, 1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		main_loopexitii14_73_reg <= main_loopexitii14_73;
		if (start == 1'b0 && ^(main_loopexitii14_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %scevgep.i13 = getelementptr i8* %60, i32 %73*/
		main_loopexitii14_scevgepi13 = (main_59_60_reg + (1 * main_loopexitii14_73_reg));
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %scevgep.i13 = getelementptr i8* %60, i32 %73*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		main_loopexitii14_scevgepi13_reg <= main_loopexitii14_scevgepi13;
		if (start == 1'b0 && ^(main_loopexitii14_scevgepi13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_scevgepi13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %74 = and i32 %62, -8*/
		main_loopexitii14_74 = (main_59_62_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %74 = and i32 %62, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		main_loopexitii14_74_reg <= main_loopexitii14_74;
		if (start == 1'b0 && ^(main_loopexitii14_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %75 = add i32 %56, -192*/
		main_loopexitii14_75 = (main_53_56_reg + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %75 = add i32 %56, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		main_loopexitii14_75_reg <= main_loopexitii14_75;
		if (start == 1'b0 && ^(main_loopexitii14_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit.i.i14*/
	/*   %76 = add i32 %75, %74*/
		main_loopexitii14_76 = (main_loopexitii14_75 + main_loopexitii14_74);
end
always @(posedge clk) begin
	/* main: %.loopexit.i.i14*/
	/*   %76 = add i32 %75, %74*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		main_loopexitii14_76_reg <= main_loopexitii14_76;
		if (start == 1'b0 && ^(main_loopexitii14_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexitii14_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %77 = and i32 %62, -8*/
		main_loopexit2iloopexiti15_77 = (main_59_62_reg & -32'd8);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %77 = and i32 %62, -8*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		main_loopexit2iloopexiti15_77_reg <= main_loopexit2iloopexiti15_77;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti15_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti15_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %78 = add i32 %56, %77*/
		main_loopexit2iloopexiti15_78 = (main_53_56_reg + main_loopexit2iloopexiti15_77);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %78 = add i32 %56, %77*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		main_loopexit2iloopexiti15_78_reg <= main_loopexit2iloopexiti15_78;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti15_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti15_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %79 = add i32 %78, -192*/
		main_loopexit2iloopexiti15_79 = (main_loopexit2iloopexiti15_78 + -32'd192);
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   %79 = add i32 %78, -192*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		main_loopexit2iloopexiti15_79_reg <= main_loopexit2iloopexiti15_79;
		if (start == 1'b0 && ^(main_loopexit2iloopexiti15_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2iloopexiti15_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit2.i.i17*/
	/*   %Incnt.2.i.i16 = phi i32 [ %76, %.loopexit.i.i14 ], [ %79, %.loopexit2.i.loopexit.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii14_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii17_Incnt2ii16 = main_loopexitii14_76_reg;
	end
	/* main: %.loopexit2.i.i17*/
	/*   %Incnt.2.i.i16 = phi i32 [ %76, %.loopexit.i.i14 ], [ %79, %.loopexit2.i.loopexit.i15 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_loopexit2ii17_Incnt2ii16 = main_loopexit2iloopexiti15_79_reg;
	end
end
always @(posedge clk) begin
	/* main: %.loopexit2.i.i17*/
	/*   %Incnt.2.i.i16 = phi i32 [ %76, %.loopexit.i.i14 ], [ %79, %.loopexit2.i.loopexit.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexitii14_62) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii17_Incnt2ii16_reg <= main_loopexit2ii17_Incnt2ii16;
		if (start == 1'b0 && ^(main_loopexit2ii17_Incnt2ii16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii17_Incnt2ii16_reg"); $finish; end
	end
	/* main: %.loopexit2.i.i17*/
	/*   %Incnt.2.i.i16 = phi i32 [ %76, %.loopexit.i.i14 ], [ %79, %.loopexit2.i.loopexit.i15 ]*/
	if (((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_loopexit2ii17_Incnt2ii16_reg <= main_loopexit2ii17_Incnt2ii16;
		if (start == 1'b0 && ^(main_loopexit2ii17_Incnt2ii16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit2ii17_Incnt2ii16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit18*/
	/*   %80 = icmp sgt i32 %51, 0*/
		main_Get_Bitsexit18_80 = ($signed(main_decode_motion_vectorexitii_51_reg) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit18*/
	/*   %80 = icmp sgt i32 %51, 0*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit18_67)) begin
		main_Get_Bitsexit18_80_reg <= main_Get_Bitsexit18_80;
		if (start == 1'b0 && ^(main_Get_Bitsexit18_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit18_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit18*/
	/*   %81 = shl i32 %51, 8*/
		main_Get_Bitsexit18_81 = (main_decode_motion_vectorexitii_51_reg <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit18*/
	/*   %81 = shl i32 %51, 8*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexit18_67)) begin
		main_Get_Bitsexit18_81_reg <= main_Get_Bitsexit18_81;
		if (start == 1'b0 && ^(main_Get_Bitsexit18_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Get_Bitsexit18_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %83 = or i32 %55, %81*/
		main_82_83 = (main_53_55_reg | main_Get_Bitsexit18_81_reg);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %83 = or i32 %55, %81*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		main_82_83_reg <= main_82_83;
		if (start == 1'b0 && ^(main_82_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %84 = add i32 %83, -152*/
		main_82_84 = (main_82_83 + -32'd152);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %84 = add i32 %83, -152*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		main_82_84_reg <= main_82_84;
		if (start == 1'b0 && ^(main_82_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %85 = icmp slt i32 %84, 4096*/
		main_82_85 = ($signed(main_82_84) < $signed(32'd4096));
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %85 = icmp slt i32 %84, 4096*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		main_82_85_reg <= main_82_85;
		if (start == 1'b0 && ^(main_82_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %86 = add i32 %83, -8344*/
		main_82_86 = (main_82_83 + -32'd8344);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %86 = add i32 %83, -8344*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		main_82_86_reg <= main_82_86;
		if (start == 1'b0 && ^(main_82_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %82*/
	/*   %.13 = select i1 %85, i32 %84, i32 %86*/
		main_82_13 = (main_82_85 ? main_82_84 : main_82_86);
end
always @(posedge clk) begin
	/* main: %82*/
	/*   %.13 = select i1 %85, i32 %84, i32 %86*/
	if ((cur_state == LEGUP_F_main_BB__82_68)) begin
		main_82_13_reg <= main_82_13;
		if (start == 1'b0 && ^(main_82_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_82_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %88 = xor i32 %81, -256*/
		main_87_88 = (main_Get_Bitsexit18_81_reg ^ -32'd256);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %88 = xor i32 %81, -256*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_88_reg <= main_87_88;
		if (start == 1'b0 && ^(main_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %.neg1.i4.i.i = xor i32 %55, -1*/
		main_87_neg1i4ii = (main_53_55_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %.neg1.i4.i.i = xor i32 %55, -1*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_neg1i4ii_reg <= main_87_neg1i4ii;
		if (start == 1'b0 && ^(main_87_neg1i4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_neg1i4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %.neg2.i5.i.i = sub i32 %.neg1.i4.i.i, %88*/
		main_87_neg2i5ii = (main_87_neg1i4ii - main_87_88);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %.neg2.i5.i.i = sub i32 %.neg1.i4.i.i, %88*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_neg2i5ii_reg <= main_87_neg2i5ii;
		if (start == 1'b0 && ^(main_87_neg2i5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_neg2i5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %89 = add i32 %.neg2.i5.i.i, 103*/
		main_87_89 = (main_87_neg2i5ii + 32'd103);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %89 = add i32 %.neg2.i5.i.i, 103*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_89_reg <= main_87_89;
		if (start == 1'b0 && ^(main_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %90 = icmp slt i32 %89, -4096*/
		main_87_90 = ($signed(main_87_89) < $signed(-32'd4096));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %90 = icmp slt i32 %89, -4096*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_90_reg <= main_87_90;
		if (start == 1'b0 && ^(main_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %91 = add i32 %.neg2.i5.i.i, 8295*/
		main_87_91 = (main_87_neg2i5ii + 32'd8295);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %91 = add i32 %.neg2.i5.i.i, 8295*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_91_reg <= main_87_91;
		if (start == 1'b0 && ^(main_87_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %.14 = select i1 %90, i32 %91, i32 %89*/
		main_87_14 = (main_87_90 ? main_87_91 : main_87_89);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %.14 = select i1 %90, i32 %91, i32 %89*/
	if ((cur_state == LEGUP_F_main_BB__87_69)) begin
		main_87_14_reg <= main_87_14;
		if (start == 1'b0 && ^(main_87_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_43) & (memory_controller_waitrequest == 1'd0)) & (main_decode_motion_vectorexitii_52 == 1'd1))) begin
		main_motion_vectorsexit_vec0i6ii = 32'd103;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__82_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i6ii = main_82_13;
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__87_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_motion_vectorsexit_vec0i6ii = main_87_14;
	end
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_43) & (memory_controller_waitrequest == 1'd0)) & (main_decode_motion_vectorexitii_52 == 1'd1))) begin
		main_motion_vectorsexit_vec0i6ii_reg <= main_motion_vectorsexit_vec0i6ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i6ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__82_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i6ii_reg <= main_motion_vectorsexit_vec0i6ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i6ii_reg"); $finish; end
	end
	/* main: %motion_vectors.exit*/
	/*   %vec.0.i6.i.i = phi i32 [ %.13, %82 ], [ %.14, %87 ], [ 103, %decode_motion_vector.exit.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__87_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_motion_vectorsexit_vec0i6ii_reg <= main_motion_vectorsexit_vec0i6ii;
		if (start == 1'b0 && ^(main_motion_vectorsexit_vec0i6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_vec0i6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %.mask.lobit = lshr i32 %3, 7*/
		main_motion_vectorsexit_masklobit = (main_Get_Bitsexiti_3_reg >>> (32'd7 % 32));
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %.mask.lobit = lshr i32 %3, 7*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_masklobit_reg <= main_motion_vectorsexit_masklobit;
		if (start == 1'b0 && ^(main_motion_vectorsexit_masklobit) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_masklobit_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %92 = xor i32 %.mask.lobit, 1*/
		main_motion_vectorsexit_92 = (main_motion_vectorsexit_masklobit ^ 32'd1);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %92 = xor i32 %.mask.lobit, 1*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_92_reg <= main_motion_vectorsexit_92;
		if (start == 1'b0 && ^(main_motion_vectorsexit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %93 = icmp eq i32 %vec.0.i.i.i, 1566*/
		main_motion_vectorsexit_93 = (main_decode_motion_vectorexitii_vec0iii_reg == 32'd1566);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %93 = icmp eq i32 %vec.0.i.i.i, 1566*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_93_reg <= main_motion_vectorsexit_93;
		if (start == 1'b0 && ^(main_motion_vectorsexit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %94 = zext i1 %93 to i32*/
		main_motion_vectorsexit_94 = main_motion_vectorsexit_93;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %94 = zext i1 %93 to i32*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_94_reg <= main_motion_vectorsexit_94;
		if (start == 1'b0 && ^(main_motion_vectorsexit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %95 = add nuw nsw i32 %94, %92*/
		main_motion_vectorsexit_95 = (main_motion_vectorsexit_94 + main_motion_vectorsexit_92);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %95 = add nuw nsw i32 %94, %92*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_95_reg <= main_motion_vectorsexit_95;
		if (start == 1'b0 && ^(main_motion_vectorsexit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %..i.i.mask = and i32 %vec.0.i6.i.i, 2147483647*/
		main_motion_vectorsexit_iimask = (main_motion_vectorsexit_vec0i6ii_reg & 32'd2147483647);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %..i.i.mask = and i32 %vec.0.i6.i.i, 2147483647*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_iimask_reg <= main_motion_vectorsexit_iimask;
		if (start == 1'b0 && ^(main_motion_vectorsexit_iimask) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_iimask_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %96 = icmp eq i32 %..i.i.mask, 103*/
		main_motion_vectorsexit_96 = (main_motion_vectorsexit_iimask == 32'd103);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %96 = icmp eq i32 %..i.i.mask, 103*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_96_reg <= main_motion_vectorsexit_96;
		if (start == 1'b0 && ^(main_motion_vectorsexit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %97 = zext i1 %96 to i32*/
		main_motion_vectorsexit_97 = main_motion_vectorsexit_96;
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %97 = zext i1 %96 to i32*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_97_reg <= main_motion_vectorsexit_97;
		if (start == 1'b0 && ^(main_motion_vectorsexit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %98 = add nuw nsw i32 %97, %95*/
		main_motion_vectorsexit_98 = (main_motion_vectorsexit_97 + main_motion_vectorsexit_95);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %98 = add nuw nsw i32 %97, %95*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_98_reg <= main_motion_vectorsexit_98;
		if (start == 1'b0 && ^(main_motion_vectorsexit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %99 = add nuw nsw i32 %98, 3*/
		main_motion_vectorsexit_99 = (main_motion_vectorsexit_98 + 32'd3);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %99 = add nuw nsw i32 %98, 3*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_99_reg <= main_motion_vectorsexit_99;
		if (start == 1'b0 && ^(main_motion_vectorsexit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %100 = add nuw nsw i32 %92, %99*/
		main_motion_vectorsexit_100 = (main_motion_vectorsexit_92 + main_motion_vectorsexit_99);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %100 = add nuw nsw i32 %92, %99*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_100_reg <= main_motion_vectorsexit_100;
		if (start == 1'b0 && ^(main_motion_vectorsexit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %101 = add nuw nsw i32 %94, %100*/
		main_motion_vectorsexit_101 = (main_motion_vectorsexit_94 + main_motion_vectorsexit_100);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %101 = add nuw nsw i32 %94, %100*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_101_reg <= main_motion_vectorsexit_101;
		if (start == 1'b0 && ^(main_motion_vectorsexit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %102 = add nsw i32 %97, %101*/
		main_motion_vectorsexit_102 = (main_motion_vectorsexit_97 + main_motion_vectorsexit_101);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %102 = add nsw i32 %97, %101*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_102_reg <= main_motion_vectorsexit_102;
		if (start == 1'b0 && ^(main_motion_vectorsexit_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %103 = add nsw i32 %102, 3*/
		main_motion_vectorsexit_103 = (main_motion_vectorsexit_102 + 32'd3);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %103 = add nsw i32 %102, 3*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_70)) begin
		main_motion_vectorsexit_103_reg <= main_motion_vectorsexit_103;
		if (start == 1'b0 && ^(main_motion_vectorsexit_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %motion_vectors.exit*/
	/*   %105 = icmp eq i32 %103, 12*/
		main_motion_vectorsexit_105 = (main_motion_vectorsexit_103_reg == 32'd12);
end
always @(posedge clk) begin
	/* main: %motion_vectors.exit*/
	/*   %105 = icmp eq i32 %103, 12*/
	if ((cur_state == LEGUP_F_main_BB_motion_vectorsexit_71)) begin
		main_motion_vectorsexit_105_reg <= main_motion_vectorsexit_105;
		if (start == 1'b0 && ^(main_motion_vectorsexit_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_motion_vectorsexit_105_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_41)) begin
		Get_motion_code_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		Get_motion_code_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_start"); $finish; end
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		Get_motion_code_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	else /* if ((cur_state == LEGUP_function_call_42)) */ begin
		Get_motion_code_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		Get_motion_code_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	else /* if ((cur_state == LEGUP_function_call_42)) */ begin
		Get_motion_code_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	Get_motion_code_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	Get_motion_code_finish_final = Get_motion_code_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_41))) begin
		Get_motion_code_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_Get_Bitsexiti_12))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_decode_motion_vectorexitii_41))) begin
		Get_motion_code_return_val_reg <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
	if (Get_motion_code_finish) begin
		Get_motion_code_return_val_reg <= Get_motion_code_return_val;
		if (start == 1'b0 && ^(Get_motion_code_return_val) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to Get_motion_code_return_val_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		legup_function_call = 1'd1;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %110*/
	/*   ret i32 %103*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_a = Get_motion_code_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %9, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %12*/
	/*   store i32 %16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i2, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i8* %29, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__59_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i8* %scevgep.i13, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i8* %70, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_address_a = main_lrphiiii_p202iiii;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_address_a = `TAG_g_ld_Rdbfr_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_address_a = (`TAG_g_ld_Rdbfr_a | (1 * 32'd2));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %9, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %12*/
	/*   store i32 %16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_address_a = `TAG_g_ld_Incnt_a;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i2, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		memory_controller_address_a = main_lrphiiii4_p101iiii2_reg;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i8* %29, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__59_48)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		memory_controller_address_a = main_lrphiiii11_p202iiii8;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		memory_controller_address_a = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i8* %scevgep.i13, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i8* %70, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_address_a = `TAG_g_ld_Rdptr_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_a = Get_motion_code_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %9, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %12*/
	/*   store i32 %16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i2, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i8* %29, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__59_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i8* %scevgep.i13, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i8* %70, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = (`TAG_g_ld_Rdbfr_a | (2048 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_in_a = (`TAG_g_ld_Rdbfr_a | (1 * 32'd4));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %9, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_in_a = main_Get_Bitsexiti_9;
	end
	/* main: %12*/
	/*   store i32 %16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_in_a = main_12_16;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i2, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		memory_controller_in_a = main_lrphiiii4_27;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i8* %29, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_in_a = main_Fill_Bufferexitii_29_reg;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		memory_controller_in_a = -32'd1;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i8* %scevgep.i13, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		memory_controller_in_a = main_loopexitii14_scevgepi13;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i8* %70, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_in_a = main_Fill_Bufferexitii12_70_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_a[1:0] = Get_motion_code_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 1, i32 0), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 0, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   %1 = load i8* %p2.02.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_4)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %2 = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 0), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre1.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 2), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 4), i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 %9, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %12*/
	/*   %13 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %12*/
	/*   store i32 %16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   store i8 %27, i8* %p1.01.i.i.i.i2, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_27)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i8* %29, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %53*/
	/*   %54 = load i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %59*/
	/*   %60 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__59_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   %68 = load i8* %p2.02.i.i.i.i8, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_54)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit.i.i14*/
	/*   store i8* %scevgep.i13, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii14_61)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i8* %70, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_enable_b = Get_motion_code_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i*/
	/*   store i8* %scevgep.i, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %53*/
	/*   store i32 %57, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   store i8 %68, i8* %p1.01.i.i.i.i9, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.i17*/
	/*   store i32 %Incnt.2.i.i16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii17_65)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = Get_motion_code_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_address_b = main_lrphiiii_p101iiii_reg;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_address_b = (`TAG_g_ld_Rdbfr_a | (1 * 32'd1));
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_address_b = (`TAG_g_ld_Rdbfr_a | (1 * 32'd3));
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_address_b = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		memory_controller_address_b = main_lrphiiii4_p202iiii1;
	end
	/* main: %.loopexit.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit.i.i*/
	/*   store i8* %scevgep.i, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		memory_controller_address_b = `TAG_g_ld_Rdptr_a;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit2.i.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii_36)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %53*/
	/*   store i32 %57, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   store i8 %68, i8* %p1.01.i.i.i.i9, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		memory_controller_address_b = main_lrphiiii11_p101iiii9_reg;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_address_b = `TAG_g_ld_Bfr_a;
	end
	/* main: %.loopexit2.i.i17*/
	/*   store i32 %Incnt.2.i.i16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii17_65)) begin
		memory_controller_address_b = `TAG_g_ld_Incnt_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_write_enable_b = Get_motion_code_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.loopexit.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit.i.i*/
	/*   store i8* %scevgep.i, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %53*/
	/*   store i32 %57, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   store i8 %68, i8* %p1.01.i.i.i.i9, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.loopexit2.i.i17*/
	/*   store i32 %Incnt.2.i.i16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii17_65)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = Get_motion_code_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd68157440;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_in_b = main_lrphiiii_1;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_in_b = 32'd31;
	end
	/* main: %.loopexit.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %.loopexit.i.i*/
	/*   store i8* %scevgep.i, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		memory_controller_in_b = main_loopexitii_scevgepi;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %.loopexit2.i.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii_36)) begin
		memory_controller_in_b = main_loopexit2ii_Incnt2ii_reg;
	end
	/* main: %53*/
	/*   store i32 %57, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		memory_controller_in_b = main_53_57;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   store i8 %68, i8* %p1.01.i.i.i.i9, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		memory_controller_in_b = main_lrphiiii11_68;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_in_b = -32'd1;
	end
	/* main: %.loopexit2.i.i17*/
	/*   store i32 %Incnt.2.i.i16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii17_65)) begin
		memory_controller_in_b = main_loopexit2ii17_Incnt2ii16_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %10 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %decode_motion_vector.exit.i.i*/
	/*   %51 = call fastcc i32 @Get_motion_code() #1*/
	if ((cur_state == LEGUP_function_call_42)) begin
		memory_controller_size_b[1:0] = Get_motion_code_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 68157440, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i*/
	/*   store i8 %1, i8* %p1.01.i.i.i.i, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii_6)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 1), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_8)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   %.pre2.i = load i8* getelementptr inbounds ([2048 x i8]* @ld_Rdbfr, i32 0, i32 3), align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_9)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %Get_Bits.exit.i*/
	/*   store i32 31, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_Get_Bitsexiti_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %12*/
	/*   %15 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__12_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %18*/
	/*   %19 = load i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__18_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i4*/
	/*   %27 = load i8* %p2.02.i.i.i.i1, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii4_25)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.loopexit.i.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit.i.i*/
	/*   store i8* %scevgep.i, i8** @ld_Rdptr, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexitii_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit2.i.loopexit.i*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit2.i.i*/
	/*   store i32 %Incnt.2.i.i, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %53*/
	/*   %56 = load i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_44)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %53*/
	/*   store i32 %57, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__53_46)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i.i.i11*/
	/*   store i8 %68, i8* %p1.01.i.i.i.i9, align 1, !tbaa !7*/
	if ((cur_state == LEGUP_F_main_BB_lrphiiii11_56)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %.loopexit2.i.loopexit.i15*/
	/*   store i32 -1, i32* @ld_Bfr, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2iloopexiti15_63)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.loopexit2.i.i17*/
	/*   store i32 %Incnt.2.i.i16, i32* @ld_Incnt, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit2ii17_65)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %110*/
	/*   ret i32 %103*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		return_val <= main_motion_vectorsexit_103_reg;
		if (start == 1'b0 && ^(main_motion_vectorsexit_103_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
