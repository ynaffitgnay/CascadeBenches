//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  8 21:24:33 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [6:0] LEGUP_0 = 7'd0;
parameter [6:0] LEGUP_F_main_BB__0_1 = 7'd1;
parameter [6:0] LEGUP_F_main_BB__1_2 = 7'd2;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exitpreheader_3 = 7'd3;
parameter [6:0] LEGUP_F_main_BB__2_4 = 7'd4;
parameter [6:0] LEGUP_F_main_BB__2_5 = 7'd5;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_6 = 7'd6;
parameter [6:0] LEGUP_F_main_BB_legup_memset_4exit_7 = 7'd7;
parameter [6:0] LEGUP_F_main_BB_preheader13_8 = 7'd8;
parameter [6:0] LEGUP_F_main_BB_preheader13_9 = 7'd9;
parameter [6:0] LEGUP_F_main_BB_preheader13_10 = 7'd10;
parameter [6:0] LEGUP_F_main_BB_preheader13_11 = 7'd11;
parameter [6:0] LEGUP_F_main_BB_preheader13_12 = 7'd12;
parameter [6:0] LEGUP_F_main_BB__15_13 = 7'd13;
parameter [6:0] LEGUP_F_main_BB__15_14 = 7'd14;
parameter [6:0] LEGUP_F_main_BB__23_15 = 7'd15;
parameter [6:0] LEGUP_F_main_BB__33_16 = 7'd16;
parameter [6:0] LEGUP_F_main_BB__33_17 = 7'd17;
parameter [6:0] LEGUP_F_main_BB__33_18 = 7'd18;
parameter [6:0] LEGUP_F_main_BB__40_19 = 7'd19;
parameter [6:0] LEGUP_F_main_BB__40_20 = 7'd20;
parameter [6:0] LEGUP_F_main_BB__40_21 = 7'd21;
parameter [6:0] LEGUP_F_main_BB__47_22 = 7'd22;
parameter [6:0] LEGUP_F_main_BB__47_23 = 7'd23;
parameter [6:0] LEGUP_F_main_BB__47_24 = 7'd24;
parameter [6:0] LEGUP_F_main_BB__58_25 = 7'd25;
parameter [6:0] LEGUP_F_main_BB__58_26 = 7'd26;
parameter [6:0] LEGUP_F_main_BB__58_27 = 7'd27;
parameter [6:0] LEGUP_F_main_BB__69_28 = 7'd28;
parameter [6:0] LEGUP_F_main_BB__69_29 = 7'd29;
parameter [6:0] LEGUP_F_main_BB__71_30 = 7'd30;
parameter [6:0] LEGUP_F_main_BB__71_31 = 7'd31;
parameter [6:0] LEGUP_F_main_BB__73_32 = 7'd32;
parameter [6:0] LEGUP_F_main_BB__73_33 = 7'd33;
parameter [6:0] LEGUP_F_main_BB__73_34 = 7'd34;
parameter [6:0] LEGUP_F_main_BB__80_35 = 7'd35;
parameter [6:0] LEGUP_F_main_BB__80_36 = 7'd36;
parameter [6:0] LEGUP_F_main_BB__80_37 = 7'd37;
parameter [6:0] LEGUP_F_main_BB__87_38 = 7'd38;
parameter [6:0] LEGUP_F_main_BB__87_39 = 7'd39;
parameter [6:0] LEGUP_F_main_BB__87_40 = 7'd40;
parameter [6:0] LEGUP_F_main_BB__94_41 = 7'd41;
parameter [6:0] LEGUP_F_main_BB__94_42 = 7'd42;
parameter [6:0] LEGUP_F_main_BB__94_43 = 7'd43;
parameter [6:0] LEGUP_F_main_BB__99_44 = 7'd44;
parameter [6:0] LEGUP_F_main_BB__99_45 = 7'd45;
parameter [6:0] LEGUP_F_main_BB__99_46 = 7'd46;
parameter [6:0] LEGUP_F_main_BB__104_47 = 7'd47;
parameter [6:0] LEGUP_F_main_BB__104_48 = 7'd48;
parameter [6:0] LEGUP_F_main_BB__104_49 = 7'd49;
parameter [6:0] LEGUP_F_main_BB__111_50 = 7'd50;
parameter [6:0] LEGUP_F_main_BB__111_51 = 7'd51;
parameter [6:0] LEGUP_F_main_BB__111_52 = 7'd52;
parameter [6:0] LEGUP_F_main_BB__118_53 = 7'd53;
parameter [6:0] LEGUP_F_main_BB__118_54 = 7'd54;
parameter [6:0] LEGUP_F_main_BB__118_55 = 7'd55;
parameter [6:0] LEGUP_F_main_BB__126_56 = 7'd56;
parameter [6:0] LEGUP_F_main_BB__126_57 = 7'd57;
parameter [6:0] LEGUP_F_main_BB__126_58 = 7'd58;
parameter [6:0] LEGUP_F_main_BB__134_59 = 7'd59;
parameter [6:0] LEGUP_F_main_BB__134_60 = 7'd60;
parameter [6:0] LEGUP_F_main_BB__137_61 = 7'd61;
parameter [6:0] LEGUP_F_main_BB__140_62 = 7'd62;
parameter [6:0] LEGUP_F_main_BB__140_63 = 7'd63;
parameter [6:0] LEGUP_F_main_BB__143_64 = 7'd64;
parameter [6:0] LEGUP_F_main_BB__148_65 = 7'd65;
parameter [6:0] LEGUP_F_main_BB__148_66 = 7'd66;
parameter [6:0] LEGUP_F_main_BB__148_67 = 7'd67;
parameter [6:0] LEGUP_F_main_BB__154_68 = 7'd68;
parameter [6:0] LEGUP_F_main_BB__154_69 = 7'd69;
parameter [6:0] LEGUP_F_main_BB__154_70 = 7'd70;
parameter [6:0] LEGUP_F_main_BB__160_71 = 7'd71;
parameter [6:0] LEGUP_F_main_BB__160_72 = 7'd72;
parameter [6:0] LEGUP_F_main_BB__160_73 = 7'd73;
parameter [6:0] LEGUP_F_main_BB__166_74 = 7'd74;
parameter [6:0] LEGUP_F_main_BB__166_75 = 7'd75;
parameter [6:0] LEGUP_F_main_BB__166_76 = 7'd76;
parameter [6:0] LEGUP_F_main_BB__172_77 = 7'd77;
parameter [6:0] LEGUP_F_main_BB__172_78 = 7'd78;
parameter [6:0] LEGUP_F_main_BB__172_79 = 7'd79;
parameter [6:0] LEGUP_F_main_BB__172_80 = 7'd80;
parameter [6:0] LEGUP_F_main_BB__172_81 = 7'd81;
parameter [6:0] LEGUP_F_main_BB__181_82 = 7'd82;
parameter [6:0] LEGUP_F_main_BB__181_83 = 7'd83;
parameter [6:0] LEGUP_F_main_BB__181_84 = 7'd84;
parameter [6:0] LEGUP_F_main_BB__181_85 = 7'd85;
parameter [6:0] LEGUP_F_main_BB__190_86 = 7'd86;
parameter [6:0] LEGUP_F_main_BB__190_87 = 7'd87;
parameter [6:0] LEGUP_F_main_BB__192_88 = 7'd88;
parameter [6:0] LEGUP_F_main_BB__192_89 = 7'd89;
parameter [6:0] LEGUP_F_main_BB__198_90 = 7'd90;
parameter [6:0] LEGUP_F_main_BB__201_91 = 7'd91;
parameter [6:0] LEGUP_F_main_BB__201_92 = 7'd92;
parameter [6:0] LEGUP_F_main_BB__207_93 = 7'd93;
parameter [6:0] LEGUP_F_main_BB__210_94 = 7'd94;
parameter [6:0] LEGUP_F_main_BB__210_95 = 7'd95;
parameter [6:0] LEGUP_F_main_BB__214_96 = 7'd96;
parameter [6:0] LEGUP_F_main_BB__217_97 = 7'd97;
parameter [6:0] LEGUP_F_main_BB__217_98 = 7'd98;
parameter [6:0] LEGUP_F_main_BB__217_99 = 7'd99;
parameter [6:0] LEGUP_F_main_BB__224_100 = 7'd100;
parameter [6:0] LEGUP_F_main_BB__224_101 = 7'd101;
parameter [6:0] LEGUP_F_main_BB__224_102 = 7'd102;
parameter [6:0] LEGUP_F_main_BB_thread_103 = 7'd103;
parameter [6:0] LEGUP_F_main_BB_thread_104 = 7'd104;
parameter [6:0] LEGUP_F_main_BB__231_105 = 7'd105;
parameter [6:0] LEGUP_F_main_BB__231_106 = 7'd106;
parameter [6:0] LEGUP_F_main_BB_loopexitloopexit_107 = 7'd107;
parameter [6:0] LEGUP_F_main_BB_loopexit_108 = 7'd108;
parameter [6:0] LEGUP_F_main_BB_loopexit_109 = 7'd109;
parameter [6:0] LEGUP_F_main_BB_loopexit_110 = 7'd110;
parameter [6:0] LEGUP_F_main_BB_loopexit_111 = 7'd111;
parameter [6:0] LEGUP_F_main_BB_loopexit_112 = 7'd112;
parameter [6:0] LEGUP_F_main_BB__270_113 = 7'd113;
parameter [6:0] LEGUP_F_main_BB__272_114 = 7'd114;
parameter [6:0] LEGUP_F_main_BB__274_115 = 7'd115;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [6:0] cur_state;
reg [6:0] next_state;
reg [31:0] main_1_indvar;
reg [31:0] main_1_indvar_reg;
reg  main_1_exitcond;
reg  main_1_exitcond_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_2_si0_reg;
reg [31:0] main_2_indvarnext;
reg [31:0] main_2_indvarnext_reg;
reg [31:0] main_legup_memset_4exit_i011;
reg [31:0] main_legup_memset_4exit_i011_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_legup_memset_4exit_scevgep_reg;
reg [31:0] main_legup_memset_4exit_3;
reg [31:0] main_legup_memset_4exit_3_reg;
reg  main_legup_memset_4exit_exitcond1;
reg  main_legup_memset_4exit_exitcond1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader13_14_reg;
reg [31:0] main_15_pc0;
reg [31:0] main_15_pc0_reg;
reg [31:0] main_15_Lo0;
reg [31:0] main_15_Lo0_reg;
reg [31:0] main_15_Hi0;
reg [31:0] main_15_Hi0_reg;
reg [31:0] main_15_16;
reg [31:0] main_15_16_reg;
reg [31:0] main_15_17;
reg [31:0] main_15_17_reg;
reg [31:0] main_15_18;
reg [31:0] main_15_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_15_19_reg;
reg [31:0] main_15_20;
reg [31:0] main_15_20_reg;
reg [31:0] main_15_21;
reg [31:0] main_15_21_reg;
reg [31:0] main_15_22;
reg [31:0] main_15_22_reg;
reg [31:0] main_23_24;
reg [31:0] main_23_24_reg;
reg [31:0] main_23_25;
reg [31:0] main_23_25_reg;
reg [31:0] main_23_26;
reg [31:0] main_23_26_reg;
reg [31:0] main_23_27;
reg [31:0] main_23_27_reg;
reg [31:0] main_23_28;
reg [31:0] main_23_28_reg;
reg [31:0] main_23_29;
reg [31:0] main_23_29_reg;
reg [31:0] main_23_30;
reg [31:0] main_23_30_reg;
reg [31:0] main_23_31;
reg [31:0] main_23_31_reg;
reg [31:0] main_23_32;
reg [31:0] main_23_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_34_reg;
reg [31:0] main_33_35;
reg [31:0] main_33_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_36_reg;
reg [31:0] main_33_37;
reg [31:0] main_33_37_reg;
reg [31:0] main_33_38;
reg [31:0] main_33_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_33_39_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_41_reg;
reg [31:0] main_40_42;
reg [31:0] main_40_42_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_43_reg;
reg [31:0] main_40_44;
reg [31:0] main_40_44_reg;
reg [31:0] main_40_45;
reg [31:0] main_40_45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_40_46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_47_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_47_48_reg;
reg [31:0] main_47_49;
reg [31:0] main_47_49_reg;
reg [63:0] main_47_50;
reg [63:0] main_47_50_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_47_51;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_47_51_reg;
reg [31:0] main_47_52;
reg [31:0] main_47_52_reg;
reg [63:0] main_47_53;
reg [63:0] main_47_53_reg;
reg [63:0] main_47_54;
reg [63:0] main_47_54_reg;
reg [31:0] main_47_55;
reg [31:0] main_47_55_reg;
reg [63:0] main_47_56;
reg [63:0] main_47_56_reg;
reg [31:0] main_47_57;
reg [31:0] main_47_57_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_59_reg;
reg [31:0] main_58_60;
reg [31:0] main_58_60_reg;
reg [63:0] main_58_61;
reg [63:0] main_58_61_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_58_62_reg;
reg [31:0] main_58_63;
reg [31:0] main_58_63_reg;
reg [63:0] main_58_64;
reg [63:0] main_58_64_reg;
reg [63:0] main_58_65;
reg [63:0] main_58_65_reg;
reg [31:0] main_58_66;
reg [31:0] main_58_66_reg;
reg [63:0] main_58_67;
reg [63:0] main_58_67_reg;
reg [31:0] main_58_68;
reg [31:0] main_58_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_69_70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_71_72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_71_72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_74_reg;
reg [31:0] main_73_75;
reg [31:0] main_73_75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_76_reg;
reg [31:0] main_73_77;
reg [31:0] main_73_77_reg;
reg [31:0] main_73_78;
reg [31:0] main_73_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_73_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_81_reg;
reg [31:0] main_80_82;
reg [31:0] main_80_82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_83_reg;
reg [31:0] main_80_84;
reg [31:0] main_80_84_reg;
reg [31:0] main_80_85;
reg [31:0] main_80_85_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_80_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_88_reg;
reg [31:0] main_87_89;
reg [31:0] main_87_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_90_reg;
reg [31:0] main_87_91;
reg [31:0] main_87_91_reg;
reg [31:0] main_87_92;
reg [31:0] main_87_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_93;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_87_93_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_95;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_95_reg;
reg [31:0] main_94_96;
reg [31:0] main_94_96_reg;
reg [31:0] main_94_97;
reg [31:0] main_94_97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_94_98_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_99_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_99_100_reg;
reg [31:0] main_99_101;
reg [31:0] main_99_101_reg;
reg [31:0] main_99_102;
reg [31:0] main_99_102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_99_103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_99_103_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_105;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_105_reg;
reg [31:0] main_104_106;
reg [31:0] main_104_106_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_107;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_107_reg;
reg [31:0] main_104_108;
reg [31:0] main_104_108_reg;
reg [31:0] main_104_109;
reg [31:0] main_104_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_104_110_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_112_reg;
reg [31:0] main_111_113;
reg [31:0] main_111_113_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_114_reg;
reg [31:0] main_111_115;
reg [31:0] main_111_115_reg;
reg [31:0] main_111_116;
reg [31:0] main_111_116_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_117;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_111_117_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_119;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_119_reg;
reg [31:0] main_118_120;
reg [31:0] main_118_120_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_121;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_121_reg;
reg [31:0] main_118_122;
reg [31:0] main_118_122_reg;
reg  main_118_123;
reg  main_118_123_reg;
reg [31:0] main_118_124;
reg [31:0] main_118_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_125;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_118_125_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_127_reg;
reg [31:0] main_126_128;
reg [31:0] main_126_128_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_129_reg;
reg [31:0] main_126_130;
reg [31:0] main_126_130_reg;
reg  main_126_131;
reg  main_126_131_reg;
reg [31:0] main_126_132;
reg [31:0] main_126_132_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_126_133_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_134_135_reg;
reg [31:0] main_134_136;
reg [31:0] main_134_136_reg;
reg [31:0] main_137_138;
reg [31:0] main_137_138_reg;
reg [31:0] main_137_139;
reg [31:0] main_137_139_reg;
reg [31:0] main_140_141;
reg [31:0] main_140_141_reg;
reg [31:0] main_140_142;
reg [31:0] main_140_142_reg;
reg [31:0] main_143_144;
reg [31:0] main_143_144_reg;
reg [31:0] main_143_145;
reg [31:0] main_143_145_reg;
reg [31:0] main_143_146;
reg [31:0] main_143_146_reg;
reg [31:0] main_143_147;
reg [31:0] main_143_147_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_148_149;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_148_149_reg;
reg [31:0] main_148_150;
reg [31:0] main_148_150_reg;
reg [31:0] main_148_sext7;
reg [31:0] main_148_sext7_reg;
reg [31:0] main_148_151;
reg [31:0] main_148_151_reg;
reg [31:0] main_148_152;
reg [31:0] main_148_152_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_148_153;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_148_153_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_154_155;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_154_155_reg;
reg [31:0] main_154_156;
reg [31:0] main_154_156_reg;
reg [31:0] main_154_157;
reg [31:0] main_154_157_reg;
reg [31:0] main_154_158;
reg [31:0] main_154_158_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_154_159;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_154_159_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_161;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_161_reg;
reg [31:0] main_160_162;
reg [31:0] main_160_162_reg;
reg [31:0] main_160_163;
reg [31:0] main_160_163_reg;
reg [31:0] main_160_164;
reg [31:0] main_160_164_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_165;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_165_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_166_167;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_166_167_reg;
reg [31:0] main_166_168;
reg [31:0] main_166_168_reg;
reg [31:0] main_166_169;
reg [31:0] main_166_169_reg;
reg [31:0] main_166_170;
reg [31:0] main_166_170_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_166_171;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_166_171_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_173;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_173_reg;
reg [31:0] main_172_174;
reg [31:0] main_172_174_reg;
reg [31:0] main_172_175;
reg [31:0] main_172_175_reg;
reg [31:0] main_172_176;
reg [31:0] main_172_176_reg;
reg [31:0] main_172_177;
reg [31:0] main_172_177_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_178_reg;
reg [31:0] main_172_179;
reg [31:0] main_172_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_172_180_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_182;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_182_reg;
reg [31:0] main_181_183;
reg [31:0] main_181_183_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_184_reg;
reg [31:0] main_181_185;
reg [31:0] main_181_185_reg;
reg [31:0] main_181_186;
reg [31:0] main_181_186_reg;
reg [31:0] main_181_187;
reg [31:0] main_181_187_reg;
reg [31:0] main_181_188;
reg [31:0] main_181_188_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_189;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_181_189_reg;
reg [31:0] main_190_sext4;
reg [31:0] main_190_sext4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_190_191;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_190_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_192_193;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_192_193_reg;
reg [31:0] main_192_194;
reg [31:0] main_192_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_192_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_192_195_reg;
reg [31:0] main_192_196;
reg [31:0] main_192_196_reg;
reg  main_192_197;
reg  main_192_197_reg;
reg [31:0] main_198_sext3;
reg [31:0] main_198_sext3_reg;
reg [31:0] main_198_199;
reg [31:0] main_198_199_reg;
reg [31:0] main_198_200;
reg [31:0] main_198_200_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_201_202;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_201_202_reg;
reg [31:0] main_201_203;
reg [31:0] main_201_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_201_204;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_201_204_reg;
reg [31:0] main_201_205;
reg [31:0] main_201_205_reg;
reg  main_201_206;
reg  main_201_206_reg;
reg [31:0] main_207_sext2;
reg [31:0] main_207_sext2_reg;
reg [31:0] main_207_208;
reg [31:0] main_207_208_reg;
reg [31:0] main_207_209;
reg [31:0] main_207_209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_210_211;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_210_211_reg;
reg [31:0] main_210_212;
reg [31:0] main_210_212_reg;
reg  main_210_213;
reg  main_210_213_reg;
reg [31:0] main_214_sext1;
reg [31:0] main_214_sext1_reg;
reg [31:0] main_214_215;
reg [31:0] main_214_215_reg;
reg [31:0] main_214_216;
reg [31:0] main_214_216_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_217_218;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_217_218_reg;
reg [31:0] main_217_219;
reg [31:0] main_217_219_reg;
reg [31:0] main_217_sext;
reg [31:0] main_217_sext_reg;
reg [31:0] main_217_220;
reg [31:0] main_217_220_reg;
reg  main_217_221;
reg  main_217_221_reg;
reg [31:0] main_217_222;
reg [31:0] main_217_222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_217_223;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_217_223_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_224_225;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_224_225_reg;
reg [31:0] main_224_226;
reg [31:0] main_224_226_reg;
reg [31:0] main_224_227;
reg [31:0] main_224_227_reg;
reg  main_224_228;
reg  main_224_228_reg;
reg [31:0] main_224_229;
reg [31:0] main_224_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_224_230;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_224_230_reg;
reg [31:0] main_231_pc1;
reg [31:0] main_231_pc1_reg;
reg [31:0] main_231_Lo1;
reg [31:0] main_231_Lo1_reg;
reg [31:0] main_231_Hi1;
reg [31:0] main_231_Hi1_reg;
reg [31:0] main_231_232;
reg [31:0] main_231_232_reg;
reg  main_231_233;
reg  main_231_233_reg;
reg  main_loopexit_234;
reg  main_loopexit_234_reg;
reg [31:0] main_loopexit_235;
reg [31:0] main_loopexit_235_reg;
reg [31:0] main_loopexit_236;
reg [31:0] main_loopexit_236_reg;
reg  main_loopexit_237;
reg  main_loopexit_237_reg;
reg [31:0] main_loopexit_238;
reg [31:0] main_loopexit_238_reg;
reg [31:0] main_loopexit_239;
reg [31:0] main_loopexit_239_reg;
reg [31:0] main_loopexit_240;
reg [31:0] main_loopexit_240_reg;
reg  main_loopexit_241;
reg  main_loopexit_241_reg;
reg [31:0] main_loopexit_242;
reg [31:0] main_loopexit_242_reg;
reg [31:0] main_loopexit_243;
reg [31:0] main_loopexit_243_reg;
reg [31:0] main_loopexit_244;
reg [31:0] main_loopexit_244_reg;
reg  main_loopexit_245;
reg  main_loopexit_245_reg;
reg [31:0] main_loopexit_246;
reg [31:0] main_loopexit_246_reg;
reg [31:0] main_loopexit_247;
reg [31:0] main_loopexit_247_reg;
reg [31:0] main_loopexit_248;
reg [31:0] main_loopexit_248_reg;
reg  main_loopexit_249;
reg  main_loopexit_249_reg;
reg [31:0] main_loopexit_250;
reg [31:0] main_loopexit_250_reg;
reg [31:0] main_loopexit_251;
reg [31:0] main_loopexit_251_reg;
reg [31:0] main_loopexit_252;
reg [31:0] main_loopexit_252_reg;
reg  main_loopexit_253;
reg  main_loopexit_253_reg;
reg [31:0] main_loopexit_254;
reg [31:0] main_loopexit_254_reg;
reg [31:0] main_loopexit_255;
reg [31:0] main_loopexit_255_reg;
reg [31:0] main_loopexit_256;
reg [31:0] main_loopexit_256_reg;
reg  main_loopexit_257;
reg  main_loopexit_257_reg;
reg [31:0] main_loopexit_258;
reg [31:0] main_loopexit_258_reg;
reg [31:0] main_loopexit_259;
reg [31:0] main_loopexit_259_reg;
reg [31:0] main_loopexit_260;
reg [31:0] main_loopexit_260_reg;
reg  main_loopexit_261;
reg  main_loopexit_261_reg;
reg [31:0] main_loopexit_262;
reg [31:0] main_loopexit_262_reg;
reg [31:0] main_loopexit_263;
reg [31:0] main_loopexit_263_reg;
reg [31:0] main_loopexit_264;
reg [31:0] main_loopexit_264_reg;
reg  main_loopexit_265;
reg  main_loopexit_265_reg;
reg [31:0] main_loopexit_266;
reg [31:0] main_loopexit_266_reg;
reg [31:0] main_loopexit_267;
reg [31:0] main_loopexit_267_reg;
reg  main_loopexit_269;
reg  main_loopexit_269_reg;
reg [5:0] imem_address_a;
reg  imem_write_enable_a;
wire [31:0] imem_in_a;
wire [31:0] imem_out_a;
wire [5:0] imem_address_b;
wire  imem_write_enable_b;
wire [31:0] imem_in_b;
wire [31:0] imem_out_b;
reg [4:0] main_0_reg_address_a;
reg  main_0_reg_write_enable_a;
reg [31:0] main_0_reg_in_a;
wire [31:0] main_0_reg_out_a;
reg [4:0] main_0_reg_address_b;
reg  main_0_reg_write_enable_b;
reg [31:0] main_0_reg_in_b;
wire [31:0] main_0_reg_out_b;
reg [5:0] main_0_dmem_address_a;
reg  main_0_dmem_write_enable_a;
reg [31:0] main_0_dmem_in_a;
wire [31:0] main_0_dmem_out_a;
reg [5:0] main_0_dmem_address_b;
reg  main_0_dmem_write_enable_b;
reg [31:0] main_0_dmem_in_b;
wire [31:0] main_0_dmem_out_b;
reg  lpm_mult_main_47_54_en;
reg [63:0] main_47_54_stage0_reg;
reg  lpm_mult_main_58_65_en;
reg [63:0] main_58_65_stage0_reg;

// Local Rams


// @imem = internal unnamed_addr constant [44 x i32] [i32 -1885077504, i32 665124868, i32 614858756, i32 266368, i32 12726305, i32 202375190, i32 0, i32 872546314, i32 12, i32 1006702593, i32 875036672, ...
rom_dual_port imem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( imem_address_a ),
	.address_b( imem_address_b ),
	.q_a( imem_out_a ),
	.q_b( imem_out_b)
);
defparam imem.width_a = 32;
defparam imem.width_b = 32;
defparam imem.widthad_a = 6;
defparam imem.widthad_b = 6;
defparam imem.numwords_a = 44;
defparam imem.numwords_b = 44;
defparam imem.latency = 1;
defparam imem.init_file = "imem.mif";


//   %reg = alloca [32 x i32], align 4
ram_dual_port main_0_reg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_reg_address_a ),
	.address_b( main_0_reg_address_b ),
	.wren_a( main_0_reg_write_enable_a ),
	.wren_b( main_0_reg_write_enable_b ),
	.data_a( main_0_reg_in_a ),
	.data_b( main_0_reg_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_reg_out_a ),
	.q_b( main_0_reg_out_b)
);
defparam main_0_reg.width_a = 32;
defparam main_0_reg.width_b = 32;
defparam main_0_reg.widthad_a = 5;
defparam main_0_reg.widthad_b = 5;
defparam main_0_reg.width_be_a = 1;
defparam main_0_reg.width_be_b = 1;
defparam main_0_reg.numwords_a = 32;
defparam main_0_reg.numwords_b = 32;
defparam main_0_reg.latency = 1;


//   %dmem = alloca [64 x i32], align 4
ram_dual_port main_0_dmem (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_dmem_address_a ),
	.address_b( main_0_dmem_address_b ),
	.wren_a( main_0_dmem_write_enable_a ),
	.wren_b( main_0_dmem_write_enable_b ),
	.data_a( main_0_dmem_in_a ),
	.data_b( main_0_dmem_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_dmem_out_a ),
	.q_b( main_0_dmem_out_b)
);
defparam main_0_dmem.width_a = 32;
defparam main_0_dmem.width_b = 32;
defparam main_0_dmem.widthad_a = 6;
defparam main_0_dmem.widthad_b = 6;
defparam main_0_dmem.width_be_a = 1;
defparam main_0_dmem.width_be_b = 1;
defparam main_0_dmem.numwords_a = 64;
defparam main_0_dmem.numwords_b = 64;
defparam main_0_dmem.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.loopexit*/
	/*   %268 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str1, i32 0, i32 0), i32 %267) #2*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		$write("Result: %d\n", $signed(main_loopexit_267));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_loopexit_267) === 1'bX) finish <= 0;
	end
	/* main: %270*/
	/*   %271 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__270_113)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %272*/
	/*   %273 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__272_114)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__104_47:
		next_state = LEGUP_F_main_BB__104_48;
LEGUP_F_main_BB__104_48:
		next_state = LEGUP_F_main_BB__104_49;
LEGUP_F_main_BB__104_49:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__111_50:
		next_state = LEGUP_F_main_BB__111_51;
LEGUP_F_main_BB__111_51:
		next_state = LEGUP_F_main_BB__111_52;
LEGUP_F_main_BB__111_52:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__118_53:
		next_state = LEGUP_F_main_BB__118_54;
LEGUP_F_main_BB__118_54:
		next_state = LEGUP_F_main_BB__118_55;
LEGUP_F_main_BB__118_55:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__126_56:
		next_state = LEGUP_F_main_BB__126_57;
LEGUP_F_main_BB__126_57:
		next_state = LEGUP_F_main_BB__126_58;
LEGUP_F_main_BB__126_58:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__134_59:
		next_state = LEGUP_F_main_BB__134_60;
LEGUP_F_main_BB__134_60:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__137_61:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__140_62:
		next_state = LEGUP_F_main_BB__140_63;
LEGUP_F_main_BB__140_63:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__143_64:
	if ((main_15_22_reg == 32'd9))
		next_state = LEGUP_F_main_BB__148_65;
	else if ((main_15_22_reg == 32'd12))
		next_state = LEGUP_F_main_BB__154_68;
	else if ((main_15_22_reg == 32'd13))
		next_state = LEGUP_F_main_BB__160_71;
	else if ((main_15_22_reg == 32'd14))
		next_state = LEGUP_F_main_BB__166_74;
	else if ((main_15_22_reg == 32'd35))
		next_state = LEGUP_F_main_BB__172_77;
	else if ((main_15_22_reg == 32'd43))
		next_state = LEGUP_F_main_BB__181_82;
	else if ((main_15_22_reg == 32'd15))
		next_state = LEGUP_F_main_BB__190_86;
	else if ((main_15_22_reg == 32'd4))
		next_state = LEGUP_F_main_BB__192_88;
	else if ((main_15_22_reg == 32'd5))
		next_state = LEGUP_F_main_BB__201_91;
	else if ((main_15_22_reg == 32'd1))
		next_state = LEGUP_F_main_BB__210_94;
	else if ((main_15_22_reg == 32'd10))
		next_state = LEGUP_F_main_BB__217_97;
	else if ((main_15_22_reg == 32'd11))
		next_state = LEGUP_F_main_BB__224_100;
	else if ((main_15_22_reg != 32'd9) && (main_15_22_reg != 32'd12) && (main_15_22_reg != 32'd13) && (main_15_22_reg != 32'd14) && (main_15_22_reg != 32'd35) && (main_15_22_reg != 32'd43) && (main_15_22_reg != 32'd15) && (main_15_22_reg != 32'd4) && (main_15_22_reg != 32'd5) && (main_15_22_reg != 32'd1) && (main_15_22_reg != 32'd10) && (main_15_22_reg != 32'd11))
		next_state = LEGUP_F_main_BB_thread_103;
LEGUP_F_main_BB__148_65:
		next_state = LEGUP_F_main_BB__148_66;
LEGUP_F_main_BB__148_66:
		next_state = LEGUP_F_main_BB__148_67;
LEGUP_F_main_BB__148_67:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__154_68:
		next_state = LEGUP_F_main_BB__154_69;
LEGUP_F_main_BB__154_69:
		next_state = LEGUP_F_main_BB__154_70;
LEGUP_F_main_BB__154_70:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__15_13:
		next_state = LEGUP_F_main_BB__15_14;
LEGUP_F_main_BB__15_14:
	if ((main_15_22 == 32'd0))
		next_state = LEGUP_F_main_BB__23_15;
	else if ((main_15_22 == 32'd2))
		next_state = LEGUP_F_main_BB__137_61;
	else if ((main_15_22 == 32'd3))
		next_state = LEGUP_F_main_BB__140_62;
	else if ((main_15_22 != 32'd0) && (main_15_22 != 32'd2) && (main_15_22 != 32'd3))
		next_state = LEGUP_F_main_BB__143_64;
LEGUP_F_main_BB__160_71:
		next_state = LEGUP_F_main_BB__160_72;
LEGUP_F_main_BB__160_72:
		next_state = LEGUP_F_main_BB__160_73;
LEGUP_F_main_BB__160_73:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__166_74:
		next_state = LEGUP_F_main_BB__166_75;
LEGUP_F_main_BB__166_75:
		next_state = LEGUP_F_main_BB__166_76;
LEGUP_F_main_BB__166_76:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__172_77:
		next_state = LEGUP_F_main_BB__172_78;
LEGUP_F_main_BB__172_78:
		next_state = LEGUP_F_main_BB__172_79;
LEGUP_F_main_BB__172_79:
		next_state = LEGUP_F_main_BB__172_80;
LEGUP_F_main_BB__172_80:
		next_state = LEGUP_F_main_BB__172_81;
LEGUP_F_main_BB__172_81:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__181_82:
		next_state = LEGUP_F_main_BB__181_83;
LEGUP_F_main_BB__181_83:
		next_state = LEGUP_F_main_BB__181_84;
LEGUP_F_main_BB__181_84:
		next_state = LEGUP_F_main_BB__181_85;
LEGUP_F_main_BB__181_85:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__190_86:
		next_state = LEGUP_F_main_BB__190_87;
LEGUP_F_main_BB__190_87:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__192_88:
		next_state = LEGUP_F_main_BB__192_89;
LEGUP_F_main_BB__192_89:
	if ((main_192_197 == 1'd1))
		next_state = LEGUP_F_main_BB__198_90;
	else if ((main_192_197 == 1'd0))
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__198_90:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__1_2:
	if ((main_1_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_legup_memset_4exitpreheader_3;
	else if ((main_1_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__2_4;
LEGUP_F_main_BB__201_91:
		next_state = LEGUP_F_main_BB__201_92;
LEGUP_F_main_BB__201_92:
	if ((main_201_206 == 1'd1))
		next_state = LEGUP_F_main_BB__231_105;
	else if ((main_201_206 == 1'd0))
		next_state = LEGUP_F_main_BB__207_93;
LEGUP_F_main_BB__207_93:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__210_94:
		next_state = LEGUP_F_main_BB__210_95;
LEGUP_F_main_BB__210_95:
	if ((main_210_213 == 1'd1))
		next_state = LEGUP_F_main_BB__214_96;
	else if ((main_210_213 == 1'd0))
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__214_96:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__217_97:
		next_state = LEGUP_F_main_BB__217_98;
LEGUP_F_main_BB__217_98:
		next_state = LEGUP_F_main_BB__217_99;
LEGUP_F_main_BB__217_99:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__224_100:
		next_state = LEGUP_F_main_BB__224_101;
LEGUP_F_main_BB__224_101:
		next_state = LEGUP_F_main_BB__224_102;
LEGUP_F_main_BB__224_102:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__231_105:
		next_state = LEGUP_F_main_BB__231_106;
LEGUP_F_main_BB__231_106:
	if ((main_231_233_reg == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitloopexit_107;
	else if ((main_231_233_reg == 1'd0))
		next_state = LEGUP_F_main_BB__15_13;
LEGUP_F_main_BB__23_15:
	if ((main_23_24 == 32'd33))
		next_state = LEGUP_F_main_BB__33_16;
	else if ((main_23_24 == 32'd35))
		next_state = LEGUP_F_main_BB__40_19;
	else if ((main_23_24 == 32'd24))
		next_state = LEGUP_F_main_BB__47_22;
	else if ((main_23_24 == 32'd25))
		next_state = LEGUP_F_main_BB__58_25;
	else if ((main_23_24 == 32'd16))
		next_state = LEGUP_F_main_BB__69_28;
	else if ((main_23_24 == 32'd18))
		next_state = LEGUP_F_main_BB__71_30;
	else if ((main_23_24 == 32'd36))
		next_state = LEGUP_F_main_BB__73_32;
	else if ((main_23_24 == 32'd37))
		next_state = LEGUP_F_main_BB__80_35;
	else if ((main_23_24 == 32'd38))
		next_state = LEGUP_F_main_BB__87_38;
	else if ((main_23_24 == 32'd0))
		next_state = LEGUP_F_main_BB__94_41;
	else if ((main_23_24 == 32'd2))
		next_state = LEGUP_F_main_BB__99_44;
	else if ((main_23_24 == 32'd4))
		next_state = LEGUP_F_main_BB__104_47;
	else if ((main_23_24 == 32'd6))
		next_state = LEGUP_F_main_BB__111_50;
	else if ((main_23_24 == 32'd42))
		next_state = LEGUP_F_main_BB__118_53;
	else if ((main_23_24 == 32'd43))
		next_state = LEGUP_F_main_BB__126_56;
	else if ((main_23_24 == 32'd8))
		next_state = LEGUP_F_main_BB__134_59;
	else if ((main_23_24 != 32'd33) && (main_23_24 != 32'd35) && (main_23_24 != 32'd24) && (main_23_24 != 32'd25) && (main_23_24 != 32'd16) && (main_23_24 != 32'd18) && (main_23_24 != 32'd36) && (main_23_24 != 32'd37) && (main_23_24 != 32'd38) && (main_23_24 != 32'd0) && (main_23_24 != 32'd2) && (main_23_24 != 32'd4) && (main_23_24 != 32'd6) && (main_23_24 != 32'd42) && (main_23_24 != 32'd43) && (main_23_24 != 32'd8))
		next_state = LEGUP_F_main_BB_thread_103;
LEGUP_F_main_BB__270_113:
		next_state = LEGUP_F_main_BB__274_115;
LEGUP_F_main_BB__272_114:
		next_state = LEGUP_F_main_BB__274_115;
LEGUP_F_main_BB__274_115:
		next_state = LEGUP_0;
LEGUP_F_main_BB__2_4:
		next_state = LEGUP_F_main_BB__2_5;
LEGUP_F_main_BB__2_5:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__33_16:
		next_state = LEGUP_F_main_BB__33_17;
LEGUP_F_main_BB__33_17:
		next_state = LEGUP_F_main_BB__33_18;
LEGUP_F_main_BB__33_18:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__40_19:
		next_state = LEGUP_F_main_BB__40_20;
LEGUP_F_main_BB__40_20:
		next_state = LEGUP_F_main_BB__40_21;
LEGUP_F_main_BB__40_21:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__47_22:
		next_state = LEGUP_F_main_BB__47_23;
LEGUP_F_main_BB__47_23:
		next_state = LEGUP_F_main_BB__47_24;
LEGUP_F_main_BB__47_24:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__58_25:
		next_state = LEGUP_F_main_BB__58_26;
LEGUP_F_main_BB__58_26:
		next_state = LEGUP_F_main_BB__58_27;
LEGUP_F_main_BB__58_27:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__69_28:
		next_state = LEGUP_F_main_BB__69_29;
LEGUP_F_main_BB__69_29:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__71_30:
		next_state = LEGUP_F_main_BB__71_31;
LEGUP_F_main_BB__71_31:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__73_32:
		next_state = LEGUP_F_main_BB__73_33;
LEGUP_F_main_BB__73_33:
		next_state = LEGUP_F_main_BB__73_34;
LEGUP_F_main_BB__73_34:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__80_35:
		next_state = LEGUP_F_main_BB__80_36;
LEGUP_F_main_BB__80_36:
		next_state = LEGUP_F_main_BB__80_37;
LEGUP_F_main_BB__80_37:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__87_38:
		next_state = LEGUP_F_main_BB__87_39;
LEGUP_F_main_BB__87_39:
		next_state = LEGUP_F_main_BB__87_40;
LEGUP_F_main_BB__87_40:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__94_41:
		next_state = LEGUP_F_main_BB__94_42;
LEGUP_F_main_BB__94_42:
		next_state = LEGUP_F_main_BB__94_43;
LEGUP_F_main_BB__94_43:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB__99_44:
		next_state = LEGUP_F_main_BB__99_45;
LEGUP_F_main_BB__99_45:
		next_state = LEGUP_F_main_BB__99_46;
LEGUP_F_main_BB__99_46:
		next_state = LEGUP_F_main_BB__231_105;
LEGUP_F_main_BB_legup_memset_4exit_6:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_7;
LEGUP_F_main_BB_legup_memset_4exit_7:
	if ((main_legup_memset_4exit_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader13_8;
	else if ((main_legup_memset_4exit_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB_legup_memset_4exitpreheader_3:
		next_state = LEGUP_F_main_BB_legup_memset_4exit_6;
LEGUP_F_main_BB_loopexit_108:
		next_state = LEGUP_F_main_BB_loopexit_109;
LEGUP_F_main_BB_loopexit_109:
		next_state = LEGUP_F_main_BB_loopexit_110;
LEGUP_F_main_BB_loopexit_110:
		next_state = LEGUP_F_main_BB_loopexit_111;
LEGUP_F_main_BB_loopexit_111:
		next_state = LEGUP_F_main_BB_loopexit_112;
LEGUP_F_main_BB_loopexit_112:
	if ((main_loopexit_269 == 1'd1))
		next_state = LEGUP_F_main_BB__270_113;
	else if ((main_loopexit_269 == 1'd0))
		next_state = LEGUP_F_main_BB__272_114;
LEGUP_F_main_BB_loopexitloopexit_107:
		next_state = LEGUP_F_main_BB_loopexit_108;
LEGUP_F_main_BB_preheader13_10:
		next_state = LEGUP_F_main_BB_preheader13_11;
LEGUP_F_main_BB_preheader13_11:
		next_state = LEGUP_F_main_BB_preheader13_12;
LEGUP_F_main_BB_preheader13_12:
		next_state = LEGUP_F_main_BB__15_13;
LEGUP_F_main_BB_preheader13_8:
		next_state = LEGUP_F_main_BB_preheader13_9;
LEGUP_F_main_BB_preheader13_9:
		next_state = LEGUP_F_main_BB_preheader13_10;
LEGUP_F_main_BB_thread_103:
		next_state = LEGUP_F_main_BB_thread_104;
LEGUP_F_main_BB_thread_104:
		next_state = LEGUP_F_main_BB_loopexit_108;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar = 32'd0;
	end
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_indvar = main_2_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar_reg <= main_1_indvar;
		if (start == 1'b0 && ^(main_1_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar_reg"); $finish; end
	end
	/* main: %1*/
	/*   %indvar = phi i32 [ %indvar.next, %2 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_indvar_reg <= main_1_indvar;
		if (start == 1'b0 && ^(main_1_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond = icmp eq i32 %indvar, 64*/
		main_1_exitcond = (main_1_indvar_reg == 32'd64);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond = icmp eq i32 %indvar, 64*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond_reg <= main_1_exitcond;
		if (start == 1'b0 && ^(main_1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar*/
		main_2_si0 = (1'd0 | (4 * main_1_indvar_reg));
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %s.i.0 = getelementptr [64 x i32]* %dmem, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_si0_reg <= main_2_si0;
		if (start == 1'b0 && ^(main_2_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %2*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_2_indvarnext = (main_1_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_2_indvarnext_reg <= main_2_indvarnext;
		if (start == 1'b0 && ^(main_2_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %i.011 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_i011 = 32'd0;
	end
	/* main: %legup_memset_4.exit*/
	/*   %i.011 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4exit_exitcond1_reg == 1'd0))) */ begin
		main_legup_memset_4exit_i011 = main_legup_memset_4exit_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %i.011 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_legup_memset_4exitpreheader_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_legup_memset_4exit_i011_reg <= main_legup_memset_4exit_i011;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i011_reg"); $finish; end
	end
	/* main: %legup_memset_4.exit*/
	/*   %i.011 = phi i32 [ %3, %legup_memset_4.exit ], [ 0, %legup_memset_4.exit.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_legup_memset_4exit_7) & (memory_controller_waitrequest == 1'd0)) & (main_legup_memset_4exit_exitcond1_reg == 1'd0))) begin
		main_legup_memset_4exit_i011_reg <= main_legup_memset_4exit_i011;
		if (start == 1'b0 && ^(main_legup_memset_4exit_i011) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_i011_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %scevgep = getelementptr [32 x i32]* %reg, i32 0, i32 %i.011*/
		main_legup_memset_4exit_scevgep = (1'd0 | (4 * main_legup_memset_4exit_i011_reg));
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %scevgep = getelementptr [32 x i32]* %reg, i32 0, i32 %i.011*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_scevgep_reg <= main_legup_memset_4exit_scevgep;
		if (start == 1'b0 && ^(main_legup_memset_4exit_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = add nsw i32 %i.011, 1*/
		main_legup_memset_4exit_3 = (main_legup_memset_4exit_i011_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %3 = add nsw i32 %i.011, 1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_3_reg <= main_legup_memset_4exit_3;
		if (start == 1'b0 && ^(main_legup_memset_4exit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond1 = icmp eq i32 %3, 32*/
		main_legup_memset_4exit_exitcond1 = (main_legup_memset_4exit_3 == 32'd32);
end
always @(posedge clk) begin
	/* main: %legup_memset_4.exit*/
	/*   %exitcond1 = icmp eq i32 %3, 32*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_legup_memset_4exit_exitcond1_reg <= main_legup_memset_4exit_exitcond1;
		if (start == 1'b0 && ^(main_legup_memset_4exit_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_legup_memset_4exit_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %4 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
if (reset) begin main_preheader13_4 = 0; end
		main_preheader13_4 = (1'd0 | (4 * 32'd29));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %4 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 29*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_4_reg <= main_preheader13_4;
		if (start == 1'b0 && ^(main_preheader13_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %5 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 0*/
if (reset) begin main_preheader13_5 = 0; end
		main_preheader13_5 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %5 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_5_reg <= main_preheader13_5;
		if (start == 1'b0 && ^(main_preheader13_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %6 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 1*/
if (reset) begin main_preheader13_6 = 0; end
		main_preheader13_6 = (1'd0 | (4 * 32'd1));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %6 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_6_reg <= main_preheader13_6;
		if (start == 1'b0 && ^(main_preheader13_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %7 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 2*/
if (reset) begin main_preheader13_7 = 0; end
		main_preheader13_7 = (1'd0 | (4 * 32'd2));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %7 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_7_reg <= main_preheader13_7;
		if (start == 1'b0 && ^(main_preheader13_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %8 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 3*/
if (reset) begin main_preheader13_8 = 0; end
		main_preheader13_8 = (1'd0 | (4 * 32'd3));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %8 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_8_reg <= main_preheader13_8;
		if (start == 1'b0 && ^(main_preheader13_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %9 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 4*/
if (reset) begin main_preheader13_9 = 0; end
		main_preheader13_9 = (1'd0 | (4 * 32'd4));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %9 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_9_reg <= main_preheader13_9;
		if (start == 1'b0 && ^(main_preheader13_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %10 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 5*/
if (reset) begin main_preheader13_10 = 0; end
		main_preheader13_10 = (1'd0 | (4 * 32'd5));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %10 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_10_reg <= main_preheader13_10;
		if (start == 1'b0 && ^(main_preheader13_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %11 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 6*/
if (reset) begin main_preheader13_11 = 0; end
		main_preheader13_11 = (1'd0 | (4 * 32'd6));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %11 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_11_reg <= main_preheader13_11;
		if (start == 1'b0 && ^(main_preheader13_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %12 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 7*/
if (reset) begin main_preheader13_12 = 0; end
		main_preheader13_12 = (1'd0 | (4 * 32'd7));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %12 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_12_reg <= main_preheader13_12;
		if (start == 1'b0 && ^(main_preheader13_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
if (reset) begin main_preheader13_13 = 0; end
		main_preheader13_13 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %13 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_13_reg <= main_preheader13_13;
		if (start == 1'b0 && ^(main_preheader13_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader13*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
if (reset) begin main_preheader13_14 = 0; end
		main_preheader13_14 = (1'd0 | (4 * 32'd31));
end
always @(posedge clk) begin
	/* main: %.preheader13*/
	/*   %14 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 31*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_preheader13_14_reg <= main_preheader13_14;
		if (start == 1'b0 && ^(main_preheader13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %231 ], [ 4194304, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_pc0 = 32'd4194304;
	end
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %231 ], [ 4194304, %.preheader13 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) */ begin
		main_15_pc0 = main_231_pc1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %231 ], [ 4194304, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_pc0_reg <= main_15_pc0;
		if (start == 1'b0 && ^(main_15_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_pc0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %pc.0 = phi i32 [ %pc.1, %231 ], [ 4194304, %.preheader13 ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) begin
		main_15_pc0_reg <= main_15_pc0;
		if (start == 1'b0 && ^(main_15_pc0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_pc0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Lo0 = 32'd0;
	end
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %231 ], [ 0, %.preheader13 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) */ begin
		main_15_Lo0 = main_231_Lo1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Lo0_reg <= main_15_Lo0;
		if (start == 1'b0 && ^(main_15_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Lo0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %Lo.0 = phi i32 [ %Lo.1, %231 ], [ 0, %.preheader13 ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) begin
		main_15_Lo0_reg <= main_15_Lo0;
		if (start == 1'b0 && ^(main_15_Lo0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Lo0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Hi0 = 32'd0;
	end
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %231 ], [ 0, %.preheader13 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) */ begin
		main_15_Hi0 = main_231_Hi1_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_Hi0_reg <= main_15_Hi0;
		if (start == 1'b0 && ^(main_15_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Hi0_reg"); $finish; end
	end
	/* main: %15*/
	/*   %Hi.0 = phi i32 [ %Hi.1, %231 ], [ 0, %.preheader13 ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) begin
		main_15_Hi0_reg <= main_15_Hi0;
		if (start == 1'b0 && ^(main_15_Hi0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_Hi0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %16 = phi i32 [ %232, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_16 = 32'd0;
	end
	/* main: %15*/
	/*   %16 = phi i32 [ %232, %231 ], [ 0, %.preheader13 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) */ begin
		main_15_16 = main_231_232_reg;
	end
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %16 = phi i32 [ %232, %231 ], [ 0, %.preheader13 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader13_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
	/* main: %15*/
	/*   %16 = phi i32 [ %232, %231 ], [ 0, %.preheader13 ]*/
	if ((((cur_state == LEGUP_F_main_BB__231_106) & (memory_controller_waitrequest == 1'd0)) & (main_231_233_reg == 1'd0))) begin
		main_15_16_reg <= main_15_16;
		if (start == 1'b0 && ^(main_15_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %17 = lshr i32 %pc.0, 2*/
		main_15_17 = (main_15_pc0_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %17 = lshr i32 %pc.0, 2*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_17_reg <= main_15_17;
		if (start == 1'b0 && ^(main_15_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %18 = and i32 %17, 63*/
		main_15_18 = (main_15_17 & 32'd63);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %18 = and i32 %17, 63*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_18_reg <= main_15_18;
		if (start == 1'b0 && ^(main_15_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %19 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %18*/
		main_15_19 = (1'd0 | (4 * main_15_18));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %19 = getelementptr inbounds [44 x i32]* @imem, i32 0, i32 %18*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_19_reg <= main_15_19;
		if (start == 1'b0 && ^(main_15_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
		main_15_20 = imem_out_a;
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		main_15_20_reg <= main_15_20;
		if (start == 1'b0 && ^(main_15_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %21 = add nsw i32 %pc.0, 4*/
		main_15_21 = (main_15_pc0_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %21 = add nsw i32 %pc.0, 4*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		main_15_21_reg <= main_15_21;
		if (start == 1'b0 && ^(main_15_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %15*/
	/*   %22 = lshr i32 %20, 26*/
		main_15_22 = (main_15_20 >>> (32'd26 % 32));
end
always @(posedge clk) begin
	/* main: %15*/
	/*   %22 = lshr i32 %20, 26*/
	if ((cur_state == LEGUP_F_main_BB__15_14)) begin
		main_15_22_reg <= main_15_22;
		if (start == 1'b0 && ^(main_15_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_15_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
		main_23_24 = (main_15_20_reg & 32'd63);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %24 = and i32 %20, 63*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_24_reg <= main_23_24;
		if (start == 1'b0 && ^(main_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
		main_23_25 = (main_15_20_reg >>> (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %25 = lshr i32 %20, 6*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_25_reg <= main_23_25;
		if (start == 1'b0 && ^(main_23_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
		main_23_26 = (main_23_25 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %26 = and i32 %25, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_26_reg <= main_23_26;
		if (start == 1'b0 && ^(main_23_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
		main_23_27 = (main_15_20_reg >>> (32'd11 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %27 = lshr i32 %20, 11*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_27_reg <= main_23_27;
		if (start == 1'b0 && ^(main_23_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
		main_23_28 = (main_23_27 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %28 = and i32 %27, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_28_reg <= main_23_28;
		if (start == 1'b0 && ^(main_23_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
		main_23_29 = (main_15_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %29 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_29_reg <= main_23_29;
		if (start == 1'b0 && ^(main_23_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
		main_23_30 = (main_23_29 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %30 = and i32 %29, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_30_reg <= main_23_30;
		if (start == 1'b0 && ^(main_23_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
		main_23_31 = (main_15_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %31 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_31_reg <= main_23_31;
		if (start == 1'b0 && ^(main_23_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
		main_23_32 = (main_23_31 & 32'd31);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %32 = and i32 %31, 31*/
	if ((cur_state == LEGUP_F_main_BB__23_15)) begin
		main_23_32_reg <= main_23_32;
		if (start == 1'b0 && ^(main_23_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_33_34 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %34 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_34_reg <= main_33_34;
		if (start == 1'b0 && ^(main_33_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		main_33_35 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_35_reg <= main_33_35;
		if (start == 1'b0 && ^(main_33_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %36 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_33_36 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %36 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_36_reg <= main_33_36;
		if (start == 1'b0 && ^(main_33_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
		main_33_37 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_37_reg <= main_33_37;
		if (start == 1'b0 && ^(main_33_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
		main_33_38 = (main_33_37 + main_33_35);
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %38 = add nsw i32 %37, %35*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_33_38_reg <= main_33_38;
		if (start == 1'b0 && ^(main_33_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %33*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_33_39 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %33*/
	/*   %39 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_33_39_reg <= main_33_39;
		if (start == 1'b0 && ^(main_33_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_33_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %41 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_40_41 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %41 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
		main_40_42 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_40_42_reg <= main_40_42;
		if (start == 1'b0 && ^(main_40_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %43 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_40_43 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %43 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_40_43_reg <= main_40_43;
		if (start == 1'b0 && ^(main_40_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
		main_40_44 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_40_44_reg <= main_40_44;
		if (start == 1'b0 && ^(main_40_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %45 = sub nsw i32 %42, %44*/
		main_40_45 = (main_40_42 - main_40_44);
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %45 = sub nsw i32 %42, %44*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_40_45_reg <= main_40_45;
		if (start == 1'b0 && ^(main_40_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %46 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_40_46 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %46 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_40_46_reg <= main_40_46;
		if (start == 1'b0 && ^(main_40_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %48 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_47_48 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
		main_47_49 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_23)) begin
		main_47_49_reg <= main_47_49;
		if (start == 1'b0 && ^(main_47_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %50 = sext i32 %49 to i64*/
		main_47_50 = $signed(main_47_49);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %50 = sext i32 %49 to i64*/
	if ((cur_state == LEGUP_F_main_BB__47_23)) begin
		main_47_50_reg <= main_47_50;
		if (start == 1'b0 && ^(main_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %51 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_47_51 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %51 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_47_51_reg <= main_47_51;
		if (start == 1'b0 && ^(main_47_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
		main_47_52 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_23)) begin
		main_47_52_reg <= main_47_52;
		if (start == 1'b0 && ^(main_47_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %53 = sext i32 %52 to i64*/
		main_47_53 = $signed(main_47_52);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %53 = sext i32 %52 to i64*/
	if ((cur_state == LEGUP_F_main_BB__47_23)) begin
		main_47_53_reg <= main_47_53;
		if (start == 1'b0 && ^(main_47_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_53_reg"); $finish; end
	end
end
always @(*) begin
	main_47_54 = main_47_54_stage0_reg;
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %54 = mul nsw i64 %53, %50*/
	if ((cur_state == LEGUP_F_main_BB__47_24)) begin
		main_47_54_reg <= main_47_54;
		if (start == 1'b0 && ^(main_47_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_54_reg"); $finish; end
	end
	/* main: %47*/
	/*   %54 = mul nsw i64 %53, %50*/
	if ((cur_state == LEGUP_F_main_BB__47_24)) begin
		main_47_54_reg <= main_47_54;
		if (start == 1'b0 && ^(main_47_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %55 = trunc i64 %54 to i32*/
		main_47_55 = main_47_54[31:0];
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %55 = trunc i64 %54 to i32*/
	if ((cur_state == LEGUP_F_main_BB__47_24)) begin
		main_47_55_reg <= main_47_55;
		if (start == 1'b0 && ^(main_47_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %56 = lshr i64 %54, 32*/
		main_47_56 = (main_47_54 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %56 = lshr i64 %54, 32*/
	if ((cur_state == LEGUP_F_main_BB__47_24)) begin
		main_47_56_reg <= main_47_56;
		if (start == 1'b0 && ^(main_47_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %57 = trunc i64 %56 to i32*/
		main_47_57 = main_47_56[31:0];
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %57 = trunc i64 %56 to i32*/
	if ((cur_state == LEGUP_F_main_BB__47_24)) begin
		main_47_57_reg <= main_47_57;
		if (start == 1'b0 && ^(main_47_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %59 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_58_59 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %59 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_59_reg <= main_58_59;
		if (start == 1'b0 && ^(main_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
		main_58_60 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_26)) begin
		main_58_60_reg <= main_58_60;
		if (start == 1'b0 && ^(main_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %61 = sext i32 %60 to i64*/
		main_58_61 = $signed(main_58_60);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %61 = sext i32 %60 to i64*/
	if ((cur_state == LEGUP_F_main_BB__58_26)) begin
		main_58_61_reg <= main_58_61;
		if (start == 1'b0 && ^(main_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %62 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_58_62 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %62 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_62_reg <= main_58_62;
		if (start == 1'b0 && ^(main_58_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %63 = load i32* %62, align 4, !tbaa !1*/
		main_58_63 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %63 = load i32* %62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_26)) begin
		main_58_63_reg <= main_58_63;
		if (start == 1'b0 && ^(main_58_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %64 = sext i32 %63 to i64*/
		main_58_64 = $signed(main_58_63);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %64 = sext i32 %63 to i64*/
	if ((cur_state == LEGUP_F_main_BB__58_26)) begin
		main_58_64_reg <= main_58_64;
		if (start == 1'b0 && ^(main_58_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_64_reg"); $finish; end
	end
end
always @(*) begin
	main_58_65 = main_58_65_stage0_reg;
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %65 = mul i64 %64, %61*/
	if ((cur_state == LEGUP_F_main_BB__58_27)) begin
		main_58_65_reg <= main_58_65;
		if (start == 1'b0 && ^(main_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_65_reg"); $finish; end
	end
	/* main: %58*/
	/*   %65 = mul i64 %64, %61*/
	if ((cur_state == LEGUP_F_main_BB__58_27)) begin
		main_58_65_reg <= main_58_65;
		if (start == 1'b0 && ^(main_58_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %66 = trunc i64 %65 to i32*/
		main_58_66 = main_58_65[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %66 = trunc i64 %65 to i32*/
	if ((cur_state == LEGUP_F_main_BB__58_27)) begin
		main_58_66_reg <= main_58_66;
		if (start == 1'b0 && ^(main_58_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %67 = lshr i64 %65, 32*/
		main_58_67 = (main_58_65 >>> (64'd32 % 64'd64));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %67 = lshr i64 %65, 32*/
	if ((cur_state == LEGUP_F_main_BB__58_27)) begin
		main_58_67_reg <= main_58_67;
		if (start == 1'b0 && ^(main_58_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %68 = trunc i64 %67 to i32*/
		main_58_68 = main_58_67[31:0];
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %68 = trunc i64 %67 to i32*/
	if ((cur_state == LEGUP_F_main_BB__58_27)) begin
		main_58_68_reg <= main_58_68;
		if (start == 1'b0 && ^(main_58_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_69_70 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__69_28)) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %71*/
	/*   %72 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_71_72 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %71*/
	/*   %72 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__71_30)) begin
		main_71_72_reg <= main_71_72;
		if (start == 1'b0 && ^(main_71_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_71_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %74 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_73_74 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %74 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_73_74_reg <= main_73_74;
		if (start == 1'b0 && ^(main_73_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
		main_73_75 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_73_75_reg <= main_73_75;
		if (start == 1'b0 && ^(main_73_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %76 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_73_76 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %76 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_73_76_reg <= main_73_76;
		if (start == 1'b0 && ^(main_73_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
		main_73_77 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_73_77_reg <= main_73_77;
		if (start == 1'b0 && ^(main_73_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %78 = and i32 %77, %75*/
		main_73_78 = (main_73_77 & main_73_75);
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %78 = and i32 %77, %75*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_73_78_reg <= main_73_78;
		if (start == 1'b0 && ^(main_73_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %73*/
	/*   %79 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_73_79 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %73*/
	/*   %79 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_73_79_reg <= main_73_79;
		if (start == 1'b0 && ^(main_73_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_73_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %81 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_80_81 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %81 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_80_81_reg <= main_80_81;
		if (start == 1'b0 && ^(main_80_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
		main_80_82 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_80_82_reg <= main_80_82;
		if (start == 1'b0 && ^(main_80_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %83 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_80_83 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %83 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_80_83_reg <= main_80_83;
		if (start == 1'b0 && ^(main_80_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
		main_80_84 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_80_84_reg <= main_80_84;
		if (start == 1'b0 && ^(main_80_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %85 = or i32 %84, %82*/
		main_80_85 = (main_80_84 | main_80_82);
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %85 = or i32 %84, %82*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_80_85_reg <= main_80_85;
		if (start == 1'b0 && ^(main_80_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %80*/
	/*   %86 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_80_86 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %80*/
	/*   %86 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_80_86_reg <= main_80_86;
		if (start == 1'b0 && ^(main_80_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_80_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %88 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_87_88 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %88 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_87_88_reg <= main_87_88;
		if (start == 1'b0 && ^(main_87_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
		main_87_89 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_87_89_reg <= main_87_89;
		if (start == 1'b0 && ^(main_87_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %90 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_87_90 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %90 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_87_90_reg <= main_87_90;
		if (start == 1'b0 && ^(main_87_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
		main_87_91 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_87_91_reg <= main_87_91;
		if (start == 1'b0 && ^(main_87_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %92 = xor i32 %91, %89*/
		main_87_92 = (main_87_91 ^ main_87_89);
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %92 = xor i32 %91, %89*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_87_92_reg <= main_87_92;
		if (start == 1'b0 && ^(main_87_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %87*/
	/*   %93 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_87_93 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %87*/
	/*   %93 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_87_93_reg <= main_87_93;
		if (start == 1'b0 && ^(main_87_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_87_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %95 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_94_95 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %95 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__94_41)) begin
		main_94_95_reg <= main_94_95;
		if (start == 1'b0 && ^(main_94_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
		main_94_96 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_42)) begin
		main_94_96_reg <= main_94_96;
		if (start == 1'b0 && ^(main_94_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %97 = shl i32 %96, %26*/
		main_94_97 = (main_94_96 <<< (main_23_26_reg % 32));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %97 = shl i32 %96, %26*/
	if ((cur_state == LEGUP_F_main_BB__94_42)) begin
		main_94_97_reg <= main_94_97;
		if (start == 1'b0 && ^(main_94_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %94*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_94_98 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %94*/
	/*   %98 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__94_41)) begin
		main_94_98_reg <= main_94_98;
		if (start == 1'b0 && ^(main_94_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_94_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %100 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_99_100 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %100 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__99_44)) begin
		main_99_100_reg <= main_99_100;
		if (start == 1'b0 && ^(main_99_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
		main_99_101 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_45)) begin
		main_99_101_reg <= main_99_101;
		if (start == 1'b0 && ^(main_99_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %102 = ashr i32 %101, %26*/
		main_99_102 = ($signed(main_99_101) >>> main_23_26_reg);
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %102 = ashr i32 %101, %26*/
	if ((cur_state == LEGUP_F_main_BB__99_45)) begin
		main_99_102_reg <= main_99_102;
		if (start == 1'b0 && ^(main_99_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %99*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_99_103 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %99*/
	/*   %103 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__99_44)) begin
		main_99_103_reg <= main_99_103;
		if (start == 1'b0 && ^(main_99_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_99_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %105 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_104_105 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %105 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_104_105_reg <= main_104_105;
		if (start == 1'b0 && ^(main_104_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
		main_104_106 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_104_106_reg <= main_104_106;
		if (start == 1'b0 && ^(main_104_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %107 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_104_107 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %107 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_104_107_reg <= main_104_107;
		if (start == 1'b0 && ^(main_104_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %108 = load i32* %107, align 4, !tbaa !1*/
		main_104_108 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %108 = load i32* %107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_104_108_reg <= main_104_108;
		if (start == 1'b0 && ^(main_104_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %109 = shl i32 %106, %108*/
		main_104_109 = (main_104_106 <<< (main_104_108 % 32));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %109 = shl i32 %106, %108*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_104_109_reg <= main_104_109;
		if (start == 1'b0 && ^(main_104_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %104*/
	/*   %110 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_104_110 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %104*/
	/*   %110 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_104_110_reg <= main_104_110;
		if (start == 1'b0 && ^(main_104_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_104_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %112 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_111_112 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %112 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_111_112_reg <= main_111_112;
		if (start == 1'b0 && ^(main_111_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
		main_111_113 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_111_113_reg <= main_111_113;
		if (start == 1'b0 && ^(main_111_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %114 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_111_114 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %114 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_111_114_reg <= main_111_114;
		if (start == 1'b0 && ^(main_111_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
		main_111_115 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_111_115_reg <= main_111_115;
		if (start == 1'b0 && ^(main_111_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %116 = ashr i32 %113, %115*/
		main_111_116 = ($signed(main_111_113) >>> main_111_115);
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %116 = ashr i32 %113, %115*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_111_116_reg <= main_111_116;
		if (start == 1'b0 && ^(main_111_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %111*/
	/*   %117 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_111_117 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %111*/
	/*   %117 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_111_117_reg <= main_111_117;
		if (start == 1'b0 && ^(main_111_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_111_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %119 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_118_119 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %119 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_118_119_reg <= main_118_119;
		if (start == 1'b0 && ^(main_118_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %120 = load i32* %119, align 4, !tbaa !1*/
		main_118_120 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %120 = load i32* %119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_118_120_reg <= main_118_120;
		if (start == 1'b0 && ^(main_118_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %121 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_118_121 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %121 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_118_121_reg <= main_118_121;
		if (start == 1'b0 && ^(main_118_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
		main_118_122 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_118_122_reg <= main_118_122;
		if (start == 1'b0 && ^(main_118_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %123 = icmp slt i32 %120, %122*/
		main_118_123 = ($signed(main_118_120) < $signed(main_118_122));
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %123 = icmp slt i32 %120, %122*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_118_123_reg <= main_118_123;
		if (start == 1'b0 && ^(main_118_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %124 = zext i1 %123 to i32*/
		main_118_124 = main_118_123;
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %124 = zext i1 %123 to i32*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_118_124_reg <= main_118_124;
		if (start == 1'b0 && ^(main_118_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %118*/
	/*   %125 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_118_125 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %118*/
	/*   %125 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_118_125_reg <= main_118_125;
		if (start == 1'b0 && ^(main_118_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_118_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %127 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_126_127 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %127 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_127_reg <= main_126_127;
		if (start == 1'b0 && ^(main_126_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
		main_126_128 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_126_128_reg <= main_126_128;
		if (start == 1'b0 && ^(main_126_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %129 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
		main_126_129 = (1'd0 | (4 * main_23_30_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %129 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_129_reg <= main_126_129;
		if (start == 1'b0 && ^(main_126_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
		main_126_130 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_126_130_reg <= main_126_130;
		if (start == 1'b0 && ^(main_126_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %131 = icmp ult i32 %128, %130*/
		main_126_131 = (main_126_128 < main_126_130);
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %131 = icmp ult i32 %128, %130*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_126_131_reg <= main_126_131;
		if (start == 1'b0 && ^(main_126_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
		main_126_132 = main_126_131;
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %132 = zext i1 %131 to i32*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_126_132_reg <= main_126_132;
		if (start == 1'b0 && ^(main_126_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %126*/
	/*   %133 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
		main_126_133 = (1'd0 | (4 * main_23_28_reg));
end
always @(posedge clk) begin
	/* main: %126*/
	/*   %133 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_126_133_reg <= main_126_133;
		if (start == 1'b0 && ^(main_126_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_126_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %135 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
		main_134_135 = (1'd0 | (4 * main_23_32_reg));
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %135 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_134_135_reg <= main_134_135;
		if (start == 1'b0 && ^(main_134_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
		main_134_136 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_60)) begin
		main_134_136_reg <= main_134_136;
		if (start == 1'b0 && ^(main_134_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_134_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %138 = shl i32 %20, 2*/
		main_137_138 = (main_15_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %138 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__137_61)) begin
		main_137_138_reg <= main_137_138;
		if (start == 1'b0 && ^(main_137_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %137*/
	/*   %139 = and i32 %138, 268435452*/
		main_137_139 = (main_137_138 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %137*/
	/*   %139 = and i32 %138, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__137_61)) begin
		main_137_139_reg <= main_137_139;
		if (start == 1'b0 && ^(main_137_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_137_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %141 = shl i32 %20, 2*/
		main_140_141 = (main_15_20_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %141 = shl i32 %20, 2*/
	if ((cur_state == LEGUP_F_main_BB__140_62)) begin
		main_140_141_reg <= main_140_141;
		if (start == 1'b0 && ^(main_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %142 = and i32 %141, 268435452*/
		main_140_142 = (main_140_141 & 32'd268435452);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %142 = and i32 %141, 268435452*/
	if ((cur_state == LEGUP_F_main_BB__140_62)) begin
		main_140_142_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %144 = lshr i32 %20, 16*/
		main_143_144 = (main_15_20_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %144 = lshr i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__143_64)) begin
		main_143_144_reg <= main_143_144;
		if (start == 1'b0 && ^(main_143_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %145 = and i32 %144, 31*/
		main_143_145 = (main_143_144 & 32'd31);
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %145 = and i32 %144, 31*/
	if ((cur_state == LEGUP_F_main_BB__143_64)) begin
		main_143_145_reg <= main_143_145;
		if (start == 1'b0 && ^(main_143_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %146 = lshr i32 %20, 21*/
		main_143_146 = (main_15_20_reg >>> (32'd21 % 32));
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %146 = lshr i32 %20, 21*/
	if ((cur_state == LEGUP_F_main_BB__143_64)) begin
		main_143_146_reg <= main_143_146;
		if (start == 1'b0 && ^(main_143_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %147 = and i32 %146, 31*/
		main_143_147 = (main_143_146 & 32'd31);
end
always @(posedge clk) begin
	/* main: %143*/
	/*   %147 = and i32 %146, 31*/
	if ((cur_state == LEGUP_F_main_BB__143_64)) begin
		main_143_147_reg <= main_143_147;
		if (start == 1'b0 && ^(main_143_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_143_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %149 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_148_149 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %149 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_148_149_reg <= main_148_149;
		if (start == 1'b0 && ^(main_148_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %150 = load i32* %149, align 4, !tbaa !1*/
		main_148_150 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %150 = load i32* %149, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_66)) begin
		main_148_150_reg <= main_148_150;
		if (start == 1'b0 && ^(main_148_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %sext7 = shl i32 %20, 16*/
		main_148_sext7 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %sext7 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_148_sext7_reg <= main_148_sext7;
		if (start == 1'b0 && ^(main_148_sext7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_sext7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %151 = ashr exact i32 %sext7, 16*/
		main_148_151 = ($signed(main_148_sext7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %151 = ashr exact i32 %sext7, 16*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_148_151_reg <= main_148_151;
		if (start == 1'b0 && ^(main_148_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %152 = add nsw i32 %150, %151*/
		main_148_152 = (main_148_150 + main_148_151_reg);
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %152 = add nsw i32 %150, %151*/
	if ((cur_state == LEGUP_F_main_BB__148_66)) begin
		main_148_152_reg <= main_148_152;
		if (start == 1'b0 && ^(main_148_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %148*/
	/*   %153 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_148_153 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %148*/
	/*   %153 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_148_153_reg <= main_148_153;
		if (start == 1'b0 && ^(main_148_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_148_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %155 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_154_155 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %155 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__154_68)) begin
		main_154_155_reg <= main_154_155;
		if (start == 1'b0 && ^(main_154_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
		main_154_156 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_69)) begin
		main_154_156_reg <= main_154_156;
		if (start == 1'b0 && ^(main_154_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %157 = and i32 %20, 65535*/
		main_154_157 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %157 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__154_68)) begin
		main_154_157_reg <= main_154_157;
		if (start == 1'b0 && ^(main_154_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %158 = and i32 %157, %156*/
		main_154_158 = (main_154_157_reg & main_154_156);
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %158 = and i32 %157, %156*/
	if ((cur_state == LEGUP_F_main_BB__154_69)) begin
		main_154_158_reg <= main_154_158;
		if (start == 1'b0 && ^(main_154_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %154*/
	/*   %159 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_154_159 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %154*/
	/*   %159 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__154_68)) begin
		main_154_159_reg <= main_154_159;
		if (start == 1'b0 && ^(main_154_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_154_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %161 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_160_161 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %161 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__160_71)) begin
		main_160_161_reg <= main_160_161;
		if (start == 1'b0 && ^(main_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
		main_160_162 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_72)) begin
		main_160_162_reg <= main_160_162;
		if (start == 1'b0 && ^(main_160_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %163 = and i32 %20, 65535*/
		main_160_163 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %163 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__160_71)) begin
		main_160_163_reg <= main_160_163;
		if (start == 1'b0 && ^(main_160_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %164 = or i32 %162, %163*/
		main_160_164 = (main_160_162 | main_160_163_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %164 = or i32 %162, %163*/
	if ((cur_state == LEGUP_F_main_BB__160_72)) begin
		main_160_164_reg <= main_160_164;
		if (start == 1'b0 && ^(main_160_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %165 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_160_165 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %165 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__160_71)) begin
		main_160_165_reg <= main_160_165;
		if (start == 1'b0 && ^(main_160_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %167 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_166_167 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %167 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__166_74)) begin
		main_166_167_reg <= main_166_167;
		if (start == 1'b0 && ^(main_166_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
		main_166_168 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_75)) begin
		main_166_168_reg <= main_166_168;
		if (start == 1'b0 && ^(main_166_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %169 = and i32 %20, 65535*/
		main_166_169 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %169 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__166_74)) begin
		main_166_169_reg <= main_166_169;
		if (start == 1'b0 && ^(main_166_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %170 = xor i32 %168, %169*/
		main_166_170 = (main_166_168 ^ main_166_169_reg);
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %170 = xor i32 %168, %169*/
	if ((cur_state == LEGUP_F_main_BB__166_75)) begin
		main_166_170_reg <= main_166_170;
		if (start == 1'b0 && ^(main_166_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %166*/
	/*   %171 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_166_171 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %166*/
	/*   %171 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__166_74)) begin
		main_166_171_reg <= main_166_171;
		if (start == 1'b0 && ^(main_166_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_166_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %173 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_172_173 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %173 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__172_77)) begin
		main_172_173_reg <= main_172_173;
		if (start == 1'b0 && ^(main_172_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
		main_172_174 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_78)) begin
		main_172_174_reg <= main_172_174;
		if (start == 1'b0 && ^(main_172_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %175 = add nsw i32 %174, %20*/
		main_172_175 = (main_172_174 + main_15_20_reg);
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %175 = add nsw i32 %174, %20*/
	if ((cur_state == LEGUP_F_main_BB__172_78)) begin
		main_172_175_reg <= main_172_175;
		if (start == 1'b0 && ^(main_172_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %176 = lshr i32 %175, 2*/
		main_172_176 = (main_172_175 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %176 = lshr i32 %175, 2*/
	if ((cur_state == LEGUP_F_main_BB__172_78)) begin
		main_172_176_reg <= main_172_176;
		if (start == 1'b0 && ^(main_172_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %177 = and i32 %176, 63*/
		main_172_177 = (main_172_176 & 32'd63);
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %177 = and i32 %176, 63*/
	if ((cur_state == LEGUP_F_main_BB__172_78)) begin
		main_172_177_reg <= main_172_177;
		if (start == 1'b0 && ^(main_172_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %178 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %177*/
		main_172_178 = (1'd0 | (4 * main_172_177_reg));
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %178 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %177*/
	if ((cur_state == LEGUP_F_main_BB__172_79)) begin
		main_172_178_reg <= main_172_178;
		if (start == 1'b0 && ^(main_172_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
		main_172_179 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_80)) begin
		main_172_179_reg <= main_172_179;
		if (start == 1'b0 && ^(main_172_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %172*/
	/*   %180 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_172_180 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %172*/
	/*   %180 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__172_77)) begin
		main_172_180_reg <= main_172_180;
		if (start == 1'b0 && ^(main_172_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_172_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %182 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_181_182 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %182 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_181_182_reg <= main_181_182;
		if (start == 1'b0 && ^(main_181_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
		main_181_183 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_83)) begin
		main_181_183_reg <= main_181_183;
		if (start == 1'b0 && ^(main_181_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %184 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_181_184 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %184 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_181_184_reg <= main_181_184;
		if (start == 1'b0 && ^(main_181_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %185 = load i32* %184, align 4, !tbaa !1*/
		main_181_185 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %185 = load i32* %184, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_83)) begin
		main_181_185_reg <= main_181_185;
		if (start == 1'b0 && ^(main_181_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %186 = add nsw i32 %185, %20*/
		main_181_186 = (main_181_185 + main_15_20_reg);
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %186 = add nsw i32 %185, %20*/
	if ((cur_state == LEGUP_F_main_BB__181_83)) begin
		main_181_186_reg <= main_181_186;
		if (start == 1'b0 && ^(main_181_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %187 = lshr i32 %186, 2*/
		main_181_187 = (main_181_186 >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %187 = lshr i32 %186, 2*/
	if ((cur_state == LEGUP_F_main_BB__181_83)) begin
		main_181_187_reg <= main_181_187;
		if (start == 1'b0 && ^(main_181_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %188 = and i32 %187, 63*/
		main_181_188 = (main_181_187 & 32'd63);
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %188 = and i32 %187, 63*/
	if ((cur_state == LEGUP_F_main_BB__181_83)) begin
		main_181_188_reg <= main_181_188;
		if (start == 1'b0 && ^(main_181_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %181*/
	/*   %189 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %188*/
		main_181_189 = (1'd0 | (4 * main_181_188_reg));
end
always @(posedge clk) begin
	/* main: %181*/
	/*   %189 = getelementptr inbounds [64 x i32]* %dmem, i32 0, i32 %188*/
	if ((cur_state == LEGUP_F_main_BB__181_84)) begin
		main_181_189_reg <= main_181_189;
		if (start == 1'b0 && ^(main_181_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_181_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %sext4 = shl i32 %20, 16*/
		main_190_sext4 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %sext4 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__190_86)) begin
		main_190_sext4_reg <= main_190_sext4;
		if (start == 1'b0 && ^(main_190_sext4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_sext4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %190*/
	/*   %191 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_190_191 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %190*/
	/*   %191 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__190_86)) begin
		main_190_191_reg <= main_190_191;
		if (start == 1'b0 && ^(main_190_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_190_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %193 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_192_193 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %193 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_192_193_reg <= main_192_193;
		if (start == 1'b0 && ^(main_192_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
		main_192_194 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_89)) begin
		main_192_194_reg <= main_192_194;
		if (start == 1'b0 && ^(main_192_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %195 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_192_195 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %195 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_192_195_reg <= main_192_195;
		if (start == 1'b0 && ^(main_192_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %196 = load i32* %195, align 4, !tbaa !1*/
		main_192_196 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %196 = load i32* %195, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_89)) begin
		main_192_196_reg <= main_192_196;
		if (start == 1'b0 && ^(main_192_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %192*/
	/*   %197 = icmp eq i32 %194, %196*/
		main_192_197 = (main_192_194 == main_192_196);
end
always @(posedge clk) begin
	/* main: %192*/
	/*   %197 = icmp eq i32 %194, %196*/
	if ((cur_state == LEGUP_F_main_BB__192_89)) begin
		main_192_197_reg <= main_192_197;
		if (start == 1'b0 && ^(main_192_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_192_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %sext3 = shl i32 %20, 16*/
		main_198_sext3 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %sext3 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__198_90)) begin
		main_198_sext3_reg <= main_198_sext3;
		if (start == 1'b0 && ^(main_198_sext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_sext3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %199 = ashr exact i32 %sext3, 14*/
		main_198_199 = ($signed(main_198_sext3) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %199 = ashr exact i32 %sext3, 14*/
	if ((cur_state == LEGUP_F_main_BB__198_90)) begin
		main_198_199_reg <= main_198_199;
		if (start == 1'b0 && ^(main_198_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %198*/
	/*   %200 = add nsw i32 %199, %pc.0*/
		main_198_200 = (main_198_199 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %198*/
	/*   %200 = add nsw i32 %199, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__198_90)) begin
		main_198_200_reg <= main_198_200;
		if (start == 1'b0 && ^(main_198_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_198_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %202 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_201_202 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %202 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_201_202_reg <= main_201_202;
		if (start == 1'b0 && ^(main_201_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
		main_201_203 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_92)) begin
		main_201_203_reg <= main_201_203;
		if (start == 1'b0 && ^(main_201_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %204 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_201_204 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %204 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_201_204_reg <= main_201_204;
		if (start == 1'b0 && ^(main_201_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
		main_201_205 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_92)) begin
		main_201_205_reg <= main_201_205;
		if (start == 1'b0 && ^(main_201_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %201*/
	/*   %206 = icmp eq i32 %203, %205*/
		main_201_206 = (main_201_203 == main_201_205);
end
always @(posedge clk) begin
	/* main: %201*/
	/*   %206 = icmp eq i32 %203, %205*/
	if ((cur_state == LEGUP_F_main_BB__201_92)) begin
		main_201_206_reg <= main_201_206;
		if (start == 1'b0 && ^(main_201_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_201_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %207*/
	/*   %sext2 = shl i32 %20, 16*/
		main_207_sext2 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %207*/
	/*   %sext2 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__207_93)) begin
		main_207_sext2_reg <= main_207_sext2;
		if (start == 1'b0 && ^(main_207_sext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_207_sext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %207*/
	/*   %208 = ashr exact i32 %sext2, 14*/
		main_207_208 = ($signed(main_207_sext2) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %207*/
	/*   %208 = ashr exact i32 %sext2, 14*/
	if ((cur_state == LEGUP_F_main_BB__207_93)) begin
		main_207_208_reg <= main_207_208;
		if (start == 1'b0 && ^(main_207_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_207_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %207*/
	/*   %209 = add nsw i32 %208, %pc.0*/
		main_207_209 = (main_207_208 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %207*/
	/*   %209 = add nsw i32 %208, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__207_93)) begin
		main_207_209_reg <= main_207_209;
		if (start == 1'b0 && ^(main_207_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_207_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %211 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_210_211 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %211 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__210_94)) begin
		main_210_211_reg <= main_210_211;
		if (start == 1'b0 && ^(main_210_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
		main_210_212 = main_0_reg_out_a;
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_95)) begin
		main_210_212_reg <= main_210_212;
		if (start == 1'b0 && ^(main_210_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %210*/
	/*   %213 = icmp sgt i32 %212, -1*/
		main_210_213 = ($signed(main_210_212) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %213 = icmp sgt i32 %212, -1*/
	if ((cur_state == LEGUP_F_main_BB__210_95)) begin
		main_210_213_reg <= main_210_213;
		if (start == 1'b0 && ^(main_210_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %214*/
	/*   %sext1 = shl i32 %20, 16*/
		main_214_sext1 = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %sext1 = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__214_96)) begin
		main_214_sext1_reg <= main_214_sext1;
		if (start == 1'b0 && ^(main_214_sext1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_sext1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %214*/
	/*   %215 = ashr exact i32 %sext1, 14*/
		main_214_215 = ($signed(main_214_sext1) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %215 = ashr exact i32 %sext1, 14*/
	if ((cur_state == LEGUP_F_main_BB__214_96)) begin
		main_214_215_reg <= main_214_215;
		if (start == 1'b0 && ^(main_214_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %214*/
	/*   %216 = add nsw i32 %215, %pc.0*/
		main_214_216 = (main_214_215 + main_15_pc0_reg);
end
always @(posedge clk) begin
	/* main: %214*/
	/*   %216 = add nsw i32 %215, %pc.0*/
	if ((cur_state == LEGUP_F_main_BB__214_96)) begin
		main_214_216_reg <= main_214_216;
		if (start == 1'b0 && ^(main_214_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_214_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %218 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_217_218 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %218 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_217_218_reg <= main_217_218;
		if (start == 1'b0 && ^(main_217_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
		main_217_219 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_217_219_reg <= main_217_219;
		if (start == 1'b0 && ^(main_217_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %sext = shl i32 %20, 16*/
		main_217_sext = (main_15_20_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %sext = shl i32 %20, 16*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_217_sext_reg <= main_217_sext;
		if (start == 1'b0 && ^(main_217_sext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_sext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %220 = ashr exact i32 %sext, 16*/
		main_217_220 = ($signed(main_217_sext) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %220 = ashr exact i32 %sext, 16*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_217_220_reg <= main_217_220;
		if (start == 1'b0 && ^(main_217_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %221 = icmp slt i32 %219, %220*/
		main_217_221 = ($signed(main_217_219) < $signed(main_217_220_reg));
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %221 = icmp slt i32 %219, %220*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_217_221_reg <= main_217_221;
		if (start == 1'b0 && ^(main_217_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %222 = zext i1 %221 to i32*/
		main_217_222 = main_217_221;
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %222 = zext i1 %221 to i32*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_217_222_reg <= main_217_222;
		if (start == 1'b0 && ^(main_217_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %217*/
	/*   %223 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_217_223 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %217*/
	/*   %223 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_217_223_reg <= main_217_223;
		if (start == 1'b0 && ^(main_217_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_217_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %225 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
		main_224_225 = (1'd0 | (4 * main_143_147_reg));
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %225 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %147*/
	if ((cur_state == LEGUP_F_main_BB__224_100)) begin
		main_224_225_reg <= main_224_225;
		if (start == 1'b0 && ^(main_224_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
		main_224_226 = main_0_reg_out_b;
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_224_226_reg <= main_224_226;
		if (start == 1'b0 && ^(main_224_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %227 = and i32 %20, 65535*/
		main_224_227 = (main_15_20_reg & 32'd65535);
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %227 = and i32 %20, 65535*/
	if ((cur_state == LEGUP_F_main_BB__224_100)) begin
		main_224_227_reg <= main_224_227;
		if (start == 1'b0 && ^(main_224_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %228 = icmp ult i32 %226, %227*/
		main_224_228 = (main_224_226 < main_224_227_reg);
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %228 = icmp ult i32 %226, %227*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_224_228_reg <= main_224_228;
		if (start == 1'b0 && ^(main_224_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %229 = zext i1 %228 to i32*/
		main_224_229 = main_224_228;
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %229 = zext i1 %228 to i32*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_224_229_reg <= main_224_229;
		if (start == 1'b0 && ^(main_224_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %224*/
	/*   %230 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
		main_224_230 = (1'd0 | (4 * main_143_145_reg));
end
always @(posedge clk) begin
	/* main: %224*/
	/*   %230 = getelementptr inbounds [32 x i32]* %reg, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__224_100)) begin
		main_224_230_reg <= main_224_230;
		if (start == 1'b0 && ^(main_224_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_224_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_134_136;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_137_139;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_140_142_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_198_200;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_207_209;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_214_216;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1 = main_15_21_reg;
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_231_pc1 = main_15_21_reg;
	end
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %pc.1 = phi i32 [ %21, %224 ], [ %21, %217 ], [ %216, %214 ], [ %21, %210 ], [ %209, %207 ], [ %21, %201 ], [ %200, %198 ], [ %21, %192 ], [ %21, %190 ], [ %21, %181 ], [ %21, %172 ], [ %21, %166 ], [ %21, %160 ], [ %21, %154 ], [ %21, %148 ], [ %142, %140 ], [ %139, %137 ], [ %136, %134 ], [ %21, %126 ], [ %21, %118 ], [ %21, %111 ], [ %21, %104 ], [ %21, %99 ], [ %21, %94 ], [ %21, %87 ], [ %21, %80 ], [ %21, %73 ], [ %21, %71 ], [ %21, %69 ], [ %21, %58 ], [ %21, %47 ], [ %21, %40 ], [ %21, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_pc1_reg <= main_231_pc1;
		if (start == 1'b0 && ^(main_231_pc1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_pc1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_47_55;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_58_66;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_231_Lo1 = main_15_Lo0_reg;
	end
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Lo.1 = phi i32 [ %Lo.0, %224 ], [ %Lo.0, %217 ], [ %Lo.0, %214 ], [ %Lo.0, %210 ], [ %Lo.0, %207 ], [ %Lo.0, %201 ], [ %Lo.0, %198 ], [ %Lo.0, %192 ], [ %Lo.0, %190 ], [ %Lo.0, %181 ], [ %Lo.0, %172 ], [ %Lo.0, %166 ], [ %Lo.0, %160 ], [ %Lo.0, %154 ], [ %Lo.0, %148 ], [ %Lo.0, %140 ], [ %Lo.0, %137 ], [ %Lo.0, %134 ], [ %Lo.0, %126 ], [ %Lo.0, %118 ], [ %Lo.0, %111 ], [ %Lo.0, %104 ], [ %Lo.0, %99 ], [ %Lo.0, %94 ], [ %Lo.0, %87 ], [ %Lo.0, %80 ], [ %Lo.0, %73 ], [ %Lo.0, %71 ], [ %Lo.0, %69 ], [ %66, %58 ], [ %55, %47 ], [ %Lo.0, %40 ], [ %Lo.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Lo1_reg <= main_231_Lo1;
		if (start == 1'b0 && ^(main_231_Lo1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Lo1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_47_57;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_58_68;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_231_Hi1 = main_15_Hi0_reg;
	end
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__33_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__40_21) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__58_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__69_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__71_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__73_34) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__80_37) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__87_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__94_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__99_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__104_49) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__111_52) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__118_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__126_58) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__134_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__137_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__140_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__148_67) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__154_70) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__160_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__166_76) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__172_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__181_85) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__190_87) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__192_89) & (memory_controller_waitrequest == 1'd0)) & (main_192_197 == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__198_90) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__201_92) & (memory_controller_waitrequest == 1'd0)) & (main_201_206 == 1'd1))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__207_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if ((((cur_state == LEGUP_F_main_BB__210_95) & (memory_controller_waitrequest == 1'd0)) & (main_210_213 == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__214_96) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__217_99) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
	/* main: %231*/
	/*   %Hi.1 = phi i32 [ %Hi.0, %224 ], [ %Hi.0, %217 ], [ %Hi.0, %214 ], [ %Hi.0, %210 ], [ %Hi.0, %207 ], [ %Hi.0, %201 ], [ %Hi.0, %198 ], [ %Hi.0, %192 ], [ %Hi.0, %190 ], [ %Hi.0, %181 ], [ %Hi.0, %172 ], [ %Hi.0, %166 ], [ %Hi.0, %160 ], [ %Hi.0, %154 ], [ %Hi.0, %148 ], [ %Hi.0, %140 ], [ %Hi.0, %137 ], [ %Hi.0, %134 ], [ %Hi.0, %126 ], [ %Hi.0, %118 ], [ %Hi.0, %111 ], [ %Hi.0, %104 ], [ %Hi.0, %99 ], [ %Hi.0, %94 ], [ %Hi.0, %87 ], [ %Hi.0, %80 ], [ %Hi.0, %73 ], [ %Hi.0, %71 ], [ %Hi.0, %69 ], [ %68, %58 ], [ %57, %47 ], [ %Hi.0, %40 ], [ %Hi.0, %33 ]*/
	if (((cur_state == LEGUP_F_main_BB__224_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_231_Hi1_reg <= main_231_Hi1;
		if (start == 1'b0 && ^(main_231_Hi1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_Hi1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %232 = add nsw i32 %16, 1*/
		main_231_232 = (main_15_16_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %232 = add nsw i32 %16, 1*/
	if ((cur_state == LEGUP_F_main_BB__231_105)) begin
		main_231_232_reg <= main_231_232;
		if (start == 1'b0 && ^(main_231_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %231*/
	/*   %233 = icmp eq i32 %pc.1, 0*/
		main_231_233 = (main_231_pc1_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %231*/
	/*   %233 = icmp eq i32 %pc.1, 0*/
	if ((cur_state == LEGUP_F_main_BB__231_105)) begin
		main_231_233_reg <= main_231_233;
		if (start == 1'b0 && ^(main_231_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_231_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %234 = icmp eq i32 %16, 610*/
		main_loopexit_234 = (main_15_16_reg == 32'd610);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %234 = icmp eq i32 %16, 610*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_loopexit_234_reg <= main_loopexit_234;
		if (start == 1'b0 && ^(main_loopexit_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %235 = zext i1 %234 to i32*/
		main_loopexit_235 = main_loopexit_234;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %235 = zext i1 %234 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_loopexit_235_reg <= main_loopexit_235;
		if (start == 1'b0 && ^(main_loopexit_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %236 = load i32* %5, align 4, !tbaa !1*/
		main_loopexit_236 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %236 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_236_reg <= main_loopexit_236;
		if (start == 1'b0 && ^(main_loopexit_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %237 = icmp eq i32 %236, -17*/
		main_loopexit_237 = (main_loopexit_236 == -32'd17);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %237 = icmp eq i32 %236, -17*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_237_reg <= main_loopexit_237;
		if (start == 1'b0 && ^(main_loopexit_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %238 = zext i1 %237 to i32*/
		main_loopexit_238 = main_loopexit_237;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %238 = zext i1 %237 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_238_reg <= main_loopexit_238;
		if (start == 1'b0 && ^(main_loopexit_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %239 = add nuw nsw i32 %238, %235*/
		main_loopexit_239 = (main_loopexit_238 + main_loopexit_235_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %239 = add nuw nsw i32 %238, %235*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_239_reg <= main_loopexit_239;
		if (start == 1'b0 && ^(main_loopexit_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %240 = load i32* %6, align 4, !tbaa !1*/
		main_loopexit_240 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %240 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_240_reg <= main_loopexit_240;
		if (start == 1'b0 && ^(main_loopexit_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %241 = icmp eq i32 %240, -9*/
		main_loopexit_241 = (main_loopexit_240 == -32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %241 = icmp eq i32 %240, -9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_241_reg <= main_loopexit_241;
		if (start == 1'b0 && ^(main_loopexit_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %242 = zext i1 %241 to i32*/
		main_loopexit_242 = main_loopexit_241;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %242 = zext i1 %241 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_242_reg <= main_loopexit_242;
		if (start == 1'b0 && ^(main_loopexit_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %243 = add nuw nsw i32 %242, %239*/
		main_loopexit_243 = (main_loopexit_242 + main_loopexit_239);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %243 = add nuw nsw i32 %242, %239*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_loopexit_243_reg <= main_loopexit_243;
		if (start == 1'b0 && ^(main_loopexit_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %244 = load i32* %7, align 4, !tbaa !1*/
		main_loopexit_244 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %244 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_244_reg <= main_loopexit_244;
		if (start == 1'b0 && ^(main_loopexit_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %245 = icmp eq i32 %244, 0*/
		main_loopexit_245 = (main_loopexit_244 == 32'd0);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %245 = icmp eq i32 %244, 0*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_245_reg <= main_loopexit_245;
		if (start == 1'b0 && ^(main_loopexit_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %246 = zext i1 %245 to i32*/
		main_loopexit_246 = main_loopexit_245;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %246 = zext i1 %245 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_246_reg <= main_loopexit_246;
		if (start == 1'b0 && ^(main_loopexit_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %247 = add nuw nsw i32 %246, %243*/
		main_loopexit_247 = (main_loopexit_246 + main_loopexit_243_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %247 = add nuw nsw i32 %246, %243*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_247_reg <= main_loopexit_247;
		if (start == 1'b0 && ^(main_loopexit_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %248 = load i32* %8, align 4, !tbaa !1*/
		main_loopexit_248 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %248 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_248_reg <= main_loopexit_248;
		if (start == 1'b0 && ^(main_loopexit_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %249 = icmp eq i32 %248, 3*/
		main_loopexit_249 = (main_loopexit_248 == 32'd3);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %249 = icmp eq i32 %248, 3*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_249_reg <= main_loopexit_249;
		if (start == 1'b0 && ^(main_loopexit_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %250 = zext i1 %249 to i32*/
		main_loopexit_250 = main_loopexit_249;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %250 = zext i1 %249 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_250_reg <= main_loopexit_250;
		if (start == 1'b0 && ^(main_loopexit_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %251 = add nuw nsw i32 %250, %247*/
		main_loopexit_251 = (main_loopexit_250 + main_loopexit_247);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %251 = add nuw nsw i32 %250, %247*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_loopexit_251_reg <= main_loopexit_251;
		if (start == 1'b0 && ^(main_loopexit_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %252 = load i32* %9, align 4, !tbaa !1*/
		main_loopexit_252 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %252 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_252_reg <= main_loopexit_252;
		if (start == 1'b0 && ^(main_loopexit_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %253 = icmp eq i32 %252, 5*/
		main_loopexit_253 = (main_loopexit_252 == 32'd5);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %253 = icmp eq i32 %252, 5*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_253_reg <= main_loopexit_253;
		if (start == 1'b0 && ^(main_loopexit_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %254 = zext i1 %253 to i32*/
		main_loopexit_254 = main_loopexit_253;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %254 = zext i1 %253 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_254_reg <= main_loopexit_254;
		if (start == 1'b0 && ^(main_loopexit_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %255 = add nuw nsw i32 %254, %251*/
		main_loopexit_255 = (main_loopexit_254 + main_loopexit_251_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %255 = add nuw nsw i32 %254, %251*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_255_reg <= main_loopexit_255;
		if (start == 1'b0 && ^(main_loopexit_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %256 = load i32* %10, align 4, !tbaa !1*/
		main_loopexit_256 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %256 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_256_reg <= main_loopexit_256;
		if (start == 1'b0 && ^(main_loopexit_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %257 = icmp eq i32 %256, 11*/
		main_loopexit_257 = (main_loopexit_256 == 32'd11);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %257 = icmp eq i32 %256, 11*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_257_reg <= main_loopexit_257;
		if (start == 1'b0 && ^(main_loopexit_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %258 = zext i1 %257 to i32*/
		main_loopexit_258 = main_loopexit_257;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %258 = zext i1 %257 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_258_reg <= main_loopexit_258;
		if (start == 1'b0 && ^(main_loopexit_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %259 = add nuw nsw i32 %258, %255*/
		main_loopexit_259 = (main_loopexit_258 + main_loopexit_255);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %259 = add nuw nsw i32 %258, %255*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_loopexit_259_reg <= main_loopexit_259;
		if (start == 1'b0 && ^(main_loopexit_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %260 = load i32* %11, align 4, !tbaa !1*/
		main_loopexit_260 = main_0_dmem_out_a;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %260 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_260_reg <= main_loopexit_260;
		if (start == 1'b0 && ^(main_loopexit_260) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_260_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %261 = icmp eq i32 %260, 22*/
		main_loopexit_261 = (main_loopexit_260 == 32'd22);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %261 = icmp eq i32 %260, 22*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_261_reg <= main_loopexit_261;
		if (start == 1'b0 && ^(main_loopexit_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %262 = zext i1 %261 to i32*/
		main_loopexit_262 = main_loopexit_261;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %262 = zext i1 %261 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_262_reg <= main_loopexit_262;
		if (start == 1'b0 && ^(main_loopexit_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %263 = add nsw i32 %262, %259*/
		main_loopexit_263 = (main_loopexit_262 + main_loopexit_259_reg);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %263 = add nsw i32 %262, %259*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_263_reg <= main_loopexit_263;
		if (start == 1'b0 && ^(main_loopexit_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %264 = load i32* %12, align 4, !tbaa !1*/
		main_loopexit_264 = main_0_dmem_out_b;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %264 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_264_reg <= main_loopexit_264;
		if (start == 1'b0 && ^(main_loopexit_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %265 = icmp eq i32 %264, 38*/
		main_loopexit_265 = (main_loopexit_264 == 32'd38);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %265 = icmp eq i32 %264, 38*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_265_reg <= main_loopexit_265;
		if (start == 1'b0 && ^(main_loopexit_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %266 = zext i1 %265 to i32*/
		main_loopexit_266 = main_loopexit_265;
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %266 = zext i1 %265 to i32*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_266_reg <= main_loopexit_266;
		if (start == 1'b0 && ^(main_loopexit_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %267 = add nsw i32 %266, %263*/
		main_loopexit_267 = (main_loopexit_266 + main_loopexit_263);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %267 = add nsw i32 %266, %263*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_267_reg <= main_loopexit_267;
		if (start == 1'b0 && ^(main_loopexit_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.loopexit*/
	/*   %269 = icmp eq i32 %267, 9*/
		main_loopexit_269 = (main_loopexit_267 == 32'd9);
end
always @(posedge clk) begin
	/* main: %.loopexit*/
	/*   %269 = icmp eq i32 %267, 9*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_112)) begin
		main_loopexit_269_reg <= main_loopexit_269;
		if (start == 1'b0 && ^(main_loopexit_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_loopexit_269_reg"); $finish; end
	end
end
always @(*) begin
	imem_address_a = 1'd0;
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		imem_address_a = (main_15_19 >>> 3'd2);
	end
end
always @(*) begin
	imem_write_enable_a = 1'd0;
	/* main: %15*/
	/*   %20 = load i32* %19, align 4, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__15_13)) begin
		imem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_reg_address_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_address_a = (main_legup_memset_4exit_scevgep >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_reg_address_a = (main_preheader13_4 >>> 3'd2);
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_address_a = (main_33_34 >>> 3'd2);
	end
	/* main: %40*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_0_reg_address_a = (main_40_41 >>> 3'd2);
	end
	/* main: %40*/
	/*   store i32 %45, i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_0_reg_address_a = (main_40_46_reg >>> 3'd2);
	end
	/* main: %47*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_0_reg_address_a = (main_47_48 >>> 3'd2);
	end
	/* main: %58*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_0_reg_address_a = (main_58_59 >>> 3'd2);
	end
	/* main: %71*/
	/*   store i32 %Lo.0, i32* %72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__71_30)) begin
		main_0_reg_address_a = (main_71_72 >>> 3'd2);
	end
	/* main: %73*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_0_reg_address_a = (main_73_74 >>> 3'd2);
	end
	/* main: %80*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_0_reg_address_a = (main_80_81 >>> 3'd2);
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_0_reg_address_a = (main_80_86_reg >>> 3'd2);
	end
	/* main: %87*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_0_reg_address_a = (main_87_88 >>> 3'd2);
	end
	/* main: %94*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_41)) begin
		main_0_reg_address_a = (main_94_95 >>> 3'd2);
	end
	/* main: %99*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_44)) begin
		main_0_reg_address_a = (main_99_100 >>> 3'd2);
	end
	/* main: %99*/
	/*   store i32 %102, i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_45)) begin
		main_0_reg_address_a = (main_99_103_reg >>> 3'd2);
	end
	/* main: %104*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_0_reg_address_a = (main_104_105 >>> 3'd2);
	end
	/* main: %111*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_0_reg_address_a = (main_111_112 >>> 3'd2);
	end
	/* main: %111*/
	/*   store i32 %116, i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_0_reg_address_a = (main_111_117_reg >>> 3'd2);
	end
	/* main: %118*/
	/*   %120 = load i32* %119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_0_reg_address_a = (main_118_119 >>> 3'd2);
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_address_a = (main_126_127 >>> 3'd2);
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_0_reg_address_a = (main_126_133_reg >>> 3'd2);
	end
	/* main: %148*/
	/*   %150 = load i32* %149, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_0_reg_address_a = (main_148_149 >>> 3'd2);
	end
	/* main: %148*/
	/*   store i32 %152, i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_66)) begin
		main_0_reg_address_a = (main_148_153_reg >>> 3'd2);
	end
	/* main: %160*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_71)) begin
		main_0_reg_address_a = (main_160_161 >>> 3'd2);
	end
	/* main: %160*/
	/*   store i32 %164, i32* %165, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_72)) begin
		main_0_reg_address_a = (main_160_165_reg >>> 3'd2);
	end
	/* main: %172*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_77)) begin
		main_0_reg_address_a = (main_172_173 >>> 3'd2);
	end
	/* main: %172*/
	/*   store i32 %179, i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_80)) begin
		main_0_reg_address_a = (main_172_180_reg >>> 3'd2);
	end
	/* main: %181*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_0_reg_address_a = (main_181_182 >>> 3'd2);
	end
	/* main: %192*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_0_reg_address_a = (main_192_193 >>> 3'd2);
	end
	/* main: %201*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_0_reg_address_a = (main_201_202 >>> 3'd2);
	end
	/* main: %210*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_94)) begin
		main_0_reg_address_a = (main_210_211 >>> 3'd2);
	end
	/* main: %217*/
	/*   store i32 %222, i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_0_reg_address_a = (main_217_223_reg >>> 3'd2);
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_103)) begin
		main_0_reg_address_a = (main_preheader13_13_reg >>> 3'd2);
	end
	/* main: %231*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_105)) begin
		main_0_reg_address_a = (main_preheader13_13_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %33*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %40*/
	/*   %42 = load i32* %41, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %40*/
	/*   store i32 %45, i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %47*/
	/*   %49 = load i32* %48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %58*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %71*/
	/*   store i32 %Lo.0, i32* %72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__71_30)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %73*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %80*/
	/*   %82 = load i32* %81, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %87*/
	/*   %89 = load i32* %88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %94*/
	/*   %96 = load i32* %95, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_41)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %99*/
	/*   %101 = load i32* %100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_44)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %99*/
	/*   store i32 %102, i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_45)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %104*/
	/*   %106 = load i32* %105, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %111*/
	/*   %113 = load i32* %112, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %111*/
	/*   store i32 %116, i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %118*/
	/*   %120 = load i32* %119, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %126*/
	/*   %128 = load i32* %127, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %148*/
	/*   %150 = load i32* %149, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_65)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %148*/
	/*   store i32 %152, i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_66)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %160*/
	/*   %162 = load i32* %161, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_71)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %160*/
	/*   store i32 %164, i32* %165, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_72)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %172*/
	/*   %174 = load i32* %173, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_77)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %172*/
	/*   store i32 %179, i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_80)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %181*/
	/*   %183 = load i32* %182, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %192*/
	/*   %194 = load i32* %193, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %201*/
	/*   %203 = load i32* %202, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %210*/
	/*   %212 = load i32* %211, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__210_94)) begin
		main_0_reg_write_enable_a = 1'd0;
	end
	/* main: %217*/
	/*   store i32 %222, i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_103)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
	/* main: %231*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_105)) begin
		main_0_reg_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_a = 1'd0;
	/* main: %legup_memset_4.exit*/
	/*   store i32 0, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_legup_memset_4exit_6)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %.preheader13*/
	/*   store i32 2147479548, i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_reg_in_a = 32'd2147479548;
	end
	/* main: %40*/
	/*   store i32 %45, i32* %46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_20)) begin
		main_0_reg_in_a = main_40_45;
	end
	/* main: %71*/
	/*   store i32 %Lo.0, i32* %72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__71_30)) begin
		main_0_reg_in_a = main_15_Lo0_reg;
	end
	/* main: %80*/
	/*   store i32 %85, i32* %86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_36)) begin
		main_0_reg_in_a = main_80_85;
	end
	/* main: %99*/
	/*   store i32 %102, i32* %103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__99_45)) begin
		main_0_reg_in_a = main_99_102;
	end
	/* main: %111*/
	/*   store i32 %116, i32* %117, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_51)) begin
		main_0_reg_in_a = main_111_116;
	end
	/* main: %126*/
	/*   store i32 %132, i32* %133, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_57)) begin
		main_0_reg_in_a = main_126_132;
	end
	/* main: %148*/
	/*   store i32 %152, i32* %153, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__148_66)) begin
		main_0_reg_in_a = main_148_152;
	end
	/* main: %160*/
	/*   store i32 %164, i32* %165, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_72)) begin
		main_0_reg_in_a = main_160_164;
	end
	/* main: %172*/
	/*   store i32 %179, i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_80)) begin
		main_0_reg_in_a = main_172_179;
	end
	/* main: %217*/
	/*   store i32 %222, i32* %223, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_98)) begin
		main_0_reg_in_a = main_217_222;
	end
	/* main: %.thread*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread_103)) begin
		main_0_reg_in_a = 32'd0;
	end
	/* main: %231*/
	/*   store i32 0, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__231_105)) begin
		main_0_reg_in_a = 32'd0;
	end
end
always @(*) begin
	main_0_reg_address_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_address_b = (main_33_36 >>> 3'd2);
	end
	/* main: %33*/
	/*   store i32 %38, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_0_reg_address_b = (main_33_39_reg >>> 3'd2);
	end
	/* main: %40*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_0_reg_address_b = (main_40_43 >>> 3'd2);
	end
	/* main: %47*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_0_reg_address_b = (main_47_51 >>> 3'd2);
	end
	/* main: %58*/
	/*   %63 = load i32* %62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_0_reg_address_b = (main_58_62 >>> 3'd2);
	end
	/* main: %69*/
	/*   store i32 %Hi.0, i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_28)) begin
		main_0_reg_address_b = (main_69_70 >>> 3'd2);
	end
	/* main: %73*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_0_reg_address_b = (main_73_76 >>> 3'd2);
	end
	/* main: %73*/
	/*   store i32 %78, i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_0_reg_address_b = (main_73_79_reg >>> 3'd2);
	end
	/* main: %80*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_0_reg_address_b = (main_80_83 >>> 3'd2);
	end
	/* main: %87*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_0_reg_address_b = (main_87_90 >>> 3'd2);
	end
	/* main: %87*/
	/*   store i32 %92, i32* %93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_0_reg_address_b = (main_87_93_reg >>> 3'd2);
	end
	/* main: %94*/
	/*   store i32 %97, i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_42)) begin
		main_0_reg_address_b = (main_94_98_reg >>> 3'd2);
	end
	/* main: %104*/
	/*   %108 = load i32* %107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_0_reg_address_b = (main_104_107 >>> 3'd2);
	end
	/* main: %104*/
	/*   store i32 %109, i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_0_reg_address_b = (main_104_110_reg >>> 3'd2);
	end
	/* main: %111*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_0_reg_address_b = (main_111_114 >>> 3'd2);
	end
	/* main: %118*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_0_reg_address_b = (main_118_121 >>> 3'd2);
	end
	/* main: %118*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_0_reg_address_b = (main_118_125_reg >>> 3'd2);
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_address_b = (main_126_129 >>> 3'd2);
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_0_reg_address_b = (main_134_135 >>> 3'd2);
	end
	/* main: %140*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_62)) begin
		main_0_reg_address_b = (main_preheader13_14_reg >>> 3'd2);
	end
	/* main: %154*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_68)) begin
		main_0_reg_address_b = (main_154_155 >>> 3'd2);
	end
	/* main: %154*/
	/*   store i32 %158, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_69)) begin
		main_0_reg_address_b = (main_154_159_reg >>> 3'd2);
	end
	/* main: %166*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_74)) begin
		main_0_reg_address_b = (main_166_167 >>> 3'd2);
	end
	/* main: %166*/
	/*   store i32 %170, i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_75)) begin
		main_0_reg_address_b = (main_166_171_reg >>> 3'd2);
	end
	/* main: %181*/
	/*   %185 = load i32* %184, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_0_reg_address_b = (main_181_184 >>> 3'd2);
	end
	/* main: %190*/
	/*   store i32 %sext4, i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__190_86)) begin
		main_0_reg_address_b = (main_190_191 >>> 3'd2);
	end
	/* main: %192*/
	/*   %196 = load i32* %195, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_0_reg_address_b = (main_192_195 >>> 3'd2);
	end
	/* main: %201*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_0_reg_address_b = (main_201_204 >>> 3'd2);
	end
	/* main: %217*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_0_reg_address_b = (main_217_218 >>> 3'd2);
	end
	/* main: %224*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_100)) begin
		main_0_reg_address_b = (main_224_225 >>> 3'd2);
	end
	/* main: %224*/
	/*   store i32 %229, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_0_reg_address_b = (main_224_230_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_reg_write_enable_b = 1'd0;
	/* main: %33*/
	/*   %37 = load i32* %36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_16)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %33*/
	/*   store i32 %38, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %40*/
	/*   %44 = load i32* %43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__40_19)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %47*/
	/*   %52 = load i32* %51, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__47_22)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %58*/
	/*   %63 = load i32* %62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %69*/
	/*   store i32 %Hi.0, i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_28)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %73*/
	/*   %77 = load i32* %76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_32)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %73*/
	/*   store i32 %78, i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %80*/
	/*   %84 = load i32* %83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__80_35)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %87*/
	/*   %91 = load i32* %90, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_38)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %87*/
	/*   store i32 %92, i32* %93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %94*/
	/*   store i32 %97, i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_42)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %104*/
	/*   %108 = load i32* %107, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_47)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %104*/
	/*   store i32 %109, i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %111*/
	/*   %115 = load i32* %114, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__111_50)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %118*/
	/*   %122 = load i32* %121, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_53)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %118*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %126*/
	/*   %130 = load i32* %129, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__126_56)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %134*/
	/*   %136 = load i32* %135, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__134_59)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %140*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_62)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %154*/
	/*   %156 = load i32* %155, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_68)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %154*/
	/*   store i32 %158, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_69)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %166*/
	/*   %168 = load i32* %167, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_74)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %166*/
	/*   store i32 %170, i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_75)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %181*/
	/*   %185 = load i32* %184, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_82)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %190*/
	/*   store i32 %sext4, i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__190_86)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
	/* main: %192*/
	/*   %196 = load i32* %195, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__192_88)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %201*/
	/*   %205 = load i32* %204, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__201_91)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %217*/
	/*   %219 = load i32* %218, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__217_97)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %224*/
	/*   %226 = load i32* %225, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_100)) begin
		main_0_reg_write_enable_b = 1'd0;
	end
	/* main: %224*/
	/*   store i32 %229, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_0_reg_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_reg_in_b = 1'd0;
	/* main: %33*/
	/*   store i32 %38, i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__33_17)) begin
		main_0_reg_in_b = main_33_38;
	end
	/* main: %69*/
	/*   store i32 %Hi.0, i32* %70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__69_28)) begin
		main_0_reg_in_b = main_15_Hi0_reg;
	end
	/* main: %73*/
	/*   store i32 %78, i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__73_33)) begin
		main_0_reg_in_b = main_73_78;
	end
	/* main: %87*/
	/*   store i32 %92, i32* %93, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__87_39)) begin
		main_0_reg_in_b = main_87_92;
	end
	/* main: %94*/
	/*   store i32 %97, i32* %98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__94_42)) begin
		main_0_reg_in_b = main_94_97;
	end
	/* main: %104*/
	/*   store i32 %109, i32* %110, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__104_48)) begin
		main_0_reg_in_b = main_104_109;
	end
	/* main: %118*/
	/*   store i32 %124, i32* %125, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__118_54)) begin
		main_0_reg_in_b = main_118_124;
	end
	/* main: %140*/
	/*   store i32 %21, i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_62)) begin
		main_0_reg_in_b = main_15_21_reg;
	end
	/* main: %154*/
	/*   store i32 %158, i32* %159, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__154_69)) begin
		main_0_reg_in_b = main_154_158;
	end
	/* main: %166*/
	/*   store i32 %170, i32* %171, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__166_75)) begin
		main_0_reg_in_b = main_166_170;
	end
	/* main: %190*/
	/*   store i32 %sext4, i32* %191, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__190_86)) begin
		main_0_reg_in_b = main_190_sext4;
	end
	/* main: %224*/
	/*   store i32 %229, i32* %230, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__224_101)) begin
		main_0_reg_in_b = main_224_229;
	end
end
always @(*) begin
	main_0_dmem_address_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_address_a = (main_2_si0 >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_address_a = (main_preheader13_5 >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_address_a = (main_preheader13_7_reg >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_address_a = (main_preheader13_9_reg >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_address_a = (main_preheader13_11_reg >>> 3'd2);
	end
	/* main: %181*/
	/*   store i32 %183, i32* %189, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_84)) begin
		main_0_dmem_address_a = (main_181_189 >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %236 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_0_dmem_address_a = (main_preheader13_5_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %244 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_0_dmem_address_a = (main_preheader13_7_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %252 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_address_a = (main_preheader13_9_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %260 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_address_a = (main_preheader13_11_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_dmem_write_enable_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %181*/
	/*   store i32 %183, i32* %189, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_84)) begin
		main_0_dmem_write_enable_a = 1'd1;
	end
	/* main: %.loopexit*/
	/*   %236 = load i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %244 = load i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %252 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %260 = load i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_dmem_in_a = 1'd0;
	/* main: %2*/
	/*   store i32 0, i32* %s.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__2_4)) begin
		main_0_dmem_in_a = 32'd0;
	end
	/* main: %.preheader13*/
	/*   store i32 22, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_in_a = 32'd22;
	end
	/* main: %.preheader13*/
	/*   store i32 -9, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_in_a = -32'd9;
	end
	/* main: %.preheader13*/
	/*   store i32 -17, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_in_a = -32'd17;
	end
	/* main: %.preheader13*/
	/*   store i32 0, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_in_a = 32'd0;
	end
	/* main: %181*/
	/*   store i32 %183, i32* %189, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__181_84)) begin
		main_0_dmem_in_a = main_181_183_reg;
	end
end
always @(*) begin
	main_0_dmem_address_b = 1'd0;
	/* main: %.preheader13*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_address_b = (main_preheader13_6 >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_address_b = (main_preheader13_8_reg >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_address_b = (main_preheader13_10_reg >>> 3'd2);
	end
	/* main: %.preheader13*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_address_b = (main_preheader13_12_reg >>> 3'd2);
	end
	/* main: %172*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_79)) begin
		main_0_dmem_address_b = (main_172_178 >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %240 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_0_dmem_address_b = (main_preheader13_6_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %248 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_0_dmem_address_b = (main_preheader13_8_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %256 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_address_b = (main_preheader13_10_reg >>> 3'd2);
	end
	/* main: %.loopexit*/
	/*   %264 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_address_b = (main_preheader13_12_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_dmem_write_enable_b = 1'd0;
	/* main: %.preheader13*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %.preheader13*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_write_enable_b = 1'd1;
	end
	/* main: %172*/
	/*   %179 = load i32* %178, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__172_79)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %240 = load i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_108)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %248 = load i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_109)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %256 = load i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_110)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
	/* main: %.loopexit*/
	/*   %264 = load i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_111)) begin
		main_0_dmem_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_dmem_in_b = 1'd0;
	/* main: %.preheader13*/
	/*   store i32 5, i32* %6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_8)) begin
		main_0_dmem_in_b = 32'd5;
	end
	/* main: %.preheader13*/
	/*   store i32 3, i32* %8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_9)) begin
		main_0_dmem_in_b = 32'd3;
	end
	/* main: %.preheader13*/
	/*   store i32 38, i32* %10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_10)) begin
		main_0_dmem_in_b = 32'd38;
	end
	/* main: %.preheader13*/
	/*   store i32 11, i32* %12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader13_11)) begin
		main_0_dmem_in_b = 32'd11;
	end
end
always @(*) begin
	lpm_mult_main_47_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %54 = mul nsw i64 %53, %50*/
	if ((lpm_mult_main_47_54_en == 1'd1)) begin
		main_47_54_stage0_reg <= (main_47_53 * main_47_50);
	end
end
always @(*) begin
	lpm_mult_main_58_65_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %65 = mul i64 %64, %61*/
	if ((lpm_mult_main_58_65_en == 1'd1)) begin
		main_58_65_stage0_reg <= (main_58_64 * main_58_61);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %274*/
	/*   ret i32 %267*/
	if ((cur_state == LEGUP_F_main_BB__274_115)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %274*/
	/*   ret i32 %267*/
	if ((cur_state == LEGUP_F_main_BB__274_115)) begin
		return_val <= main_loopexit_267_reg;
		if (start == 1'b0 && ^(main_loopexit_267_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
