//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  8 20:50:04 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 7
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;
endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__1_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB_preheader4_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__4_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__4_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__7_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB_gsm_absexiti_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__13_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__17_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__21_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__23_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__25_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__27_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__29_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__29_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__35_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__35_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__42_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__45_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__45_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__52_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__52_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__58_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB_preheader6i_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexitipreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_preheader6splitusipreheader_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB_preheader6splitusi_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_preheader6splitusi_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__69_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__69_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexitusi_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexitusi_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexiti_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexiti_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexiti_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexiti_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_threadiloopexit_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_threadiloopexit3_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_threadi_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_threadi_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_threadi_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_threadi_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB_threadi_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_threadi_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_preheader5i_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__179_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__179_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__179_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__179_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__179_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__179_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__179_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_preheaderi_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_preheaderi_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB_Autocorrelationexitloopexit_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB_Autocorrelationexit_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_preheaderi5_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__239_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__240_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__240_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__244_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__246_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__248_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__250_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__252_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__254_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__254_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__260_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__260_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__267_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__270_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__270_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__277_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__277_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB_gsm_normexiti_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__327_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__332_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB_gsm_absexiti9_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB_gsm_absexiti9_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_preheader14i_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_lrphipreheader_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB_lrphi_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB_lrphi_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB_lrphi_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__340_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB_preheaderii_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__349_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB_backedge1ii_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__355_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB_backedge2ii_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__361_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB_backedge3ii_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__367_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB_backedge4ii_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__373_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB_backedge5ii_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__379_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB_backedge6ii_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__385_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB_backedge7ii_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__391_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB_backedge8ii_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__397_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB_backedge9ii_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__403_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB_backedge10ii_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__409_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB_backedge11ii_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__415_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB_backedge12ii_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__421_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB_backedge13ii_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB_gsm_divexiti_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB_gsm_divexiti_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__430_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__430_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__432_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__435_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__435_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__439_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__439_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexit11i_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexit11i_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__449_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit8i_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit8i_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_lrph27ipreheader_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_lrph27i_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB_lrph27i_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB_lrph27i_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__460_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__460_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexit6i_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexit6i_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__470_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit3i_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit3i_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__477_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB__477_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_gsm_mult_rexiti13_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB__485_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB_gsm_addexiti_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB_gsm_addexiti_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__crit_edgei14loopexit_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__crit_edgei14_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit1_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit2_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB__crit_edge43i_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__crit_edge43i_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexit_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB_Reflection_coefficientsexit_164 = 8'd164;
parameter [7:0] LEGUP_F_main_BB__492_165 = 8'd165;
parameter [7:0] LEGUP_F_main_BB_gsm_absexitii_166 = 8'd166;
parameter [7:0] LEGUP_F_main_BB__497_167 = 8'd167;
parameter [7:0] LEGUP_F_main_BB__501_168 = 8'd168;
parameter [7:0] LEGUP_F_main_BB__503_169 = 8'd169;
parameter [7:0] LEGUP_F_main_BB_threadii_170 = 8'd170;
parameter [7:0] LEGUP_F_main_BB__508_171 = 8'd171;
parameter [7:0] LEGUP_F_main_BB__508_172 = 8'd172;
parameter [7:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_173 = 8'd173;
parameter [7:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_174 = 8'd174;
parameter [7:0] LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175 = 8'd175;
parameter [7:0] LEGUP_F_main_BB__517_176 = 8'd176;
parameter [7:0] LEGUP_F_main_BB__520_177 = 8'd177;
parameter [7:0] LEGUP_F_main_BB__522_178 = 8'd178;
parameter [7:0] LEGUP_F_main_BB_threadi4_179 = 8'd179;
parameter [7:0] LEGUP_F_main_BB_threadi4_180 = 8'd180;
parameter [7:0] LEGUP_F_main_BB_threadi4_181 = 8'd181;
parameter [7:0] LEGUP_F_main_BB__532_182 = 8'd182;
parameter [7:0] LEGUP_F_main_BB__535_183 = 8'd183;
parameter [7:0] LEGUP_F_main_BB__537_184 = 8'd184;
parameter [7:0] LEGUP_F_main_BB_thread98i_185 = 8'd185;
parameter [7:0] LEGUP_F_main_BB_thread98i_186 = 8'd186;
parameter [7:0] LEGUP_F_main_BB_thread98i_187 = 8'd187;
parameter [7:0] LEGUP_F_main_BB__547_188 = 8'd188;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit29i_189 = 8'd189;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit29threadi_190 = 8'd190;
parameter [7:0] LEGUP_F_main_BB__553_191 = 8'd191;
parameter [7:0] LEGUP_F_main_BB__555_192 = 8'd192;
parameter [7:0] LEGUP_F_main_BB_thread102i_193 = 8'd193;
parameter [7:0] LEGUP_F_main_BB_thread102i_194 = 8'd194;
parameter [7:0] LEGUP_F_main_BB_thread102i_195 = 8'd195;
parameter [7:0] LEGUP_F_main_BB__565_196 = 8'd196;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit25i_197 = 8'd197;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit25threadi_198 = 8'd198;
parameter [7:0] LEGUP_F_main_BB__571_199 = 8'd199;
parameter [7:0] LEGUP_F_main_BB__573_200 = 8'd200;
parameter [7:0] LEGUP_F_main_BB_thread107i_201 = 8'd201;
parameter [7:0] LEGUP_F_main_BB_thread107i_202 = 8'd202;
parameter [7:0] LEGUP_F_main_BB_thread107i_203 = 8'd203;
parameter [7:0] LEGUP_F_main_BB__583_204 = 8'd204;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit21i_205 = 8'd205;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit21threadi_206 = 8'd206;
parameter [7:0] LEGUP_F_main_BB__589_207 = 8'd207;
parameter [7:0] LEGUP_F_main_BB__591_208 = 8'd208;
parameter [7:0] LEGUP_F_main_BB_thread112i_209 = 8'd209;
parameter [7:0] LEGUP_F_main_BB_thread112i_210 = 8'd210;
parameter [7:0] LEGUP_F_main_BB_thread112i_211 = 8'd211;
parameter [7:0] LEGUP_F_main_BB__601_212 = 8'd212;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit17i_213 = 8'd213;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit17threadi_214 = 8'd214;
parameter [7:0] LEGUP_F_main_BB__607_215 = 8'd215;
parameter [7:0] LEGUP_F_main_BB__609_216 = 8'd216;
parameter [7:0] LEGUP_F_main_BB_thread117i_217 = 8'd217;
parameter [7:0] LEGUP_F_main_BB_thread117i_218 = 8'd218;
parameter [7:0] LEGUP_F_main_BB_thread117i_219 = 8'd219;
parameter [7:0] LEGUP_F_main_BB__619_220 = 8'd220;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit13i_221 = 8'd221;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit13threadi_222 = 8'd222;
parameter [7:0] LEGUP_F_main_BB__625_223 = 8'd223;
parameter [7:0] LEGUP_F_main_BB__627_224 = 8'd224;
parameter [7:0] LEGUP_F_main_BB_thread122i_225 = 8'd225;
parameter [7:0] LEGUP_F_main_BB_thread122i_226 = 8'd226;
parameter [7:0] LEGUP_F_main_BB_thread122i_227 = 8'd227;
parameter [7:0] LEGUP_F_main_BB__637_228 = 8'd228;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit9i_229 = 8'd229;
parameter [7:0] LEGUP_F_main_BB_gsm_addexit9threadi_230 = 8'd230;
parameter [7:0] LEGUP_F_main_BB__643_231 = 8'd231;
parameter [7:0] LEGUP_F_main_BB__645_232 = 8'd232;
parameter [7:0] LEGUP_F_main_BB_Quantization_and_codingexit_233 = 8'd233;
parameter [7:0] LEGUP_F_main_BB_Quantization_and_codingexit_234 = 8'd234;
parameter [7:0] LEGUP_F_main_BB_preheader_235 = 8'd235;
parameter [7:0] LEGUP_F_main_BB_preheader_236 = 8'd236;
parameter [7:0] LEGUP_F_main_BB__674_237 = 8'd237;
parameter [7:0] LEGUP_F_main_BB__674_238 = 8'd238;
parameter [7:0] LEGUP_F_main_BB__681_239 = 8'd239;
parameter [7:0] LEGUP_F_main_BB__683_240 = 8'd240;
parameter [7:0] LEGUP_F_main_BB__685_241 = 8'd241;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_i05;
reg [31:0] main_1_i05_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep49_reg;
reg [15:0] main_1_2;
reg [15:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg  main_1_exitcond47;
reg  main_1_exitcond47_reg;
reg [31:0] main_preheader4_LARc11;
reg [31:0] main_preheader4_LARc11_reg;
reg [15:0] main_4_smax030i;
reg [15:0] main_4_smax030i_reg;
reg [31:0] main_4_k029i;
reg [31:0] main_4_k029i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep46_reg;
reg [15:0] main_4_5;
reg [15:0] main_4_5_reg;
reg  main_4_6;
reg  main_4_6_reg;
reg  main_7_8;
reg  main_7_8_reg;
reg [15:0] main_7_9;
reg [15:0] main_7_9_reg;
reg [15:0] main_7_ii;
reg [15:0] main_7_ii_reg;
reg [15:0] main_gsm_absexiti_10;
reg [15:0] main_gsm_absexiti_10_reg;
reg  main_gsm_absexiti_11;
reg  main_gsm_absexiti_11_reg;
reg [15:0] main_gsm_absexiti_smax0i;
reg [15:0] main_gsm_absexiti_smax0i_reg;
reg [31:0] main_gsm_absexiti_12;
reg [31:0] main_gsm_absexiti_12_reg;
reg  main_gsm_absexiti_exitcond45;
reg  main_gsm_absexiti_exitcond45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_13_15_reg;
reg  main_13_16;
reg  main_13_16_reg;
reg [31:0] main_17_18;
reg [31:0] main_17_18_reg;
reg [31:0] main_17_19;
reg [31:0] main_17_19_reg;
reg  main_17_20;
reg  main_17_20_reg;
reg  main_21_22;
reg  main_21_22_reg;
reg [31:0] main_23_24;
reg [31:0] main_23_24_reg;
reg [31:0] main_25_0i1i;
reg [31:0] main_25_0i1i_reg;
reg  main_25_26;
reg  main_25_26_reg;
reg  main_27_28;
reg  main_27_28_reg;
reg [31:0] main_29_30;
reg [31:0] main_29_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_29_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_29_31_reg;
reg [7:0] main_29_32;
reg [7:0] main_29_32_reg;
reg [31:0] main_29_33;
reg [31:0] main_29_33_reg;
reg [31:0] main_29_34;
reg [31:0] main_29_34_reg;
reg [31:0] main_35_36;
reg [31:0] main_35_36_reg;
reg [31:0] main_35_37;
reg [31:0] main_35_37_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_35_38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_35_38_reg;
reg [7:0] main_35_39;
reg [7:0] main_35_39_reg;
reg [31:0] main_35_40;
reg [31:0] main_35_40_reg;
reg [31:0] main_35_41;
reg [31:0] main_35_41_reg;
reg [31:0] main_42_43;
reg [31:0] main_42_43_reg;
reg  main_42_44;
reg  main_42_44_reg;
reg [31:0] main_45_46;
reg [31:0] main_45_46_reg;
reg [31:0] main_45_47;
reg [31:0] main_45_47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_45_48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_45_48_reg;
reg [7:0] main_45_49;
reg [7:0] main_45_49_reg;
reg [31:0] main_45_50;
reg [31:0] main_45_50_reg;
reg [31:0] main_45_51;
reg [31:0] main_45_51_reg;
reg [31:0] main_52_53;
reg [31:0] main_52_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_52_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_52_54_reg;
reg [7:0] main_52_55;
reg [7:0] main_52_55_reg;
reg [31:0] main_52_56;
reg [31:0] main_52_56_reg;
reg [31:0] main_52_57;
reg [31:0] main_52_57_reg;
reg [31:0] main_58_01ii1;
reg [31:0] main_58_01ii1_reg;
reg [31:0] main_58_59;
reg [31:0] main_58_59_reg;
reg [31:0] main_58_sexti;
reg [31:0] main_58_sexti_reg;
reg [31:0] main_58_phitmpi;
reg [31:0] main_58_phitmpi_reg;
reg  main_58_60;
reg  main_58_60_reg;
reg [31:0] main_58_sextoffi;
reg [31:0] main_58_sextoffi_reg;
reg  main_58_61;
reg  main_58_61_reg;
reg [31:0] main_preheader6i_62;
reg [31:0] main_preheader6i_62_reg;
reg [31:0] main_preheader6i_63;
reg [31:0] main_preheader6i_63_reg;
reg [15:0] main_preheader6i_64;
reg [15:0] main_preheader6i_64_reg;
reg  main_preheader6i_65;
reg  main_preheader6i_65_reg;
reg [31:0] main_preheader6i_sext4i;
reg [31:0] main_preheader6i_sext4i_reg;
reg [31:0] main_preheader6i_66;
reg [31:0] main_preheader6i_66_reg;
reg [31:0] main_preheader6splitusi_k128usi;
reg [31:0] main_preheader6splitusi_k128usi_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader6splitusi_scevgep42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader6splitusi_scevgep42_reg;
reg [15:0] main_preheader6splitusi_67;
reg [15:0] main_preheader6splitusi_67_reg;
reg  main_preheader6splitusi_68;
reg  main_preheader6splitusi_68_reg;
reg [31:0] main_69_70;
reg [31:0] main_69_70_reg;
reg [31:0] main_69_71;
reg [31:0] main_69_71_reg;
reg [31:0] main_69_72;
reg [31:0] main_69_72_reg;
reg [31:0] main_69_73;
reg [31:0] main_69_73_reg;
reg [15:0] main_69_74;
reg [15:0] main_69_74_reg;
reg [15:0] main_gsm_mult_rexitusi_0iusi;
reg [15:0] main_gsm_mult_rexitusi_0iusi_reg;
reg [31:0] main_gsm_mult_rexitusi_75;
reg [31:0] main_gsm_mult_rexitusi_75_reg;
reg  main_gsm_mult_rexitusi_exitcond41;
reg  main_gsm_mult_rexitusi_exitcond41_reg;
reg [31:0] main_gsm_mult_rexiti_k128i;
reg [31:0] main_gsm_mult_rexiti_k128i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexiti_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_mult_rexiti_scevgep44_reg;
reg [15:0] main_gsm_mult_rexiti_76;
reg [15:0] main_gsm_mult_rexiti_76_reg;
reg [31:0] main_gsm_mult_rexiti_77;
reg [31:0] main_gsm_mult_rexiti_77_reg;
reg [31:0] main_gsm_mult_rexiti_78;
reg [31:0] main_gsm_mult_rexiti_78_reg;
reg [31:0] main_gsm_mult_rexiti_79;
reg [31:0] main_gsm_mult_rexiti_79_reg;
reg [31:0] main_gsm_mult_rexiti_80;
reg [31:0] main_gsm_mult_rexiti_80_reg;
reg [15:0] main_gsm_mult_rexiti_81;
reg [15:0] main_gsm_mult_rexiti_81_reg;
reg [31:0] main_gsm_mult_rexiti_82;
reg [31:0] main_gsm_mult_rexiti_82_reg;
reg  main_gsm_mult_rexiti_exitcond43;
reg  main_gsm_mult_rexiti_exitcond43_reg;
reg  main_threadi_83;
reg  main_threadi_83_reg;
reg [31:0] main_threadi_scalauto03i;
reg [31:0] main_threadi_scalauto03i_reg;
reg [15:0] main_threadi_84;
reg [15:0] main_threadi_84_reg;
reg [31:0] main_threadi_85;
reg [31:0] main_threadi_85_reg;
reg [31:0] main_threadi_86;
reg [31:0] main_threadi_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_87_reg;
reg [15:0] main_threadi_88;
reg [15:0] main_threadi_88_reg;
reg [31:0] main_threadi_89;
reg [31:0] main_threadi_89_reg;
reg [31:0] main_threadi_90;
reg [31:0] main_threadi_90_reg;
reg [31:0] main_threadi_91;
reg [31:0] main_threadi_91_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_92;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_92_reg;
reg [15:0] main_threadi_93;
reg [15:0] main_threadi_93_reg;
reg [31:0] main_threadi_94;
reg [31:0] main_threadi_94_reg;
reg [31:0] main_threadi_95;
reg [31:0] main_threadi_95_reg;
reg [31:0] main_threadi_96;
reg [31:0] main_threadi_96_reg;
reg [31:0] main_threadi_97;
reg [31:0] main_threadi_97_reg;
reg [31:0] main_threadi_98;
reg [31:0] main_threadi_98_reg;
reg [31:0] main_threadi_99;
reg [31:0] main_threadi_99_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_100_reg;
reg [15:0] main_threadi_101;
reg [15:0] main_threadi_101_reg;
reg [31:0] main_threadi_102;
reg [31:0] main_threadi_102_reg;
reg [31:0] main_threadi_103;
reg [31:0] main_threadi_103_reg;
reg [31:0] main_threadi_104;
reg [31:0] main_threadi_104_reg;
reg [31:0] main_threadi_105;
reg [31:0] main_threadi_105_reg;
reg [31:0] main_threadi_106;
reg [31:0] main_threadi_106_reg;
reg [31:0] main_threadi_107;
reg [31:0] main_threadi_107_reg;
reg [31:0] main_threadi_108;
reg [31:0] main_threadi_108_reg;
reg [31:0] main_threadi_109;
reg [31:0] main_threadi_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_110_reg;
reg [15:0] main_threadi_111;
reg [15:0] main_threadi_111_reg;
reg [31:0] main_threadi_112;
reg [31:0] main_threadi_112_reg;
reg [31:0] main_threadi_113;
reg [31:0] main_threadi_113_reg;
reg [31:0] main_threadi_114;
reg [31:0] main_threadi_114_reg;
reg [31:0] main_threadi_115;
reg [31:0] main_threadi_115_reg;
reg [31:0] main_threadi_116;
reg [31:0] main_threadi_116_reg;
reg [31:0] main_threadi_117;
reg [31:0] main_threadi_117_reg;
reg [31:0] main_threadi_118;
reg [31:0] main_threadi_118_reg;
reg [31:0] main_threadi_119;
reg [31:0] main_threadi_119_reg;
reg [31:0] main_threadi_120;
reg [31:0] main_threadi_120_reg;
reg [31:0] main_threadi_121;
reg [31:0] main_threadi_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_122;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_122_reg;
reg [15:0] main_threadi_123;
reg [15:0] main_threadi_123_reg;
reg [31:0] main_threadi_124;
reg [31:0] main_threadi_124_reg;
reg [31:0] main_threadi_125;
reg [31:0] main_threadi_125_reg;
reg [31:0] main_threadi_126;
reg [31:0] main_threadi_126_reg;
reg [31:0] main_threadi_127;
reg [31:0] main_threadi_127_reg;
reg [31:0] main_threadi_128;
reg [31:0] main_threadi_128_reg;
reg [31:0] main_threadi_129;
reg [31:0] main_threadi_129_reg;
reg [31:0] main_threadi_130;
reg [31:0] main_threadi_130_reg;
reg [31:0] main_threadi_131;
reg [31:0] main_threadi_131_reg;
reg [31:0] main_threadi_132;
reg [31:0] main_threadi_132_reg;
reg [31:0] main_threadi_133;
reg [31:0] main_threadi_133_reg;
reg [31:0] main_threadi_134;
reg [31:0] main_threadi_134_reg;
reg [31:0] main_threadi_135;
reg [31:0] main_threadi_135_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_136;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_136_reg;
reg [15:0] main_threadi_137;
reg [15:0] main_threadi_137_reg;
reg [31:0] main_threadi_138;
reg [31:0] main_threadi_138_reg;
reg [31:0] main_threadi_139;
reg [31:0] main_threadi_139_reg;
reg [31:0] main_threadi_140;
reg [31:0] main_threadi_140_reg;
reg [31:0] main_threadi_141;
reg [31:0] main_threadi_141_reg;
reg [31:0] main_threadi_142;
reg [31:0] main_threadi_142_reg;
reg [31:0] main_threadi_143;
reg [31:0] main_threadi_143_reg;
reg [31:0] main_threadi_144;
reg [31:0] main_threadi_144_reg;
reg [31:0] main_threadi_145;
reg [31:0] main_threadi_145_reg;
reg [31:0] main_threadi_146;
reg [31:0] main_threadi_146_reg;
reg [31:0] main_threadi_147;
reg [31:0] main_threadi_147_reg;
reg [31:0] main_threadi_148;
reg [31:0] main_threadi_148_reg;
reg [31:0] main_threadi_149;
reg [31:0] main_threadi_149_reg;
reg [31:0] main_threadi_150;
reg [31:0] main_threadi_150_reg;
reg [31:0] main_threadi_151;
reg [31:0] main_threadi_151_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_152;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi_152_reg;
reg [15:0] main_threadi_153;
reg [15:0] main_threadi_153_reg;
reg [31:0] main_threadi_154;
reg [31:0] main_threadi_154_reg;
reg [31:0] main_threadi_155;
reg [31:0] main_threadi_155_reg;
reg [31:0] main_threadi_156;
reg [31:0] main_threadi_156_reg;
reg [31:0] main_threadi_157;
reg [31:0] main_threadi_157_reg;
reg [31:0] main_threadi_158;
reg [31:0] main_threadi_158_reg;
reg [31:0] main_threadi_159;
reg [31:0] main_threadi_159_reg;
reg [31:0] main_threadi_160;
reg [31:0] main_threadi_160_reg;
reg [31:0] main_threadi_161;
reg [31:0] main_threadi_161_reg;
reg [31:0] main_threadi_162;
reg [31:0] main_threadi_162_reg;
reg [31:0] main_threadi_163;
reg [31:0] main_threadi_163_reg;
reg [31:0] main_threadi_164;
reg [31:0] main_threadi_164_reg;
reg [31:0] main_threadi_165;
reg [31:0] main_threadi_165_reg;
reg [31:0] main_threadi_166;
reg [31:0] main_threadi_166_reg;
reg [31:0] main_threadi_167;
reg [31:0] main_threadi_167_reg;
reg [31:0] main_threadi_168;
reg [31:0] main_threadi_168_reg;
reg [31:0] main_threadi_169;
reg [31:0] main_threadi_169_reg;
reg [31:0] main_preheader5i_170;
reg [31:0] main_preheader5i_170_reg;
reg [31:0] main_preheader5i_171;
reg [31:0] main_preheader5i_171_reg;
reg [31:0] main_preheader5i_172;
reg [31:0] main_preheader5i_172_reg;
reg [31:0] main_preheader5i_173;
reg [31:0] main_preheader5i_173_reg;
reg [31:0] main_preheader5i_174;
reg [31:0] main_preheader5i_174_reg;
reg [31:0] main_preheader5i_175;
reg [31:0] main_preheader5i_175_reg;
reg [31:0] main_preheader5i_176;
reg [31:0] main_preheader5i_176_reg;
reg [31:0] main_preheader5i_177;
reg [31:0] main_preheader5i_177_reg;
reg [31:0] main_preheader5i_178;
reg [31:0] main_preheader5i_178_reg;
reg [31:0] main_179_indvar30;
reg [31:0] main_179_indvar30_reg;
reg [15:0] main_179_180;
reg [15:0] main_179_180_reg;
reg [31:0] main_179_181;
reg [31:0] main_179_181_reg;
reg [31:0] main_179_182;
reg [31:0] main_179_182_reg;
reg [31:0] main_179_183;
reg [31:0] main_179_183_reg;
reg [31:0] main_179_184;
reg [31:0] main_179_184_reg;
reg [31:0] main_179_185;
reg [31:0] main_179_185_reg;
reg [31:0] main_179_186;
reg [31:0] main_179_186_reg;
reg [31:0] main_179_187;
reg [31:0] main_179_187_reg;
reg [31:0] main_179_188;
reg [31:0] main_179_188_reg;
reg [31:0] main_179_189;
reg [31:0] main_179_189_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep33_reg;
reg [31:0] main_179_190;
reg [31:0] main_179_190_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep34_reg;
reg [31:0] main_179_191;
reg [31:0] main_179_191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep35_reg;
reg [31:0] main_179_192;
reg [31:0] main_179_192_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep36_reg;
reg [31:0] main_179_193;
reg [31:0] main_179_193_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep37;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep37_reg;
reg [31:0] main_179_194;
reg [31:0] main_179_194_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep38;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep38_reg;
reg [31:0] main_179_195;
reg [31:0] main_179_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep39_reg;
reg [31:0] main_179_196;
reg [31:0] main_179_196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_179_scevgep40_reg;
reg [15:0] main_179_197;
reg [15:0] main_179_197_reg;
reg [31:0] main_179_198;
reg [31:0] main_179_198_reg;
reg [31:0] main_179_199;
reg [31:0] main_179_199_reg;
reg [31:0] main_179_200;
reg [31:0] main_179_200_reg;
reg [31:0] main_179_201;
reg [31:0] main_179_201_reg;
reg [31:0] main_179_202;
reg [31:0] main_179_202_reg;
reg [31:0] main_179_203;
reg [31:0] main_179_203_reg;
reg [15:0] main_179_204;
reg [15:0] main_179_204_reg;
reg [31:0] main_179_205;
reg [31:0] main_179_205_reg;
reg [31:0] main_179_206;
reg [31:0] main_179_206_reg;
reg [31:0] main_179_207;
reg [31:0] main_179_207_reg;
reg [15:0] main_179_208;
reg [15:0] main_179_208_reg;
reg [31:0] main_179_209;
reg [31:0] main_179_209_reg;
reg [31:0] main_179_210;
reg [31:0] main_179_210_reg;
reg [31:0] main_179_211;
reg [31:0] main_179_211_reg;
reg [15:0] main_179_212;
reg [15:0] main_179_212_reg;
reg [31:0] main_179_213;
reg [31:0] main_179_213_reg;
reg [31:0] main_179_214;
reg [31:0] main_179_214_reg;
reg [31:0] main_179_215;
reg [31:0] main_179_215_reg;
reg [15:0] main_179_216;
reg [15:0] main_179_216_reg;
reg [31:0] main_179_217;
reg [31:0] main_179_217_reg;
reg [31:0] main_179_218;
reg [31:0] main_179_218_reg;
reg [31:0] main_179_219;
reg [31:0] main_179_219_reg;
reg [15:0] main_179_220;
reg [15:0] main_179_220_reg;
reg [31:0] main_179_221;
reg [31:0] main_179_221_reg;
reg [31:0] main_179_222;
reg [31:0] main_179_222_reg;
reg [31:0] main_179_223;
reg [31:0] main_179_223_reg;
reg [15:0] main_179_224;
reg [15:0] main_179_224_reg;
reg [31:0] main_179_225;
reg [31:0] main_179_225_reg;
reg [31:0] main_179_226;
reg [31:0] main_179_226_reg;
reg [31:0] main_179_227;
reg [31:0] main_179_227_reg;
reg [15:0] main_179_228;
reg [15:0] main_179_228_reg;
reg [31:0] main_179_229;
reg [31:0] main_179_229_reg;
reg [31:0] main_179_230;
reg [31:0] main_179_230_reg;
reg [31:0] main_179_231;
reg [31:0] main_179_231_reg;
reg [31:0] main_179_indvarnext31;
reg [31:0] main_179_indvarnext31_reg;
reg  main_179_exitcond32;
reg  main_179_exitcond32_reg;
reg [31:0] main_preheaderi_indvar25;
reg [31:0] main_preheaderi_indvar25_reg;
reg [15:0] main_preheaderi_232;
reg [15:0] main_preheaderi_232_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_08i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_08i_reg;
reg [31:0] main_preheaderi_233;
reg [31:0] main_preheaderi_233_reg;
reg [31:0] main_preheaderi_234;
reg [31:0] main_preheaderi_234_reg;
reg [15:0] main_preheaderi_235;
reg [15:0] main_preheaderi_235_reg;
reg  main_preheaderi_exitcond27;
reg  main_preheaderi_exitcond27_reg;
reg [31:0] main__crit_edgei_236;
reg [31:0] main__crit_edgei_236_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep29_reg;
reg [15:0] main__crit_edgei_prei;
reg [15:0] main__crit_edgei_prei_reg;
reg [31:0] main__crit_edgei_indvarnext26;
reg [31:0] main__crit_edgei_indvarnext26_reg;
reg  main_Autocorrelationexit_237;
reg  main_Autocorrelationexit_237_reg;
reg [63:0] main_preheaderi5_238;
reg [63:0] main_preheaderi5_238_reg;
reg [63:0] main_239_indvar8;
reg [63:0] main_239_indvar8_reg;
reg  main_239_exitcond10;
reg  main_239_exitcond10_reg;
reg [63:0] main_240_241;
reg [63:0] main_240_241_reg;
reg [63:0] main_240_242;
reg [63:0] main_240_242_reg;
reg [31:0] main_240_243;
reg [31:0] main_240_243_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_240_si0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_240_si0_reg;
reg [63:0] main_240_indvarnext9;
reg [63:0] main_240_indvarnext9_reg;
reg  main_244_245;
reg  main_244_245_reg;
reg  main_246_247;
reg  main_246_247_reg;
reg [31:0] main_248_249;
reg [31:0] main_248_249_reg;
reg [31:0] main_250_0ii;
reg [31:0] main_250_0ii_reg;
reg  main_250_251;
reg  main_250_251_reg;
reg  main_252_253;
reg  main_252_253_reg;
reg [31:0] main_254_255;
reg [31:0] main_254_255_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_254_256;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_254_256_reg;
reg [7:0] main_254_257;
reg [7:0] main_254_257_reg;
reg [31:0] main_254_258;
reg [31:0] main_254_258_reg;
reg [31:0] main_254_259;
reg [31:0] main_254_259_reg;
reg [31:0] main_260_261;
reg [31:0] main_260_261_reg;
reg [31:0] main_260_262;
reg [31:0] main_260_262_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_260_263;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_260_263_reg;
reg [7:0] main_260_264;
reg [7:0] main_260_264_reg;
reg [31:0] main_260_265;
reg [31:0] main_260_265_reg;
reg [31:0] main_260_266;
reg [31:0] main_260_266_reg;
reg [31:0] main_267_268;
reg [31:0] main_267_268_reg;
reg  main_267_269;
reg  main_267_269_reg;
reg [31:0] main_270_271;
reg [31:0] main_270_271_reg;
reg [31:0] main_270_272;
reg [31:0] main_270_272_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_270_273;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_270_273_reg;
reg [7:0] main_270_274;
reg [7:0] main_270_274_reg;
reg [31:0] main_270_275;
reg [31:0] main_270_275_reg;
reg [31:0] main_270_276;
reg [31:0] main_270_276_reg;
reg [31:0] main_277_278;
reg [31:0] main_277_278_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_277_279;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_277_279_reg;
reg [7:0] main_277_280;
reg [7:0] main_277_280_reg;
reg [31:0] main_277_281;
reg [31:0] main_277_281_reg;
reg [31:0] main_277_282;
reg [31:0] main_277_282_reg;
reg [31:0] main_gsm_normexiti_01ii6;
reg [31:0] main_gsm_normexiti_01ii6_reg;
reg [31:0] main_gsm_normexiti_sexti7;
reg [31:0] main_gsm_normexiti_sexti7_reg;
reg [31:0] main_gsm_normexiti_283;
reg [31:0] main_gsm_normexiti_283_reg;
reg [31:0] main_gsm_normexiti_284;
reg [31:0] main_gsm_normexiti_284_reg;
reg [31:0] main_gsm_normexiti_285;
reg [31:0] main_gsm_normexiti_285_reg;
reg [15:0] main_gsm_normexiti_286;
reg [15:0] main_gsm_normexiti_286_reg;
reg [31:0] main_gsm_normexiti_287;
reg [31:0] main_gsm_normexiti_287_reg;
reg [31:0] main_gsm_normexiti_288;
reg [31:0] main_gsm_normexiti_288_reg;
reg [15:0] main_gsm_normexiti_289;
reg [15:0] main_gsm_normexiti_289_reg;
reg [31:0] main_gsm_normexiti_290;
reg [31:0] main_gsm_normexiti_290_reg;
reg [31:0] main_gsm_normexiti_291;
reg [31:0] main_gsm_normexiti_291_reg;
reg [15:0] main_gsm_normexiti_292;
reg [15:0] main_gsm_normexiti_292_reg;
reg [31:0] main_gsm_normexiti_293;
reg [31:0] main_gsm_normexiti_293_reg;
reg [31:0] main_gsm_normexiti_294;
reg [31:0] main_gsm_normexiti_294_reg;
reg [15:0] main_gsm_normexiti_295;
reg [15:0] main_gsm_normexiti_295_reg;
reg [31:0] main_gsm_normexiti_296;
reg [31:0] main_gsm_normexiti_296_reg;
reg [31:0] main_gsm_normexiti_297;
reg [31:0] main_gsm_normexiti_297_reg;
reg [15:0] main_gsm_normexiti_298;
reg [15:0] main_gsm_normexiti_298_reg;
reg [31:0] main_gsm_normexiti_299;
reg [31:0] main_gsm_normexiti_299_reg;
reg [31:0] main_gsm_normexiti_300;
reg [31:0] main_gsm_normexiti_300_reg;
reg [15:0] main_gsm_normexiti_301;
reg [15:0] main_gsm_normexiti_301_reg;
reg [31:0] main_gsm_normexiti_302;
reg [31:0] main_gsm_normexiti_302_reg;
reg [31:0] main_gsm_normexiti_303;
reg [31:0] main_gsm_normexiti_303_reg;
reg [15:0] main_gsm_normexiti_304;
reg [15:0] main_gsm_normexiti_304_reg;
reg [31:0] main_gsm_normexiti_305;
reg [31:0] main_gsm_normexiti_305_reg;
reg [31:0] main_gsm_normexiti_306;
reg [31:0] main_gsm_normexiti_306_reg;
reg [15:0] main_gsm_normexiti_307;
reg [15:0] main_gsm_normexiti_307_reg;
reg [31:0] main_gsm_normexiti_308;
reg [31:0] main_gsm_normexiti_308_reg;
reg [31:0] main_gsm_normexiti_309;
reg [31:0] main_gsm_normexiti_309_reg;
reg [15:0] main_gsm_normexiti_310;
reg [15:0] main_gsm_normexiti_310_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_311;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_311_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_312;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_312_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_313;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_313_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_314;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_314_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_315;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_315_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_316;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_316_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_317;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_317_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_318;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_318_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_319;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_319_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_320;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_320_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_321;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_321_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_322;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_322_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_323;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_323_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_324;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_324_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_325;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_325_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_326;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_gsm_normexiti_326_reg;
reg [31:0] main_327_indvar18;
reg [31:0] main_327_indvar18_reg;
reg [15:0] main_327_328;
reg [15:0] main_327_328_reg;
reg [31:0] main_327_329;
reg [31:0] main_327_329_reg;
reg [31:0] main_327_330;
reg [31:0] main_327_330_reg;
reg [31:0] main_327_n029i;
reg [31:0] main_327_n029i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_327_128i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_327_128i_reg;
reg  main_327_331;
reg  main_327_331_reg;
reg  main_332_333;
reg  main_332_333_reg;
reg [15:0] main_332_334;
reg [15:0] main_332_334_reg;
reg [15:0] main_332_ii8;
reg [15:0] main_332_ii8_reg;
reg [15:0] main_gsm_absexiti9_335;
reg [15:0] main_gsm_absexiti9_335_reg;
reg [15:0] main_gsm_absexiti9_336;
reg [15:0] main_gsm_absexiti9_336_reg;
reg  main_gsm_absexiti9_337;
reg  main_gsm_absexiti9_337_reg;
reg  main_preheader14i_338;
reg  main_preheader14i_338_reg;
reg [31:0] main_lrphipreheader_339;
reg [31:0] main_lrphipreheader_339_reg;
reg [31:0] main_lrphi_indvar12;
reg [31:0] main_lrphi_indvar12_reg;
reg [31:0] main_lrphi_128isum;
reg [31:0] main_lrphi_128isum_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_224i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_224i_reg;
reg [31:0] main_lrphi_indvarnext13;
reg [31:0] main_lrphi_indvarnext13_reg;
reg  main_lrphi_exitcond14;
reg  main_lrphi_exitcond14_reg;
reg [31:0] main_340_341;
reg [31:0] main_340_341_reg;
reg  main_340_342;
reg  main_340_342_reg;
reg [31:0] main_preheaderii_343;
reg [31:0] main_preheaderii_343_reg;
reg [31:0] main_preheaderii_344;
reg [31:0] main_preheaderii_344_reg;
reg  main_preheaderii_345;
reg  main_preheaderii_345_reg;
reg [31:0] main_preheaderii_346;
reg [31:0] main_preheaderii_346_reg;
reg [31:0] main_preheaderii_i1i;
reg [31:0] main_preheaderii_i1i_reg;
reg [15:0] main_preheaderii_3ii;
reg [15:0] main_preheaderii_3ii_reg;
reg [31:0] main_preheaderii_347;
reg [31:0] main_preheaderii_347_reg;
reg  main_preheaderii_348;
reg  main_preheaderii_348_reg;
reg [31:0] main_349_350;
reg [31:0] main_349_350_reg;
reg [15:0] main_349_351;
reg [15:0] main_349_351_reg;
reg [31:0] main_backedge1ii_L_num0be1ii;
reg [31:0] main_backedge1ii_L_num0be1ii_reg;
reg [15:0] main_backedge1ii_div0be1ii;
reg [15:0] main_backedge1ii_div0be1ii_reg;
reg [15:0] main_backedge1ii_352;
reg [15:0] main_backedge1ii_352_reg;
reg [31:0] main_backedge1ii_353;
reg [31:0] main_backedge1ii_353_reg;
reg  main_backedge1ii_354;
reg  main_backedge1ii_354_reg;
reg [31:0] main_355_356;
reg [31:0] main_355_356_reg;
reg [15:0] main_355_357;
reg [15:0] main_355_357_reg;
reg [31:0] main_backedge2ii_L_num0be2ii;
reg [31:0] main_backedge2ii_L_num0be2ii_reg;
reg [15:0] main_backedge2ii_div0be2ii;
reg [15:0] main_backedge2ii_div0be2ii_reg;
reg [15:0] main_backedge2ii_358;
reg [15:0] main_backedge2ii_358_reg;
reg [31:0] main_backedge2ii_359;
reg [31:0] main_backedge2ii_359_reg;
reg  main_backedge2ii_360;
reg  main_backedge2ii_360_reg;
reg [31:0] main_361_362;
reg [31:0] main_361_362_reg;
reg [15:0] main_361_363;
reg [15:0] main_361_363_reg;
reg [31:0] main_backedge3ii_L_num0be3ii;
reg [31:0] main_backedge3ii_L_num0be3ii_reg;
reg [15:0] main_backedge3ii_div0be3ii;
reg [15:0] main_backedge3ii_div0be3ii_reg;
reg [15:0] main_backedge3ii_364;
reg [15:0] main_backedge3ii_364_reg;
reg [31:0] main_backedge3ii_365;
reg [31:0] main_backedge3ii_365_reg;
reg  main_backedge3ii_366;
reg  main_backedge3ii_366_reg;
reg [31:0] main_367_368;
reg [31:0] main_367_368_reg;
reg [15:0] main_367_369;
reg [15:0] main_367_369_reg;
reg [31:0] main_backedge4ii_L_num0be4ii;
reg [31:0] main_backedge4ii_L_num0be4ii_reg;
reg [15:0] main_backedge4ii_div0be4ii;
reg [15:0] main_backedge4ii_div0be4ii_reg;
reg [15:0] main_backedge4ii_370;
reg [15:0] main_backedge4ii_370_reg;
reg [31:0] main_backedge4ii_371;
reg [31:0] main_backedge4ii_371_reg;
reg  main_backedge4ii_372;
reg  main_backedge4ii_372_reg;
reg [31:0] main_373_374;
reg [31:0] main_373_374_reg;
reg [15:0] main_373_375;
reg [15:0] main_373_375_reg;
reg [31:0] main_backedge5ii_L_num0be5ii;
reg [31:0] main_backedge5ii_L_num0be5ii_reg;
reg [15:0] main_backedge5ii_div0be5ii;
reg [15:0] main_backedge5ii_div0be5ii_reg;
reg [15:0] main_backedge5ii_376;
reg [15:0] main_backedge5ii_376_reg;
reg [31:0] main_backedge5ii_377;
reg [31:0] main_backedge5ii_377_reg;
reg  main_backedge5ii_378;
reg  main_backedge5ii_378_reg;
reg [31:0] main_379_380;
reg [31:0] main_379_380_reg;
reg [15:0] main_379_381;
reg [15:0] main_379_381_reg;
reg [31:0] main_backedge6ii_L_num0be6ii;
reg [31:0] main_backedge6ii_L_num0be6ii_reg;
reg [15:0] main_backedge6ii_div0be6ii;
reg [15:0] main_backedge6ii_div0be6ii_reg;
reg [15:0] main_backedge6ii_382;
reg [15:0] main_backedge6ii_382_reg;
reg [31:0] main_backedge6ii_383;
reg [31:0] main_backedge6ii_383_reg;
reg  main_backedge6ii_384;
reg  main_backedge6ii_384_reg;
reg [31:0] main_385_386;
reg [31:0] main_385_386_reg;
reg [15:0] main_385_387;
reg [15:0] main_385_387_reg;
reg [31:0] main_backedge7ii_L_num0be7ii;
reg [31:0] main_backedge7ii_L_num0be7ii_reg;
reg [15:0] main_backedge7ii_div0be7ii;
reg [15:0] main_backedge7ii_div0be7ii_reg;
reg [15:0] main_backedge7ii_388;
reg [15:0] main_backedge7ii_388_reg;
reg [31:0] main_backedge7ii_389;
reg [31:0] main_backedge7ii_389_reg;
reg  main_backedge7ii_390;
reg  main_backedge7ii_390_reg;
reg [31:0] main_391_392;
reg [31:0] main_391_392_reg;
reg [15:0] main_391_393;
reg [15:0] main_391_393_reg;
reg [31:0] main_backedge8ii_L_num0be8ii;
reg [31:0] main_backedge8ii_L_num0be8ii_reg;
reg [15:0] main_backedge8ii_div0be8ii;
reg [15:0] main_backedge8ii_div0be8ii_reg;
reg [15:0] main_backedge8ii_394;
reg [15:0] main_backedge8ii_394_reg;
reg [31:0] main_backedge8ii_395;
reg [31:0] main_backedge8ii_395_reg;
reg  main_backedge8ii_396;
reg  main_backedge8ii_396_reg;
reg [31:0] main_397_398;
reg [31:0] main_397_398_reg;
reg [15:0] main_397_399;
reg [15:0] main_397_399_reg;
reg [31:0] main_backedge9ii_L_num0be9ii;
reg [31:0] main_backedge9ii_L_num0be9ii_reg;
reg [15:0] main_backedge9ii_div0be9ii;
reg [15:0] main_backedge9ii_div0be9ii_reg;
reg [15:0] main_backedge9ii_400;
reg [15:0] main_backedge9ii_400_reg;
reg [31:0] main_backedge9ii_401;
reg [31:0] main_backedge9ii_401_reg;
reg  main_backedge9ii_402;
reg  main_backedge9ii_402_reg;
reg [31:0] main_403_404;
reg [31:0] main_403_404_reg;
reg [15:0] main_403_405;
reg [15:0] main_403_405_reg;
reg [31:0] main_backedge10ii_L_num0be10ii;
reg [31:0] main_backedge10ii_L_num0be10ii_reg;
reg [15:0] main_backedge10ii_div0be10ii;
reg [15:0] main_backedge10ii_div0be10ii_reg;
reg [15:0] main_backedge10ii_406;
reg [15:0] main_backedge10ii_406_reg;
reg [31:0] main_backedge10ii_407;
reg [31:0] main_backedge10ii_407_reg;
reg  main_backedge10ii_408;
reg  main_backedge10ii_408_reg;
reg [31:0] main_409_410;
reg [31:0] main_409_410_reg;
reg [15:0] main_409_411;
reg [15:0] main_409_411_reg;
reg [31:0] main_backedge11ii_L_num0be11ii;
reg [31:0] main_backedge11ii_L_num0be11ii_reg;
reg [15:0] main_backedge11ii_div0be11ii;
reg [15:0] main_backedge11ii_div0be11ii_reg;
reg [15:0] main_backedge11ii_412;
reg [15:0] main_backedge11ii_412_reg;
reg [31:0] main_backedge11ii_413;
reg [31:0] main_backedge11ii_413_reg;
reg  main_backedge11ii_414;
reg  main_backedge11ii_414_reg;
reg [31:0] main_415_416;
reg [31:0] main_415_416_reg;
reg [15:0] main_415_417;
reg [15:0] main_415_417_reg;
reg [31:0] main_backedge12ii_L_num0be12ii;
reg [31:0] main_backedge12ii_L_num0be12ii_reg;
reg [15:0] main_backedge12ii_div0be12ii;
reg [15:0] main_backedge12ii_div0be12ii_reg;
reg [15:0] main_backedge12ii_418;
reg [15:0] main_backedge12ii_418_reg;
reg [31:0] main_backedge12ii_419;
reg [31:0] main_backedge12ii_419_reg;
reg  main_backedge12ii_420;
reg  main_backedge12ii_420_reg;
reg [31:0] main_421_422;
reg [31:0] main_421_422_reg;
reg [15:0] main_421_423;
reg [15:0] main_421_423_reg;
reg [31:0] main_backedge13ii_L_num0be13ii;
reg [31:0] main_backedge13ii_L_num0be13ii_reg;
reg [15:0] main_backedge13ii_div0be13ii;
reg [15:0] main_backedge13ii_div0be13ii_reg;
reg [15:0] main_backedge13ii_424;
reg [15:0] main_backedge13ii_424_reg;
reg [31:0] main_backedge13ii_425;
reg [31:0] main_backedge13ii_425_reg;
reg  main_backedge13ii_notii;
reg  main_backedge13ii_notii_reg;
reg [15:0] main_backedge13ii_426;
reg [15:0] main_backedge13ii_426_reg;
reg [15:0] main_backedge13ii_4ii;
reg [15:0] main_backedge13ii_4ii_reg;
reg [15:0] main_gsm_divexiti_427;
reg [15:0] main_gsm_divexiti_427_reg;
reg [15:0] main_gsm_divexiti_428;
reg [15:0] main_gsm_divexiti_428_reg;
reg  main_gsm_divexiti_429;
reg  main_gsm_divexiti_429_reg;
reg [15:0] main_430_431;
reg [15:0] main_430_431_reg;
reg [15:0] main_432_433;
reg [15:0] main_432_433_reg;
reg  main_432_434;
reg  main_432_434_reg;
reg [15:0] main_435_436;
reg [15:0] main_435_436_reg;
reg  main_435_437;
reg  main_435_437_reg;
reg  main_435_438;
reg  main_435_438_reg;
reg  main_435_orcondi9i;
reg  main_435_orcondi9i_reg;
reg [31:0] main_439_440;
reg [31:0] main_439_440_reg;
reg [31:0] main_439_441;
reg [31:0] main_439_441_reg;
reg [31:0] main_439_442;
reg [31:0] main_439_442_reg;
reg [31:0] main_439_443;
reg [31:0] main_439_443_reg;
reg [31:0] main_439_444;
reg [31:0] main_439_444_reg;
reg [31:0] main_439_phitmpi11;
reg [31:0] main_439_phitmpi11_reg;
reg [31:0] main_gsm_mult_rexit11i_0i10i;
reg [31:0] main_gsm_mult_rexit11i_0i10i_reg;
reg [15:0] main_gsm_mult_rexit11i_445;
reg [15:0] main_gsm_mult_rexit11i_445_reg;
reg [31:0] main_gsm_mult_rexit11i_446;
reg [31:0] main_gsm_mult_rexit11i_446_reg;
reg [31:0] main_gsm_mult_rexit11i_447;
reg [31:0] main_gsm_mult_rexit11i_447_reg;
reg  main_gsm_mult_rexit11i_448;
reg  main_gsm_mult_rexit11i_448_reg;
reg  main_449_450;
reg  main_449_450_reg;
reg [15:0] main_449_451;
reg [15:0] main_449_451_reg;
reg [15:0] main_449_phitmpi7i;
reg [15:0] main_449_phitmpi7i_reg;
reg [15:0] main_gsm_addexit8i_452;
reg [15:0] main_gsm_addexit8i_452_reg;
reg  main_gsm_addexit8i_453;
reg  main_gsm_addexit8i_453_reg;
reg [31:0] main_lrph27i_indvar16;
reg [31:0] main_lrph27i_indvar16_reg;
reg [31:0] main_lrph27i_454;
reg [31:0] main_lrph27i_454_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep21_reg;
reg [31:0] main_lrph27i_455;
reg [31:0] main_lrph27i_455_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrph27i_scevgep23_reg;
reg [15:0] main_lrph27i_456;
reg [15:0] main_lrph27i_456_reg;
reg [15:0] main_lrph27i_457;
reg [15:0] main_lrph27i_457_reg;
reg  main_lrph27i_458;
reg  main_lrph27i_458_reg;
reg  main_lrph27i_459;
reg  main_lrph27i_459_reg;
reg  main_lrph27i_orcondi4i;
reg  main_lrph27i_orcondi4i_reg;
reg [31:0] main_460_461;
reg [31:0] main_460_461_reg;
reg [31:0] main_460_462;
reg [31:0] main_460_462_reg;
reg [31:0] main_460_463;
reg [31:0] main_460_463_reg;
reg [31:0] main_460_464;
reg [31:0] main_460_464_reg;
reg [31:0] main_460_465;
reg [31:0] main_460_465_reg;
reg [31:0] main_460_phitmp12i;
reg [31:0] main_460_phitmp12i_reg;
reg [31:0] main_gsm_mult_rexit6i_0i5i;
reg [31:0] main_gsm_mult_rexit6i_0i5i_reg;
reg [15:0] main_gsm_mult_rexit6i_466;
reg [15:0] main_gsm_mult_rexit6i_466_reg;
reg [31:0] main_gsm_mult_rexit6i_467;
reg [31:0] main_gsm_mult_rexit6i_467_reg;
reg [31:0] main_gsm_mult_rexit6i_468;
reg [31:0] main_gsm_mult_rexit6i_468_reg;
reg  main_gsm_mult_rexit6i_469;
reg  main_gsm_mult_rexit6i_469_reg;
reg  main_470_471;
reg  main_470_471_reg;
reg [15:0] main_470_472;
reg [15:0] main_470_472_reg;
reg [15:0] main_470_phitmpi2i;
reg [15:0] main_470_phitmpi2i_reg;
reg [15:0] main_gsm_addexit3i_473;
reg [15:0] main_gsm_addexit3i_473_reg;
reg [15:0] main_gsm_addexit3i_474;
reg [15:0] main_gsm_addexit3i_474_reg;
reg  main_gsm_addexit3i_475;
reg  main_gsm_addexit3i_475_reg;
reg  main_gsm_addexit3i_476;
reg  main_gsm_addexit3i_476_reg;
reg  main_gsm_addexit3i_orcondii;
reg  main_gsm_addexit3i_orcondii_reg;
reg [31:0] main_477_478;
reg [31:0] main_477_478_reg;
reg [31:0] main_477_479;
reg [31:0] main_477_479_reg;
reg [31:0] main_477_480;
reg [31:0] main_477_480_reg;
reg [31:0] main_477_481;
reg [31:0] main_477_481_reg;
reg [31:0] main_477_phitmp13i;
reg [31:0] main_477_phitmp13i_reg;
reg [31:0] main_gsm_mult_rexiti13_0i1i12;
reg [31:0] main_gsm_mult_rexiti13_0i1i12_reg;
reg [31:0] main_gsm_mult_rexiti13_482;
reg [31:0] main_gsm_mult_rexiti13_482_reg;
reg [31:0] main_gsm_mult_rexiti13_483;
reg [31:0] main_gsm_mult_rexiti13_483_reg;
reg  main_gsm_mult_rexiti13_484;
reg  main_gsm_mult_rexiti13_484_reg;
reg  main_485_486;
reg  main_485_486_reg;
reg [15:0] main_485_487;
reg [15:0] main_485_487_reg;
reg [15:0] main_485_phitmpii;
reg [15:0] main_485_phitmpii_reg;
reg [15:0] main_gsm_addexiti_488;
reg [15:0] main_gsm_addexiti_488_reg;
reg [31:0] main_gsm_addexiti_indvarnext17;
reg [31:0] main_gsm_addexiti_indvarnext17_reg;
reg  main_gsm_addexiti_exitcond20;
reg  main_gsm_addexiti_exitcond20_reg;
reg  main__crit_edgei14_489;
reg  main__crit_edgei14_489_reg;
reg [15:0] main__crit_edge43i_prei15;
reg [15:0] main__crit_edge43i_prei15_reg;
reg [31:0] main__crit_edge43i_indvarnext19;
reg [31:0] main__crit_edge43i_indvarnext19_reg;
reg [31:0] main_Reflection_coefficientsexit_indvar;
reg [31:0] main_Reflection_coefficientsexit_indvar_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Reflection_coefficientsexit_01ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_Reflection_coefficientsexit_01ii_reg;
reg [15:0] main_Reflection_coefficientsexit_490;
reg [15:0] main_Reflection_coefficientsexit_490_reg;
reg  main_Reflection_coefficientsexit_491;
reg  main_Reflection_coefficientsexit_491_reg;
reg  main_492_493;
reg  main_492_493_reg;
reg [15:0] main_492_494;
reg [15:0] main_492_494_reg;
reg [15:0] main_gsm_absexitii_495;
reg [15:0] main_gsm_absexitii_495_reg;
reg  main_gsm_absexitii_496;
reg  main_gsm_absexitii_496_reg;
reg [31:0] main_497_498;
reg [31:0] main_497_498_reg;
reg [31:0] main_497_499;
reg [31:0] main_497_499_reg;
reg [15:0] main_497_500;
reg [15:0] main_497_500_reg;
reg  main_501_502;
reg  main_501_502_reg;
reg [15:0] main_503_504;
reg [15:0] main_503_504_reg;
reg [15:0] main_threadii_505;
reg [15:0] main_threadii_505_reg;
reg [15:0] main_threadii_506;
reg [15:0] main_threadii_506_reg;
reg [15:0] main_threadii_507;
reg [15:0] main_threadii_507_reg;
reg [15:0] main_508_temp0ii;
reg [15:0] main_508_temp0ii_reg;
reg [15:0] main_508_509;
reg [15:0] main_508_509_reg;
reg [15:0] main_508_510;
reg [15:0] main_508_510_reg;
reg [31:0] main_508_indvarnext;
reg [31:0] main_508_indvarnext_reg;
reg  main_508_exitcond;
reg  main_508_exitcond_reg;
reg [15:0] main_Gsm_LPC_Analysisexit_511;
reg [15:0] main_Gsm_LPC_Analysisexit_511_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_512;
reg [31:0] main_Gsm_LPC_Analysisexit_512_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_513;
reg [31:0] main_Gsm_LPC_Analysisexit_513_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_514;
reg [31:0] main_Gsm_LPC_Analysisexit_514_reg;
reg [31:0] main_Gsm_LPC_Analysisexit_515;
reg [31:0] main_Gsm_LPC_Analysisexit_515_reg;
reg  main_Gsm_LPC_Analysisexit_516;
reg  main_Gsm_LPC_Analysisexit_516_reg;
reg  main_517_518;
reg  main_517_518_reg;
reg [31:0] main_517_sexti2;
reg [31:0] main_517_sexti2_reg;
reg [31:0] main_517_opi;
reg [31:0] main_517_opi_reg;
reg  main_517_519;
reg  main_517_519_reg;
reg  main_517_orcondi;
reg  main_517_orcondi_reg;
reg  main_520_521;
reg  main_520_521_reg;
reg [31:0] main_522_523;
reg [31:0] main_522_523_reg;
reg [15:0] main_522_phitmpi3;
reg [15:0] main_522_phitmpi3_reg;
reg [15:0] main_threadi4_524;
reg [15:0] main_threadi4_524_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi4_525;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_threadi4_525_reg;
reg [15:0] main_threadi4_526;
reg [15:0] main_threadi4_526_reg;
reg [31:0] main_threadi4_527;
reg [31:0] main_threadi4_527_reg;
reg [31:0] main_threadi4_528;
reg [31:0] main_threadi4_528_reg;
reg [31:0] main_threadi4_529;
reg [31:0] main_threadi4_529_reg;
reg [31:0] main_threadi4_530;
reg [31:0] main_threadi4_530_reg;
reg  main_threadi4_531;
reg  main_threadi4_531_reg;
reg  main_532_533;
reg  main_532_533_reg;
reg [31:0] main_532_sext38i;
reg [31:0] main_532_sext38i_reg;
reg [31:0] main_532_op40i;
reg [31:0] main_532_op40i_reg;
reg  main_532_534;
reg  main_532_534_reg;
reg  main_532_orcond164i;
reg  main_532_orcond164i_reg;
reg  main_535_536;
reg  main_535_536_reg;
reg [31:0] main_537_538;
reg [31:0] main_537_538_reg;
reg [15:0] main_537_phitmp1i;
reg [15:0] main_537_phitmp1i_reg;
reg [15:0] main_thread98i_539;
reg [15:0] main_thread98i_539_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread98i_540;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread98i_540_reg;
reg [15:0] main_thread98i_541;
reg [15:0] main_thread98i_541_reg;
reg [31:0] main_thread98i_542;
reg [31:0] main_thread98i_542_reg;
reg [31:0] main_thread98i_543;
reg [31:0] main_thread98i_543_reg;
reg [31:0] main_thread98i_544;
reg [31:0] main_thread98i_544_reg;
reg [31:0] main_thread98i_545;
reg [31:0] main_thread98i_545_reg;
reg  main_thread98i_546;
reg  main_thread98i_546_reg;
reg  main_547_548;
reg  main_547_548_reg;
reg [31:0] main_547_sext43i;
reg [31:0] main_547_sext43i_reg;
reg [31:0] main_547_549;
reg [31:0] main_547_549_reg;
reg [31:0] main_547_op45i;
reg [31:0] main_547_op45i_reg;
reg  main_gsm_addexit29i_550;
reg  main_gsm_addexit29i_550_reg;
reg  main_gsm_addexit29threadi_551;
reg  main_gsm_addexit29threadi_551_reg;
reg [31:0] main_gsm_addexit29threadi_sext47i;
reg [31:0] main_gsm_addexit29threadi_sext47i_reg;
reg [31:0] main_gsm_addexit29threadi_op49i;
reg [31:0] main_gsm_addexit29threadi_op49i_reg;
reg  main_gsm_addexit29threadi_552;
reg  main_gsm_addexit29threadi_552_reg;
reg  main_gsm_addexit29threadi_orcond165i;
reg  main_gsm_addexit29threadi_orcond165i_reg;
reg  main_553_554;
reg  main_553_554_reg;
reg [31:0] main_555_556;
reg [31:0] main_555_556_reg;
reg [15:0] main_555_phitmp2i;
reg [15:0] main_555_phitmp2i_reg;
reg [15:0] main_thread102i_557;
reg [15:0] main_thread102i_557_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread102i_558;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread102i_558_reg;
reg [15:0] main_thread102i_559;
reg [15:0] main_thread102i_559_reg;
reg [31:0] main_thread102i_560;
reg [31:0] main_thread102i_560_reg;
reg [31:0] main_thread102i_561;
reg [31:0] main_thread102i_561_reg;
reg [31:0] main_thread102i_562;
reg [31:0] main_thread102i_562_reg;
reg [31:0] main_thread102i_563;
reg [31:0] main_thread102i_563_reg;
reg  main_thread102i_564;
reg  main_thread102i_564_reg;
reg  main_565_566;
reg  main_565_566_reg;
reg [31:0] main_565_sext52i;
reg [31:0] main_565_sext52i_reg;
reg [31:0] main_565_567;
reg [31:0] main_565_567_reg;
reg [31:0] main_565_op54i;
reg [31:0] main_565_op54i_reg;
reg  main_gsm_addexit25i_568;
reg  main_gsm_addexit25i_568_reg;
reg  main_gsm_addexit25threadi_569;
reg  main_gsm_addexit25threadi_569_reg;
reg [31:0] main_gsm_addexit25threadi_sext56i;
reg [31:0] main_gsm_addexit25threadi_sext56i_reg;
reg [31:0] main_gsm_addexit25threadi_op58i;
reg [31:0] main_gsm_addexit25threadi_op58i_reg;
reg  main_gsm_addexit25threadi_570;
reg  main_gsm_addexit25threadi_570_reg;
reg  main_gsm_addexit25threadi_orcond166i;
reg  main_gsm_addexit25threadi_orcond166i_reg;
reg  main_571_572;
reg  main_571_572_reg;
reg [31:0] main_573_574;
reg [31:0] main_573_574_reg;
reg [15:0] main_573_phitmp3i;
reg [15:0] main_573_phitmp3i_reg;
reg [15:0] main_thread107i_575;
reg [15:0] main_thread107i_575_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread107i_576;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread107i_576_reg;
reg [15:0] main_thread107i_577;
reg [15:0] main_thread107i_577_reg;
reg [31:0] main_thread107i_578;
reg [31:0] main_thread107i_578_reg;
reg [31:0] main_thread107i_579;
reg [31:0] main_thread107i_579_reg;
reg [31:0] main_thread107i_580;
reg [31:0] main_thread107i_580_reg;
reg [31:0] main_thread107i_581;
reg [31:0] main_thread107i_581_reg;
reg  main_thread107i_582;
reg  main_thread107i_582_reg;
reg  main_583_584;
reg  main_583_584_reg;
reg [31:0] main_583_sext61i;
reg [31:0] main_583_sext61i_reg;
reg [31:0] main_583_585;
reg [31:0] main_583_585_reg;
reg [31:0] main_583_op63i;
reg [31:0] main_583_op63i_reg;
reg  main_gsm_addexit21i_586;
reg  main_gsm_addexit21i_586_reg;
reg  main_gsm_addexit21threadi_587;
reg  main_gsm_addexit21threadi_587_reg;
reg [31:0] main_gsm_addexit21threadi_sext65i;
reg [31:0] main_gsm_addexit21threadi_sext65i_reg;
reg [31:0] main_gsm_addexit21threadi_op67i;
reg [31:0] main_gsm_addexit21threadi_op67i_reg;
reg  main_gsm_addexit21threadi_588;
reg  main_gsm_addexit21threadi_588_reg;
reg  main_gsm_addexit21threadi_orcond167i;
reg  main_gsm_addexit21threadi_orcond167i_reg;
reg  main_589_590;
reg  main_589_590_reg;
reg [31:0] main_591_592;
reg [31:0] main_591_592_reg;
reg [15:0] main_591_phitmp4i;
reg [15:0] main_591_phitmp4i_reg;
reg [15:0] main_thread112i_593;
reg [15:0] main_thread112i_593_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread112i_594;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread112i_594_reg;
reg [15:0] main_thread112i_595;
reg [15:0] main_thread112i_595_reg;
reg [31:0] main_thread112i_596;
reg [31:0] main_thread112i_596_reg;
reg [31:0] main_thread112i_597;
reg [31:0] main_thread112i_597_reg;
reg [31:0] main_thread112i_598;
reg [31:0] main_thread112i_598_reg;
reg [31:0] main_thread112i_599;
reg [31:0] main_thread112i_599_reg;
reg  main_thread112i_600;
reg  main_thread112i_600_reg;
reg  main_601_602;
reg  main_601_602_reg;
reg [31:0] main_601_sext70i;
reg [31:0] main_601_sext70i_reg;
reg [31:0] main_601_603;
reg [31:0] main_601_603_reg;
reg [31:0] main_601_op72i;
reg [31:0] main_601_op72i_reg;
reg  main_gsm_addexit17i_604;
reg  main_gsm_addexit17i_604_reg;
reg  main_gsm_addexit17threadi_605;
reg  main_gsm_addexit17threadi_605_reg;
reg [31:0] main_gsm_addexit17threadi_sext74i;
reg [31:0] main_gsm_addexit17threadi_sext74i_reg;
reg [31:0] main_gsm_addexit17threadi_op76i;
reg [31:0] main_gsm_addexit17threadi_op76i_reg;
reg  main_gsm_addexit17threadi_606;
reg  main_gsm_addexit17threadi_606_reg;
reg  main_gsm_addexit17threadi_orcond168i;
reg  main_gsm_addexit17threadi_orcond168i_reg;
reg  main_607_608;
reg  main_607_608_reg;
reg [31:0] main_609_610;
reg [31:0] main_609_610_reg;
reg [15:0] main_609_phitmp5i;
reg [15:0] main_609_phitmp5i_reg;
reg [15:0] main_thread117i_611;
reg [15:0] main_thread117i_611_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread117i_612;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread117i_612_reg;
reg [15:0] main_thread117i_613;
reg [15:0] main_thread117i_613_reg;
reg [31:0] main_thread117i_614;
reg [31:0] main_thread117i_614_reg;
reg [31:0] main_thread117i_615;
reg [31:0] main_thread117i_615_reg;
reg [31:0] main_thread117i_616;
reg [31:0] main_thread117i_616_reg;
reg [31:0] main_thread117i_617;
reg [31:0] main_thread117i_617_reg;
reg  main_thread117i_618;
reg  main_thread117i_618_reg;
reg  main_619_620;
reg  main_619_620_reg;
reg [31:0] main_619_sext79i;
reg [31:0] main_619_sext79i_reg;
reg [31:0] main_619_621;
reg [31:0] main_619_621_reg;
reg [31:0] main_619_op81i;
reg [31:0] main_619_op81i_reg;
reg  main_gsm_addexit13i_622;
reg  main_gsm_addexit13i_622_reg;
reg  main_gsm_addexit13threadi_623;
reg  main_gsm_addexit13threadi_623_reg;
reg [31:0] main_gsm_addexit13threadi_sext83i;
reg [31:0] main_gsm_addexit13threadi_sext83i_reg;
reg [31:0] main_gsm_addexit13threadi_op85i;
reg [31:0] main_gsm_addexit13threadi_op85i_reg;
reg  main_gsm_addexit13threadi_624;
reg  main_gsm_addexit13threadi_624_reg;
reg  main_gsm_addexit13threadi_orcond169i;
reg  main_gsm_addexit13threadi_orcond169i_reg;
reg  main_625_626;
reg  main_625_626_reg;
reg [31:0] main_627_628;
reg [31:0] main_627_628_reg;
reg [15:0] main_627_phitmp6i;
reg [15:0] main_627_phitmp6i_reg;
reg [15:0] main_thread122i_629;
reg [15:0] main_thread122i_629_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread122i_630;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_thread122i_630_reg;
reg [15:0] main_thread122i_631;
reg [15:0] main_thread122i_631_reg;
reg [31:0] main_thread122i_632;
reg [31:0] main_thread122i_632_reg;
reg [31:0] main_thread122i_633;
reg [31:0] main_thread122i_633_reg;
reg [31:0] main_thread122i_634;
reg [31:0] main_thread122i_634_reg;
reg [31:0] main_thread122i_635;
reg [31:0] main_thread122i_635_reg;
reg  main_thread122i_636;
reg  main_thread122i_636_reg;
reg  main_637_638;
reg  main_637_638_reg;
reg [31:0] main_637_sext88i;
reg [31:0] main_637_sext88i_reg;
reg [31:0] main_637_639;
reg [31:0] main_637_639_reg;
reg [31:0] main_637_op90i;
reg [31:0] main_637_op90i_reg;
reg  main_gsm_addexit9i_640;
reg  main_gsm_addexit9i_640_reg;
reg  main_gsm_addexit9threadi_641;
reg  main_gsm_addexit9threadi_641_reg;
reg [31:0] main_gsm_addexit9threadi_sext92i;
reg [31:0] main_gsm_addexit9threadi_sext92i_reg;
reg [31:0] main_gsm_addexit9threadi_op94i;
reg [31:0] main_gsm_addexit9threadi_op94i_reg;
reg  main_gsm_addexit9threadi_642;
reg  main_gsm_addexit9threadi_642_reg;
reg  main_gsm_addexit9threadi_orcond170i;
reg  main_gsm_addexit9threadi_orcond170i_reg;
reg  main_643_644;
reg  main_643_644_reg;
reg [31:0] main_645_646;
reg [31:0] main_645_646_reg;
reg [15:0] main_645_phitmp7i;
reg [15:0] main_645_phitmp7i_reg;
reg [15:0] main_Quantization_and_codingexit_647;
reg [15:0] main_Quantization_and_codingexit_647_reg;
reg  main_preheader_648;
reg  main_preheader_648_reg;
reg [31:0] main_preheader_649;
reg [31:0] main_preheader_649_reg;
reg [31:0] main_preheader_650;
reg [31:0] main_preheader_650_reg;
reg  main_preheader_651;
reg  main_preheader_651_reg;
reg [31:0] main_preheader_652;
reg [31:0] main_preheader_652_reg;
reg [31:0] main_preheader_653;
reg [31:0] main_preheader_653_reg;
reg  main_preheader_654;
reg  main_preheader_654_reg;
reg [31:0] main_preheader_655;
reg [31:0] main_preheader_655_reg;
reg [31:0] main_preheader_656;
reg [31:0] main_preheader_656_reg;
reg  main_preheader_657;
reg  main_preheader_657_reg;
reg [31:0] main_preheader_658;
reg [31:0] main_preheader_658_reg;
reg [31:0] main_preheader_659;
reg [31:0] main_preheader_659_reg;
reg  main_preheader_660;
reg  main_preheader_660_reg;
reg [31:0] main_preheader_661;
reg [31:0] main_preheader_661_reg;
reg [31:0] main_preheader_662;
reg [31:0] main_preheader_662_reg;
reg  main_preheader_663;
reg  main_preheader_663_reg;
reg [31:0] main_preheader_664;
reg [31:0] main_preheader_664_reg;
reg [31:0] main_preheader_665;
reg [31:0] main_preheader_665_reg;
reg  main_preheader_666;
reg  main_preheader_666_reg;
reg [31:0] main_preheader_667;
reg [31:0] main_preheader_667_reg;
reg [31:0] main_preheader_668;
reg [31:0] main_preheader_668_reg;
reg  main_preheader_669;
reg  main_preheader_669_reg;
reg [31:0] main_preheader_670;
reg [31:0] main_preheader_670_reg;
reg [31:0] main_preheader_671;
reg [31:0] main_preheader_671_reg;
reg  main_preheader_673;
reg  main_preheader_673_reg;
reg [31:0] main_674_main_result04;
reg [31:0] main_674_main_result04_reg;
reg [31:0] main_674_i13;
reg [31:0] main_674_i13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_674_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_674_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_674_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_674_scevgep6_reg;
reg [15:0] main_674_675;
reg [15:0] main_674_675_reg;
reg [15:0] main_674_676;
reg [15:0] main_674_676_reg;
reg  main_674_677;
reg  main_674_677_reg;
reg [31:0] main_674_678;
reg [31:0] main_674_678_reg;
reg [31:0] main_674_679;
reg [31:0] main_674_679_reg;
reg [31:0] main_674_680;
reg [31:0] main_674_680_reg;
reg  main_674_exitcond5;
reg  main_674_exitcond5_reg;
reg [7:0] bitoff_address_a;
reg  bitoff_write_enable_a;
wire [7:0] bitoff_in_a;
wire [7:0] bitoff_out_a;
wire [7:0] bitoff_address_b;
wire  bitoff_write_enable_b;
wire [7:0] bitoff_in_b;
wire [7:0] bitoff_out_b;
reg [7:0] inData_address_a;
reg  inData_write_enable_a;
wire [15:0] inData_in_a;
wire [15:0] inData_out_a;
wire [7:0] inData_address_b;
wire  inData_write_enable_b;
wire [15:0] inData_in_b;
wire [15:0] inData_out_b;
reg [7:0] outData_address_a;
reg  outData_write_enable_a;
wire [15:0] outData_in_a;
wire [15:0] outData_out_a;
wire [7:0] outData_address_b;
wire  outData_write_enable_b;
wire [15:0] outData_in_b;
wire [15:0] outData_out_b;
reg [3:0] main_0_Pi_address_a;
reg  main_0_Pi_write_enable_a;
reg [15:0] main_0_Pi_in_a;
wire [15:0] main_0_Pi_out_a;
reg [3:0] main_0_Pi_address_b;
reg  main_0_Pi_write_enable_b;
reg [15:0] main_0_Pi_in_b;
wire [15:0] main_0_Pi_out_b;
reg [3:0] main_0_Ki_address_a;
reg  main_0_Ki_write_enable_a;
reg [15:0] main_0_Ki_in_a;
wire [15:0] main_0_Ki_out_a;
reg [3:0] main_0_Ki_address_b;
reg  main_0_Ki_write_enable_b;
reg [15:0] main_0_Ki_in_b;
wire [15:0] main_0_Ki_out_b;
reg [7:0] main_0_so_address_a;
reg  main_0_so_write_enable_a;
reg [15:0] main_0_so_in_a;
wire [15:0] main_0_so_out_a;
reg [7:0] main_0_so_address_b;
reg  main_0_so_write_enable_b;
reg [15:0] main_0_so_in_b;
wire [15:0] main_0_so_out_b;
reg [2:0] main_0_LARc_address_a;
reg  main_0_LARc_write_enable_a;
reg [15:0] main_0_LARc_in_a;
wire [15:0] main_0_LARc_out_a;
reg [2:0] main_0_LARc_address_b;
reg  main_0_LARc_write_enable_b;
reg [15:0] main_0_LARc_in_b;
wire [15:0] main_0_LARc_out_b;
reg  lpm_mult_main_69_71_en;
reg [31:0] main_69_71_stage0_reg;
reg  lpm_mult_main_gsm_mult_rexiti_78_en;
reg [31:0] main_gsm_mult_rexiti_78_stage0_reg;
reg  lpm_mult_main_threadi_86_en;
reg [31:0] main_threadi_86_stage0_reg;
reg  lpm_mult_main_threadi_90_en;
reg [31:0] main_threadi_90_stage0_reg;
reg  lpm_mult_main_threadi_95_en;
reg [31:0] main_threadi_95_stage0_reg;
reg  lpm_mult_main_threadi_98_en;
reg [31:0] main_threadi_98_stage0_reg;
reg  lpm_mult_main_threadi_99_en;
reg [31:0] main_threadi_99_stage0_reg;
reg  lpm_mult_main_threadi_103_en;
reg [31:0] main_threadi_103_stage0_reg;
reg  lpm_mult_main_threadi_105_en;
reg [31:0] main_threadi_105_stage0_reg;
reg  lpm_mult_main_threadi_107_en;
reg [31:0] main_threadi_107_stage0_reg;
reg  lpm_mult_main_threadi_109_en;
reg [31:0] main_threadi_109_stage0_reg;
reg  lpm_mult_main_threadi_113_en;
reg [31:0] main_threadi_113_stage0_reg;
reg  lpm_mult_main_threadi_115_en;
reg [31:0] main_threadi_115_stage0_reg;
reg  lpm_mult_main_threadi_117_en;
reg [31:0] main_threadi_117_stage0_reg;
reg  lpm_mult_main_threadi_119_en;
reg [31:0] main_threadi_119_stage0_reg;
reg  lpm_mult_main_threadi_121_en;
reg [31:0] main_threadi_121_stage0_reg;
reg  lpm_mult_main_threadi_125_en;
reg [31:0] main_threadi_125_stage0_reg;
reg  lpm_mult_main_threadi_127_en;
reg [31:0] main_threadi_127_stage0_reg;
reg  lpm_mult_main_threadi_129_en;
reg [31:0] main_threadi_129_stage0_reg;
reg  lpm_mult_main_threadi_131_en;
reg [31:0] main_threadi_131_stage0_reg;
reg  lpm_mult_main_threadi_133_en;
reg [31:0] main_threadi_133_stage0_reg;
reg  lpm_mult_main_threadi_135_en;
reg [31:0] main_threadi_135_stage0_reg;
reg  lpm_mult_main_threadi_139_en;
reg [31:0] main_threadi_139_stage0_reg;
reg  lpm_mult_main_threadi_141_en;
reg [31:0] main_threadi_141_stage0_reg;
reg  lpm_mult_main_threadi_143_en;
reg [31:0] main_threadi_143_stage0_reg;
reg  lpm_mult_main_threadi_145_en;
reg [31:0] main_threadi_145_stage0_reg;
reg  lpm_mult_main_threadi_147_en;
reg [31:0] main_threadi_147_stage0_reg;
reg  lpm_mult_main_threadi_149_en;
reg [31:0] main_threadi_149_stage0_reg;
reg  lpm_mult_main_threadi_151_en;
reg [31:0] main_threadi_151_stage0_reg;
reg  lpm_mult_main_threadi_155_en;
reg [31:0] main_threadi_155_stage0_reg;
reg  lpm_mult_main_threadi_157_en;
reg [31:0] main_threadi_157_stage0_reg;
reg  lpm_mult_main_threadi_159_en;
reg [31:0] main_threadi_159_stage0_reg;
reg  lpm_mult_main_threadi_161_en;
reg [31:0] main_threadi_161_stage0_reg;
reg  lpm_mult_main_threadi_163_en;
reg [31:0] main_threadi_163_stage0_reg;
reg  lpm_mult_main_threadi_165_en;
reg [31:0] main_threadi_165_stage0_reg;
reg  lpm_mult_main_threadi_167_en;
reg [31:0] main_threadi_167_stage0_reg;
reg  lpm_mult_main_threadi_169_en;
reg [31:0] main_threadi_169_stage0_reg;
reg  lpm_mult_main_179_199_en;
reg [31:0] main_179_199_stage0_reg;
reg  lpm_mult_main_179_202_en;
reg [31:0] main_179_202_stage0_reg;
reg  lpm_mult_main_179_206_en;
reg [31:0] main_179_206_stage0_reg;
reg  lpm_mult_main_179_210_en;
reg [31:0] main_179_210_stage0_reg;
reg  lpm_mult_main_179_214_en;
reg [31:0] main_179_214_stage0_reg;
reg  lpm_mult_main_179_218_en;
reg [31:0] main_179_218_stage0_reg;
reg  lpm_mult_main_179_222_en;
reg [31:0] main_179_222_stage0_reg;
reg  lpm_mult_main_179_226_en;
reg [31:0] main_179_226_stage0_reg;
reg  lpm_mult_main_179_230_en;
reg [31:0] main_179_230_stage0_reg;
reg  lpm_mult_main_439_443_en;
reg [31:0] main_439_443_stage0_reg;
reg  lpm_mult_main_460_464_en;
reg [31:0] main_460_464_stage0_reg;
reg  lpm_mult_main_477_480_en;
reg [31:0] main_477_480_stage0_reg;
reg  lpm_mult_main_Gsm_LPC_Analysisexit_513_en;
reg [31:0] main_Gsm_LPC_Analysisexit_513_stage0_reg;
reg  lpm_mult_main_threadi4_528_en;
reg [31:0] main_threadi4_528_stage0_reg;
reg  lpm_mult_main_thread98i_543_en;
reg [31:0] main_thread98i_543_stage0_reg;
reg  lpm_mult_main_thread102i_561_en;
reg [31:0] main_thread102i_561_stage0_reg;
reg  lpm_mult_main_thread107i_579_en;
reg [31:0] main_thread107i_579_stage0_reg;
reg  lpm_mult_main_thread112i_597_en;
reg [31:0] main_thread112i_597_stage0_reg;
reg  lpm_mult_main_thread117i_615_en;
reg [31:0] main_thread117i_615_stage0_reg;
reg  lpm_mult_main_thread122i_633_en;
reg [31:0] main_thread122i_633_stage0_reg;

// Local Rams


// @bitoff = internal unnamed_addr constant [256 x i8] c"\08\07\06\06\05\05\05\05\04\04\04\04\04\04\04\04\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\03\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\02\0...
rom_dual_port bitoff (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bitoff_address_a ),
	.address_b( bitoff_address_b ),
	.q_a( bitoff_out_a ),
	.q_b( bitoff_out_b)
);
defparam bitoff.width_a = 8;
defparam bitoff.width_b = 8;
defparam bitoff.widthad_a = 8;
defparam bitoff.widthad_b = 8;
defparam bitoff.numwords_a = 256;
defparam bitoff.numwords_b = 256;
defparam bitoff.latency = 1;
defparam bitoff.init_file = "bitoff.mif";


// @inData = internal unnamed_addr constant [160 x i16] [i16 81, i16 10854, i16 1893, i16 -10291, i16 7614, i16 29718, i16 20475, i16 -29215, i16 -18949, i16 -29806, i16 -32017, i16 1596, i16 15744, i16 ...
rom_dual_port inData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( inData_address_a ),
	.address_b( inData_address_b ),
	.q_a( inData_out_a ),
	.q_b( inData_out_b)
);
defparam inData.width_a = 16;
defparam inData.width_b = 16;
defparam inData.widthad_a = 8;
defparam inData.widthad_b = 8;
defparam inData.numwords_a = 160;
defparam inData.numwords_b = 160;
defparam inData.latency = 1;
defparam inData.init_file = "inData.mif";


// @outData = internal unnamed_addr constant [160 x i16] [i16 80, i16 10848, i16 1888, i16 -10288, i16 7616, i16 29712, i16 20480, i16 -29216, i16 -18944, i16 -29808, i16 -32016, i16 1600, i16 15744, i16...
rom_dual_port outData (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( outData_address_a ),
	.address_b( outData_address_b ),
	.q_a( outData_out_a ),
	.q_b( outData_out_b)
);
defparam outData.width_a = 16;
defparam outData.width_b = 16;
defparam outData.widthad_a = 8;
defparam outData.widthad_b = 8;
defparam outData.numwords_a = 160;
defparam outData.numwords_b = 160;
defparam outData.latency = 1;
defparam outData.init_file = "outData.mif";


//   %P.i = alloca [9 x i16], align 2
ram_dual_port main_0_Pi (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Pi_address_a ),
	.address_b( main_0_Pi_address_b ),
	.wren_a( main_0_Pi_write_enable_a ),
	.wren_b( main_0_Pi_write_enable_b ),
	.data_a( main_0_Pi_in_a ),
	.data_b( main_0_Pi_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Pi_out_a ),
	.q_b( main_0_Pi_out_b)
);
defparam main_0_Pi.width_a = 16;
defparam main_0_Pi.width_b = 16;
defparam main_0_Pi.widthad_a = 4;
defparam main_0_Pi.widthad_b = 4;
defparam main_0_Pi.width_be_a = 1;
defparam main_0_Pi.width_be_b = 1;
defparam main_0_Pi.numwords_a = 9;
defparam main_0_Pi.numwords_b = 9;
defparam main_0_Pi.latency = 1;


//   %K.i = alloca [9 x i16], align 2
ram_dual_port main_0_Ki (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_Ki_address_a ),
	.address_b( main_0_Ki_address_b ),
	.wren_a( main_0_Ki_write_enable_a ),
	.wren_b( main_0_Ki_write_enable_b ),
	.data_a( main_0_Ki_in_a ),
	.data_b( main_0_Ki_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_Ki_out_a ),
	.q_b( main_0_Ki_out_b)
);
defparam main_0_Ki.width_a = 16;
defparam main_0_Ki.width_b = 16;
defparam main_0_Ki.widthad_a = 4;
defparam main_0_Ki.widthad_b = 4;
defparam main_0_Ki.width_be_a = 1;
defparam main_0_Ki.width_be_b = 1;
defparam main_0_Ki.numwords_a = 9;
defparam main_0_Ki.numwords_b = 9;
defparam main_0_Ki.latency = 1;


//   %so = alloca [160 x i16], align 2
ram_dual_port main_0_so (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_so_address_a ),
	.address_b( main_0_so_address_b ),
	.wren_a( main_0_so_write_enable_a ),
	.wren_b( main_0_so_write_enable_b ),
	.data_a( main_0_so_in_a ),
	.data_b( main_0_so_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_so_out_a ),
	.q_b( main_0_so_out_b)
);
defparam main_0_so.width_a = 16;
defparam main_0_so.width_b = 16;
defparam main_0_so.widthad_a = 8;
defparam main_0_so.widthad_b = 8;
defparam main_0_so.width_be_a = 1;
defparam main_0_so.width_be_b = 1;
defparam main_0_so.numwords_a = 160;
defparam main_0_so.numwords_b = 160;
defparam main_0_so.latency = 1;


//   %LARc = alloca [8 x i16], align 2
ram_dual_port main_0_LARc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_LARc_address_a ),
	.address_b( main_0_LARc_address_b ),
	.wren_a( main_0_LARc_write_enable_a ),
	.wren_b( main_0_LARc_write_enable_b ),
	.data_a( main_0_LARc_in_a ),
	.data_b( main_0_LARc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_LARc_out_a ),
	.q_b( main_0_LARc_out_b)
);
defparam main_0_LARc.width_a = 16;
defparam main_0_LARc.width_b = 16;
defparam main_0_LARc.widthad_a = 3;
defparam main_0_LARc.widthad_b = 3;
defparam main_0_LARc.width_be_a = 1;
defparam main_0_LARc.width_be_b = 1;
defparam main_0_LARc.numwords_a = 8;
defparam main_0_LARc.numwords_b = 8;
defparam main_0_LARc.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.preheader*/
	/*   %672 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %671) #1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_236)) begin
		$write("Result: %d\n", $signed(main_preheader_671));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_671) === 1'bX) finish <= 0;
	end
	/* main: %681*/
	/*   %682 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__681_239)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %683*/
	/*   %684 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__683_240)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_Autocorrelationexit_62:
	if ((main_Autocorrelationexit_237 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5_63;
	else if ((main_Autocorrelationexit_237 == 1'd0))
		next_state = LEGUP_F_main_BB__244_67;
LEGUP_F_main_BB_Autocorrelationexitloopexit_61:
		next_state = LEGUP_F_main_BB_Autocorrelationexit_62;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_173:
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_174;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_174:
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175;
LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175:
	if ((main_Gsm_LPC_Analysisexit_516 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_179;
	else if ((main_Gsm_LPC_Analysisexit_516 == 1'd0))
		next_state = LEGUP_F_main_BB__517_176;
LEGUP_F_main_BB_Quantization_and_codingexit_233:
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_234;
LEGUP_F_main_BB_Quantization_and_codingexit_234:
		next_state = LEGUP_F_main_BB__674_237;
LEGUP_F_main_BB_Reflection_coefficientsexit_163:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_164;
LEGUP_F_main_BB_Reflection_coefficientsexit_164:
	if ((main_Reflection_coefficientsexit_491 == 1'd1))
		next_state = LEGUP_F_main_BB__492_165;
	else if ((main_Reflection_coefficientsexit_491 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexitii_166;
LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_163;
LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit1_158:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160;
LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit2_159:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160;
LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit_157:
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__13_10:
	if ((main_13_16 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi_41;
	else if ((main_13_16 == 1'd0))
		next_state = LEGUP_F_main_BB__17_11;
LEGUP_F_main_BB__179_49:
		next_state = LEGUP_F_main_BB__179_50;
LEGUP_F_main_BB__179_50:
		next_state = LEGUP_F_main_BB__179_51;
LEGUP_F_main_BB__179_51:
		next_state = LEGUP_F_main_BB__179_52;
LEGUP_F_main_BB__179_52:
		next_state = LEGUP_F_main_BB__179_53;
LEGUP_F_main_BB__179_53:
		next_state = LEGUP_F_main_BB__179_54;
LEGUP_F_main_BB__179_54:
		next_state = LEGUP_F_main_BB__179_55;
LEGUP_F_main_BB__179_55:
	if ((main_179_exitcond32_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader5i_47;
	else if ((main_179_exitcond32_reg == 1'd0))
		next_state = LEGUP_F_main_BB__179_49;
LEGUP_F_main_BB__17_11:
	if ((main_17_20 == 1'd1))
		next_state = LEGUP_F_main_BB__21_12;
	else if ((main_17_20 == 1'd0))
		next_state = LEGUP_F_main_BB__25_14;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__1_4;
LEGUP_F_main_BB__1_4:
	if ((main_1_exitcond47_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader4_5;
	else if ((main_1_exitcond47_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__21_12:
	if ((main_21_22 == 1'd1))
		next_state = LEGUP_F_main_BB__58_25;
	else if ((main_21_22 == 1'd0))
		next_state = LEGUP_F_main_BB__23_13;
LEGUP_F_main_BB__239_64:
	if ((main_239_exitcond10 == 1'd1))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit_157;
	else if ((main_239_exitcond10 == 1'd0))
		next_state = LEGUP_F_main_BB__240_65;
LEGUP_F_main_BB__23_13:
		next_state = LEGUP_F_main_BB__25_14;
LEGUP_F_main_BB__240_65:
		next_state = LEGUP_F_main_BB__240_66;
LEGUP_F_main_BB__240_66:
		next_state = LEGUP_F_main_BB__239_64;
LEGUP_F_main_BB__244_67:
	if ((main_244_245 == 1'd1))
		next_state = LEGUP_F_main_BB__246_68;
	else if ((main_244_245 == 1'd0))
		next_state = LEGUP_F_main_BB__250_70;
LEGUP_F_main_BB__246_68:
	if ((main_246_247 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
	else if ((main_246_247 == 1'd0))
		next_state = LEGUP_F_main_BB__248_69;
LEGUP_F_main_BB__248_69:
		next_state = LEGUP_F_main_BB__250_70;
LEGUP_F_main_BB__250_70:
	if ((main_250_251 == 1'd1))
		next_state = LEGUP_F_main_BB__252_71;
	else if ((main_250_251 == 1'd0))
		next_state = LEGUP_F_main_BB__267_76;
LEGUP_F_main_BB__252_71:
	if ((main_252_253 == 1'd1))
		next_state = LEGUP_F_main_BB__254_72;
	else if ((main_252_253 == 1'd0))
		next_state = LEGUP_F_main_BB__260_74;
LEGUP_F_main_BB__254_72:
		next_state = LEGUP_F_main_BB__254_73;
LEGUP_F_main_BB__254_73:
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
LEGUP_F_main_BB__25_14:
	if ((main_25_26 == 1'd1))
		next_state = LEGUP_F_main_BB__27_15;
	else if ((main_25_26 == 1'd0))
		next_state = LEGUP_F_main_BB__42_20;
LEGUP_F_main_BB__260_74:
		next_state = LEGUP_F_main_BB__260_75;
LEGUP_F_main_BB__260_75:
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
LEGUP_F_main_BB__267_76:
	if ((main_267_269 == 1'd1))
		next_state = LEGUP_F_main_BB__277_79;
	else if ((main_267_269 == 1'd0))
		next_state = LEGUP_F_main_BB__270_77;
LEGUP_F_main_BB__270_77:
		next_state = LEGUP_F_main_BB__270_78;
LEGUP_F_main_BB__270_78:
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
LEGUP_F_main_BB__277_79:
		next_state = LEGUP_F_main_BB__277_80;
LEGUP_F_main_BB__277_80:
		next_state = LEGUP_F_main_BB_gsm_normexiti_81;
LEGUP_F_main_BB__27_15:
	if ((main_27_28 == 1'd1))
		next_state = LEGUP_F_main_BB__29_16;
	else if ((main_27_28 == 1'd0))
		next_state = LEGUP_F_main_BB__35_18;
LEGUP_F_main_BB__29_16:
		next_state = LEGUP_F_main_BB__29_17;
LEGUP_F_main_BB__29_17:
		next_state = LEGUP_F_main_BB__58_25;
LEGUP_F_main_BB__327_87:
	if ((main_327_331 == 1'd1))
		next_state = LEGUP_F_main_BB__332_88;
	else if ((main_327_331 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexiti9_89;
LEGUP_F_main_BB__332_88:
		next_state = LEGUP_F_main_BB_gsm_absexiti9_89;
LEGUP_F_main_BB__340_96:
	if ((main_340_342 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_divexiti_124;
	else if ((main_340_342 == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderii_97;
LEGUP_F_main_BB__349_98:
		next_state = LEGUP_F_main_BB_backedge1ii_99;
LEGUP_F_main_BB__355_100:
		next_state = LEGUP_F_main_BB_backedge2ii_101;
LEGUP_F_main_BB__35_18:
		next_state = LEGUP_F_main_BB__35_19;
LEGUP_F_main_BB__35_19:
		next_state = LEGUP_F_main_BB__58_25;
LEGUP_F_main_BB__361_102:
		next_state = LEGUP_F_main_BB_backedge3ii_103;
LEGUP_F_main_BB__367_104:
		next_state = LEGUP_F_main_BB_backedge4ii_105;
LEGUP_F_main_BB__373_106:
		next_state = LEGUP_F_main_BB_backedge5ii_107;
LEGUP_F_main_BB__379_108:
		next_state = LEGUP_F_main_BB_backedge6ii_109;
LEGUP_F_main_BB__385_110:
		next_state = LEGUP_F_main_BB_backedge7ii_111;
LEGUP_F_main_BB__391_112:
		next_state = LEGUP_F_main_BB_backedge8ii_113;
LEGUP_F_main_BB__397_114:
		next_state = LEGUP_F_main_BB_backedge9ii_115;
LEGUP_F_main_BB__403_116:
		next_state = LEGUP_F_main_BB_backedge10ii_117;
LEGUP_F_main_BB__409_118:
		next_state = LEGUP_F_main_BB_backedge11ii_119;
LEGUP_F_main_BB__415_120:
		next_state = LEGUP_F_main_BB_backedge12ii_121;
LEGUP_F_main_BB__421_122:
		next_state = LEGUP_F_main_BB_backedge13ii_123;
LEGUP_F_main_BB__42_20:
	if ((main_42_44 == 1'd1))
		next_state = LEGUP_F_main_BB__52_23;
	else if ((main_42_44 == 1'd0))
		next_state = LEGUP_F_main_BB__45_21;
LEGUP_F_main_BB__430_126:
		next_state = LEGUP_F_main_BB__430_127;
LEGUP_F_main_BB__430_127:
		next_state = LEGUP_F_main_BB__432_128;
LEGUP_F_main_BB__432_128:
	if ((main_432_434 == 1'd1))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit2_159;
	else if ((main_432_434 == 1'd0))
		next_state = LEGUP_F_main_BB__435_129;
LEGUP_F_main_BB__435_129:
		next_state = LEGUP_F_main_BB__435_130;
LEGUP_F_main_BB__435_130:
	if ((main_435_orcondi9i == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_133;
	else if ((main_435_orcondi9i == 1'd0))
		next_state = LEGUP_F_main_BB__439_131;
LEGUP_F_main_BB__439_131:
		next_state = LEGUP_F_main_BB__439_132;
LEGUP_F_main_BB__439_132:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_133;
LEGUP_F_main_BB__449_135:
		next_state = LEGUP_F_main_BB_gsm_addexit8i_136;
LEGUP_F_main_BB__45_21:
		next_state = LEGUP_F_main_BB__45_22;
LEGUP_F_main_BB__45_22:
		next_state = LEGUP_F_main_BB__58_25;
LEGUP_F_main_BB__460_142:
		next_state = LEGUP_F_main_BB__460_143;
LEGUP_F_main_BB__460_143:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_144;
LEGUP_F_main_BB__470_146:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_147;
LEGUP_F_main_BB__477_149:
		next_state = LEGUP_F_main_BB__477_150;
LEGUP_F_main_BB__477_150:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti13_151;
LEGUP_F_main_BB__485_152:
		next_state = LEGUP_F_main_BB_gsm_addexiti_153;
LEGUP_F_main_BB__492_165:
	if ((main_492_493 == 1'd1))
		next_state = LEGUP_F_main_BB_threadii_170;
	else if ((main_492_493 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexitii_166;
LEGUP_F_main_BB__497_167:
		next_state = LEGUP_F_main_BB__508_171;
LEGUP_F_main_BB__4_6:
		next_state = LEGUP_F_main_BB__4_7;
LEGUP_F_main_BB__4_7:
	if ((main_4_6 == 1'd1))
		next_state = LEGUP_F_main_BB__7_8;
	else if ((main_4_6 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_absexiti_9;
LEGUP_F_main_BB__501_168:
	if ((main_501_502 == 1'd1))
		next_state = LEGUP_F_main_BB__503_169;
	else if ((main_501_502 == 1'd0))
		next_state = LEGUP_F_main_BB_threadii_170;
LEGUP_F_main_BB__503_169:
		next_state = LEGUP_F_main_BB__508_171;
LEGUP_F_main_BB__508_171:
		next_state = LEGUP_F_main_BB__508_172;
LEGUP_F_main_BB__508_172:
	if ((main_508_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Gsm_LPC_Analysisexit_173;
	else if ((main_508_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexit_163;
LEGUP_F_main_BB__517_176:
	if ((main_517_orcondi == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_179;
	else if ((main_517_orcondi == 1'd0))
		next_state = LEGUP_F_main_BB__520_177;
LEGUP_F_main_BB__520_177:
	if ((main_520_521 == 1'd1))
		next_state = LEGUP_F_main_BB_threadi4_179;
	else if ((main_520_521 == 1'd0))
		next_state = LEGUP_F_main_BB__522_178;
LEGUP_F_main_BB__522_178:
		next_state = LEGUP_F_main_BB_threadi4_179;
LEGUP_F_main_BB__52_23:
		next_state = LEGUP_F_main_BB__52_24;
LEGUP_F_main_BB__52_24:
		next_state = LEGUP_F_main_BB__58_25;
LEGUP_F_main_BB__532_182:
	if ((main_532_orcond164i == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_185;
	else if ((main_532_orcond164i == 1'd0))
		next_state = LEGUP_F_main_BB__535_183;
LEGUP_F_main_BB__535_183:
	if ((main_535_536 == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_185;
	else if ((main_535_536 == 1'd0))
		next_state = LEGUP_F_main_BB__537_184;
LEGUP_F_main_BB__537_184:
		next_state = LEGUP_F_main_BB_thread98i_185;
LEGUP_F_main_BB__547_188:
	if ((main_547_548 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_193;
	else if ((main_547_548 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit29i_189;
LEGUP_F_main_BB__553_191:
	if ((main_553_554 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_193;
	else if ((main_553_554 == 1'd0))
		next_state = LEGUP_F_main_BB__555_192;
LEGUP_F_main_BB__555_192:
		next_state = LEGUP_F_main_BB_thread102i_193;
LEGUP_F_main_BB__565_196:
	if ((main_565_566 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_201;
	else if ((main_565_566 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit25i_197;
LEGUP_F_main_BB__571_199:
	if ((main_571_572 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_201;
	else if ((main_571_572 == 1'd0))
		next_state = LEGUP_F_main_BB__573_200;
LEGUP_F_main_BB__573_200:
		next_state = LEGUP_F_main_BB_thread107i_201;
LEGUP_F_main_BB__583_204:
	if ((main_583_584 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_209;
	else if ((main_583_584 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit21i_205;
LEGUP_F_main_BB__589_207:
	if ((main_589_590 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_209;
	else if ((main_589_590 == 1'd0))
		next_state = LEGUP_F_main_BB__591_208;
LEGUP_F_main_BB__58_25:
	if ((main_58_61 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader6i_26;
	else if ((main_58_61 == 1'd0))
		next_state = LEGUP_F_main_BB_threadi_41;
LEGUP_F_main_BB__591_208:
		next_state = LEGUP_F_main_BB_thread112i_209;
LEGUP_F_main_BB__601_212:
	if ((main_601_602 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_217;
	else if ((main_601_602 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit17i_213;
LEGUP_F_main_BB__607_215:
	if ((main_607_608 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_217;
	else if ((main_607_608 == 1'd0))
		next_state = LEGUP_F_main_BB__609_216;
LEGUP_F_main_BB__609_216:
		next_state = LEGUP_F_main_BB_thread117i_217;
LEGUP_F_main_BB__619_220:
	if ((main_619_620 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_225;
	else if ((main_619_620 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit13i_221;
LEGUP_F_main_BB__625_223:
	if ((main_625_626 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_225;
	else if ((main_625_626 == 1'd0))
		next_state = LEGUP_F_main_BB__627_224;
LEGUP_F_main_BB__627_224:
		next_state = LEGUP_F_main_BB_thread122i_225;
LEGUP_F_main_BB__637_228:
	if ((main_637_638 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
	else if ((main_637_638 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit9i_229;
LEGUP_F_main_BB__643_231:
	if ((main_643_644 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
	else if ((main_643_644 == 1'd0))
		next_state = LEGUP_F_main_BB__645_232;
LEGUP_F_main_BB__645_232:
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
LEGUP_F_main_BB__674_237:
		next_state = LEGUP_F_main_BB__674_238;
LEGUP_F_main_BB__674_238:
	if ((main_674_exitcond5_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader_235;
	else if ((main_674_exitcond5_reg == 1'd0))
		next_state = LEGUP_F_main_BB__674_237;
LEGUP_F_main_BB__681_239:
		next_state = LEGUP_F_main_BB__685_241;
LEGUP_F_main_BB__683_240:
		next_state = LEGUP_F_main_BB__685_241;
LEGUP_F_main_BB__685_241:
		next_state = LEGUP_0;
LEGUP_F_main_BB__69_31:
		next_state = LEGUP_F_main_BB__69_32;
LEGUP_F_main_BB__69_32:
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_33;
LEGUP_F_main_BB__7_8:
		next_state = LEGUP_F_main_BB_gsm_absexiti_9;
LEGUP_F_main_BB__crit_edge43i_161:
		next_state = LEGUP_F_main_BB__crit_edge43i_162;
LEGUP_F_main_BB__crit_edge43i_162:
		next_state = LEGUP_F_main_BB__327_87;
LEGUP_F_main_BB__crit_edgei14_156:
	if ((main__crit_edgei14_489 == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge43i_161;
	else if ((main__crit_edgei14_489 == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit2_159;
LEGUP_F_main_BB__crit_edgei14loopexit_155:
		next_state = LEGUP_F_main_BB__crit_edgei14_156;
LEGUP_F_main_BB__crit_edgei_58:
		next_state = LEGUP_F_main_BB__crit_edgei_59;
LEGUP_F_main_BB__crit_edgei_59:
		next_state = LEGUP_F_main_BB__crit_edgei_60;
LEGUP_F_main_BB__crit_edgei_60:
		next_state = LEGUP_F_main_BB_preheaderi_56;
LEGUP_F_main_BB_backedge10ii_117:
	if ((main_backedge10ii_408 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge11ii_119;
	else if ((main_backedge10ii_408 == 1'd0))
		next_state = LEGUP_F_main_BB__409_118;
LEGUP_F_main_BB_backedge11ii_119:
	if ((main_backedge11ii_414 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge12ii_121;
	else if ((main_backedge11ii_414 == 1'd0))
		next_state = LEGUP_F_main_BB__415_120;
LEGUP_F_main_BB_backedge12ii_121:
	if ((main_backedge12ii_420 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge13ii_123;
	else if ((main_backedge12ii_420 == 1'd0))
		next_state = LEGUP_F_main_BB__421_122;
LEGUP_F_main_BB_backedge13ii_123:
		next_state = LEGUP_F_main_BB_gsm_divexiti_124;
LEGUP_F_main_BB_backedge1ii_99:
	if ((main_backedge1ii_354 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge2ii_101;
	else if ((main_backedge1ii_354 == 1'd0))
		next_state = LEGUP_F_main_BB__355_100;
LEGUP_F_main_BB_backedge2ii_101:
	if ((main_backedge2ii_360 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge3ii_103;
	else if ((main_backedge2ii_360 == 1'd0))
		next_state = LEGUP_F_main_BB__361_102;
LEGUP_F_main_BB_backedge3ii_103:
	if ((main_backedge3ii_366 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge4ii_105;
	else if ((main_backedge3ii_366 == 1'd0))
		next_state = LEGUP_F_main_BB__367_104;
LEGUP_F_main_BB_backedge4ii_105:
	if ((main_backedge4ii_372 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge5ii_107;
	else if ((main_backedge4ii_372 == 1'd0))
		next_state = LEGUP_F_main_BB__373_106;
LEGUP_F_main_BB_backedge5ii_107:
	if ((main_backedge5ii_378 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge6ii_109;
	else if ((main_backedge5ii_378 == 1'd0))
		next_state = LEGUP_F_main_BB__379_108;
LEGUP_F_main_BB_backedge6ii_109:
	if ((main_backedge6ii_384 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge7ii_111;
	else if ((main_backedge6ii_384 == 1'd0))
		next_state = LEGUP_F_main_BB__385_110;
LEGUP_F_main_BB_backedge7ii_111:
	if ((main_backedge7ii_390 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge8ii_113;
	else if ((main_backedge7ii_390 == 1'd0))
		next_state = LEGUP_F_main_BB__391_112;
LEGUP_F_main_BB_backedge8ii_113:
	if ((main_backedge8ii_396 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge9ii_115;
	else if ((main_backedge8ii_396 == 1'd0))
		next_state = LEGUP_F_main_BB__397_114;
LEGUP_F_main_BB_backedge9ii_115:
	if ((main_backedge9ii_402 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge10ii_117;
	else if ((main_backedge9ii_402 == 1'd0))
		next_state = LEGUP_F_main_BB__403_116;
LEGUP_F_main_BB_gsm_absexiti9_89:
		next_state = LEGUP_F_main_BB_gsm_absexiti9_90;
LEGUP_F_main_BB_gsm_absexiti9_90:
	if ((main_gsm_absexiti9_337 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader14i_91;
	else if ((main_gsm_absexiti9_337 == 1'd0))
		next_state = LEGUP_F_main_BB__340_96;
LEGUP_F_main_BB_gsm_absexiti_9:
	if ((main_gsm_absexiti_exitcond45 == 1'd1))
		next_state = LEGUP_F_main_BB__13_10;
	else if ((main_gsm_absexiti_exitcond45 == 1'd0))
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB_gsm_absexitii_166:
	if ((main_gsm_absexitii_496 == 1'd1))
		next_state = LEGUP_F_main_BB__497_167;
	else if ((main_gsm_absexitii_496 == 1'd0))
		next_state = LEGUP_F_main_BB__501_168;
LEGUP_F_main_BB_gsm_addexit13i_221:
	if ((main_gsm_addexit13i_622 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_225;
	else if ((main_gsm_addexit13i_622 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit13threadi_222;
LEGUP_F_main_BB_gsm_addexit13threadi_222:
	if ((main_gsm_addexit13threadi_orcond169i == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_225;
	else if ((main_gsm_addexit13threadi_orcond169i == 1'd0))
		next_state = LEGUP_F_main_BB__625_223;
LEGUP_F_main_BB_gsm_addexit17i_213:
	if ((main_gsm_addexit17i_604 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_217;
	else if ((main_gsm_addexit17i_604 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit17threadi_214;
LEGUP_F_main_BB_gsm_addexit17threadi_214:
	if ((main_gsm_addexit17threadi_orcond168i == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_217;
	else if ((main_gsm_addexit17threadi_orcond168i == 1'd0))
		next_state = LEGUP_F_main_BB__607_215;
LEGUP_F_main_BB_gsm_addexit21i_205:
	if ((main_gsm_addexit21i_586 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_209;
	else if ((main_gsm_addexit21i_586 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit21threadi_206;
LEGUP_F_main_BB_gsm_addexit21threadi_206:
	if ((main_gsm_addexit21threadi_orcond167i == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_209;
	else if ((main_gsm_addexit21threadi_orcond167i == 1'd0))
		next_state = LEGUP_F_main_BB__589_207;
LEGUP_F_main_BB_gsm_addexit25i_197:
	if ((main_gsm_addexit25i_568 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_201;
	else if ((main_gsm_addexit25i_568 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit25threadi_198;
LEGUP_F_main_BB_gsm_addexit25threadi_198:
	if ((main_gsm_addexit25threadi_orcond166i == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_201;
	else if ((main_gsm_addexit25threadi_orcond166i == 1'd0))
		next_state = LEGUP_F_main_BB__571_199;
LEGUP_F_main_BB_gsm_addexit29i_189:
	if ((main_gsm_addexit29i_550 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_193;
	else if ((main_gsm_addexit29i_550 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit29threadi_190;
LEGUP_F_main_BB_gsm_addexit29threadi_190:
	if ((main_gsm_addexit29threadi_orcond165i == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_193;
	else if ((main_gsm_addexit29threadi_orcond165i == 1'd0))
		next_state = LEGUP_F_main_BB__553_191;
LEGUP_F_main_BB_gsm_addexit3i_147:
		next_state = LEGUP_F_main_BB_gsm_addexit3i_148;
LEGUP_F_main_BB_gsm_addexit3i_148:
	if ((main_gsm_addexit3i_orcondii == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti13_151;
	else if ((main_gsm_addexit3i_orcondii == 1'd0))
		next_state = LEGUP_F_main_BB__477_149;
LEGUP_F_main_BB_gsm_addexit8i_136:
		next_state = LEGUP_F_main_BB_gsm_addexit8i_137;
LEGUP_F_main_BB_gsm_addexit8i_137:
	if ((main_gsm_addexit8i_453_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei14_156;
	else if ((main_gsm_addexit8i_453_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph27ipreheader_138;
LEGUP_F_main_BB_gsm_addexit9i_229:
	if ((main_gsm_addexit9i_640 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
	else if ((main_gsm_addexit9i_640 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_addexit9threadi_230;
LEGUP_F_main_BB_gsm_addexit9threadi_230:
	if ((main_gsm_addexit9threadi_orcond170i == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
	else if ((main_gsm_addexit9threadi_orcond170i == 1'd0))
		next_state = LEGUP_F_main_BB__643_231;
LEGUP_F_main_BB_gsm_addexiti_153:
		next_state = LEGUP_F_main_BB_gsm_addexiti_154;
LEGUP_F_main_BB_gsm_addexiti_154:
	if ((main_gsm_addexiti_exitcond20_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgei14loopexit_155;
	else if ((main_gsm_addexiti_exitcond20_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph27i_139;
LEGUP_F_main_BB_gsm_divexiti_124:
		next_state = LEGUP_F_main_BB_gsm_divexiti_125;
LEGUP_F_main_BB_gsm_divexiti_125:
	if ((main_gsm_divexiti_429 == 1'd1))
		next_state = LEGUP_F_main_BB__430_126;
	else if ((main_gsm_divexiti_429 == 1'd0))
		next_state = LEGUP_F_main_BB__432_128;
LEGUP_F_main_BB_gsm_mult_rexit11i_133:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit11i_134;
LEGUP_F_main_BB_gsm_mult_rexit11i_134:
	if ((main_gsm_mult_rexit11i_448 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexit8i_136;
	else if ((main_gsm_mult_rexit11i_448 == 1'd0))
		next_state = LEGUP_F_main_BB__449_135;
LEGUP_F_main_BB_gsm_mult_rexit6i_144:
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_145;
LEGUP_F_main_BB_gsm_mult_rexit6i_145:
	if ((main_gsm_mult_rexit6i_469 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexit3i_147;
	else if ((main_gsm_mult_rexit6i_469 == 1'd0))
		next_state = LEGUP_F_main_BB__470_146;
LEGUP_F_main_BB_gsm_mult_rexiti13_151:
	if ((main_gsm_mult_rexiti13_484 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_addexiti_153;
	else if ((main_gsm_mult_rexiti13_484 == 1'd0))
		next_state = LEGUP_F_main_BB__485_152;
LEGUP_F_main_BB_gsm_mult_rexiti_35:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_36;
LEGUP_F_main_BB_gsm_mult_rexiti_36:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_37;
LEGUP_F_main_BB_gsm_mult_rexiti_37:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_38;
LEGUP_F_main_BB_gsm_mult_rexiti_38:
	if ((main_gsm_mult_rexiti_exitcond43_reg == 1'd1))
		next_state = LEGUP_F_main_BB_threadiloopexit3_40;
	else if ((main_gsm_mult_rexiti_exitcond43_reg == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_35;
LEGUP_F_main_BB_gsm_mult_rexitipreheader_27:
		next_state = LEGUP_F_main_BB_gsm_mult_rexiti_35;
LEGUP_F_main_BB_gsm_mult_rexitusi_33:
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_34;
LEGUP_F_main_BB_gsm_mult_rexitusi_34:
	if ((main_gsm_mult_rexitusi_exitcond41_reg == 1'd1))
		next_state = LEGUP_F_main_BB_threadiloopexit_39;
	else if ((main_gsm_mult_rexitusi_exitcond41_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader6splitusi_29;
LEGUP_F_main_BB_gsm_normexiti_81:
		next_state = LEGUP_F_main_BB_gsm_normexiti_82;
LEGUP_F_main_BB_gsm_normexiti_82:
		next_state = LEGUP_F_main_BB_gsm_normexiti_83;
LEGUP_F_main_BB_gsm_normexiti_83:
		next_state = LEGUP_F_main_BB_gsm_normexiti_84;
LEGUP_F_main_BB_gsm_normexiti_84:
		next_state = LEGUP_F_main_BB_gsm_normexiti_85;
LEGUP_F_main_BB_gsm_normexiti_85:
		next_state = LEGUP_F_main_BB_gsm_normexiti_86;
LEGUP_F_main_BB_gsm_normexiti_86:
		next_state = LEGUP_F_main_BB__327_87;
LEGUP_F_main_BB_lrph27i_139:
		next_state = LEGUP_F_main_BB_lrph27i_140;
LEGUP_F_main_BB_lrph27i_140:
		next_state = LEGUP_F_main_BB_lrph27i_141;
LEGUP_F_main_BB_lrph27i_141:
	if ((main_lrph27i_orcondi4i == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexit6i_144;
	else if ((main_lrph27i_orcondi4i == 1'd0))
		next_state = LEGUP_F_main_BB__460_142;
LEGUP_F_main_BB_lrph27ipreheader_138:
		next_state = LEGUP_F_main_BB_lrph27i_139;
LEGUP_F_main_BB_lrphi_93:
		next_state = LEGUP_F_main_BB_lrphi_94;
LEGUP_F_main_BB_lrphi_94:
		next_state = LEGUP_F_main_BB_lrphi_95;
LEGUP_F_main_BB_lrphi_95:
	if ((main_lrphi_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheaderloopexit1_158;
	else if ((main_lrphi_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi_93;
LEGUP_F_main_BB_lrphipreheader_92:
		next_state = LEGUP_F_main_BB_lrphi_93;
LEGUP_F_main_BB_preheader14i_91:
	if ((main_preheader14i_338 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_92;
	else if ((main_preheader14i_338 == 1'd0))
		next_state = LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160;
LEGUP_F_main_BB_preheader4_5:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB_preheader5i_47:
	if ((main_threadi_83_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderipreheader_48;
	else if ((main_threadi_83_reg == 1'd0))
		next_state = LEGUP_F_main_BB_Autocorrelationexit_62;
LEGUP_F_main_BB_preheader6i_26:
	if ((main_preheader6i_65 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader6splitusipreheader_28;
	else if ((main_preheader6i_65 == 1'd0))
		next_state = LEGUP_F_main_BB_gsm_mult_rexitipreheader_27;
LEGUP_F_main_BB_preheader6splitusi_29:
		next_state = LEGUP_F_main_BB_preheader6splitusi_30;
LEGUP_F_main_BB_preheader6splitusi_30:
	if ((main_preheader6splitusi_68 == 1'd1))
		next_state = LEGUP_F_main_BB_gsm_mult_rexitusi_33;
	else if ((main_preheader6splitusi_68 == 1'd0))
		next_state = LEGUP_F_main_BB__69_31;
LEGUP_F_main_BB_preheader6splitusipreheader_28:
		next_state = LEGUP_F_main_BB_preheader6splitusi_29;
LEGUP_F_main_BB_preheader_235:
		next_state = LEGUP_F_main_BB_preheader_236;
LEGUP_F_main_BB_preheader_236:
	if ((main_preheader_673 == 1'd1))
		next_state = LEGUP_F_main_BB__681_239;
	else if ((main_preheader_673 == 1'd0))
		next_state = LEGUP_F_main_BB__683_240;
LEGUP_F_main_BB_preheaderi5_63:
		next_state = LEGUP_F_main_BB__239_64;
LEGUP_F_main_BB_preheaderi_56:
		next_state = LEGUP_F_main_BB_preheaderi_57;
LEGUP_F_main_BB_preheaderi_57:
	if ((main_preheaderi_exitcond27_reg == 1'd1))
		next_state = LEGUP_F_main_BB_Autocorrelationexitloopexit_61;
	else if ((main_preheaderi_exitcond27_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_58;
LEGUP_F_main_BB_preheaderii_97:
	if ((main_preheaderii_348 == 1'd1))
		next_state = LEGUP_F_main_BB_backedge1ii_99;
	else if ((main_preheaderii_348 == 1'd0))
		next_state = LEGUP_F_main_BB__349_98;
LEGUP_F_main_BB_preheaderipreheader_48:
		next_state = LEGUP_F_main_BB_preheaderi_56;
LEGUP_F_main_BB_thread102i_193:
		next_state = LEGUP_F_main_BB_thread102i_194;
LEGUP_F_main_BB_thread102i_194:
		next_state = LEGUP_F_main_BB_thread102i_195;
LEGUP_F_main_BB_thread102i_195:
	if ((main_thread102i_564 == 1'd1))
		next_state = LEGUP_F_main_BB_thread107i_201;
	else if ((main_thread102i_564 == 1'd0))
		next_state = LEGUP_F_main_BB__565_196;
LEGUP_F_main_BB_thread107i_201:
		next_state = LEGUP_F_main_BB_thread107i_202;
LEGUP_F_main_BB_thread107i_202:
		next_state = LEGUP_F_main_BB_thread107i_203;
LEGUP_F_main_BB_thread107i_203:
	if ((main_thread107i_582 == 1'd1))
		next_state = LEGUP_F_main_BB_thread112i_209;
	else if ((main_thread107i_582 == 1'd0))
		next_state = LEGUP_F_main_BB__583_204;
LEGUP_F_main_BB_thread112i_209:
		next_state = LEGUP_F_main_BB_thread112i_210;
LEGUP_F_main_BB_thread112i_210:
		next_state = LEGUP_F_main_BB_thread112i_211;
LEGUP_F_main_BB_thread112i_211:
	if ((main_thread112i_600 == 1'd1))
		next_state = LEGUP_F_main_BB_thread117i_217;
	else if ((main_thread112i_600 == 1'd0))
		next_state = LEGUP_F_main_BB__601_212;
LEGUP_F_main_BB_thread117i_217:
		next_state = LEGUP_F_main_BB_thread117i_218;
LEGUP_F_main_BB_thread117i_218:
		next_state = LEGUP_F_main_BB_thread117i_219;
LEGUP_F_main_BB_thread117i_219:
	if ((main_thread117i_618 == 1'd1))
		next_state = LEGUP_F_main_BB_thread122i_225;
	else if ((main_thread117i_618 == 1'd0))
		next_state = LEGUP_F_main_BB__619_220;
LEGUP_F_main_BB_thread122i_225:
		next_state = LEGUP_F_main_BB_thread122i_226;
LEGUP_F_main_BB_thread122i_226:
		next_state = LEGUP_F_main_BB_thread122i_227;
LEGUP_F_main_BB_thread122i_227:
	if ((main_thread122i_636 == 1'd1))
		next_state = LEGUP_F_main_BB_Quantization_and_codingexit_233;
	else if ((main_thread122i_636 == 1'd0))
		next_state = LEGUP_F_main_BB__637_228;
LEGUP_F_main_BB_thread98i_185:
		next_state = LEGUP_F_main_BB_thread98i_186;
LEGUP_F_main_BB_thread98i_186:
		next_state = LEGUP_F_main_BB_thread98i_187;
LEGUP_F_main_BB_thread98i_187:
	if ((main_thread98i_546 == 1'd1))
		next_state = LEGUP_F_main_BB_thread102i_193;
	else if ((main_thread98i_546 == 1'd0))
		next_state = LEGUP_F_main_BB__547_188;
LEGUP_F_main_BB_threadi4_179:
		next_state = LEGUP_F_main_BB_threadi4_180;
LEGUP_F_main_BB_threadi4_180:
		next_state = LEGUP_F_main_BB_threadi4_181;
LEGUP_F_main_BB_threadi4_181:
	if ((main_threadi4_531 == 1'd1))
		next_state = LEGUP_F_main_BB_thread98i_185;
	else if ((main_threadi4_531 == 1'd0))
		next_state = LEGUP_F_main_BB__532_182;
LEGUP_F_main_BB_threadi_41:
		next_state = LEGUP_F_main_BB_threadi_42;
LEGUP_F_main_BB_threadi_42:
		next_state = LEGUP_F_main_BB_threadi_43;
LEGUP_F_main_BB_threadi_43:
		next_state = LEGUP_F_main_BB_threadi_44;
LEGUP_F_main_BB_threadi_44:
		next_state = LEGUP_F_main_BB_threadi_45;
LEGUP_F_main_BB_threadi_45:
		next_state = LEGUP_F_main_BB_threadi_46;
LEGUP_F_main_BB_threadi_46:
		next_state = LEGUP_F_main_BB__179_49;
LEGUP_F_main_BB_threadii_170:
		next_state = LEGUP_F_main_BB__508_171;
LEGUP_F_main_BB_threadiloopexit3_40:
		next_state = LEGUP_F_main_BB_threadi_41;
LEGUP_F_main_BB_threadiloopexit_39:
		next_state = LEGUP_F_main_BB_threadi_41;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i05 = 32'd0;
	end
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond47_reg == 1'd0))) */ begin
		main_1_i05 = main_1_3_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_i05_reg <= main_1_i05;
		if (start == 1'b0 && ^(main_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i05_reg"); $finish; end
	end
	/* main: %1*/
	/*   %i.05 = phi i32 [ 0, %0 ], [ %3, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_4) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond47_reg == 1'd0))) begin
		main_1_i05_reg <= main_1_i05;
		if (start == 1'b0 && ^(main_1_i05) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_i05_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep48 = getelementptr [160 x i16]* %so, i32 0, i32 %i.05*/
		main_1_scevgep48 = (1'd0 | (2 * main_1_i05_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep48 = getelementptr [160 x i16]* %so, i32 0, i32 %i.05*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep48_reg <= main_1_scevgep48;
		if (start == 1'b0 && ^(main_1_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep49 = getelementptr [160 x i16]* @inData, i32 0, i32 %i.05*/
		main_1_scevgep49 = (1'd0 | (2 * main_1_i05_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep49 = getelementptr [160 x i16]* @inData, i32 0, i32 %i.05*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep49_reg <= main_1_scevgep49;
		if (start == 1'b0 && ^(main_1_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = load i16* %scevgep49, align 2, !tbaa !1*/
		main_1_2 = inData_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = load i16* %scevgep49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add nsw i32 %i.05, 1*/
		main_1_3 = (main_1_i05_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = add nsw i32 %i.05, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond47 = icmp eq i32 %3, 160*/
		main_1_exitcond47 = (main_1_3 == 32'd160);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond47 = icmp eq i32 %3, 160*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_exitcond47_reg <= main_1_exitcond47;
		if (start == 1'b0 && ^(main_1_exitcond47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader4*/
	/*   %LARc11 = ptrtoint [8 x i16]* %LARc to i32*/
if (reset) begin main_preheader4_LARc11 = 0; end
		main_preheader4_LARc11 = 1'd0;
end
always @(posedge clk) begin
	/* main: %.preheader4*/
	/*   %LARc11 = ptrtoint [8 x i16]* %LARc to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader4_5)) begin
		main_preheader4_LARc11_reg <= main_preheader4_LARc11;
		if (start == 1'b0 && ^(main_preheader4_LARc11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader4_LARc11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %smax.030.i = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_smax030i = 16'd0;
	end
	/* main: %4*/
	/*   %smax.030.i = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_9) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond45 == 1'd0))) */ begin
		main_4_smax030i = main_gsm_absexiti_smax0i;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %smax.030.i = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_smax030i_reg <= main_4_smax030i;
		if (start == 1'b0 && ^(main_4_smax030i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_smax030i_reg"); $finish; end
	end
	/* main: %4*/
	/*   %smax.030.i = phi i16 [ %.smax.0.i, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_9) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond45 == 1'd0))) begin
		main_4_smax030i_reg <= main_4_smax030i;
		if (start == 1'b0 && ^(main_4_smax030i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_smax030i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %k.029.i = phi i32 [ %12, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_k029i = 32'd0;
	end
	/* main: %4*/
	/*   %k.029.i = phi i32 [ %12, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_9) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond45 == 1'd0))) */ begin
		main_4_k029i = main_gsm_absexiti_12;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %k.029.i = phi i32 [ %12, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_k029i_reg <= main_4_k029i;
		if (start == 1'b0 && ^(main_4_k029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_k029i_reg"); $finish; end
	end
	/* main: %4*/
	/*   %k.029.i = phi i32 [ %12, %gsm_abs.exit.i ], [ 0, %.preheader4 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_absexiti_9) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_absexiti_exitcond45 == 1'd0))) begin
		main_4_k029i_reg <= main_4_k029i;
		if (start == 1'b0 && ^(main_4_k029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_k029i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep46 = getelementptr [160 x i16]* %so, i32 0, i32 %k.029.i*/
		main_4_scevgep46 = (1'd0 | (2 * main_4_k029i_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep46 = getelementptr [160 x i16]* %so, i32 0, i32 %k.029.i*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_scevgep46_reg <= main_4_scevgep46;
		if (start == 1'b0 && ^(main_4_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = load i16* %scevgep46, align 2, !tbaa !1*/
		main_4_5 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = load i16* %scevgep46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %6 = icmp slt i16 %5, 0*/
		main_4_6 = ($signed(main_4_5) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %6 = icmp slt i16 %5, 0*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_6_reg <= main_4_6;
		if (start == 1'b0 && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %8 = icmp eq i16 %5, -32768*/
		main_7_8 = (main_4_5_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %8 = icmp eq i16 %5, -32768*/
	if ((cur_state == LEGUP_F_main_BB__7_8)) begin
		main_7_8_reg <= main_7_8;
		if (start == 1'b0 && ^(main_7_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %9 = sub i16 0, %5*/
		main_7_9 = (16'd0 - main_4_5_reg);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %9 = sub i16 0, %5*/
	if ((cur_state == LEGUP_F_main_BB__7_8)) begin
		main_7_9_reg <= main_7_9;
		if (start == 1'b0 && ^(main_7_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %7*/
	/*   %..i.i = select i1 %8, i16 32767, i16 %9*/
		main_7_ii = (main_7_8 ? 16'd32767 : main_7_9);
end
always @(posedge clk) begin
	/* main: %7*/
	/*   %..i.i = select i1 %8, i16 32767, i16 %9*/
	if ((cur_state == LEGUP_F_main_BB__7_8)) begin
		main_7_ii_reg <= main_7_ii;
		if (start == 1'b0 && ^(main_7_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_7_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %10 = phi i16 [ %..i.i, %7 ], [ %5, %4 ]*/
	if ((((cur_state == LEGUP_F_main_BB__4_7) & (memory_controller_waitrequest == 1'd0)) & (main_4_6 == 1'd0))) begin
		main_gsm_absexiti_10 = main_4_5;
	end
	/* main: %gsm_abs.exit.i*/
	/*   %10 = phi i16 [ %..i.i, %7 ], [ %5, %4 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__7_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_absexiti_10 = main_7_ii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %10 = phi i16 [ %..i.i, %7 ], [ %5, %4 ]*/
	if ((((cur_state == LEGUP_F_main_BB__4_7) & (memory_controller_waitrequest == 1'd0)) & (main_4_6 == 1'd0))) begin
		main_gsm_absexiti_10_reg <= main_gsm_absexiti_10;
		if (start == 1'b0 && ^(main_gsm_absexiti_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_10_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i*/
	/*   %10 = phi i16 [ %..i.i, %7 ], [ %5, %4 ]*/
	if (((cur_state == LEGUP_F_main_BB__7_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_absexiti_10_reg <= main_gsm_absexiti_10;
		if (start == 1'b0 && ^(main_gsm_absexiti_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %11 = icmp sgt i16 %10, %smax.030.i*/
		main_gsm_absexiti_11 = ($signed(main_gsm_absexiti_10_reg) > $signed(main_4_smax030i_reg));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %11 = icmp sgt i16 %10, %smax.030.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_9)) begin
		main_gsm_absexiti_11_reg <= main_gsm_absexiti_11;
		if (start == 1'b0 && ^(main_gsm_absexiti_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %.smax.0.i = select i1 %11, i16 %10, i16 %smax.030.i*/
		main_gsm_absexiti_smax0i = (main_gsm_absexiti_11 ? main_gsm_absexiti_10_reg : main_4_smax030i_reg);
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %.smax.0.i = select i1 %11, i16 %10, i16 %smax.030.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_9)) begin
		main_gsm_absexiti_smax0i_reg <= main_gsm_absexiti_smax0i;
		if (start == 1'b0 && ^(main_gsm_absexiti_smax0i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_smax0i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %12 = add nsw i32 %k.029.i, 1*/
		main_gsm_absexiti_12 = (main_4_k029i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %12 = add nsw i32 %k.029.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_9)) begin
		main_gsm_absexiti_12_reg <= main_gsm_absexiti_12;
		if (start == 1'b0 && ^(main_gsm_absexiti_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i*/
	/*   %exitcond45 = icmp eq i32 %12, 160*/
		main_gsm_absexiti_exitcond45 = (main_gsm_absexiti_12 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i*/
	/*   %exitcond45 = icmp eq i32 %12, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti_9)) begin
		main_gsm_absexiti_exitcond45_reg <= main_gsm_absexiti_exitcond45;
		if (start == 1'b0 && ^(main_gsm_absexiti_exitcond45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti_exitcond45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %14 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 0*/
if (reset) begin main_13_14 = 0; end
		main_13_14 = 1'd0;
end
always @(posedge clk) begin
	/* main: %13*/
	/*   %14 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__13_10)) begin
		main_13_14_reg <= main_13_14;
		if (start == 1'b0 && ^(main_13_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %15 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 0*/
if (reset) begin main_13_15 = 0; end
		main_13_15 = 1'd0;
end
always @(posedge clk) begin
	/* main: %13*/
	/*   %15 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB__13_10)) begin
		main_13_15_reg <= main_13_15;
		if (start == 1'b0 && ^(main_13_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %13*/
	/*   %16 = icmp eq i16 %.smax.0.i, 0*/
		main_13_16 = (main_gsm_absexiti_smax0i_reg == 16'd0);
end
always @(posedge clk) begin
	/* main: %13*/
	/*   %16 = icmp eq i16 %.smax.0.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__13_10)) begin
		main_13_16_reg <= main_13_16;
		if (start == 1'b0 && ^(main_13_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_13_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %18 = zext i16 %.smax.0.i to i32*/
		main_17_18 = main_gsm_absexiti_smax0i_reg;
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %18 = zext i16 %.smax.0.i to i32*/
	if ((cur_state == LEGUP_F_main_BB__17_11)) begin
		main_17_18_reg <= main_17_18;
		if (start == 1'b0 && ^(main_17_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %19 = shl nuw i32 %18, 16*/
		main_17_19 = (main_17_18 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %19 = shl nuw i32 %18, 16*/
	if ((cur_state == LEGUP_F_main_BB__17_11)) begin
		main_17_19_reg <= main_17_19;
		if (start == 1'b0 && ^(main_17_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %17*/
	/*   %20 = icmp slt i32 %19, 0*/
		main_17_20 = ($signed(main_17_19) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %17*/
	/*   %20 = icmp slt i32 %19, 0*/
	if ((cur_state == LEGUP_F_main_BB__17_11)) begin
		main_17_20_reg <= main_17_20;
		if (start == 1'b0 && ^(main_17_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_17_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %22 = icmp slt i32 %19, -1073741823*/
		main_21_22 = ($signed(main_17_19_reg) < $signed(-32'd1073741823));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %22 = icmp slt i32 %19, -1073741823*/
	if ((cur_state == LEGUP_F_main_BB__21_12)) begin
		main_21_22_reg <= main_21_22;
		if (start == 1'b0 && ^(main_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %23*/
	/*   %24 = xor i32 %19, -1*/
		main_23_24 = (main_17_19_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %23*/
	/*   %24 = xor i32 %19, -1*/
	if ((cur_state == LEGUP_F_main_BB__23_13)) begin
		main_23_24_reg <= main_23_24;
		if (start == 1'b0 && ^(main_23_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_23_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %25*/
	/*   %.0.i1.i = phi i32 [ %24, %23 ], [ %19, %17 ]*/
	if ((((cur_state == LEGUP_F_main_BB__17_11) & (memory_controller_waitrequest == 1'd0)) & (main_17_20 == 1'd0))) begin
		main_25_0i1i = main_17_19;
	end
	/* main: %25*/
	/*   %.0.i1.i = phi i32 [ %24, %23 ], [ %19, %17 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__23_13) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_25_0i1i = main_23_24;
	end
end
always @(posedge clk) begin
	/* main: %25*/
	/*   %.0.i1.i = phi i32 [ %24, %23 ], [ %19, %17 ]*/
	if ((((cur_state == LEGUP_F_main_BB__17_11) & (memory_controller_waitrequest == 1'd0)) & (main_17_20 == 1'd0))) begin
		main_25_0i1i_reg <= main_25_0i1i;
		if (start == 1'b0 && ^(main_25_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_25_0i1i_reg"); $finish; end
	end
	/* main: %25*/
	/*   %.0.i1.i = phi i32 [ %24, %23 ], [ %19, %17 ]*/
	if (((cur_state == LEGUP_F_main_BB__23_13) & (memory_controller_waitrequest == 1'd0))) begin
		main_25_0i1i_reg <= main_25_0i1i;
		if (start == 1'b0 && ^(main_25_0i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_25_0i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %25*/
	/*   %26 = icmp ugt i32 %.0.i1.i, 65535*/
		main_25_26 = (main_25_0i1i_reg > 32'd65535);
end
always @(posedge clk) begin
	/* main: %25*/
	/*   %26 = icmp ugt i32 %.0.i1.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB__25_14)) begin
		main_25_26_reg <= main_25_26;
		if (start == 1'b0 && ^(main_25_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_25_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %28 = icmp ugt i32 %.0.i1.i, 16777215*/
		main_27_28 = (main_25_0i1i_reg > 32'd16777215);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %28 = icmp ugt i32 %.0.i1.i, 16777215*/
	if ((cur_state == LEGUP_F_main_BB__27_15)) begin
		main_27_28_reg <= main_27_28;
		if (start == 1'b0 && ^(main_27_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %30 = lshr i32 %.0.i1.i, 24*/
		main_29_30 = (main_25_0i1i_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %30 = lshr i32 %.0.i1.i, 24*/
	if ((cur_state == LEGUP_F_main_BB__29_16)) begin
		main_29_30_reg <= main_29_30;
		if (start == 1'b0 && ^(main_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %31 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %30*/
		main_29_31 = (1'd0 | (1 * main_29_30));
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %31 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__29_16)) begin
		main_29_31_reg <= main_29_31;
		if (start == 1'b0 && ^(main_29_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %32 = load i8* %31, align 1, !tbaa !5*/
		main_29_32 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %32 = load i8* %31, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__29_17)) begin
		main_29_32_reg <= main_29_32;
		if (start == 1'b0 && ^(main_29_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %33 = zext i8 %32 to i32*/
		main_29_33 = main_29_32;
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %33 = zext i8 %32 to i32*/
	if ((cur_state == LEGUP_F_main_BB__29_17)) begin
		main_29_33_reg <= main_29_33;
		if (start == 1'b0 && ^(main_29_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %34 = add nsw i32 %33, -1*/
		main_29_34 = (main_29_33 + -32'd1);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %34 = add nsw i32 %33, -1*/
	if ((cur_state == LEGUP_F_main_BB__29_17)) begin
		main_29_34_reg <= main_29_34;
		if (start == 1'b0 && ^(main_29_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %36 = lshr i32 %.0.i1.i, 16*/
		main_35_36 = (main_25_0i1i_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %36 = lshr i32 %.0.i1.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__35_18)) begin
		main_35_36_reg <= main_35_36;
		if (start == 1'b0 && ^(main_35_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %37 = and i32 %36, 255*/
		main_35_37 = (main_35_36 & 32'd255);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %37 = and i32 %36, 255*/
	if ((cur_state == LEGUP_F_main_BB__35_18)) begin
		main_35_37_reg <= main_35_37;
		if (start == 1'b0 && ^(main_35_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %38 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %37*/
		main_35_38 = (1'd0 | (1 * main_35_37));
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %38 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %37*/
	if ((cur_state == LEGUP_F_main_BB__35_18)) begin
		main_35_38_reg <= main_35_38;
		if (start == 1'b0 && ^(main_35_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %39 = load i8* %38, align 1, !tbaa !5*/
		main_35_39 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %39 = load i8* %38, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__35_19)) begin
		main_35_39_reg <= main_35_39;
		if (start == 1'b0 && ^(main_35_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %40 = zext i8 %39 to i32*/
		main_35_40 = main_35_39;
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %40 = zext i8 %39 to i32*/
	if ((cur_state == LEGUP_F_main_BB__35_19)) begin
		main_35_40_reg <= main_35_40;
		if (start == 1'b0 && ^(main_35_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %35*/
	/*   %41 = add nuw nsw i32 %40, 7*/
		main_35_41 = (main_35_40 + 32'd7);
end
always @(posedge clk) begin
	/* main: %35*/
	/*   %41 = add nuw nsw i32 %40, 7*/
	if ((cur_state == LEGUP_F_main_BB__35_19)) begin
		main_35_41_reg <= main_35_41;
		if (start == 1'b0 && ^(main_35_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_35_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %43 = and i32 %.0.i1.i, 65280*/
		main_42_43 = (main_25_0i1i_reg & 32'd65280);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %43 = and i32 %.0.i1.i, 65280*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_42_43_reg <= main_42_43;
		if (start == 1'b0 && ^(main_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %44 = icmp eq i32 %43, 0*/
		main_42_44 = (main_42_43 == 32'd0);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %44 = icmp eq i32 %43, 0*/
	if ((cur_state == LEGUP_F_main_BB__42_20)) begin
		main_42_44_reg <= main_42_44;
		if (start == 1'b0 && ^(main_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %46 = lshr i32 %.0.i1.i, 8*/
		main_45_46 = (main_25_0i1i_reg >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %46 = lshr i32 %.0.i1.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__45_21)) begin
		main_45_46_reg <= main_45_46;
		if (start == 1'b0 && ^(main_45_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %47 = and i32 %46, 255*/
		main_45_47 = (main_45_46 & 32'd255);
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %47 = and i32 %46, 255*/
	if ((cur_state == LEGUP_F_main_BB__45_21)) begin
		main_45_47_reg <= main_45_47;
		if (start == 1'b0 && ^(main_45_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %48 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %47*/
		main_45_48 = (1'd0 | (1 * main_45_47));
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %48 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %47*/
	if ((cur_state == LEGUP_F_main_BB__45_21)) begin
		main_45_48_reg <= main_45_48;
		if (start == 1'b0 && ^(main_45_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %49 = load i8* %48, align 1, !tbaa !5*/
		main_45_49 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %49 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__45_22)) begin
		main_45_49_reg <= main_45_49;
		if (start == 1'b0 && ^(main_45_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %50 = zext i8 %49 to i32*/
		main_45_50 = main_45_49;
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %50 = zext i8 %49 to i32*/
	if ((cur_state == LEGUP_F_main_BB__45_22)) begin
		main_45_50_reg <= main_45_50;
		if (start == 1'b0 && ^(main_45_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %45*/
	/*   %51 = add nuw nsw i32 %50, 15*/
		main_45_51 = (main_45_50 + 32'd15);
end
always @(posedge clk) begin
	/* main: %45*/
	/*   %51 = add nuw nsw i32 %50, 15*/
	if ((cur_state == LEGUP_F_main_BB__45_22)) begin
		main_45_51_reg <= main_45_51;
		if (start == 1'b0 && ^(main_45_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_45_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %53 = and i32 %.0.i1.i, 255*/
		main_52_53 = (main_25_0i1i_reg & 32'd255);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %53 = and i32 %.0.i1.i, 255*/
	if ((cur_state == LEGUP_F_main_BB__52_23)) begin
		main_52_53_reg <= main_52_53;
		if (start == 1'b0 && ^(main_52_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %54 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %53*/
		main_52_54 = (1'd0 | (1 * main_52_53));
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %54 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %53*/
	if ((cur_state == LEGUP_F_main_BB__52_23)) begin
		main_52_54_reg <= main_52_54;
		if (start == 1'b0 && ^(main_52_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %55 = load i8* %54, align 1, !tbaa !5*/
		main_52_55 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %55 = load i8* %54, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__52_24)) begin
		main_52_55_reg <= main_52_55;
		if (start == 1'b0 && ^(main_52_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %56 = zext i8 %55 to i32*/
		main_52_56 = main_52_55;
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %56 = zext i8 %55 to i32*/
	if ((cur_state == LEGUP_F_main_BB__52_24)) begin
		main_52_56_reg <= main_52_56;
		if (start == 1'b0 && ^(main_52_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %57 = add nuw nsw i32 %56, 23*/
		main_52_57 = (main_52_56 + 32'd23);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %57 = add nuw nsw i32 %56, 23*/
	if ((cur_state == LEGUP_F_main_BB__52_24)) begin
		main_52_57_reg <= main_52_57;
		if (start == 1'b0 && ^(main_52_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_12) & (memory_controller_waitrequest == 1'd0)) & (main_21_22 == 1'd1))) begin
		main_58_01ii1 = 32'd0;
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	else if (((cur_state == LEGUP_F_main_BB__29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1 = main_29_34;
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	else if (((cur_state == LEGUP_F_main_BB__35_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1 = main_35_41;
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	else if (((cur_state == LEGUP_F_main_BB__45_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1 = main_45_51;
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__52_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_58_01ii1 = main_52_57;
	end
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_12) & (memory_controller_waitrequest == 1'd0)) & (main_21_22 == 1'd1))) begin
		main_58_01ii1_reg <= main_58_01ii1;
		if (start == 1'b0 && ^(main_58_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_01ii1_reg"); $finish; end
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if (((cur_state == LEGUP_F_main_BB__29_17) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1_reg <= main_58_01ii1;
		if (start == 1'b0 && ^(main_58_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_01ii1_reg"); $finish; end
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if (((cur_state == LEGUP_F_main_BB__35_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1_reg <= main_58_01ii1;
		if (start == 1'b0 && ^(main_58_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_01ii1_reg"); $finish; end
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if (((cur_state == LEGUP_F_main_BB__45_22) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1_reg <= main_58_01ii1;
		if (start == 1'b0 && ^(main_58_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_01ii1_reg"); $finish; end
	end
	/* main: %58*/
	/*   %.01.i.i1 = phi i32 [ 0, %21 ], [ %34, %29 ], [ %41, %35 ], [ %51, %45 ], [ %57, %52 ]*/
	if (((cur_state == LEGUP_F_main_BB__52_24) & (memory_controller_waitrequest == 1'd0))) begin
		main_58_01ii1_reg <= main_58_01ii1;
		if (start == 1'b0 && ^(main_58_01ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_01ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %59 = sub i32 4, %.01.i.i1*/
		main_58_59 = (32'd4 - main_58_01ii1_reg);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %59 = sub i32 4, %.01.i.i1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_59_reg <= main_58_59;
		if (start == 1'b0 && ^(main_58_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %sext.i = shl i32 %59, 16*/
		main_58_sexti = (main_58_59 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %sext.i = shl i32 %59, 16*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_sexti_reg <= main_58_sexti;
		if (start == 1'b0 && ^(main_58_sexti) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_sexti_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
		main_58_phitmpi = ($signed(main_58_sexti) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %phitmp.i = ashr exact i32 %sext.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_phitmpi_reg <= main_58_phitmpi;
		if (start == 1'b0 && ^(main_58_phitmpi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_phitmpi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %60 = icmp sgt i32 %sext.i, 0*/
		main_58_60 = ($signed(main_58_sexti) > $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %60 = icmp sgt i32 %sext.i, 0*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_60_reg <= main_58_60;
		if (start == 1'b0 && ^(main_58_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
		main_58_sextoffi = (main_58_sexti + -32'd1);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %sext.off.i = add i32 %sext.i, -1*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_sextoffi_reg <= main_58_sextoffi;
		if (start == 1'b0 && ^(main_58_sextoffi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_sextoffi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %58*/
	/*   %61 = icmp ult i32 %sext.off.i, 327679*/
		main_58_61 = (main_58_sextoffi < 32'd327679);
end
always @(posedge clk) begin
	/* main: %58*/
	/*   %61 = icmp ult i32 %sext.off.i, 327679*/
	if ((cur_state == LEGUP_F_main_BB__58_25)) begin
		main_58_61_reg <= main_58_61;
		if (start == 1'b0 && ^(main_58_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_58_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %62 = add nsw i32 %phitmp.i, -1*/
		main_preheader6i_62 = (main_58_phitmpi_reg + -32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %62 = add nsw i32 %phitmp.i, -1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_62_reg <= main_preheader6i_62;
		if (start == 1'b0 && ^(main_preheader6i_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %63 = lshr i32 16384, %62*/
		main_preheader6i_63 = (32'd16384 >>> (main_preheader6i_62 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %63 = lshr i32 16384, %62*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_63_reg <= main_preheader6i_63;
		if (start == 1'b0 && ^(main_preheader6i_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %64 = trunc i32 %63 to i16*/
		main_preheader6i_64 = main_preheader6i_63[15:0];
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %64 = trunc i32 %63 to i16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_64_reg <= main_preheader6i_64;
		if (start == 1'b0 && ^(main_preheader6i_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %65 = icmp eq i16 %64, -32768*/
		main_preheader6i_65 = (main_preheader6i_64 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %65 = icmp eq i16 %64, -32768*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_65_reg <= main_preheader6i_65;
		if (start == 1'b0 && ^(main_preheader6i_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %sext4.i = shl i32 %63, 16*/
		main_preheader6i_sext4i = (main_preheader6i_63 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %sext4.i = shl i32 %63, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_sext4i_reg <= main_preheader6i_sext4i;
		if (start == 1'b0 && ^(main_preheader6i_sext4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_sext4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.i*/
	/*   %66 = ashr exact i32 %sext4.i, 16*/
		main_preheader6i_66 = ($signed(main_preheader6i_sext4i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader6.i*/
	/*   %66 = ashr exact i32 %sext4.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheader6i_26)) begin
		main_preheader6i_66_reg <= main_preheader6i_66;
		if (start == 1'b0 && ^(main_preheader6i_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6i_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %75, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.split.us.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader6splitusipreheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader6splitusi_k128usi = 32'd0;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %75, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.split.us.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41_reg == 1'd0))) */ begin
		main_preheader6splitusi_k128usi = main_gsm_mult_rexitusi_75_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %75, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.split.us.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader6splitusipreheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader6splitusi_k128usi_reg <= main_preheader6splitusi_k128usi;
		if (start == 1'b0 && ^(main_preheader6splitusi_k128usi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_k128usi_reg"); $finish; end
	end
	/* main: %.preheader6.split.us.i*/
	/*   %k.128.us.i = phi i32 [ %75, %gsm_mult_r.exit.us.i ], [ 0, %.preheader6.split.us.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_34) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexitusi_exitcond41_reg == 1'd0))) begin
		main_preheader6splitusi_k128usi_reg <= main_preheader6splitusi_k128usi;
		if (start == 1'b0 && ^(main_preheader6splitusi_k128usi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_k128usi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %scevgep42 = getelementptr [160 x i16]* %so, i32 0, i32 %k.128.us.i*/
		main_preheader6splitusi_scevgep42 = (1'd0 | (2 * main_preheader6splitusi_k128usi_reg));
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %scevgep42 = getelementptr [160 x i16]* %so, i32 0, i32 %k.128.us.i*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_29)) begin
		main_preheader6splitusi_scevgep42_reg <= main_preheader6splitusi_scevgep42;
		if (start == 1'b0 && ^(main_preheader6splitusi_scevgep42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_scevgep42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %67 = load i16* %scevgep42, align 2, !tbaa !1*/
		main_preheader6splitusi_67 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %67 = load i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_preheader6splitusi_67_reg <= main_preheader6splitusi_67;
		if (start == 1'b0 && ^(main_preheader6splitusi_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader6.split.us.i*/
	/*   %68 = icmp eq i16 %67, -32768*/
		main_preheader6splitusi_68 = (main_preheader6splitusi_67 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.preheader6.split.us.i*/
	/*   %68 = icmp eq i16 %67, -32768*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_30)) begin
		main_preheader6splitusi_68_reg <= main_preheader6splitusi_68;
		if (start == 1'b0 && ^(main_preheader6splitusi_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader6splitusi_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %70 = sext i16 %67 to i32*/
		main_69_70 = $signed(main_preheader6splitusi_67_reg);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %70 = sext i16 %67 to i32*/
	if ((cur_state == LEGUP_F_main_BB__69_31)) begin
		main_69_70_reg <= main_69_70;
		if (start == 1'b0 && ^(main_69_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_70_reg"); $finish; end
	end
end
always @(*) begin
	main_69_71 = main_69_71_stage0_reg;
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %71 = mul nsw i32 %70, %66*/
	if ((cur_state == LEGUP_F_main_BB__69_32)) begin
		main_69_71_reg <= main_69_71;
		if (start == 1'b0 && ^(main_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_71_reg"); $finish; end
	end
	/* main: %69*/
	/*   %71 = mul nsw i32 %70, %66*/
	if ((cur_state == LEGUP_F_main_BB__69_32)) begin
		main_69_71_reg <= main_69_71;
		if (start == 1'b0 && ^(main_69_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %72 = add nsw i32 %71, 16384*/
		main_69_72 = (main_69_71 + 32'd16384);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %72 = add nsw i32 %71, 16384*/
	if ((cur_state == LEGUP_F_main_BB__69_32)) begin
		main_69_72_reg <= main_69_72;
		if (start == 1'b0 && ^(main_69_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %73 = lshr i32 %72, 15*/
		main_69_73 = (main_69_72 >>> (32'd15 % 32));
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %73 = lshr i32 %72, 15*/
	if ((cur_state == LEGUP_F_main_BB__69_32)) begin
		main_69_73_reg <= main_69_73;
		if (start == 1'b0 && ^(main_69_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %69*/
	/*   %74 = trunc i32 %73 to i16*/
		main_69_74 = main_69_73[15:0];
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %74 = trunc i32 %73 to i16*/
	if ((cur_state == LEGUP_F_main_BB__69_32)) begin
		main_69_74_reg <= main_69_74;
		if (start == 1'b0 && ^(main_69_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_69_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %74, %69 ], [ 32767, %.preheader6.split.us.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6splitusi_30) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6splitusi_68 == 1'd1))) begin
		main_gsm_mult_rexitusi_0iusi = 16'd32767;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %74, %69 ], [ 32767, %.preheader6.split.us.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__69_32) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexitusi_0iusi = main_69_74;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %74, %69 ], [ 32767, %.preheader6.split.us.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheader6splitusi_30) & (memory_controller_waitrequest == 1'd0)) & (main_preheader6splitusi_68 == 1'd1))) begin
		main_gsm_mult_rexitusi_0iusi_reg <= main_gsm_mult_rexitusi_0iusi;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_0iusi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_0iusi_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %.0.i.us.i = phi i16 [ %74, %69 ], [ 32767, %.preheader6.split.us.i ]*/
	if (((cur_state == LEGUP_F_main_BB__69_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexitusi_0iusi_reg <= main_gsm_mult_rexitusi_0iusi;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_0iusi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_0iusi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %75 = add nsw i32 %k.128.us.i, 1*/
		main_gsm_mult_rexitusi_75 = (main_preheader6splitusi_k128usi_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %75 = add nsw i32 %k.128.us.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_33)) begin
		main_gsm_mult_rexitusi_75_reg <= main_gsm_mult_rexitusi_75;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %exitcond41 = icmp eq i32 %75, 160*/
		main_gsm_mult_rexitusi_exitcond41 = (main_gsm_mult_rexitusi_75 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.us.i*/
	/*   %exitcond41 = icmp eq i32 %75, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_33)) begin
		main_gsm_mult_rexitusi_exitcond41_reg <= main_gsm_mult_rexitusi_exitcond41;
		if (start == 1'b0 && ^(main_gsm_mult_rexitusi_exitcond41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexitusi_exitcond41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %82, %gsm_mult_r.exit.i ], [ 0, %gsm_mult_r.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_mult_rexitipreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexiti_k128i = 32'd0;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %82, %gsm_mult_r.exit.i ], [ 0, %gsm_mult_r.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond43_reg == 1'd0))) */ begin
		main_gsm_mult_rexiti_k128i = main_gsm_mult_rexiti_82_reg;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %82, %gsm_mult_r.exit.i ], [ 0, %gsm_mult_r.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_mult_rexitipreheader_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexiti_k128i_reg <= main_gsm_mult_rexiti_k128i;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_k128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_k128i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %k.128.i = phi i32 [ %82, %gsm_mult_r.exit.i ], [ 0, %gsm_mult_r.exit.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_38) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti_exitcond43_reg == 1'd0))) begin
		main_gsm_mult_rexiti_k128i_reg <= main_gsm_mult_rexiti_k128i;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_k128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_k128i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %scevgep44 = getelementptr [160 x i16]* %so, i32 0, i32 %k.128.i*/
		main_gsm_mult_rexiti_scevgep44 = (1'd0 | (2 * main_gsm_mult_rexiti_k128i_reg));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %scevgep44 = getelementptr [160 x i16]* %so, i32 0, i32 %k.128.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_35)) begin
		main_gsm_mult_rexiti_scevgep44_reg <= main_gsm_mult_rexiti_scevgep44;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %76 = load i16* %scevgep44, align 2, !tbaa !1*/
		main_gsm_mult_rexiti_76 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %76 = load i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_76_reg <= main_gsm_mult_rexiti_76;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %77 = sext i16 %76 to i32*/
		main_gsm_mult_rexiti_77 = $signed(main_gsm_mult_rexiti_76);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %77 = sext i16 %76 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_36)) begin
		main_gsm_mult_rexiti_77_reg <= main_gsm_mult_rexiti_77;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_77_reg"); $finish; end
	end
end
always @(*) begin
	main_gsm_mult_rexiti_78 = main_gsm_mult_rexiti_78_stage0_reg;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %78 = mul nsw i32 %77, %66*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_78_reg <= main_gsm_mult_rexiti_78;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_78_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %78 = mul nsw i32 %77, %66*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_78_reg <= main_gsm_mult_rexiti_78;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %79 = add nsw i32 %78, 16384*/
		main_gsm_mult_rexiti_79 = (main_gsm_mult_rexiti_78 + 32'd16384);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %79 = add nsw i32 %78, 16384*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_79_reg <= main_gsm_mult_rexiti_79;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %80 = lshr i32 %79, 15*/
		main_gsm_mult_rexiti_80 = (main_gsm_mult_rexiti_79 >>> (32'd15 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %80 = lshr i32 %79, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_80_reg <= main_gsm_mult_rexiti_80;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %81 = trunc i32 %80 to i16*/
		main_gsm_mult_rexiti_81 = main_gsm_mult_rexiti_80[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %81 = trunc i32 %80 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_gsm_mult_rexiti_81_reg <= main_gsm_mult_rexiti_81;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %82 = add nsw i32 %k.128.i, 1*/
		main_gsm_mult_rexiti_82 = (main_gsm_mult_rexiti_k128i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %82 = add nsw i32 %k.128.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_35)) begin
		main_gsm_mult_rexiti_82_reg <= main_gsm_mult_rexiti_82;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %exitcond43 = icmp eq i32 %82, 160*/
		main_gsm_mult_rexiti_exitcond43 = (main_gsm_mult_rexiti_82 == 32'd160);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %exitcond43 = icmp eq i32 %82, 160*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_35)) begin
		main_gsm_mult_rexiti_exitcond43_reg <= main_gsm_mult_rexiti_exitcond43;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti_exitcond43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti_exitcond43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__13_10) & (memory_controller_waitrequest == 1'd0)) & (main_13_16 == 1'd1))) begin
		main_threadi_83 = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_25) & (memory_controller_waitrequest == 1'd0)) & (main_58_61 == 1'd0))) begin
		main_threadi_83 = main_58_60;
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	else if (((cur_state == LEGUP_F_main_BB_threadiloopexit_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_83 = main_58_60_reg;
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadiloopexit3_40) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadi_83 = main_58_60_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__13_10) & (memory_controller_waitrequest == 1'd0)) & (main_13_16 == 1'd1))) begin
		main_threadi_83_reg <= main_threadi_83;
		if (start == 1'b0 && ^(main_threadi_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_83_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_25) & (memory_controller_waitrequest == 1'd0)) & (main_58_61 == 1'd0))) begin
		main_threadi_83_reg <= main_threadi_83;
		if (start == 1'b0 && ^(main_threadi_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_83_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiloopexit_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_83_reg <= main_threadi_83;
		if (start == 1'b0 && ^(main_threadi_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_83_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %83 = phi i1 [ %60, %58 ], [ false, %13 ], [ %60, %.thread.i.loopexit ], [ %60, %.thread.i.loopexit3 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiloopexit3_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_83_reg <= main_threadi_83;
		if (start == 1'b0 && ^(main_threadi_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__13_10) & (memory_controller_waitrequest == 1'd0)) & (main_13_16 == 1'd1))) begin
		main_threadi_scalauto03i = 32'd0;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__58_25) & (memory_controller_waitrequest == 1'd0)) & (main_58_61 == 1'd0))) begin
		main_threadi_scalauto03i = main_58_phitmpi;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	else if (((cur_state == LEGUP_F_main_BB_threadiloopexit_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_scalauto03i = main_58_phitmpi_reg;
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadiloopexit3_40) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadi_scalauto03i = main_58_phitmpi_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__13_10) & (memory_controller_waitrequest == 1'd0)) & (main_13_16 == 1'd1))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__58_25) & (memory_controller_waitrequest == 1'd0)) & (main_58_61 == 1'd0))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiloopexit_39) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %scalauto.03.i = phi i32 [ %phitmp.i, %58 ], [ 0, %13 ], [ %phitmp.i, %.thread.i.loopexit ], [ %phitmp.i, %.thread.i.loopexit3 ]*/
	if (((cur_state == LEGUP_F_main_BB_threadiloopexit3_40) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi_scalauto03i_reg <= main_threadi_scalauto03i;
		if (start == 1'b0 && ^(main_threadi_scalauto03i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_scalauto03i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %84 = load i16* %14, align 2, !tbaa !1*/
		main_threadi_84 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %84 = load i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_84_reg <= main_threadi_84;
		if (start == 1'b0 && ^(main_threadi_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %85 = sext i16 %84 to i32*/
		main_threadi_85 = $signed(main_threadi_84);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %85 = sext i16 %84 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_85_reg <= main_threadi_85;
		if (start == 1'b0 && ^(main_threadi_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_85_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_86 = main_threadi_86_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %86 = mul nsw i32 %85, %85*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_86_reg <= main_threadi_86;
		if (start == 1'b0 && ^(main_threadi_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_86_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %86 = mul nsw i32 %85, %85*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_86_reg <= main_threadi_86;
		if (start == 1'b0 && ^(main_threadi_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %87 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 1*/
if (reset) begin main_threadi_87 = 0; end
		main_threadi_87 = (1'd0 | (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %87 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_87_reg <= main_threadi_87;
		if (start == 1'b0 && ^(main_threadi_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
		main_threadi_88 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_88_reg <= main_threadi_88;
		if (start == 1'b0 && ^(main_threadi_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %89 = sext i16 %88 to i32*/
		main_threadi_89 = $signed(main_threadi_88);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %89 = sext i16 %88 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_threadi_89_reg <= main_threadi_89;
		if (start == 1'b0 && ^(main_threadi_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_89_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_90 = main_threadi_90_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %90 = mul nsw i32 %89, %89*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_90_reg <= main_threadi_90;
		if (start == 1'b0 && ^(main_threadi_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_90_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %90 = mul nsw i32 %89, %89*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_90_reg <= main_threadi_90;
		if (start == 1'b0 && ^(main_threadi_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %91 = add nuw nsw i32 %90, %86*/
		main_threadi_91 = (main_threadi_90 + main_threadi_86);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %91 = add nuw nsw i32 %90, %86*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_91_reg <= main_threadi_91;
		if (start == 1'b0 && ^(main_threadi_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %92 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 2*/
if (reset) begin main_threadi_92 = 0; end
		main_threadi_92 = (1'd0 | (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %92 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_92_reg <= main_threadi_92;
		if (start == 1'b0 && ^(main_threadi_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %93 = load i16* %92, align 2, !tbaa !1*/
		main_threadi_93 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %93 = load i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_93_reg <= main_threadi_93;
		if (start == 1'b0 && ^(main_threadi_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %94 = sext i16 %93 to i32*/
		main_threadi_94 = $signed(main_threadi_93);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %94 = sext i16 %93 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_94_reg <= main_threadi_94;
		if (start == 1'b0 && ^(main_threadi_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_94_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_95 = main_threadi_95_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %95 = mul nsw i32 %94, %94*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_95_reg <= main_threadi_95;
		if (start == 1'b0 && ^(main_threadi_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_95_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %95 = mul nsw i32 %94, %94*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_95_reg <= main_threadi_95;
		if (start == 1'b0 && ^(main_threadi_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %96 = add nuw nsw i32 %95, %91*/
		main_threadi_96 = (main_threadi_95 + main_threadi_91_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %96 = add nuw nsw i32 %95, %91*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_96_reg <= main_threadi_96;
		if (start == 1'b0 && ^(main_threadi_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %97 = add nsw i32 %94, %85*/
		main_threadi_97 = (main_threadi_94 + main_threadi_85_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %97 = add nsw i32 %94, %85*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_97_reg <= main_threadi_97;
		if (start == 1'b0 && ^(main_threadi_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_97_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_98 = main_threadi_98_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %89, %97*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_98_reg <= main_threadi_98;
		if (start == 1'b0 && ^(main_threadi_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_98_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %89, %97*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_98_reg <= main_threadi_98;
		if (start == 1'b0 && ^(main_threadi_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_98_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_99 = main_threadi_99_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %99 = mul nsw i32 %85, %94*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_99_reg <= main_threadi_99;
		if (start == 1'b0 && ^(main_threadi_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_99_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %99 = mul nsw i32 %85, %94*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_99_reg <= main_threadi_99;
		if (start == 1'b0 && ^(main_threadi_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %100 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 3*/
if (reset) begin main_threadi_100 = 0; end
		main_threadi_100 = (1'd0 | (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %100 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_100_reg <= main_threadi_100;
		if (start == 1'b0 && ^(main_threadi_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
		main_threadi_101 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_101_reg <= main_threadi_101;
		if (start == 1'b0 && ^(main_threadi_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %102 = sext i16 %101 to i32*/
		main_threadi_102 = $signed(main_threadi_101);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %102 = sext i16 %101 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_threadi_102_reg <= main_threadi_102;
		if (start == 1'b0 && ^(main_threadi_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_102_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_103 = main_threadi_103_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_103_reg <= main_threadi_103;
		if (start == 1'b0 && ^(main_threadi_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_103_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_103_reg <= main_threadi_103;
		if (start == 1'b0 && ^(main_threadi_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %96*/
		main_threadi_104 = (main_threadi_103 + main_threadi_96);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %104 = add nuw nsw i32 %103, %96*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_104_reg <= main_threadi_104;
		if (start == 1'b0 && ^(main_threadi_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_104_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_105 = main_threadi_105_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %105 = mul nsw i32 %94, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_105_reg <= main_threadi_105;
		if (start == 1'b0 && ^(main_threadi_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_105_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %105 = mul nsw i32 %94, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_105_reg <= main_threadi_105;
		if (start == 1'b0 && ^(main_threadi_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %106 = add nsw i32 %105, %98*/
		main_threadi_106 = (main_threadi_105 + main_threadi_98);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %106 = add nsw i32 %105, %98*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_106_reg <= main_threadi_106;
		if (start == 1'b0 && ^(main_threadi_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_106_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_107 = main_threadi_107_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %89, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_107_reg <= main_threadi_107;
		if (start == 1'b0 && ^(main_threadi_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %89, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_107_reg <= main_threadi_107;
		if (start == 1'b0 && ^(main_threadi_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %108 = add nsw i32 %107, %99*/
		main_threadi_108 = (main_threadi_107 + main_threadi_99);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %108 = add nsw i32 %107, %99*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_108_reg <= main_threadi_108;
		if (start == 1'b0 && ^(main_threadi_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_108_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_109 = main_threadi_109_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %109 = mul nsw i32 %85, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_109_reg <= main_threadi_109;
		if (start == 1'b0 && ^(main_threadi_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_109_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %109 = mul nsw i32 %85, %102*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_109_reg <= main_threadi_109;
		if (start == 1'b0 && ^(main_threadi_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %110 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 4*/
if (reset) begin main_threadi_110 = 0; end
		main_threadi_110 = (1'd0 | (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %110 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_110_reg <= main_threadi_110;
		if (start == 1'b0 && ^(main_threadi_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %111 = load i16* %110, align 2, !tbaa !1*/
		main_threadi_111 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %111 = load i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_111_reg <= main_threadi_111;
		if (start == 1'b0 && ^(main_threadi_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %112 = sext i16 %111 to i32*/
		main_threadi_112 = $signed(main_threadi_111);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %112 = sext i16 %111 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_112_reg <= main_threadi_112;
		if (start == 1'b0 && ^(main_threadi_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_112_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_113 = main_threadi_113_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %112, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_113_reg <= main_threadi_113;
		if (start == 1'b0 && ^(main_threadi_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_113_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %112, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_113_reg <= main_threadi_113;
		if (start == 1'b0 && ^(main_threadi_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %114 = add nuw nsw i32 %113, %104*/
		main_threadi_114 = (main_threadi_113 + main_threadi_104_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %114 = add nuw nsw i32 %113, %104*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_114_reg <= main_threadi_114;
		if (start == 1'b0 && ^(main_threadi_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_114_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_115 = main_threadi_115_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %102, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_115_reg <= main_threadi_115;
		if (start == 1'b0 && ^(main_threadi_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_115_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %102, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_115_reg <= main_threadi_115;
		if (start == 1'b0 && ^(main_threadi_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %106*/
		main_threadi_116 = (main_threadi_115 + main_threadi_106_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %116 = add nsw i32 %115, %106*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_116_reg <= main_threadi_116;
		if (start == 1'b0 && ^(main_threadi_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_116_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_117 = main_threadi_117_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %94, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_117_reg <= main_threadi_117;
		if (start == 1'b0 && ^(main_threadi_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_117_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %94, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_117_reg <= main_threadi_117;
		if (start == 1'b0 && ^(main_threadi_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %118 = add nsw i32 %117, %108*/
		main_threadi_118 = (main_threadi_117 + main_threadi_108_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %118 = add nsw i32 %117, %108*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_118_reg <= main_threadi_118;
		if (start == 1'b0 && ^(main_threadi_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_118_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_119 = main_threadi_119_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %119 = mul nsw i32 %89, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_119_reg <= main_threadi_119;
		if (start == 1'b0 && ^(main_threadi_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_119_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %119 = mul nsw i32 %89, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_119_reg <= main_threadi_119;
		if (start == 1'b0 && ^(main_threadi_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %120 = add nsw i32 %119, %109*/
		main_threadi_120 = (main_threadi_119 + main_threadi_109_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %120 = add nsw i32 %119, %109*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_120_reg <= main_threadi_120;
		if (start == 1'b0 && ^(main_threadi_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_120_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_121 = main_threadi_121_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %85, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_121_reg <= main_threadi_121;
		if (start == 1'b0 && ^(main_threadi_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_121_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %85, %112*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_121_reg <= main_threadi_121;
		if (start == 1'b0 && ^(main_threadi_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %122 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 5*/
if (reset) begin main_threadi_122 = 0; end
		main_threadi_122 = (1'd0 | (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %122 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_122_reg <= main_threadi_122;
		if (start == 1'b0 && ^(main_threadi_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %123 = load i16* %122, align 2, !tbaa !1*/
		main_threadi_123 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %123 = load i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_123_reg <= main_threadi_123;
		if (start == 1'b0 && ^(main_threadi_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %124 = sext i16 %123 to i32*/
		main_threadi_124 = $signed(main_threadi_123);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %124 = sext i16 %123 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_threadi_124_reg <= main_threadi_124;
		if (start == 1'b0 && ^(main_threadi_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_124_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_125 = main_threadi_125_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %124, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_125_reg <= main_threadi_125;
		if (start == 1'b0 && ^(main_threadi_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_125_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %124, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_125_reg <= main_threadi_125;
		if (start == 1'b0 && ^(main_threadi_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %126 = add nuw nsw i32 %125, %114*/
		main_threadi_126 = (main_threadi_125 + main_threadi_114);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %126 = add nuw nsw i32 %125, %114*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_126_reg <= main_threadi_126;
		if (start == 1'b0 && ^(main_threadi_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_126_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_127 = main_threadi_127_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %112, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_127_reg <= main_threadi_127;
		if (start == 1'b0 && ^(main_threadi_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_127_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %112, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_127_reg <= main_threadi_127;
		if (start == 1'b0 && ^(main_threadi_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %116*/
		main_threadi_128 = (main_threadi_127 + main_threadi_116);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %128 = add nsw i32 %127, %116*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_128_reg <= main_threadi_128;
		if (start == 1'b0 && ^(main_threadi_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_128_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_129 = main_threadi_129_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %102, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_129_reg <= main_threadi_129;
		if (start == 1'b0 && ^(main_threadi_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %102, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_129_reg <= main_threadi_129;
		if (start == 1'b0 && ^(main_threadi_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %130 = add nsw i32 %129, %118*/
		main_threadi_130 = (main_threadi_129 + main_threadi_118);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %130 = add nsw i32 %129, %118*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_130_reg <= main_threadi_130;
		if (start == 1'b0 && ^(main_threadi_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_130_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_131 = main_threadi_131_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %131 = mul nsw i32 %94, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_131_reg <= main_threadi_131;
		if (start == 1'b0 && ^(main_threadi_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_131_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %131 = mul nsw i32 %94, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_131_reg <= main_threadi_131;
		if (start == 1'b0 && ^(main_threadi_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %132 = add nsw i32 %131, %120*/
		main_threadi_132 = (main_threadi_131 + main_threadi_120);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %132 = add nsw i32 %131, %120*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_132_reg <= main_threadi_132;
		if (start == 1'b0 && ^(main_threadi_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_132_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_133 = main_threadi_133_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %89, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_133_reg <= main_threadi_133;
		if (start == 1'b0 && ^(main_threadi_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_133_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %89, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_133_reg <= main_threadi_133;
		if (start == 1'b0 && ^(main_threadi_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %134 = add nsw i32 %133, %121*/
		main_threadi_134 = (main_threadi_133 + main_threadi_121);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %134 = add nsw i32 %133, %121*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_134_reg <= main_threadi_134;
		if (start == 1'b0 && ^(main_threadi_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_134_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_135 = main_threadi_135_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %85, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_135_reg <= main_threadi_135;
		if (start == 1'b0 && ^(main_threadi_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_135_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %85, %124*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_135_reg <= main_threadi_135;
		if (start == 1'b0 && ^(main_threadi_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %136 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 6*/
if (reset) begin main_threadi_136 = 0; end
		main_threadi_136 = (1'd0 | (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %136 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_136_reg <= main_threadi_136;
		if (start == 1'b0 && ^(main_threadi_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
		main_threadi_137 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_137_reg <= main_threadi_137;
		if (start == 1'b0 && ^(main_threadi_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %138 = sext i16 %137 to i32*/
		main_threadi_138 = $signed(main_threadi_137);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %138 = sext i16 %137 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_138_reg <= main_threadi_138;
		if (start == 1'b0 && ^(main_threadi_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_138_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_139 = main_threadi_139_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %138, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_139_reg <= main_threadi_139;
		if (start == 1'b0 && ^(main_threadi_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %138, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_139_reg <= main_threadi_139;
		if (start == 1'b0 && ^(main_threadi_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %140 = add nuw nsw i32 %139, %126*/
		main_threadi_140 = (main_threadi_139 + main_threadi_126_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %140 = add nuw nsw i32 %139, %126*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_140_reg <= main_threadi_140;
		if (start == 1'b0 && ^(main_threadi_140) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_140_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_141 = main_threadi_141_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %124, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_141_reg <= main_threadi_141;
		if (start == 1'b0 && ^(main_threadi_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %124, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_141_reg <= main_threadi_141;
		if (start == 1'b0 && ^(main_threadi_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %128*/
		main_threadi_142 = (main_threadi_141 + main_threadi_128_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %142 = add nsw i32 %141, %128*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_142_reg <= main_threadi_142;
		if (start == 1'b0 && ^(main_threadi_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_142_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_143 = main_threadi_143_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %112, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_143_reg <= main_threadi_143;
		if (start == 1'b0 && ^(main_threadi_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_143_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %112, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_143_reg <= main_threadi_143;
		if (start == 1'b0 && ^(main_threadi_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %144 = add nsw i32 %143, %130*/
		main_threadi_144 = (main_threadi_143 + main_threadi_130_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %144 = add nsw i32 %143, %130*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_144_reg <= main_threadi_144;
		if (start == 1'b0 && ^(main_threadi_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_144_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_145 = main_threadi_145_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %145 = mul nsw i32 %102, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_145_reg <= main_threadi_145;
		if (start == 1'b0 && ^(main_threadi_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_145_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %145 = mul nsw i32 %102, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_145_reg <= main_threadi_145;
		if (start == 1'b0 && ^(main_threadi_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %146 = add nsw i32 %145, %132*/
		main_threadi_146 = (main_threadi_145 + main_threadi_132_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %146 = add nsw i32 %145, %132*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_146_reg <= main_threadi_146;
		if (start == 1'b0 && ^(main_threadi_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_146_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_147 = main_threadi_147_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %94, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_147_reg <= main_threadi_147;
		if (start == 1'b0 && ^(main_threadi_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_147_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %94, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_147_reg <= main_threadi_147;
		if (start == 1'b0 && ^(main_threadi_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %148 = add nsw i32 %147, %134*/
		main_threadi_148 = (main_threadi_147 + main_threadi_134_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %148 = add nsw i32 %147, %134*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_148_reg <= main_threadi_148;
		if (start == 1'b0 && ^(main_threadi_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_148_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_149 = main_threadi_149_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %89, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_149_reg <= main_threadi_149;
		if (start == 1'b0 && ^(main_threadi_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_149_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %89, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_149_reg <= main_threadi_149;
		if (start == 1'b0 && ^(main_threadi_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %135*/
		main_threadi_150 = (main_threadi_149 + main_threadi_135_reg);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %150 = add nsw i32 %149, %135*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_150_reg <= main_threadi_150;
		if (start == 1'b0 && ^(main_threadi_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_150_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_151 = main_threadi_151_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %85, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_151_reg <= main_threadi_151;
		if (start == 1'b0 && ^(main_threadi_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_151_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %85, %138*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_151_reg <= main_threadi_151;
		if (start == 1'b0 && ^(main_threadi_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %152 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 7*/
if (reset) begin main_threadi_152 = 0; end
		main_threadi_152 = (1'd0 | (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %152 = getelementptr inbounds [160 x i16]* %so, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_threadi_152_reg <= main_threadi_152;
		if (start == 1'b0 && ^(main_threadi_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %153 = load i16* %152, align 2, !tbaa !1*/
		main_threadi_153 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %153 = load i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_153_reg <= main_threadi_153;
		if (start == 1'b0 && ^(main_threadi_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %154 = sext i16 %153 to i32*/
		main_threadi_154 = $signed(main_threadi_153);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %154 = sext i16 %153 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi_45)) begin
		main_threadi_154_reg <= main_threadi_154;
		if (start == 1'b0 && ^(main_threadi_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_154_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_155 = main_threadi_155_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %154, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_155_reg <= main_threadi_155;
		if (start == 1'b0 && ^(main_threadi_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_155_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %154, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_155_reg <= main_threadi_155;
		if (start == 1'b0 && ^(main_threadi_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %140*/
		main_threadi_156 = (main_threadi_155 + main_threadi_140);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %156 = add nsw i32 %155, %140*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_156_reg <= main_threadi_156;
		if (start == 1'b0 && ^(main_threadi_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_156_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_157 = main_threadi_157_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %138, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_157_reg <= main_threadi_157;
		if (start == 1'b0 && ^(main_threadi_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_157_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %138, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_157_reg <= main_threadi_157;
		if (start == 1'b0 && ^(main_threadi_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %142*/
		main_threadi_158 = (main_threadi_157 + main_threadi_142);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %158 = add nsw i32 %157, %142*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_158_reg <= main_threadi_158;
		if (start == 1'b0 && ^(main_threadi_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_158_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_159 = main_threadi_159_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %124, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_159_reg <= main_threadi_159;
		if (start == 1'b0 && ^(main_threadi_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_159_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %124, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_159_reg <= main_threadi_159;
		if (start == 1'b0 && ^(main_threadi_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %160 = add nsw i32 %159, %144*/
		main_threadi_160 = (main_threadi_159 + main_threadi_144);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %160 = add nsw i32 %159, %144*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_160_reg <= main_threadi_160;
		if (start == 1'b0 && ^(main_threadi_160) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_160_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_161 = main_threadi_161_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %161 = mul nsw i32 %112, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_161_reg <= main_threadi_161;
		if (start == 1'b0 && ^(main_threadi_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_161_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %161 = mul nsw i32 %112, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_161_reg <= main_threadi_161;
		if (start == 1'b0 && ^(main_threadi_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %162 = add nsw i32 %161, %146*/
		main_threadi_162 = (main_threadi_161 + main_threadi_146);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %162 = add nsw i32 %161, %146*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_162_reg <= main_threadi_162;
		if (start == 1'b0 && ^(main_threadi_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_162_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_163 = main_threadi_163_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %102, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_163_reg <= main_threadi_163;
		if (start == 1'b0 && ^(main_threadi_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_163_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %102, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_163_reg <= main_threadi_163;
		if (start == 1'b0 && ^(main_threadi_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
		main_threadi_164 = (main_threadi_163 + main_threadi_148);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %164 = add nsw i32 %163, %148*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_164_reg <= main_threadi_164;
		if (start == 1'b0 && ^(main_threadi_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_164_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_165 = main_threadi_165_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %94, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_165_reg <= main_threadi_165;
		if (start == 1'b0 && ^(main_threadi_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_165_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %94, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_165_reg <= main_threadi_165;
		if (start == 1'b0 && ^(main_threadi_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
		main_threadi_166 = (main_threadi_165 + main_threadi_150);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %166 = add nsw i32 %165, %150*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_166_reg <= main_threadi_166;
		if (start == 1'b0 && ^(main_threadi_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_166_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_167 = main_threadi_167_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %89, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_167_reg <= main_threadi_167;
		if (start == 1'b0 && ^(main_threadi_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_167_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %89, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_167_reg <= main_threadi_167;
		if (start == 1'b0 && ^(main_threadi_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %151*/
		main_threadi_168 = (main_threadi_167 + main_threadi_151);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %168 = add nsw i32 %167, %151*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_168_reg <= main_threadi_168;
		if (start == 1'b0 && ^(main_threadi_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_168_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi_169 = main_threadi_169_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %85, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_169_reg <= main_threadi_169;
		if (start == 1'b0 && ^(main_threadi_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_169_reg"); $finish; end
	end
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %85, %154*/
	if ((cur_state == LEGUP_F_main_BB_threadi_46)) begin
		main_threadi_169_reg <= main_threadi_169;
		if (start == 1'b0 && ^(main_threadi_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %170 = shl i32 %231, 1*/
		main_preheader5i_170 = (main_179_231_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %170 = shl i32 %231, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_170_reg <= main_preheader5i_170;
		if (start == 1'b0 && ^(main_preheader5i_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %171 = shl i32 %227, 1*/
		main_preheader5i_171 = (main_179_227_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %171 = shl i32 %227, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_171_reg <= main_preheader5i_171;
		if (start == 1'b0 && ^(main_preheader5i_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %172 = shl i32 %223, 1*/
		main_preheader5i_172 = (main_179_223_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %172 = shl i32 %223, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_172_reg <= main_preheader5i_172;
		if (start == 1'b0 && ^(main_preheader5i_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %173 = shl i32 %219, 1*/
		main_preheader5i_173 = (main_179_219_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %173 = shl i32 %219, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_173_reg <= main_preheader5i_173;
		if (start == 1'b0 && ^(main_preheader5i_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %174 = shl i32 %215, 1*/
		main_preheader5i_174 = (main_179_215_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %174 = shl i32 %215, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_174_reg <= main_preheader5i_174;
		if (start == 1'b0 && ^(main_preheader5i_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %175 = shl i32 %211, 1*/
		main_preheader5i_175 = (main_179_211_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %175 = shl i32 %211, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_175_reg <= main_preheader5i_175;
		if (start == 1'b0 && ^(main_preheader5i_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %176 = shl i32 %207, 1*/
		main_preheader5i_176 = (main_179_207_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %176 = shl i32 %207, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_176_reg <= main_preheader5i_176;
		if (start == 1'b0 && ^(main_preheader5i_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %177 = shl i32 %203, 1*/
		main_preheader5i_177 = (main_179_203_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %177 = shl i32 %203, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_177_reg <= main_preheader5i_177;
		if (start == 1'b0 && ^(main_preheader5i_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader5.i*/
	/*   %178 = shl i32 %200, 1*/
		main_preheader5i_178 = (main_179_200_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader5.i*/
	/*   %178 = shl i32 %200, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader5i_47)) begin
		main_preheader5i_178_reg <= main_preheader5i_178;
		if (start == 1'b0 && ^(main_preheader5i_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader5i_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %179 ], [ 0, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_indvar30 = 32'd0;
	end
	/* main: %179*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %179 ], [ 0, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_indvar30 = main_179_indvarnext31_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %179 ], [ 0, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_indvar30_reg <= main_179_indvar30;
		if (start == 1'b0 && ^(main_179_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_indvar30_reg"); $finish; end
	end
	/* main: %179*/
	/*   %indvar30 = phi i32 [ %indvar.next31, %179 ], [ 0, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_indvar30_reg <= main_179_indvar30;
		if (start == 1'b0 && ^(main_179_indvar30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_indvar30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %180 = phi i16 [ %197, %179 ], [ %153, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_180 = main_threadi_153_reg;
	end
	/* main: %179*/
	/*   %180 = phi i16 [ %197, %179 ], [ %153, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_180 = main_179_197_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %180 = phi i16 [ %197, %179 ], [ %153, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_180_reg <= main_179_180;
		if (start == 1'b0 && ^(main_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_180_reg"); $finish; end
	end
	/* main: %179*/
	/*   %180 = phi i16 [ %197, %179 ], [ %153, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_180_reg <= main_179_180;
		if (start == 1'b0 && ^(main_179_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %181 = phi i32 [ %231, %179 ], [ 0, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_181 = 32'd0;
	end
	/* main: %179*/
	/*   %181 = phi i32 [ %231, %179 ], [ 0, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_181 = main_179_231;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %181 = phi i32 [ %231, %179 ], [ 0, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_181_reg <= main_179_181;
		if (start == 1'b0 && ^(main_179_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_181_reg"); $finish; end
	end
	/* main: %179*/
	/*   %181 = phi i32 [ %231, %179 ], [ 0, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_181_reg <= main_179_181;
		if (start == 1'b0 && ^(main_179_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %182 = phi i32 [ %227, %179 ], [ %169, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_182 = main_threadi_169;
	end
	/* main: %179*/
	/*   %182 = phi i32 [ %227, %179 ], [ %169, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_182 = main_179_227;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %182 = phi i32 [ %227, %179 ], [ %169, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_182_reg <= main_179_182;
		if (start == 1'b0 && ^(main_179_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_182_reg"); $finish; end
	end
	/* main: %179*/
	/*   %182 = phi i32 [ %227, %179 ], [ %169, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_182_reg <= main_179_182;
		if (start == 1'b0 && ^(main_179_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %183 = phi i32 [ %223, %179 ], [ %168, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_183 = main_threadi_168;
	end
	/* main: %179*/
	/*   %183 = phi i32 [ %223, %179 ], [ %168, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_183 = main_179_223_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %183 = phi i32 [ %223, %179 ], [ %168, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_183_reg <= main_179_183;
		if (start == 1'b0 && ^(main_179_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_183_reg"); $finish; end
	end
	/* main: %179*/
	/*   %183 = phi i32 [ %223, %179 ], [ %168, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_183_reg <= main_179_183;
		if (start == 1'b0 && ^(main_179_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %184 = phi i32 [ %219, %179 ], [ %166, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_184 = main_threadi_166;
	end
	/* main: %179*/
	/*   %184 = phi i32 [ %219, %179 ], [ %166, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_184 = main_179_219_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %184 = phi i32 [ %219, %179 ], [ %166, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_184_reg <= main_179_184;
		if (start == 1'b0 && ^(main_179_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_184_reg"); $finish; end
	end
	/* main: %179*/
	/*   %184 = phi i32 [ %219, %179 ], [ %166, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_184_reg <= main_179_184;
		if (start == 1'b0 && ^(main_179_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %185 = phi i32 [ %215, %179 ], [ %164, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_185 = main_threadi_164;
	end
	/* main: %179*/
	/*   %185 = phi i32 [ %215, %179 ], [ %164, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_185 = main_179_215_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %185 = phi i32 [ %215, %179 ], [ %164, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_185_reg <= main_179_185;
		if (start == 1'b0 && ^(main_179_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_185_reg"); $finish; end
	end
	/* main: %179*/
	/*   %185 = phi i32 [ %215, %179 ], [ %164, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_185_reg <= main_179_185;
		if (start == 1'b0 && ^(main_179_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %186 = phi i32 [ %211, %179 ], [ %162, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_186 = main_threadi_162;
	end
	/* main: %179*/
	/*   %186 = phi i32 [ %211, %179 ], [ %162, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_186 = main_179_211_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %186 = phi i32 [ %211, %179 ], [ %162, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_186_reg <= main_179_186;
		if (start == 1'b0 && ^(main_179_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_186_reg"); $finish; end
	end
	/* main: %179*/
	/*   %186 = phi i32 [ %211, %179 ], [ %162, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_186_reg <= main_179_186;
		if (start == 1'b0 && ^(main_179_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %187 = phi i32 [ %207, %179 ], [ %160, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_187 = main_threadi_160;
	end
	/* main: %179*/
	/*   %187 = phi i32 [ %207, %179 ], [ %160, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_187 = main_179_207_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %187 = phi i32 [ %207, %179 ], [ %160, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_187_reg <= main_179_187;
		if (start == 1'b0 && ^(main_179_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_187_reg"); $finish; end
	end
	/* main: %179*/
	/*   %187 = phi i32 [ %207, %179 ], [ %160, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_187_reg <= main_179_187;
		if (start == 1'b0 && ^(main_179_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %188 = phi i32 [ %203, %179 ], [ %158, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_188 = main_threadi_158;
	end
	/* main: %179*/
	/*   %188 = phi i32 [ %203, %179 ], [ %158, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_188 = main_179_203_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %188 = phi i32 [ %203, %179 ], [ %158, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_188_reg <= main_179_188;
		if (start == 1'b0 && ^(main_179_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_188_reg"); $finish; end
	end
	/* main: %179*/
	/*   %188 = phi i32 [ %203, %179 ], [ %158, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_188_reg <= main_179_188;
		if (start == 1'b0 && ^(main_179_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %189 = phi i32 [ %200, %179 ], [ %156, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_189 = main_threadi_156;
	end
	/* main: %179*/
	/*   %189 = phi i32 [ %200, %179 ], [ %156, %.thread.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) */ begin
		main_179_189 = main_179_200_reg;
	end
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %189 = phi i32 [ %200, %179 ], [ %156, %.thread.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadi_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_179_189_reg <= main_179_189;
		if (start == 1'b0 && ^(main_179_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_189_reg"); $finish; end
	end
	/* main: %179*/
	/*   %189 = phi i32 [ %200, %179 ], [ %156, %.thread.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__179_55) & (memory_controller_waitrequest == 1'd0)) & (main_179_exitcond32_reg == 1'd0))) begin
		main_179_189_reg <= main_179_189;
		if (start == 1'b0 && ^(main_179_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep33 = getelementptr [160 x i16]* %so, i32 0, i32 %indvar30*/
		main_179_scevgep33 = (1'd0 | (2 * main_179_indvar30_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep33 = getelementptr [160 x i16]* %so, i32 0, i32 %indvar30*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_scevgep33_reg <= main_179_scevgep33;
		if (start == 1'b0 && ^(main_179_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %190 = add i32 %indvar30, 1*/
		main_179_190 = (main_179_indvar30_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %190 = add i32 %indvar30, 1*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_190_reg <= main_179_190;
		if (start == 1'b0 && ^(main_179_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep34 = getelementptr [160 x i16]* %so, i32 0, i32 %190*/
		main_179_scevgep34 = (1'd0 | (2 * main_179_190_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep34 = getelementptr [160 x i16]* %so, i32 0, i32 %190*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep34_reg <= main_179_scevgep34;
		if (start == 1'b0 && ^(main_179_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %191 = add i32 %indvar30, 2*/
		main_179_191 = (main_179_indvar30_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %191 = add i32 %indvar30, 2*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_191_reg <= main_179_191;
		if (start == 1'b0 && ^(main_179_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep35 = getelementptr [160 x i16]* %so, i32 0, i32 %191*/
		main_179_scevgep35 = (1'd0 | (2 * main_179_191_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep35 = getelementptr [160 x i16]* %so, i32 0, i32 %191*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep35_reg <= main_179_scevgep35;
		if (start == 1'b0 && ^(main_179_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %192 = add i32 %indvar30, 3*/
		main_179_192 = (main_179_indvar30_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %192 = add i32 %indvar30, 3*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_192_reg <= main_179_192;
		if (start == 1'b0 && ^(main_179_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep36 = getelementptr [160 x i16]* %so, i32 0, i32 %192*/
		main_179_scevgep36 = (1'd0 | (2 * main_179_192_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep36 = getelementptr [160 x i16]* %so, i32 0, i32 %192*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep36_reg <= main_179_scevgep36;
		if (start == 1'b0 && ^(main_179_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %193 = add i32 %indvar30, 4*/
		main_179_193 = (main_179_indvar30_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %193 = add i32 %indvar30, 4*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_193_reg <= main_179_193;
		if (start == 1'b0 && ^(main_179_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_193_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep37 = getelementptr [160 x i16]* %so, i32 0, i32 %193*/
		main_179_scevgep37 = (1'd0 | (2 * main_179_193_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep37 = getelementptr [160 x i16]* %so, i32 0, i32 %193*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep37_reg <= main_179_scevgep37;
		if (start == 1'b0 && ^(main_179_scevgep37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %194 = add i32 %indvar30, 5*/
		main_179_194 = (main_179_indvar30_reg + 32'd5);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %194 = add i32 %indvar30, 5*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_194_reg <= main_179_194;
		if (start == 1'b0 && ^(main_179_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep38 = getelementptr [160 x i16]* %so, i32 0, i32 %194*/
		main_179_scevgep38 = (1'd0 | (2 * main_179_194_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep38 = getelementptr [160 x i16]* %so, i32 0, i32 %194*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep38_reg <= main_179_scevgep38;
		if (start == 1'b0 && ^(main_179_scevgep38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %195 = add i32 %indvar30, 6*/
		main_179_195 = (main_179_indvar30_reg + 32'd6);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %195 = add i32 %indvar30, 6*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_195_reg <= main_179_195;
		if (start == 1'b0 && ^(main_179_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep39 = getelementptr [160 x i16]* %so, i32 0, i32 %195*/
		main_179_scevgep39 = (1'd0 | (2 * main_179_195_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep39 = getelementptr [160 x i16]* %so, i32 0, i32 %195*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep39_reg <= main_179_scevgep39;
		if (start == 1'b0 && ^(main_179_scevgep39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %196 = add i32 %indvar30, 8*/
		main_179_196 = (main_179_indvar30_reg + 32'd8);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %196 = add i32 %indvar30, 8*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_196_reg <= main_179_196;
		if (start == 1'b0 && ^(main_179_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %scevgep40 = getelementptr [160 x i16]* %so, i32 0, i32 %196*/
		main_179_scevgep40 = (1'd0 | (2 * main_179_196_reg));
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %scevgep40 = getelementptr [160 x i16]* %so, i32 0, i32 %196*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_179_scevgep40_reg <= main_179_scevgep40;
		if (start == 1'b0 && ^(main_179_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_scevgep40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %197 = load i16* %scevgep40, align 2, !tbaa !1*/
		main_179_197 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %197 = load i16* %scevgep40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_179_197_reg <= main_179_197;
		if (start == 1'b0 && ^(main_179_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %198 = sext i16 %197 to i32*/
		main_179_198 = $signed(main_179_197);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %198 = sext i16 %197 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_179_198_reg <= main_179_198;
		if (start == 1'b0 && ^(main_179_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_198_reg"); $finish; end
	end
end
always @(*) begin
	main_179_199 = main_179_199_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %199 = mul nsw i32 %198, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_199_reg <= main_179_199;
		if (start == 1'b0 && ^(main_179_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_199_reg"); $finish; end
	end
	/* main: %179*/
	/*   %199 = mul nsw i32 %198, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_199_reg <= main_179_199;
		if (start == 1'b0 && ^(main_179_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %200 = add nsw i32 %199, %189*/
		main_179_200 = (main_179_199 + main_179_189_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %200 = add nsw i32 %199, %189*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_200_reg <= main_179_200;
		if (start == 1'b0 && ^(main_179_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %201 = sext i16 %180 to i32*/
		main_179_201 = $signed(main_179_180_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %201 = sext i16 %180 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_201_reg <= main_179_201;
		if (start == 1'b0 && ^(main_179_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_201_reg"); $finish; end
	end
end
always @(*) begin
	main_179_202 = main_179_202_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %202 = mul nsw i32 %201, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_202_reg <= main_179_202;
		if (start == 1'b0 && ^(main_179_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_202_reg"); $finish; end
	end
	/* main: %179*/
	/*   %202 = mul nsw i32 %201, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_202_reg <= main_179_202;
		if (start == 1'b0 && ^(main_179_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %203 = add nsw i32 %202, %188*/
		main_179_203 = (main_179_202 + main_179_188_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %203 = add nsw i32 %202, %188*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_203_reg <= main_179_203;
		if (start == 1'b0 && ^(main_179_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %204 = load i16* %scevgep39, align 2, !tbaa !1*/
		main_179_204 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %204 = load i16* %scevgep39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_179_204_reg <= main_179_204;
		if (start == 1'b0 && ^(main_179_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %205 = sext i16 %204 to i32*/
		main_179_205 = $signed(main_179_204);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %205 = sext i16 %204 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_179_205_reg <= main_179_205;
		if (start == 1'b0 && ^(main_179_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_205_reg"); $finish; end
	end
end
always @(*) begin
	main_179_206 = main_179_206_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %206 = mul nsw i32 %205, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_206_reg <= main_179_206;
		if (start == 1'b0 && ^(main_179_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_206_reg"); $finish; end
	end
	/* main: %179*/
	/*   %206 = mul nsw i32 %205, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_206_reg <= main_179_206;
		if (start == 1'b0 && ^(main_179_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %207 = add nsw i32 %206, %187*/
		main_179_207 = (main_179_206 + main_179_187_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %207 = add nsw i32 %206, %187*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_207_reg <= main_179_207;
		if (start == 1'b0 && ^(main_179_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %208 = load i16* %scevgep38, align 2, !tbaa !1*/
		main_179_208 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %208 = load i16* %scevgep38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_208_reg <= main_179_208;
		if (start == 1'b0 && ^(main_179_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %209 = sext i16 %208 to i32*/
		main_179_209 = $signed(main_179_208);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %209 = sext i16 %208 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_209_reg <= main_179_209;
		if (start == 1'b0 && ^(main_179_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_209_reg"); $finish; end
	end
end
always @(*) begin
	main_179_210 = main_179_210_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %210 = mul nsw i32 %209, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_210_reg <= main_179_210;
		if (start == 1'b0 && ^(main_179_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_210_reg"); $finish; end
	end
	/* main: %179*/
	/*   %210 = mul nsw i32 %209, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_210_reg <= main_179_210;
		if (start == 1'b0 && ^(main_179_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_210_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %211 = add nsw i32 %210, %186*/
		main_179_211 = (main_179_210 + main_179_186_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %211 = add nsw i32 %210, %186*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_211_reg <= main_179_211;
		if (start == 1'b0 && ^(main_179_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %212 = load i16* %scevgep37, align 2, !tbaa !1*/
		main_179_212 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %212 = load i16* %scevgep37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_212_reg <= main_179_212;
		if (start == 1'b0 && ^(main_179_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %213 = sext i16 %212 to i32*/
		main_179_213 = $signed(main_179_212);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %213 = sext i16 %212 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_179_213_reg <= main_179_213;
		if (start == 1'b0 && ^(main_179_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_213_reg"); $finish; end
	end
end
always @(*) begin
	main_179_214 = main_179_214_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %214 = mul nsw i32 %213, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_214_reg <= main_179_214;
		if (start == 1'b0 && ^(main_179_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_214_reg"); $finish; end
	end
	/* main: %179*/
	/*   %214 = mul nsw i32 %213, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_214_reg <= main_179_214;
		if (start == 1'b0 && ^(main_179_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %215 = add nsw i32 %214, %185*/
		main_179_215 = (main_179_214 + main_179_185_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %215 = add nsw i32 %214, %185*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_215_reg <= main_179_215;
		if (start == 1'b0 && ^(main_179_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %216 = load i16* %scevgep36, align 2, !tbaa !1*/
		main_179_216 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %216 = load i16* %scevgep36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_216_reg <= main_179_216;
		if (start == 1'b0 && ^(main_179_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %217 = sext i16 %216 to i32*/
		main_179_217 = $signed(main_179_216);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %217 = sext i16 %216 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_217_reg <= main_179_217;
		if (start == 1'b0 && ^(main_179_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_217_reg"); $finish; end
	end
end
always @(*) begin
	main_179_218 = main_179_218_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %218 = mul nsw i32 %217, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_218_reg <= main_179_218;
		if (start == 1'b0 && ^(main_179_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_218_reg"); $finish; end
	end
	/* main: %179*/
	/*   %218 = mul nsw i32 %217, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_218_reg <= main_179_218;
		if (start == 1'b0 && ^(main_179_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %219 = add nsw i32 %218, %184*/
		main_179_219 = (main_179_218 + main_179_184_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %219 = add nsw i32 %218, %184*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_219_reg <= main_179_219;
		if (start == 1'b0 && ^(main_179_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %220 = load i16* %scevgep35, align 2, !tbaa !1*/
		main_179_220 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %220 = load i16* %scevgep35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_220_reg <= main_179_220;
		if (start == 1'b0 && ^(main_179_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %221 = sext i16 %220 to i32*/
		main_179_221 = $signed(main_179_220);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %221 = sext i16 %220 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_179_221_reg <= main_179_221;
		if (start == 1'b0 && ^(main_179_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_221_reg"); $finish; end
	end
end
always @(*) begin
	main_179_222 = main_179_222_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %222 = mul nsw i32 %221, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_222_reg <= main_179_222;
		if (start == 1'b0 && ^(main_179_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_222_reg"); $finish; end
	end
	/* main: %179*/
	/*   %222 = mul nsw i32 %221, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_222_reg <= main_179_222;
		if (start == 1'b0 && ^(main_179_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %223 = add nsw i32 %222, %183*/
		main_179_223 = (main_179_222 + main_179_183_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %223 = add nsw i32 %222, %183*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_223_reg <= main_179_223;
		if (start == 1'b0 && ^(main_179_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %224 = load i16* %scevgep34, align 2, !tbaa !1*/
		main_179_224 = main_0_so_out_a;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %224 = load i16* %scevgep34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_224_reg <= main_179_224;
		if (start == 1'b0 && ^(main_179_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %225 = sext i16 %224 to i32*/
		main_179_225 = $signed(main_179_224);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %225 = sext i16 %224 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_225_reg <= main_179_225;
		if (start == 1'b0 && ^(main_179_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_225_reg"); $finish; end
	end
end
always @(*) begin
	main_179_226 = main_179_226_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %226 = mul nsw i32 %225, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_226_reg <= main_179_226;
		if (start == 1'b0 && ^(main_179_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_226_reg"); $finish; end
	end
	/* main: %179*/
	/*   %226 = mul nsw i32 %225, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_226_reg <= main_179_226;
		if (start == 1'b0 && ^(main_179_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %227 = add nsw i32 %226, %182*/
		main_179_227 = (main_179_226 + main_179_182_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %227 = add nsw i32 %226, %182*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_227_reg <= main_179_227;
		if (start == 1'b0 && ^(main_179_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %228 = load i16* %scevgep33, align 2, !tbaa !1*/
		main_179_228 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %228 = load i16* %scevgep33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_228_reg <= main_179_228;
		if (start == 1'b0 && ^(main_179_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %229 = sext i16 %228 to i32*/
		main_179_229 = $signed(main_179_228);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %229 = sext i16 %228 to i32*/
	if ((cur_state == LEGUP_F_main_BB__179_54)) begin
		main_179_229_reg <= main_179_229;
		if (start == 1'b0 && ^(main_179_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_229_reg"); $finish; end
	end
end
always @(*) begin
	main_179_230 = main_179_230_stage0_reg;
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %230 = mul nsw i32 %229, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_230_reg <= main_179_230;
		if (start == 1'b0 && ^(main_179_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_230_reg"); $finish; end
	end
	/* main: %179*/
	/*   %230 = mul nsw i32 %229, %198*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_230_reg <= main_179_230;
		if (start == 1'b0 && ^(main_179_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %231 = add nsw i32 %230, %181*/
		main_179_231 = (main_179_230 + main_179_181_reg);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %231 = add nsw i32 %230, %181*/
	if ((cur_state == LEGUP_F_main_BB__179_55)) begin
		main_179_231_reg <= main_179_231;
		if (start == 1'b0 && ^(main_179_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %indvar.next31 = add i32 %indvar30, 1*/
		main_179_indvarnext31 = (main_179_indvar30_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %indvar.next31 = add i32 %indvar30, 1*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_indvarnext31_reg <= main_179_indvarnext31;
		if (start == 1'b0 && ^(main_179_indvarnext31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_indvarnext31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %179*/
	/*   %exitcond32 = icmp eq i32 %indvar.next31, 152*/
		main_179_exitcond32 = (main_179_indvarnext31 == 32'd152);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %exitcond32 = icmp eq i32 %indvar.next31, 152*/
	if ((cur_state == LEGUP_F_main_BB__179_49)) begin
		main_179_exitcond32_reg <= main_179_exitcond32;
		if (start == 1'b0 && ^(main_179_exitcond32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_179_exitcond32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar25 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next26, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar25 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar25 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next26, %._crit_edge.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_60) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi_indvar25 = main__crit_edgei_indvarnext26_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar25 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next26, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar25_reg <= main_preheaderi_indvar25;
		if (start == 1'b0 && ^(main_preheaderi_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar25_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar25 = phi i32 [ 0, %.preheader.i.preheader ], [ %indvar.next26, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar25_reg <= main_preheaderi_indvar25;
		if (start == 1'b0 && ^(main_preheaderi_indvar25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %232 = phi i16 [ %84, %.preheader.i.preheader ], [ %.pre.i, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_232 = main_threadi_84_reg;
	end
	/* main: %.preheader.i*/
	/*   %232 = phi i16 [ %84, %.preheader.i.preheader ], [ %.pre.i, %._crit_edge.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edgei_60) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheaderi_232 = main__crit_edgei_prei;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %232 = phi i16 [ %84, %.preheader.i.preheader ], [ %.pre.i, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_232_reg <= main_preheaderi_232;
		if (start == 1'b0 && ^(main_preheaderi_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_232_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %232 = phi i16 [ %84, %.preheader.i.preheader ], [ %.pre.i, %._crit_edge.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgei_60) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_232_reg <= main_preheaderi_232;
		if (start == 1'b0 && ^(main_preheaderi_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %.08.i = getelementptr [160 x i16]* %so, i32 0, i32 %indvar25*/
		main_preheaderi_08i = (1'd0 | (2 * main_preheaderi_indvar25_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %.08.i = getelementptr [160 x i16]* %so, i32 0, i32 %indvar25*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_preheaderi_08i_reg <= main_preheaderi_08i;
		if (start == 1'b0 && ^(main_preheaderi_08i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_08i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %233 = sext i16 %232 to i32*/
		main_preheaderi_233 = $signed(main_preheaderi_232_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %233 = sext i16 %232 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_preheaderi_233_reg <= main_preheaderi_233;
		if (start == 1'b0 && ^(main_preheaderi_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %234 = shl i32 %233, %scalauto.03.i*/
		main_preheaderi_234 = (main_preheaderi_233 <<< (main_threadi_scalauto03i_reg % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %234 = shl i32 %233, %scalauto.03.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_preheaderi_234_reg <= main_preheaderi_234;
		if (start == 1'b0 && ^(main_preheaderi_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %235 = trunc i32 %234 to i16*/
		main_preheaderi_235 = main_preheaderi_234[15:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %235 = trunc i32 %234 to i16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_preheaderi_235_reg <= main_preheaderi_235;
		if (start == 1'b0 && ^(main_preheaderi_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond27 = icmp eq i32 %indvar25, 159*/
		main_preheaderi_exitcond27 = (main_preheaderi_indvar25_reg == 32'd159);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond27 = icmp eq i32 %indvar25, 159*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_preheaderi_exitcond27_reg <= main_preheaderi_exitcond27;
		if (start == 1'b0 && ^(main_preheaderi_exitcond27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %236 = add i32 %indvar25, 1*/
		main__crit_edgei_236 = (main_preheaderi_indvar25_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %236 = add i32 %indvar25, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_58)) begin
		main__crit_edgei_236_reg <= main__crit_edgei_236;
		if (start == 1'b0 && ^(main__crit_edgei_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep29 = getelementptr [160 x i16]* %so, i32 0, i32 %236*/
		main__crit_edgei_scevgep29 = (1'd0 | (2 * main__crit_edgei_236_reg));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep29 = getelementptr [160 x i16]* %so, i32 0, i32 %236*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_59)) begin
		main__crit_edgei_scevgep29_reg <= main__crit_edgei_scevgep29;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %scevgep29, align 2, !tbaa !1*/
		main__crit_edgei_prei = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %scevgep29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_60)) begin
		main__crit_edgei_prei_reg <= main__crit_edgei_prei;
		if (start == 1'b0 && ^(main__crit_edgei_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
		main__crit_edgei_indvarnext26 = (main_preheaderi_indvar25_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %indvar.next26 = add i32 %indvar25, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_58)) begin
		main__crit_edgei_indvarnext26_reg <= main__crit_edgei_indvarnext26;
		if (start == 1'b0 && ^(main__crit_edgei_indvarnext26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_indvarnext26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Autocorrelation.exit*/
	/*   %237 = icmp eq i32 %178, 0*/
		main_Autocorrelationexit_237 = (main_preheader5i_178_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %Autocorrelation.exit*/
	/*   %237 = icmp eq i32 %178, 0*/
	if ((cur_state == LEGUP_F_main_BB_Autocorrelationexit_62)) begin
		main_Autocorrelationexit_237_reg <= main_Autocorrelationexit_237;
		if (start == 1'b0 && ^(main_Autocorrelationexit_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Autocorrelationexit_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %238 = zext i32 %LARc11 to i64*/
		main_preheaderi5_238 = main_preheader4_LARc11_reg;
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %238 = zext i32 %LARc11 to i64*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_63)) begin
		main_preheaderi5_238_reg <= main_preheaderi5_238;
		if (start == 1'b0 && ^(main_preheaderi5_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %indvar8 = phi i64 [ %indvar.next9, %240 ], [ 0, %.preheader.i5 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_indvar8 = 64'd0;
	end
	/* main: %239*/
	/*   %indvar8 = phi i64 [ %indvar.next9, %240 ], [ 0, %.preheader.i5 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__240_66) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_239_indvar8 = main_240_indvarnext9_reg;
	end
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %indvar8 = phi i64 [ %indvar.next9, %240 ], [ 0, %.preheader.i5 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_indvar8_reg <= main_239_indvar8;
		if (start == 1'b0 && ^(main_239_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_indvar8_reg"); $finish; end
	end
	/* main: %239*/
	/*   %indvar8 = phi i64 [ %indvar.next9, %240 ], [ 0, %.preheader.i5 ]*/
	if (((cur_state == LEGUP_F_main_BB__240_66) & (memory_controller_waitrequest == 1'd0))) begin
		main_239_indvar8_reg <= main_239_indvar8;
		if (start == 1'b0 && ^(main_239_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_indvar8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %239*/
	/*   %exitcond10 = icmp eq i64 %indvar8, 8*/
		main_239_exitcond10 = (main_239_indvar8_reg == 64'd8);
end
always @(posedge clk) begin
	/* main: %239*/
	/*   %exitcond10 = icmp eq i64 %indvar8, 8*/
	if ((cur_state == LEGUP_F_main_BB__239_64)) begin
		main_239_exitcond10_reg <= main_239_exitcond10;
		if (start == 1'b0 && ^(main_239_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_239_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %241 = shl i64 %indvar8, 1*/
		main_240_241 = (main_239_indvar8_reg <<< (64'd1 % 64'd64));
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %241 = shl i64 %indvar8, 1*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		main_240_241_reg <= main_240_241;
		if (start == 1'b0 && ^(main_240_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %242 = add i64 %238, %241*/
		main_240_242 = (main_preheaderi5_238_reg + main_240_241);
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %242 = add i64 %238, %241*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		main_240_242_reg <= main_240_242;
		if (start == 1'b0 && ^(main_240_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %243 = trunc i64 %242 to i32*/
		main_240_243 = main_240_242[31:0];
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %243 = trunc i64 %242 to i32*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		main_240_243_reg <= main_240_243;
		if (start == 1'b0 && ^(main_240_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %s.i.0 = inttoptr i32 %243 to i16**/
		main_240_si0 = main_240_243;
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %s.i.0 = inttoptr i32 %243 to i16**/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		main_240_si0_reg <= main_240_si0;
		if (start == 1'b0 && ^(main_240_si0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_si0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %240*/
	/*   %indvar.next9 = add i64 %indvar8, 1*/
		main_240_indvarnext9 = (main_239_indvar8_reg + 64'd1);
end
always @(posedge clk) begin
	/* main: %240*/
	/*   %indvar.next9 = add i64 %indvar8, 1*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		main_240_indvarnext9_reg <= main_240_indvarnext9;
		if (start == 1'b0 && ^(main_240_indvarnext9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_240_indvarnext9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %244*/
	/*   %245 = icmp slt i32 %178, 0*/
		main_244_245 = ($signed(main_preheader5i_178_reg) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %244*/
	/*   %245 = icmp slt i32 %178, 0*/
	if ((cur_state == LEGUP_F_main_BB__244_67)) begin
		main_244_245_reg <= main_244_245;
		if (start == 1'b0 && ^(main_244_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_244_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %246*/
	/*   %247 = icmp slt i32 %178, -1073741823*/
		main_246_247 = ($signed(main_preheader5i_178_reg) < $signed(-32'd1073741823));
end
always @(posedge clk) begin
	/* main: %246*/
	/*   %247 = icmp slt i32 %178, -1073741823*/
	if ((cur_state == LEGUP_F_main_BB__246_68)) begin
		main_246_247_reg <= main_246_247;
		if (start == 1'b0 && ^(main_246_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_246_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %248*/
	/*   %249 = xor i32 %178, -1*/
		main_248_249 = (main_preheader5i_178_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* main: %248*/
	/*   %249 = xor i32 %178, -1*/
	if ((cur_state == LEGUP_F_main_BB__248_69)) begin
		main_248_249_reg <= main_248_249;
		if (start == 1'b0 && ^(main_248_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_248_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %250*/
	/*   %.0.i.i = phi i32 [ %249, %248 ], [ %178, %244 ]*/
	if ((((cur_state == LEGUP_F_main_BB__244_67) & (memory_controller_waitrequest == 1'd0)) & (main_244_245 == 1'd0))) begin
		main_250_0ii = main_preheader5i_178_reg;
	end
	/* main: %250*/
	/*   %.0.i.i = phi i32 [ %249, %248 ], [ %178, %244 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__248_69) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_250_0ii = main_248_249;
	end
end
always @(posedge clk) begin
	/* main: %250*/
	/*   %.0.i.i = phi i32 [ %249, %248 ], [ %178, %244 ]*/
	if ((((cur_state == LEGUP_F_main_BB__244_67) & (memory_controller_waitrequest == 1'd0)) & (main_244_245 == 1'd0))) begin
		main_250_0ii_reg <= main_250_0ii;
		if (start == 1'b0 && ^(main_250_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_250_0ii_reg"); $finish; end
	end
	/* main: %250*/
	/*   %.0.i.i = phi i32 [ %249, %248 ], [ %178, %244 ]*/
	if (((cur_state == LEGUP_F_main_BB__248_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_250_0ii_reg <= main_250_0ii;
		if (start == 1'b0 && ^(main_250_0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_250_0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %250*/
	/*   %251 = icmp ugt i32 %.0.i.i, 65535*/
		main_250_251 = (main_250_0ii_reg > 32'd65535);
end
always @(posedge clk) begin
	/* main: %250*/
	/*   %251 = icmp ugt i32 %.0.i.i, 65535*/
	if ((cur_state == LEGUP_F_main_BB__250_70)) begin
		main_250_251_reg <= main_250_251;
		if (start == 1'b0 && ^(main_250_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_250_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %252*/
	/*   %253 = icmp ugt i32 %.0.i.i, 16777215*/
		main_252_253 = (main_250_0ii_reg > 32'd16777215);
end
always @(posedge clk) begin
	/* main: %252*/
	/*   %253 = icmp ugt i32 %.0.i.i, 16777215*/
	if ((cur_state == LEGUP_F_main_BB__252_71)) begin
		main_252_253_reg <= main_252_253;
		if (start == 1'b0 && ^(main_252_253) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_252_253_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %255 = lshr i32 %.0.i.i, 24*/
		main_254_255 = (main_250_0ii_reg >>> (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %255 = lshr i32 %.0.i.i, 24*/
	if ((cur_state == LEGUP_F_main_BB__254_72)) begin
		main_254_255_reg <= main_254_255;
		if (start == 1'b0 && ^(main_254_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %256 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %255*/
		main_254_256 = (1'd0 | (1 * main_254_255));
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %256 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %255*/
	if ((cur_state == LEGUP_F_main_BB__254_72)) begin
		main_254_256_reg <= main_254_256;
		if (start == 1'b0 && ^(main_254_256) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_256_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %257 = load i8* %256, align 1, !tbaa !5*/
		main_254_257 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %257 = load i8* %256, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__254_73)) begin
		main_254_257_reg <= main_254_257;
		if (start == 1'b0 && ^(main_254_257) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_257_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %258 = zext i8 %257 to i32*/
		main_254_258 = main_254_257;
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %258 = zext i8 %257 to i32*/
	if ((cur_state == LEGUP_F_main_BB__254_73)) begin
		main_254_258_reg <= main_254_258;
		if (start == 1'b0 && ^(main_254_258) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_258_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %259 = add nsw i32 %258, -1*/
		main_254_259 = (main_254_258 + -32'd1);
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %259 = add nsw i32 %258, -1*/
	if ((cur_state == LEGUP_F_main_BB__254_73)) begin
		main_254_259_reg <= main_254_259;
		if (start == 1'b0 && ^(main_254_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %261 = lshr i32 %.0.i.i, 16*/
		main_260_261 = (main_250_0ii_reg >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %261 = lshr i32 %.0.i.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__260_74)) begin
		main_260_261_reg <= main_260_261;
		if (start == 1'b0 && ^(main_260_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %262 = and i32 %261, 255*/
		main_260_262 = (main_260_261 & 32'd255);
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %262 = and i32 %261, 255*/
	if ((cur_state == LEGUP_F_main_BB__260_74)) begin
		main_260_262_reg <= main_260_262;
		if (start == 1'b0 && ^(main_260_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %263 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %262*/
		main_260_263 = (1'd0 | (1 * main_260_262));
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %263 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %262*/
	if ((cur_state == LEGUP_F_main_BB__260_74)) begin
		main_260_263_reg <= main_260_263;
		if (start == 1'b0 && ^(main_260_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
		main_260_264 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__260_75)) begin
		main_260_264_reg <= main_260_264;
		if (start == 1'b0 && ^(main_260_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %265 = zext i8 %264 to i32*/
		main_260_265 = main_260_264;
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %265 = zext i8 %264 to i32*/
	if ((cur_state == LEGUP_F_main_BB__260_75)) begin
		main_260_265_reg <= main_260_265;
		if (start == 1'b0 && ^(main_260_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %260*/
	/*   %266 = add nuw nsw i32 %265, 7*/
		main_260_266 = (main_260_265 + 32'd7);
end
always @(posedge clk) begin
	/* main: %260*/
	/*   %266 = add nuw nsw i32 %265, 7*/
	if ((cur_state == LEGUP_F_main_BB__260_75)) begin
		main_260_266_reg <= main_260_266;
		if (start == 1'b0 && ^(main_260_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_260_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %268 = and i32 %.0.i.i, 65280*/
		main_267_268 = (main_250_0ii_reg & 32'd65280);
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %268 = and i32 %.0.i.i, 65280*/
	if ((cur_state == LEGUP_F_main_BB__267_76)) begin
		main_267_268_reg <= main_267_268;
		if (start == 1'b0 && ^(main_267_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %267*/
	/*   %269 = icmp eq i32 %268, 0*/
		main_267_269 = (main_267_268 == 32'd0);
end
always @(posedge clk) begin
	/* main: %267*/
	/*   %269 = icmp eq i32 %268, 0*/
	if ((cur_state == LEGUP_F_main_BB__267_76)) begin
		main_267_269_reg <= main_267_269;
		if (start == 1'b0 && ^(main_267_269) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_267_269_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %271 = lshr i32 %.0.i.i, 8*/
		main_270_271 = (main_250_0ii_reg >>> (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %271 = lshr i32 %.0.i.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__270_77)) begin
		main_270_271_reg <= main_270_271;
		if (start == 1'b0 && ^(main_270_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %272 = and i32 %271, 255*/
		main_270_272 = (main_270_271 & 32'd255);
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %272 = and i32 %271, 255*/
	if ((cur_state == LEGUP_F_main_BB__270_77)) begin
		main_270_272_reg <= main_270_272;
		if (start == 1'b0 && ^(main_270_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %273 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %272*/
		main_270_273 = (1'd0 | (1 * main_270_272));
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %273 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %272*/
	if ((cur_state == LEGUP_F_main_BB__270_77)) begin
		main_270_273_reg <= main_270_273;
		if (start == 1'b0 && ^(main_270_273) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_273_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %274 = load i8* %273, align 1, !tbaa !5*/
		main_270_274 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %274 = load i8* %273, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__270_78)) begin
		main_270_274_reg <= main_270_274;
		if (start == 1'b0 && ^(main_270_274) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_274_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %275 = zext i8 %274 to i32*/
		main_270_275 = main_270_274;
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %275 = zext i8 %274 to i32*/
	if ((cur_state == LEGUP_F_main_BB__270_78)) begin
		main_270_275_reg <= main_270_275;
		if (start == 1'b0 && ^(main_270_275) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_275_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %270*/
	/*   %276 = add nuw nsw i32 %275, 15*/
		main_270_276 = (main_270_275 + 32'd15);
end
always @(posedge clk) begin
	/* main: %270*/
	/*   %276 = add nuw nsw i32 %275, 15*/
	if ((cur_state == LEGUP_F_main_BB__270_78)) begin
		main_270_276_reg <= main_270_276;
		if (start == 1'b0 && ^(main_270_276) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_270_276_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %278 = and i32 %.0.i.i, 255*/
		main_277_278 = (main_250_0ii_reg & 32'd255);
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %278 = and i32 %.0.i.i, 255*/
	if ((cur_state == LEGUP_F_main_BB__277_79)) begin
		main_277_278_reg <= main_277_278;
		if (start == 1'b0 && ^(main_277_278) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_278_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %279 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %278*/
		main_277_279 = (1'd0 | (1 * main_277_278));
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %279 = getelementptr inbounds [256 x i8]* @bitoff, i32 0, i32 %278*/
	if ((cur_state == LEGUP_F_main_BB__277_79)) begin
		main_277_279_reg <= main_277_279;
		if (start == 1'b0 && ^(main_277_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %280 = load i8* %279, align 1, !tbaa !5*/
		main_277_280 = bitoff_out_a;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %280 = load i8* %279, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_80)) begin
		main_277_280_reg <= main_277_280;
		if (start == 1'b0 && ^(main_277_280) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_280_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %281 = zext i8 %280 to i32*/
		main_277_281 = main_277_280;
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %281 = zext i8 %280 to i32*/
	if ((cur_state == LEGUP_F_main_BB__277_80)) begin
		main_277_281_reg <= main_277_281;
		if (start == 1'b0 && ^(main_277_281) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_281_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %277*/
	/*   %282 = add nuw nsw i32 %281, 23*/
		main_277_282 = (main_277_281 + 32'd23);
end
always @(posedge clk) begin
	/* main: %277*/
	/*   %282 = add nuw nsw i32 %281, 23*/
	if ((cur_state == LEGUP_F_main_BB__277_80)) begin
		main_277_282_reg <= main_277_282;
		if (start == 1'b0 && ^(main_277_282) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_277_282_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if ((((cur_state == LEGUP_F_main_BB__246_68) & (memory_controller_waitrequest == 1'd0)) & (main_246_247 == 1'd1))) begin
		main_gsm_normexiti_01ii6 = 32'd0;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	else if (((cur_state == LEGUP_F_main_BB__254_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_254_259;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	else if (((cur_state == LEGUP_F_main_BB__260_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_260_266;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	else if (((cur_state == LEGUP_F_main_BB__270_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6 = main_270_276;
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__277_80) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_normexiti_01ii6 = main_277_282;
	end
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if ((((cur_state == LEGUP_F_main_BB__246_68) & (memory_controller_waitrequest == 1'd0)) & (main_246_247 == 1'd1))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_73) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if (((cur_state == LEGUP_F_main_BB__260_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if (((cur_state == LEGUP_F_main_BB__270_78) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
	/* main: %gsm_norm.exit.i*/
	/*   %.01.i.i6 = phi i32 [ 0, %246 ], [ %259, %254 ], [ %266, %260 ], [ %276, %270 ], [ %282, %277 ]*/
	if (((cur_state == LEGUP_F_main_BB__277_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_normexiti_01ii6_reg <= main_gsm_normexiti_01ii6;
		if (start == 1'b0 && ^(main_gsm_normexiti_01ii6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_01ii6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %sext.i7 = shl i32 %.01.i.i6, 16*/
		main_gsm_normexiti_sexti7 = (main_gsm_normexiti_01ii6_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %sext.i7 = shl i32 %.01.i.i6, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_sexti7_reg <= main_gsm_normexiti_sexti7;
		if (start == 1'b0 && ^(main_gsm_normexiti_sexti7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_sexti7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %283 = ashr exact i32 %sext.i7, 16*/
		main_gsm_normexiti_283 = ($signed(main_gsm_normexiti_sexti7) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %283 = ashr exact i32 %sext.i7, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_283_reg <= main_gsm_normexiti_283;
		if (start == 1'b0 && ^(main_gsm_normexiti_283) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_283_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %284 = shl i32 %178, %283*/
		main_gsm_normexiti_284 = (main_preheader5i_178_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %284 = shl i32 %178, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_284_reg <= main_gsm_normexiti_284;
		if (start == 1'b0 && ^(main_gsm_normexiti_284) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_284_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %285 = lshr i32 %284, 16*/
		main_gsm_normexiti_285 = (main_gsm_normexiti_284 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %285 = lshr i32 %284, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_285_reg <= main_gsm_normexiti_285;
		if (start == 1'b0 && ^(main_gsm_normexiti_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %286 = trunc i32 %285 to i16*/
		main_gsm_normexiti_286 = main_gsm_normexiti_285[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %286 = trunc i32 %285 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_286_reg <= main_gsm_normexiti_286;
		if (start == 1'b0 && ^(main_gsm_normexiti_286) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_286_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %287 = shl i32 %177, %283*/
		main_gsm_normexiti_287 = (main_preheader5i_177_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %287 = shl i32 %177, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_287_reg <= main_gsm_normexiti_287;
		if (start == 1'b0 && ^(main_gsm_normexiti_287) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_287_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %288 = lshr i32 %287, 16*/
		main_gsm_normexiti_288 = (main_gsm_normexiti_287 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %288 = lshr i32 %287, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_288_reg <= main_gsm_normexiti_288;
		if (start == 1'b0 && ^(main_gsm_normexiti_288) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_288_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %289 = trunc i32 %288 to i16*/
		main_gsm_normexiti_289 = main_gsm_normexiti_288[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %289 = trunc i32 %288 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_289_reg <= main_gsm_normexiti_289;
		if (start == 1'b0 && ^(main_gsm_normexiti_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_289_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %290 = shl i32 %176, %283*/
		main_gsm_normexiti_290 = (main_preheader5i_176_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %290 = shl i32 %176, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_290_reg <= main_gsm_normexiti_290;
		if (start == 1'b0 && ^(main_gsm_normexiti_290) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_290_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %291 = lshr i32 %290, 16*/
		main_gsm_normexiti_291 = (main_gsm_normexiti_290 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %291 = lshr i32 %290, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_291_reg <= main_gsm_normexiti_291;
		if (start == 1'b0 && ^(main_gsm_normexiti_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %292 = trunc i32 %291 to i16*/
		main_gsm_normexiti_292 = main_gsm_normexiti_291[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %292 = trunc i32 %291 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_292_reg <= main_gsm_normexiti_292;
		if (start == 1'b0 && ^(main_gsm_normexiti_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %293 = shl i32 %175, %283*/
		main_gsm_normexiti_293 = (main_preheader5i_175_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %293 = shl i32 %175, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_293_reg <= main_gsm_normexiti_293;
		if (start == 1'b0 && ^(main_gsm_normexiti_293) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_293_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %294 = lshr i32 %293, 16*/
		main_gsm_normexiti_294 = (main_gsm_normexiti_293 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %294 = lshr i32 %293, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_294_reg <= main_gsm_normexiti_294;
		if (start == 1'b0 && ^(main_gsm_normexiti_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %295 = trunc i32 %294 to i16*/
		main_gsm_normexiti_295 = main_gsm_normexiti_294[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %295 = trunc i32 %294 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_295_reg <= main_gsm_normexiti_295;
		if (start == 1'b0 && ^(main_gsm_normexiti_295) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_295_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %296 = shl i32 %174, %283*/
		main_gsm_normexiti_296 = (main_preheader5i_174_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %296 = shl i32 %174, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_296_reg <= main_gsm_normexiti_296;
		if (start == 1'b0 && ^(main_gsm_normexiti_296) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_296_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %297 = lshr i32 %296, 16*/
		main_gsm_normexiti_297 = (main_gsm_normexiti_296 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %297 = lshr i32 %296, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_297_reg <= main_gsm_normexiti_297;
		if (start == 1'b0 && ^(main_gsm_normexiti_297) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_297_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %298 = trunc i32 %297 to i16*/
		main_gsm_normexiti_298 = main_gsm_normexiti_297[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %298 = trunc i32 %297 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_298_reg <= main_gsm_normexiti_298;
		if (start == 1'b0 && ^(main_gsm_normexiti_298) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_298_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %299 = shl i32 %173, %283*/
		main_gsm_normexiti_299 = (main_preheader5i_173_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %299 = shl i32 %173, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_299_reg <= main_gsm_normexiti_299;
		if (start == 1'b0 && ^(main_gsm_normexiti_299) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_299_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %300 = lshr i32 %299, 16*/
		main_gsm_normexiti_300 = (main_gsm_normexiti_299 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %300 = lshr i32 %299, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_300_reg <= main_gsm_normexiti_300;
		if (start == 1'b0 && ^(main_gsm_normexiti_300) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_300_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %301 = trunc i32 %300 to i16*/
		main_gsm_normexiti_301 = main_gsm_normexiti_300[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %301 = trunc i32 %300 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_301_reg <= main_gsm_normexiti_301;
		if (start == 1'b0 && ^(main_gsm_normexiti_301) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_301_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %302 = shl i32 %172, %283*/
		main_gsm_normexiti_302 = (main_preheader5i_172_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %302 = shl i32 %172, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_302_reg <= main_gsm_normexiti_302;
		if (start == 1'b0 && ^(main_gsm_normexiti_302) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_302_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %303 = lshr i32 %302, 16*/
		main_gsm_normexiti_303 = (main_gsm_normexiti_302 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %303 = lshr i32 %302, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_303_reg <= main_gsm_normexiti_303;
		if (start == 1'b0 && ^(main_gsm_normexiti_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %304 = trunc i32 %303 to i16*/
		main_gsm_normexiti_304 = main_gsm_normexiti_303[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %304 = trunc i32 %303 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_304_reg <= main_gsm_normexiti_304;
		if (start == 1'b0 && ^(main_gsm_normexiti_304) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_304_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %305 = shl i32 %171, %283*/
		main_gsm_normexiti_305 = (main_preheader5i_171_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %305 = shl i32 %171, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_305_reg <= main_gsm_normexiti_305;
		if (start == 1'b0 && ^(main_gsm_normexiti_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %306 = lshr i32 %305, 16*/
		main_gsm_normexiti_306 = (main_gsm_normexiti_305 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %306 = lshr i32 %305, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_306_reg <= main_gsm_normexiti_306;
		if (start == 1'b0 && ^(main_gsm_normexiti_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %307 = trunc i32 %306 to i16*/
		main_gsm_normexiti_307 = main_gsm_normexiti_306[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %307 = trunc i32 %306 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_307_reg <= main_gsm_normexiti_307;
		if (start == 1'b0 && ^(main_gsm_normexiti_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %308 = shl i32 %170, %283*/
		main_gsm_normexiti_308 = (main_preheader5i_170_reg <<< (main_gsm_normexiti_283 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %308 = shl i32 %170, %283*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_308_reg <= main_gsm_normexiti_308;
		if (start == 1'b0 && ^(main_gsm_normexiti_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %309 = lshr i32 %308, 16*/
		main_gsm_normexiti_309 = (main_gsm_normexiti_308 >>> (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %309 = lshr i32 %308, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_309_reg <= main_gsm_normexiti_309;
		if (start == 1'b0 && ^(main_gsm_normexiti_309) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_309_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %310 = trunc i32 %309 to i16*/
		main_gsm_normexiti_310 = main_gsm_normexiti_309[15:0];
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %310 = trunc i32 %309 to i16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_310_reg <= main_gsm_normexiti_310;
		if (start == 1'b0 && ^(main_gsm_normexiti_310) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_310_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %311 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 1*/
if (reset) begin main_gsm_normexiti_311 = 0; end
		main_gsm_normexiti_311 = (1'd0 | (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %311 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_311_reg <= main_gsm_normexiti_311;
		if (start == 1'b0 && ^(main_gsm_normexiti_311) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_311_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %312 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 2*/
if (reset) begin main_gsm_normexiti_312 = 0; end
		main_gsm_normexiti_312 = (1'd0 | (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %312 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_312_reg <= main_gsm_normexiti_312;
		if (start == 1'b0 && ^(main_gsm_normexiti_312) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_312_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %313 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 3*/
if (reset) begin main_gsm_normexiti_313 = 0; end
		main_gsm_normexiti_313 = (1'd0 | (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %313 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_313_reg <= main_gsm_normexiti_313;
		if (start == 1'b0 && ^(main_gsm_normexiti_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %314 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 4*/
if (reset) begin main_gsm_normexiti_314 = 0; end
		main_gsm_normexiti_314 = (1'd0 | (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %314 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_314_reg <= main_gsm_normexiti_314;
		if (start == 1'b0 && ^(main_gsm_normexiti_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %315 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 5*/
if (reset) begin main_gsm_normexiti_315 = 0; end
		main_gsm_normexiti_315 = (1'd0 | (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %315 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_315_reg <= main_gsm_normexiti_315;
		if (start == 1'b0 && ^(main_gsm_normexiti_315) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_315_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %316 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 6*/
if (reset) begin main_gsm_normexiti_316 = 0; end
		main_gsm_normexiti_316 = (1'd0 | (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %316 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_316_reg <= main_gsm_normexiti_316;
		if (start == 1'b0 && ^(main_gsm_normexiti_316) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_316_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %317 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 7*/
if (reset) begin main_gsm_normexiti_317 = 0; end
		main_gsm_normexiti_317 = (1'd0 | (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %317 = getelementptr inbounds [9 x i16]* %K.i, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_317_reg <= main_gsm_normexiti_317;
		if (start == 1'b0 && ^(main_gsm_normexiti_317) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_317_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %318 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 0*/
if (reset) begin main_gsm_normexiti_318 = 0; end
		main_gsm_normexiti_318 = 1'd0;
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %318 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_318_reg <= main_gsm_normexiti_318;
		if (start == 1'b0 && ^(main_gsm_normexiti_318) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_318_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %319 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 1*/
if (reset) begin main_gsm_normexiti_319 = 0; end
		main_gsm_normexiti_319 = (1'd0 | (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %319 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_319_reg <= main_gsm_normexiti_319;
		if (start == 1'b0 && ^(main_gsm_normexiti_319) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_319_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %320 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 2*/
if (reset) begin main_gsm_normexiti_320 = 0; end
		main_gsm_normexiti_320 = (1'd0 | (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %320 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_320_reg <= main_gsm_normexiti_320;
		if (start == 1'b0 && ^(main_gsm_normexiti_320) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_320_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %321 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 3*/
if (reset) begin main_gsm_normexiti_321 = 0; end
		main_gsm_normexiti_321 = (1'd0 | (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %321 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_321_reg <= main_gsm_normexiti_321;
		if (start == 1'b0 && ^(main_gsm_normexiti_321) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_321_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %322 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 4*/
if (reset) begin main_gsm_normexiti_322 = 0; end
		main_gsm_normexiti_322 = (1'd0 | (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %322 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_322_reg <= main_gsm_normexiti_322;
		if (start == 1'b0 && ^(main_gsm_normexiti_322) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_322_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %323 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 5*/
if (reset) begin main_gsm_normexiti_323 = 0; end
		main_gsm_normexiti_323 = (1'd0 | (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %323 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_323_reg <= main_gsm_normexiti_323;
		if (start == 1'b0 && ^(main_gsm_normexiti_323) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_323_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %324 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 6*/
if (reset) begin main_gsm_normexiti_324 = 0; end
		main_gsm_normexiti_324 = (1'd0 | (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %324 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_324_reg <= main_gsm_normexiti_324;
		if (start == 1'b0 && ^(main_gsm_normexiti_324) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_324_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %325 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 7*/
if (reset) begin main_gsm_normexiti_325 = 0; end
		main_gsm_normexiti_325 = (1'd0 | (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %325 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_325_reg <= main_gsm_normexiti_325;
		if (start == 1'b0 && ^(main_gsm_normexiti_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_norm.exit.i*/
	/*   %326 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 8*/
if (reset) begin main_gsm_normexiti_326 = 0; end
		main_gsm_normexiti_326 = (1'd0 | (2 * 32'd8));
end
always @(posedge clk) begin
	/* main: %gsm_norm.exit.i*/
	/*   %326 = getelementptr inbounds [9 x i16]* %P.i, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_gsm_normexiti_326_reg <= main_gsm_normexiti_326;
		if (start == 1'b0 && ^(main_gsm_normexiti_326) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_normexiti_326_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %._crit_edge43.i ], [ 0, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_indvar18 = 32'd0;
	end
	/* main: %327*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %._crit_edge43.i ], [ 0, %gsm_norm.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_162) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_327_indvar18 = main__crit_edge43i_indvarnext19_reg;
	end
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %._crit_edge43.i ], [ 0, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_indvar18_reg <= main_327_indvar18;
		if (start == 1'b0 && ^(main_327_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_indvar18_reg"); $finish; end
	end
	/* main: %327*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %._crit_edge43.i ], [ 0, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_indvar18_reg <= main_327_indvar18;
		if (start == 1'b0 && ^(main_327_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_indvar18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %328 = phi i16 [ %.pre.i15, %._crit_edge43.i ], [ %289, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_328 = main_gsm_normexiti_289_reg;
	end
	/* main: %327*/
	/*   %328 = phi i16 [ %.pre.i15, %._crit_edge43.i ], [ %289, %gsm_norm.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__crit_edge43i_162) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_327_328 = main__crit_edge43i_prei15;
	end
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %328 = phi i16 [ %.pre.i15, %._crit_edge43.i ], [ %289, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_gsm_normexiti_86) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_328_reg <= main_327_328;
		if (start == 1'b0 && ^(main_327_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_328_reg"); $finish; end
	end
	/* main: %327*/
	/*   %328 = phi i16 [ %.pre.i15, %._crit_edge43.i ], [ %289, %gsm_norm.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge43i_162) & (memory_controller_waitrequest == 1'd0))) begin
		main_327_328_reg <= main_327_328;
		if (start == 1'b0 && ^(main_327_328) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_328_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %329 = sub i32 7, %indvar18*/
		main_327_329 = (32'd7 - main_327_indvar18_reg);
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %329 = sub i32 7, %indvar18*/
	if ((cur_state == LEGUP_F_main_BB__327_87)) begin
		main_327_329_reg <= main_327_329;
		if (start == 1'b0 && ^(main_327_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_329_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %330 = add i32 %indvar18, 2*/
		main_327_330 = (main_327_indvar18_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %330 = add i32 %indvar18, 2*/
	if ((cur_state == LEGUP_F_main_BB__327_87)) begin
		main_327_330_reg <= main_327_330;
		if (start == 1'b0 && ^(main_327_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %n.029.i = add i32 %indvar18, 1*/
		main_327_n029i = (main_327_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %n.029.i = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_main_BB__327_87)) begin
		main_327_n029i_reg <= main_327_n029i;
		if (start == 1'b0 && ^(main_327_n029i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_n029i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %.128.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %indvar18*/
		main_327_128i = (1'd0 | (2 * main_327_indvar18_reg));
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %.128.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %indvar18*/
	if ((cur_state == LEGUP_F_main_BB__327_87)) begin
		main_327_128i_reg <= main_327_128i;
		if (start == 1'b0 && ^(main_327_128i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_128i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %327*/
	/*   %331 = icmp slt i16 %328, 0*/
		main_327_331 = ($signed(main_327_328_reg) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %327*/
	/*   %331 = icmp slt i16 %328, 0*/
	if ((cur_state == LEGUP_F_main_BB__327_87)) begin
		main_327_331_reg <= main_327_331;
		if (start == 1'b0 && ^(main_327_331) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_327_331_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %332*/
	/*   %333 = icmp eq i16 %328, -32768*/
		main_332_333 = (main_327_328_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %332*/
	/*   %333 = icmp eq i16 %328, -32768*/
	if ((cur_state == LEGUP_F_main_BB__332_88)) begin
		main_332_333_reg <= main_332_333;
		if (start == 1'b0 && ^(main_332_333) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_332_333_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %332*/
	/*   %334 = sub i16 0, %328*/
		main_332_334 = (16'd0 - main_327_328_reg);
end
always @(posedge clk) begin
	/* main: %332*/
	/*   %334 = sub i16 0, %328*/
	if ((cur_state == LEGUP_F_main_BB__332_88)) begin
		main_332_334_reg <= main_332_334;
		if (start == 1'b0 && ^(main_332_334) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_332_334_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %332*/
	/*   %..i.i8 = select i1 %333, i16 32767, i16 %334*/
		main_332_ii8 = (main_332_333 ? 16'd32767 : main_332_334);
end
always @(posedge clk) begin
	/* main: %332*/
	/*   %..i.i8 = select i1 %333, i16 32767, i16 %334*/
	if ((cur_state == LEGUP_F_main_BB__332_88)) begin
		main_332_ii8_reg <= main_332_ii8;
		if (start == 1'b0 && ^(main_332_ii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_332_ii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %335 = phi i16 [ %..i.i8, %332 ], [ %328, %327 ]*/
	if ((((cur_state == LEGUP_F_main_BB__327_87) & (memory_controller_waitrequest == 1'd0)) & (main_327_331 == 1'd0))) begin
		main_gsm_absexiti9_335 = main_327_328_reg;
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %335 = phi i16 [ %..i.i8, %332 ], [ %328, %327 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__332_88) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_absexiti9_335 = main_332_ii8;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %335 = phi i16 [ %..i.i8, %332 ], [ %328, %327 ]*/
	if ((((cur_state == LEGUP_F_main_BB__327_87) & (memory_controller_waitrequest == 1'd0)) & (main_327_331 == 1'd0))) begin
		main_gsm_absexiti9_335_reg <= main_gsm_absexiti9_335;
		if (start == 1'b0 && ^(main_gsm_absexiti9_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_335_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %335 = phi i16 [ %..i.i8, %332 ], [ %328, %327 ]*/
	if (((cur_state == LEGUP_F_main_BB__332_88) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_absexiti9_335_reg <= main_gsm_absexiti9_335;
		if (start == 1'b0 && ^(main_gsm_absexiti9_335) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_335_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %336 = load i16* %318, align 2, !tbaa !1*/
		main_gsm_absexiti9_336 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %336 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_90)) begin
		main_gsm_absexiti9_336_reg <= main_gsm_absexiti9_336;
		if (start == 1'b0 && ^(main_gsm_absexiti9_336) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_336_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %337 = icmp slt i16 %336, %335*/
		main_gsm_absexiti9_337 = ($signed(main_gsm_absexiti9_336) < $signed(main_gsm_absexiti9_335_reg));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i9*/
	/*   %337 = icmp slt i16 %336, %335*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_90)) begin
		main_gsm_absexiti9_337_reg <= main_gsm_absexiti9_337;
		if (start == 1'b0 && ^(main_gsm_absexiti9_337) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexiti9_337_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader14.i*/
	/*   %338 = icmp slt i32 %n.029.i, 9*/
		main_preheader14i_338 = ($signed(main_327_n029i_reg) < $signed(32'd9));
end
always @(posedge clk) begin
	/* main: %.preheader14.i*/
	/*   %338 = icmp slt i32 %n.029.i, 9*/
	if ((cur_state == LEGUP_F_main_BB_preheader14i_91)) begin
		main_preheader14i_338_reg <= main_preheader14i_338;
		if (start == 1'b0 && ^(main_preheader14i_338) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader14i_338_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %339 = sub i32 8, %indvar18*/
		main_lrphipreheader_339 = (32'd8 - main_327_indvar18_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %339 = sub i32 8, %indvar18*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_92)) begin
		main_lrphipreheader_339_reg <= main_lrphipreheader_339;
		if (start == 1'b0 && ^(main_lrphipreheader_339) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphipreheader_339_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next13, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_indvar12 = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next13, %.lr.ph.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi_95) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcond14_reg == 1'd0))) */ begin
		main_lrphi_indvar12 = main_lrphi_indvarnext13_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next13, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_indvar12_reg <= main_lrphi_indvar12;
		if (start == 1'b0 && ^(main_lrphi_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_indvar12_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %indvar12 = phi i32 [ 0, %.lr.ph.i.preheader ], [ %indvar.next13, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_95) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_exitcond14_reg == 1'd0))) begin
		main_lrphi_indvar12_reg <= main_lrphi_indvar12;
		if (start == 1'b0 && ^(main_lrphi_indvar12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_indvar12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %.128.i.sum = add i32 %indvar18, %indvar12*/
		main_lrphi_128isum = (main_327_indvar18_reg + main_lrphi_indvar12_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %.128.i.sum = add i32 %indvar18, %indvar12*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_93)) begin
		main_lrphi_128isum_reg <= main_lrphi_128isum;
		if (start == 1'b0 && ^(main_lrphi_128isum) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_128isum_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %.224.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %.128.i.sum*/
		main_lrphi_224i = (1'd0 | (2 * main_lrphi_128isum_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %.224.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %.128.i.sum*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_94)) begin
		main_lrphi_224i_reg <= main_lrphi_224i;
		if (start == 1'b0 && ^(main_lrphi_224i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_224i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
		main_lrphi_indvarnext13 = (main_lrphi_indvar12_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %indvar.next13 = add i32 %indvar12, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_93)) begin
		main_lrphi_indvarnext13_reg <= main_lrphi_indvarnext13;
		if (start == 1'b0 && ^(main_lrphi_indvarnext13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_indvarnext13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, %339*/
		main_lrphi_exitcond14 = (main_lrphi_indvarnext13 == main_lrphipreheader_339_reg);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %exitcond14 = icmp eq i32 %indvar.next13, %339*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_93)) begin
		main_lrphi_exitcond14_reg <= main_lrphi_exitcond14;
		if (start == 1'b0 && ^(main_lrphi_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %340*/
	/*   %341 = sext i16 %336 to i32*/
		main_340_341 = $signed(main_gsm_absexiti9_336_reg);
end
always @(posedge clk) begin
	/* main: %340*/
	/*   %341 = sext i16 %336 to i32*/
	if ((cur_state == LEGUP_F_main_BB__340_96)) begin
		main_340_341_reg <= main_340_341;
		if (start == 1'b0 && ^(main_340_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_340_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %340*/
	/*   %342 = icmp eq i16 %335, 0*/
		main_340_342 = (main_gsm_absexiti9_335_reg == 16'd0);
end
always @(posedge clk) begin
	/* main: %340*/
	/*   %342 = icmp eq i16 %335, 0*/
	if ((cur_state == LEGUP_F_main_BB__340_96)) begin
		main_340_342_reg <= main_340_342;
		if (start == 1'b0 && ^(main_340_342) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_340_342_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %343 = sext i16 %335 to i32*/
		main_preheaderii_343 = $signed(main_gsm_absexiti9_335_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %343 = sext i16 %335 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_343_reg <= main_preheaderii_343;
		if (start == 1'b0 && ^(main_preheaderii_343) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_343_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %344 = shl nsw i32 %343, 1*/
		main_preheaderii_344 = (main_preheaderii_343 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %344 = shl nsw i32 %343, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_344_reg <= main_preheaderii_344;
		if (start == 1'b0 && ^(main_preheaderii_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_344_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %345 = icmp slt i32 %344, %341*/
		main_preheaderii_345 = ($signed(main_preheaderii_344) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %345 = icmp slt i32 %344, %341*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_345_reg <= main_preheaderii_345;
		if (start == 1'b0 && ^(main_preheaderii_345) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_345_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %346 = select i1 %345, i32 0, i32 %341*/
		main_preheaderii_346 = (main_preheaderii_345 ? 32'd0 : main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %346 = select i1 %345, i32 0, i32 %341*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_346_reg <= main_preheaderii_346;
		if (start == 1'b0 && ^(main_preheaderii_346) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_346_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %344, %346*/
		main_preheaderii_i1i = (main_preheaderii_344 - main_preheaderii_346);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %..i1.i = sub nsw i32 %344, %346*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_i1i_reg <= main_preheaderii_i1i;
		if (start == 1'b0 && ^(main_preheaderii_i1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_i1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %.3.i.i = select i1 %345, i16 0, i16 2*/
		main_preheaderii_3ii = (main_preheaderii_345 ? 16'd0 : 16'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %.3.i.i = select i1 %345, i16 0, i16 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_3ii_reg <= main_preheaderii_3ii;
		if (start == 1'b0 && ^(main_preheaderii_3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %347 = shl nsw i32 %..i1.i, 1*/
		main_preheaderii_347 = (main_preheaderii_i1i <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %347 = shl nsw i32 %..i1.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_347_reg <= main_preheaderii_347;
		if (start == 1'b0 && ^(main_preheaderii_347) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_347_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i.i*/
	/*   %348 = icmp slt i32 %347, %341*/
		main_preheaderii_348 = ($signed(main_preheaderii_347) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i.i*/
	/*   %348 = icmp slt i32 %347, %341*/
	if ((cur_state == LEGUP_F_main_BB_preheaderii_97)) begin
		main_preheaderii_348_reg <= main_preheaderii_348;
		if (start == 1'b0 && ^(main_preheaderii_348) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderii_348_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %349*/
	/*   %350 = sub nsw i32 %347, %341*/
		main_349_350 = (main_preheaderii_347_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %349*/
	/*   %350 = sub nsw i32 %347, %341*/
	if ((cur_state == LEGUP_F_main_BB__349_98)) begin
		main_349_350_reg <= main_349_350;
		if (start == 1'b0 && ^(main_349_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_349_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %349*/
	/*   %351 = or i16 %.3.i.i, 1*/
		main_349_351 = (main_preheaderii_3ii_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %349*/
	/*   %351 = or i16 %.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__349_98)) begin
		main_349_351_reg <= main_349_351;
		if (start == 1'b0 && ^(main_349_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_349_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %350, %349 ], [ %347, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_348 == 1'd1))) begin
		main_backedge1ii_L_num0be1ii = main_preheaderii_347;
	end
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %350, %349 ], [ %347, %.preheader.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__349_98) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge1ii_L_num0be1ii = main_349_350;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %350, %349 ], [ %347, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_348 == 1'd1))) begin
		main_backedge1ii_L_num0be1ii_reg <= main_backedge1ii_L_num0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_L_num0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_L_num0be1ii_reg"); $finish; end
	end
	/* main: %.backedge.1.i.i*/
	/*   %L_num.0.be.1.i.i = phi i32 [ %350, %349 ], [ %347, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__349_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge1ii_L_num0be1ii_reg <= main_backedge1ii_L_num0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_L_num0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_L_num0be1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %351, %349 ], [ %.3.i.i, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_348 == 1'd1))) begin
		main_backedge1ii_div0be1ii = main_preheaderii_3ii;
	end
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %351, %349 ], [ %.3.i.i, %.preheader.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__349_98) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge1ii_div0be1ii = main_349_351;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %351, %349 ], [ %.3.i.i, %.preheader.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderii_97) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderii_348 == 1'd1))) begin
		main_backedge1ii_div0be1ii_reg <= main_backedge1ii_div0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_div0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_div0be1ii_reg"); $finish; end
	end
	/* main: %.backedge.1.i.i*/
	/*   %div.0.be.1.i.i = phi i16 [ %351, %349 ], [ %.3.i.i, %.preheader.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__349_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge1ii_div0be1ii_reg <= main_backedge1ii_div0be1ii;
		if (start == 1'b0 && ^(main_backedge1ii_div0be1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_div0be1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %352 = shl nsw i16 %div.0.be.1.i.i, 1*/
		main_backedge1ii_352 = (main_backedge1ii_div0be1ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %352 = shl nsw i16 %div.0.be.1.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_99)) begin
		main_backedge1ii_352_reg <= main_backedge1ii_352;
		if (start == 1'b0 && ^(main_backedge1ii_352) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_352_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %353 = shl nsw i32 %L_num.0.be.1.i.i, 1*/
		main_backedge1ii_353 = (main_backedge1ii_L_num0be1ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %353 = shl nsw i32 %L_num.0.be.1.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_99)) begin
		main_backedge1ii_353_reg <= main_backedge1ii_353;
		if (start == 1'b0 && ^(main_backedge1ii_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_353_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.1.i.i*/
	/*   %354 = icmp slt i32 %353, %341*/
		main_backedge1ii_354 = ($signed(main_backedge1ii_353) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.1.i.i*/
	/*   %354 = icmp slt i32 %353, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge1ii_99)) begin
		main_backedge1ii_354_reg <= main_backedge1ii_354;
		if (start == 1'b0 && ^(main_backedge1ii_354) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge1ii_354_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %341*/
		main_355_356 = (main_backedge1ii_353_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %356 = sub nsw i32 %353, %341*/
	if ((cur_state == LEGUP_F_main_BB__355_100)) begin
		main_355_356_reg <= main_355_356;
		if (start == 1'b0 && ^(main_355_356) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_356_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %357 = or i16 %352, 1*/
		main_355_357 = (main_backedge1ii_352_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %357 = or i16 %352, 1*/
	if ((cur_state == LEGUP_F_main_BB__355_100)) begin
		main_355_357_reg <= main_355_357;
		if (start == 1'b0 && ^(main_355_357) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_357_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %356, %355 ], [ %353, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_99) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_354 == 1'd1))) begin
		main_backedge2ii_L_num0be2ii = main_backedge1ii_353;
	end
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %356, %355 ], [ %353, %.backedge.1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__355_100) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge2ii_L_num0be2ii = main_355_356;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %356, %355 ], [ %353, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_99) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_354 == 1'd1))) begin
		main_backedge2ii_L_num0be2ii_reg <= main_backedge2ii_L_num0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_L_num0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_L_num0be2ii_reg"); $finish; end
	end
	/* main: %.backedge.2.i.i*/
	/*   %L_num.0.be.2.i.i = phi i32 [ %356, %355 ], [ %353, %.backedge.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__355_100) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge2ii_L_num0be2ii_reg <= main_backedge2ii_L_num0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_L_num0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_L_num0be2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %357, %355 ], [ %352, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_99) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_354 == 1'd1))) begin
		main_backedge2ii_div0be2ii = main_backedge1ii_352;
	end
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %357, %355 ], [ %352, %.backedge.1.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__355_100) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge2ii_div0be2ii = main_355_357;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %357, %355 ], [ %352, %.backedge.1.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge1ii_99) & (memory_controller_waitrequest == 1'd0)) & (main_backedge1ii_354 == 1'd1))) begin
		main_backedge2ii_div0be2ii_reg <= main_backedge2ii_div0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_div0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_div0be2ii_reg"); $finish; end
	end
	/* main: %.backedge.2.i.i*/
	/*   %div.0.be.2.i.i = phi i16 [ %357, %355 ], [ %352, %.backedge.1.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__355_100) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge2ii_div0be2ii_reg <= main_backedge2ii_div0be2ii;
		if (start == 1'b0 && ^(main_backedge2ii_div0be2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_div0be2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %358 = shl nsw i16 %div.0.be.2.i.i, 1*/
		main_backedge2ii_358 = (main_backedge2ii_div0be2ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %358 = shl nsw i16 %div.0.be.2.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_101)) begin
		main_backedge2ii_358_reg <= main_backedge2ii_358;
		if (start == 1'b0 && ^(main_backedge2ii_358) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_358_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %359 = shl i32 %L_num.0.be.2.i.i, 1*/
		main_backedge2ii_359 = (main_backedge2ii_L_num0be2ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %359 = shl i32 %L_num.0.be.2.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_101)) begin
		main_backedge2ii_359_reg <= main_backedge2ii_359;
		if (start == 1'b0 && ^(main_backedge2ii_359) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_359_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.2.i.i*/
	/*   %360 = icmp slt i32 %359, %341*/
		main_backedge2ii_360 = ($signed(main_backedge2ii_359) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.2.i.i*/
	/*   %360 = icmp slt i32 %359, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge2ii_101)) begin
		main_backedge2ii_360_reg <= main_backedge2ii_360;
		if (start == 1'b0 && ^(main_backedge2ii_360) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge2ii_360_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %341*/
		main_361_362 = (main_backedge2ii_359_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %361*/
	/*   %362 = sub nsw i32 %359, %341*/
	if ((cur_state == LEGUP_F_main_BB__361_102)) begin
		main_361_362_reg <= main_361_362;
		if (start == 1'b0 && ^(main_361_362) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_361_362_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %361*/
	/*   %363 = or i16 %358, 1*/
		main_361_363 = (main_backedge2ii_358_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %361*/
	/*   %363 = or i16 %358, 1*/
	if ((cur_state == LEGUP_F_main_BB__361_102)) begin
		main_361_363_reg <= main_361_363;
		if (start == 1'b0 && ^(main_361_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_361_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_101) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_360 == 1'd1))) begin
		main_backedge3ii_L_num0be3ii = main_backedge2ii_359;
	end
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.2.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__361_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge3ii_L_num0be3ii = main_361_362;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_101) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_360 == 1'd1))) begin
		main_backedge3ii_L_num0be3ii_reg <= main_backedge3ii_L_num0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_L_num0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_L_num0be3ii_reg"); $finish; end
	end
	/* main: %.backedge.3.i.i*/
	/*   %L_num.0.be.3.i.i = phi i32 [ %362, %361 ], [ %359, %.backedge.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__361_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge3ii_L_num0be3ii_reg <= main_backedge3ii_L_num0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_L_num0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_L_num0be3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_101) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_360 == 1'd1))) begin
		main_backedge3ii_div0be3ii = main_backedge2ii_358;
	end
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.2.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__361_102) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge3ii_div0be3ii = main_361_363;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.2.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge2ii_101) & (memory_controller_waitrequest == 1'd0)) & (main_backedge2ii_360 == 1'd1))) begin
		main_backedge3ii_div0be3ii_reg <= main_backedge3ii_div0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_div0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_div0be3ii_reg"); $finish; end
	end
	/* main: %.backedge.3.i.i*/
	/*   %div.0.be.3.i.i = phi i16 [ %363, %361 ], [ %358, %.backedge.2.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__361_102) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge3ii_div0be3ii_reg <= main_backedge3ii_div0be3ii;
		if (start == 1'b0 && ^(main_backedge3ii_div0be3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_div0be3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %364 = shl i16 %div.0.be.3.i.i, 1*/
		main_backedge3ii_364 = (main_backedge3ii_div0be3ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %364 = shl i16 %div.0.be.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_103)) begin
		main_backedge3ii_364_reg <= main_backedge3ii_364;
		if (start == 1'b0 && ^(main_backedge3ii_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %365 = shl i32 %L_num.0.be.3.i.i, 1*/
		main_backedge3ii_365 = (main_backedge3ii_L_num0be3ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %365 = shl i32 %L_num.0.be.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_103)) begin
		main_backedge3ii_365_reg <= main_backedge3ii_365;
		if (start == 1'b0 && ^(main_backedge3ii_365) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_365_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.3.i.i*/
	/*   %366 = icmp slt i32 %365, %341*/
		main_backedge3ii_366 = ($signed(main_backedge3ii_365) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.3.i.i*/
	/*   %366 = icmp slt i32 %365, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge3ii_103)) begin
		main_backedge3ii_366_reg <= main_backedge3ii_366;
		if (start == 1'b0 && ^(main_backedge3ii_366) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge3ii_366_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %341*/
		main_367_368 = (main_backedge3ii_365_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %367*/
	/*   %368 = sub nsw i32 %365, %341*/
	if ((cur_state == LEGUP_F_main_BB__367_104)) begin
		main_367_368_reg <= main_367_368;
		if (start == 1'b0 && ^(main_367_368) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_367_368_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %367*/
	/*   %369 = or i16 %364, 1*/
		main_367_369 = (main_backedge3ii_364_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %367*/
	/*   %369 = or i16 %364, 1*/
	if ((cur_state == LEGUP_F_main_BB__367_104)) begin
		main_367_369_reg <= main_367_369;
		if (start == 1'b0 && ^(main_367_369) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_367_369_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_366 == 1'd1))) begin
		main_backedge4ii_L_num0be4ii = main_backedge3ii_365;
	end
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.3.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__367_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge4ii_L_num0be4ii = main_367_368;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_366 == 1'd1))) begin
		main_backedge4ii_L_num0be4ii_reg <= main_backedge4ii_L_num0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_L_num0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_L_num0be4ii_reg"); $finish; end
	end
	/* main: %.backedge.4.i.i*/
	/*   %L_num.0.be.4.i.i = phi i32 [ %368, %367 ], [ %365, %.backedge.3.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__367_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge4ii_L_num0be4ii_reg <= main_backedge4ii_L_num0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_L_num0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_L_num0be4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_366 == 1'd1))) begin
		main_backedge4ii_div0be4ii = main_backedge3ii_364;
	end
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.3.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__367_104) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge4ii_div0be4ii = main_367_369;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.3.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge3ii_103) & (memory_controller_waitrequest == 1'd0)) & (main_backedge3ii_366 == 1'd1))) begin
		main_backedge4ii_div0be4ii_reg <= main_backedge4ii_div0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_div0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_div0be4ii_reg"); $finish; end
	end
	/* main: %.backedge.4.i.i*/
	/*   %div.0.be.4.i.i = phi i16 [ %369, %367 ], [ %364, %.backedge.3.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__367_104) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge4ii_div0be4ii_reg <= main_backedge4ii_div0be4ii;
		if (start == 1'b0 && ^(main_backedge4ii_div0be4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_div0be4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %370 = shl i16 %div.0.be.4.i.i, 1*/
		main_backedge4ii_370 = (main_backedge4ii_div0be4ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %370 = shl i16 %div.0.be.4.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_105)) begin
		main_backedge4ii_370_reg <= main_backedge4ii_370;
		if (start == 1'b0 && ^(main_backedge4ii_370) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_370_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %371 = shl i32 %L_num.0.be.4.i.i, 1*/
		main_backedge4ii_371 = (main_backedge4ii_L_num0be4ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %371 = shl i32 %L_num.0.be.4.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_105)) begin
		main_backedge4ii_371_reg <= main_backedge4ii_371;
		if (start == 1'b0 && ^(main_backedge4ii_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.4.i.i*/
	/*   %372 = icmp slt i32 %371, %341*/
		main_backedge4ii_372 = ($signed(main_backedge4ii_371) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.4.i.i*/
	/*   %372 = icmp slt i32 %371, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge4ii_105)) begin
		main_backedge4ii_372_reg <= main_backedge4ii_372;
		if (start == 1'b0 && ^(main_backedge4ii_372) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge4ii_372_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %341*/
		main_373_374 = (main_backedge4ii_371_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %373*/
	/*   %374 = sub nsw i32 %371, %341*/
	if ((cur_state == LEGUP_F_main_BB__373_106)) begin
		main_373_374_reg <= main_373_374;
		if (start == 1'b0 && ^(main_373_374) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_373_374_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %373*/
	/*   %375 = or i16 %370, 1*/
		main_373_375 = (main_backedge4ii_370_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %373*/
	/*   %375 = or i16 %370, 1*/
	if ((cur_state == LEGUP_F_main_BB__373_106)) begin
		main_373_375_reg <= main_373_375;
		if (start == 1'b0 && ^(main_373_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_373_375_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_372 == 1'd1))) begin
		main_backedge5ii_L_num0be5ii = main_backedge4ii_371;
	end
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.4.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__373_106) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge5ii_L_num0be5ii = main_373_374;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_372 == 1'd1))) begin
		main_backedge5ii_L_num0be5ii_reg <= main_backedge5ii_L_num0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_L_num0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_L_num0be5ii_reg"); $finish; end
	end
	/* main: %.backedge.5.i.i*/
	/*   %L_num.0.be.5.i.i = phi i32 [ %374, %373 ], [ %371, %.backedge.4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__373_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge5ii_L_num0be5ii_reg <= main_backedge5ii_L_num0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_L_num0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_L_num0be5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_372 == 1'd1))) begin
		main_backedge5ii_div0be5ii = main_backedge4ii_370;
	end
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.4.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__373_106) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge5ii_div0be5ii = main_373_375;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.4.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge4ii_105) & (memory_controller_waitrequest == 1'd0)) & (main_backedge4ii_372 == 1'd1))) begin
		main_backedge5ii_div0be5ii_reg <= main_backedge5ii_div0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_div0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_div0be5ii_reg"); $finish; end
	end
	/* main: %.backedge.5.i.i*/
	/*   %div.0.be.5.i.i = phi i16 [ %375, %373 ], [ %370, %.backedge.4.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__373_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge5ii_div0be5ii_reg <= main_backedge5ii_div0be5ii;
		if (start == 1'b0 && ^(main_backedge5ii_div0be5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_div0be5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %376 = shl i16 %div.0.be.5.i.i, 1*/
		main_backedge5ii_376 = (main_backedge5ii_div0be5ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %376 = shl i16 %div.0.be.5.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_107)) begin
		main_backedge5ii_376_reg <= main_backedge5ii_376;
		if (start == 1'b0 && ^(main_backedge5ii_376) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_376_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %377 = shl i32 %L_num.0.be.5.i.i, 1*/
		main_backedge5ii_377 = (main_backedge5ii_L_num0be5ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %377 = shl i32 %L_num.0.be.5.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_107)) begin
		main_backedge5ii_377_reg <= main_backedge5ii_377;
		if (start == 1'b0 && ^(main_backedge5ii_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.5.i.i*/
	/*   %378 = icmp slt i32 %377, %341*/
		main_backedge5ii_378 = ($signed(main_backedge5ii_377) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.5.i.i*/
	/*   %378 = icmp slt i32 %377, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge5ii_107)) begin
		main_backedge5ii_378_reg <= main_backedge5ii_378;
		if (start == 1'b0 && ^(main_backedge5ii_378) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge5ii_378_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %341*/
		main_379_380 = (main_backedge5ii_377_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %379*/
	/*   %380 = sub nsw i32 %377, %341*/
	if ((cur_state == LEGUP_F_main_BB__379_108)) begin
		main_379_380_reg <= main_379_380;
		if (start == 1'b0 && ^(main_379_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_379_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %379*/
	/*   %381 = or i16 %376, 1*/
		main_379_381 = (main_backedge5ii_376_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %379*/
	/*   %381 = or i16 %376, 1*/
	if ((cur_state == LEGUP_F_main_BB__379_108)) begin
		main_379_381_reg <= main_379_381;
		if (start == 1'b0 && ^(main_379_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_379_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_378 == 1'd1))) begin
		main_backedge6ii_L_num0be6ii = main_backedge5ii_377;
	end
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__379_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge6ii_L_num0be6ii = main_379_380;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_378 == 1'd1))) begin
		main_backedge6ii_L_num0be6ii_reg <= main_backedge6ii_L_num0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_L_num0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_L_num0be6ii_reg"); $finish; end
	end
	/* main: %.backedge.6.i.i*/
	/*   %L_num.0.be.6.i.i = phi i32 [ %380, %379 ], [ %377, %.backedge.5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__379_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge6ii_L_num0be6ii_reg <= main_backedge6ii_L_num0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_L_num0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_L_num0be6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_378 == 1'd1))) begin
		main_backedge6ii_div0be6ii = main_backedge5ii_376;
	end
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.5.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__379_108) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge6ii_div0be6ii = main_379_381;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.5.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge5ii_107) & (memory_controller_waitrequest == 1'd0)) & (main_backedge5ii_378 == 1'd1))) begin
		main_backedge6ii_div0be6ii_reg <= main_backedge6ii_div0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_div0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_div0be6ii_reg"); $finish; end
	end
	/* main: %.backedge.6.i.i*/
	/*   %div.0.be.6.i.i = phi i16 [ %381, %379 ], [ %376, %.backedge.5.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__379_108) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge6ii_div0be6ii_reg <= main_backedge6ii_div0be6ii;
		if (start == 1'b0 && ^(main_backedge6ii_div0be6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_div0be6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %382 = shl i16 %div.0.be.6.i.i, 1*/
		main_backedge6ii_382 = (main_backedge6ii_div0be6ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %382 = shl i16 %div.0.be.6.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_109)) begin
		main_backedge6ii_382_reg <= main_backedge6ii_382;
		if (start == 1'b0 && ^(main_backedge6ii_382) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_382_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %383 = shl i32 %L_num.0.be.6.i.i, 1*/
		main_backedge6ii_383 = (main_backedge6ii_L_num0be6ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %383 = shl i32 %L_num.0.be.6.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_109)) begin
		main_backedge6ii_383_reg <= main_backedge6ii_383;
		if (start == 1'b0 && ^(main_backedge6ii_383) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_383_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.6.i.i*/
	/*   %384 = icmp slt i32 %383, %341*/
		main_backedge6ii_384 = ($signed(main_backedge6ii_383) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.6.i.i*/
	/*   %384 = icmp slt i32 %383, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge6ii_109)) begin
		main_backedge6ii_384_reg <= main_backedge6ii_384;
		if (start == 1'b0 && ^(main_backedge6ii_384) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge6ii_384_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %341*/
		main_385_386 = (main_backedge6ii_383_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %385*/
	/*   %386 = sub nsw i32 %383, %341*/
	if ((cur_state == LEGUP_F_main_BB__385_110)) begin
		main_385_386_reg <= main_385_386;
		if (start == 1'b0 && ^(main_385_386) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_385_386_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %385*/
	/*   %387 = or i16 %382, 1*/
		main_385_387 = (main_backedge6ii_382_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %385*/
	/*   %387 = or i16 %382, 1*/
	if ((cur_state == LEGUP_F_main_BB__385_110)) begin
		main_385_387_reg <= main_385_387;
		if (start == 1'b0 && ^(main_385_387) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_385_387_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_384 == 1'd1))) begin
		main_backedge7ii_L_num0be7ii = main_backedge6ii_383;
	end
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__385_110) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge7ii_L_num0be7ii = main_385_386;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_384 == 1'd1))) begin
		main_backedge7ii_L_num0be7ii_reg <= main_backedge7ii_L_num0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_L_num0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_L_num0be7ii_reg"); $finish; end
	end
	/* main: %.backedge.7.i.i*/
	/*   %L_num.0.be.7.i.i = phi i32 [ %386, %385 ], [ %383, %.backedge.6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__385_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge7ii_L_num0be7ii_reg <= main_backedge7ii_L_num0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_L_num0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_L_num0be7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_384 == 1'd1))) begin
		main_backedge7ii_div0be7ii = main_backedge6ii_382;
	end
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.6.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__385_110) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge7ii_div0be7ii = main_385_387;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.6.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge6ii_109) & (memory_controller_waitrequest == 1'd0)) & (main_backedge6ii_384 == 1'd1))) begin
		main_backedge7ii_div0be7ii_reg <= main_backedge7ii_div0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_div0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_div0be7ii_reg"); $finish; end
	end
	/* main: %.backedge.7.i.i*/
	/*   %div.0.be.7.i.i = phi i16 [ %387, %385 ], [ %382, %.backedge.6.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__385_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge7ii_div0be7ii_reg <= main_backedge7ii_div0be7ii;
		if (start == 1'b0 && ^(main_backedge7ii_div0be7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_div0be7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %388 = shl i16 %div.0.be.7.i.i, 1*/
		main_backedge7ii_388 = (main_backedge7ii_div0be7ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %388 = shl i16 %div.0.be.7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_111)) begin
		main_backedge7ii_388_reg <= main_backedge7ii_388;
		if (start == 1'b0 && ^(main_backedge7ii_388) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_388_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %389 = shl i32 %L_num.0.be.7.i.i, 1*/
		main_backedge7ii_389 = (main_backedge7ii_L_num0be7ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %389 = shl i32 %L_num.0.be.7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_111)) begin
		main_backedge7ii_389_reg <= main_backedge7ii_389;
		if (start == 1'b0 && ^(main_backedge7ii_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.7.i.i*/
	/*   %390 = icmp slt i32 %389, %341*/
		main_backedge7ii_390 = ($signed(main_backedge7ii_389) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.7.i.i*/
	/*   %390 = icmp slt i32 %389, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge7ii_111)) begin
		main_backedge7ii_390_reg <= main_backedge7ii_390;
		if (start == 1'b0 && ^(main_backedge7ii_390) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge7ii_390_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %341*/
		main_391_392 = (main_backedge7ii_389_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %391*/
	/*   %392 = sub nsw i32 %389, %341*/
	if ((cur_state == LEGUP_F_main_BB__391_112)) begin
		main_391_392_reg <= main_391_392;
		if (start == 1'b0 && ^(main_391_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_391_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %391*/
	/*   %393 = or i16 %388, 1*/
		main_391_393 = (main_backedge7ii_388_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %391*/
	/*   %393 = or i16 %388, 1*/
	if ((cur_state == LEGUP_F_main_BB__391_112)) begin
		main_391_393_reg <= main_391_393;
		if (start == 1'b0 && ^(main_391_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_391_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_390 == 1'd1))) begin
		main_backedge8ii_L_num0be8ii = main_backedge7ii_389;
	end
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.7.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__391_112) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge8ii_L_num0be8ii = main_391_392;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_390 == 1'd1))) begin
		main_backedge8ii_L_num0be8ii_reg <= main_backedge8ii_L_num0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_L_num0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_L_num0be8ii_reg"); $finish; end
	end
	/* main: %.backedge.8.i.i*/
	/*   %L_num.0.be.8.i.i = phi i32 [ %392, %391 ], [ %389, %.backedge.7.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__391_112) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge8ii_L_num0be8ii_reg <= main_backedge8ii_L_num0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_L_num0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_L_num0be8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_390 == 1'd1))) begin
		main_backedge8ii_div0be8ii = main_backedge7ii_388;
	end
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.7.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__391_112) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge8ii_div0be8ii = main_391_393;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.7.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge7ii_111) & (memory_controller_waitrequest == 1'd0)) & (main_backedge7ii_390 == 1'd1))) begin
		main_backedge8ii_div0be8ii_reg <= main_backedge8ii_div0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_div0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_div0be8ii_reg"); $finish; end
	end
	/* main: %.backedge.8.i.i*/
	/*   %div.0.be.8.i.i = phi i16 [ %393, %391 ], [ %388, %.backedge.7.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__391_112) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge8ii_div0be8ii_reg <= main_backedge8ii_div0be8ii;
		if (start == 1'b0 && ^(main_backedge8ii_div0be8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_div0be8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %394 = shl i16 %div.0.be.8.i.i, 1*/
		main_backedge8ii_394 = (main_backedge8ii_div0be8ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %394 = shl i16 %div.0.be.8.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_113)) begin
		main_backedge8ii_394_reg <= main_backedge8ii_394;
		if (start == 1'b0 && ^(main_backedge8ii_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %395 = shl i32 %L_num.0.be.8.i.i, 1*/
		main_backedge8ii_395 = (main_backedge8ii_L_num0be8ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %395 = shl i32 %L_num.0.be.8.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_113)) begin
		main_backedge8ii_395_reg <= main_backedge8ii_395;
		if (start == 1'b0 && ^(main_backedge8ii_395) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_395_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.8.i.i*/
	/*   %396 = icmp slt i32 %395, %341*/
		main_backedge8ii_396 = ($signed(main_backedge8ii_395) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.8.i.i*/
	/*   %396 = icmp slt i32 %395, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge8ii_113)) begin
		main_backedge8ii_396_reg <= main_backedge8ii_396;
		if (start == 1'b0 && ^(main_backedge8ii_396) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge8ii_396_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %341*/
		main_397_398 = (main_backedge8ii_395_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %397*/
	/*   %398 = sub nsw i32 %395, %341*/
	if ((cur_state == LEGUP_F_main_BB__397_114)) begin
		main_397_398_reg <= main_397_398;
		if (start == 1'b0 && ^(main_397_398) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_397_398_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %397*/
	/*   %399 = or i16 %394, 1*/
		main_397_399 = (main_backedge8ii_394_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %397*/
	/*   %399 = or i16 %394, 1*/
	if ((cur_state == LEGUP_F_main_BB__397_114)) begin
		main_397_399_reg <= main_397_399;
		if (start == 1'b0 && ^(main_397_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_397_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_396 == 1'd1))) begin
		main_backedge9ii_L_num0be9ii = main_backedge8ii_395;
	end
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.8.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__397_114) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge9ii_L_num0be9ii = main_397_398;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_396 == 1'd1))) begin
		main_backedge9ii_L_num0be9ii_reg <= main_backedge9ii_L_num0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_L_num0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_L_num0be9ii_reg"); $finish; end
	end
	/* main: %.backedge.9.i.i*/
	/*   %L_num.0.be.9.i.i = phi i32 [ %398, %397 ], [ %395, %.backedge.8.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__397_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge9ii_L_num0be9ii_reg <= main_backedge9ii_L_num0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_L_num0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_L_num0be9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_396 == 1'd1))) begin
		main_backedge9ii_div0be9ii = main_backedge8ii_394;
	end
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.8.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__397_114) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge9ii_div0be9ii = main_397_399;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.8.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge8ii_113) & (memory_controller_waitrequest == 1'd0)) & (main_backedge8ii_396 == 1'd1))) begin
		main_backedge9ii_div0be9ii_reg <= main_backedge9ii_div0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_div0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_div0be9ii_reg"); $finish; end
	end
	/* main: %.backedge.9.i.i*/
	/*   %div.0.be.9.i.i = phi i16 [ %399, %397 ], [ %394, %.backedge.8.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__397_114) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge9ii_div0be9ii_reg <= main_backedge9ii_div0be9ii;
		if (start == 1'b0 && ^(main_backedge9ii_div0be9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_div0be9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %400 = shl i16 %div.0.be.9.i.i, 1*/
		main_backedge9ii_400 = (main_backedge9ii_div0be9ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %400 = shl i16 %div.0.be.9.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_115)) begin
		main_backedge9ii_400_reg <= main_backedge9ii_400;
		if (start == 1'b0 && ^(main_backedge9ii_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %401 = shl i32 %L_num.0.be.9.i.i, 1*/
		main_backedge9ii_401 = (main_backedge9ii_L_num0be9ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %401 = shl i32 %L_num.0.be.9.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_115)) begin
		main_backedge9ii_401_reg <= main_backedge9ii_401;
		if (start == 1'b0 && ^(main_backedge9ii_401) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_401_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.9.i.i*/
	/*   %402 = icmp slt i32 %401, %341*/
		main_backedge9ii_402 = ($signed(main_backedge9ii_401) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.9.i.i*/
	/*   %402 = icmp slt i32 %401, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge9ii_115)) begin
		main_backedge9ii_402_reg <= main_backedge9ii_402;
		if (start == 1'b0 && ^(main_backedge9ii_402) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge9ii_402_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %341*/
		main_403_404 = (main_backedge9ii_401_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %403*/
	/*   %404 = sub nsw i32 %401, %341*/
	if ((cur_state == LEGUP_F_main_BB__403_116)) begin
		main_403_404_reg <= main_403_404;
		if (start == 1'b0 && ^(main_403_404) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_403_404_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %403*/
	/*   %405 = or i16 %400, 1*/
		main_403_405 = (main_backedge9ii_400_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %403*/
	/*   %405 = or i16 %400, 1*/
	if ((cur_state == LEGUP_F_main_BB__403_116)) begin
		main_403_405_reg <= main_403_405;
		if (start == 1'b0 && ^(main_403_405) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_403_405_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_402 == 1'd1))) begin
		main_backedge10ii_L_num0be10ii = main_backedge9ii_401;
	end
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__403_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge10ii_L_num0be10ii = main_403_404;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_402 == 1'd1))) begin
		main_backedge10ii_L_num0be10ii_reg <= main_backedge10ii_L_num0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_L_num0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_L_num0be10ii_reg"); $finish; end
	end
	/* main: %.backedge.10.i.i*/
	/*   %L_num.0.be.10.i.i = phi i32 [ %404, %403 ], [ %401, %.backedge.9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__403_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge10ii_L_num0be10ii_reg <= main_backedge10ii_L_num0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_L_num0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_L_num0be10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_402 == 1'd1))) begin
		main_backedge10ii_div0be10ii = main_backedge9ii_400;
	end
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.9.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__403_116) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge10ii_div0be10ii = main_403_405;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.9.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge9ii_115) & (memory_controller_waitrequest == 1'd0)) & (main_backedge9ii_402 == 1'd1))) begin
		main_backedge10ii_div0be10ii_reg <= main_backedge10ii_div0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_div0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_div0be10ii_reg"); $finish; end
	end
	/* main: %.backedge.10.i.i*/
	/*   %div.0.be.10.i.i = phi i16 [ %405, %403 ], [ %400, %.backedge.9.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__403_116) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge10ii_div0be10ii_reg <= main_backedge10ii_div0be10ii;
		if (start == 1'b0 && ^(main_backedge10ii_div0be10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_div0be10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %406 = shl i16 %div.0.be.10.i.i, 1*/
		main_backedge10ii_406 = (main_backedge10ii_div0be10ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %406 = shl i16 %div.0.be.10.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_117)) begin
		main_backedge10ii_406_reg <= main_backedge10ii_406;
		if (start == 1'b0 && ^(main_backedge10ii_406) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_406_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %407 = shl i32 %L_num.0.be.10.i.i, 1*/
		main_backedge10ii_407 = (main_backedge10ii_L_num0be10ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %407 = shl i32 %L_num.0.be.10.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_117)) begin
		main_backedge10ii_407_reg <= main_backedge10ii_407;
		if (start == 1'b0 && ^(main_backedge10ii_407) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_407_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.10.i.i*/
	/*   %408 = icmp slt i32 %407, %341*/
		main_backedge10ii_408 = ($signed(main_backedge10ii_407) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.10.i.i*/
	/*   %408 = icmp slt i32 %407, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge10ii_117)) begin
		main_backedge10ii_408_reg <= main_backedge10ii_408;
		if (start == 1'b0 && ^(main_backedge10ii_408) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge10ii_408_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %341*/
		main_409_410 = (main_backedge10ii_407_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %409*/
	/*   %410 = sub nsw i32 %407, %341*/
	if ((cur_state == LEGUP_F_main_BB__409_118)) begin
		main_409_410_reg <= main_409_410;
		if (start == 1'b0 && ^(main_409_410) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_409_410_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %409*/
	/*   %411 = or i16 %406, 1*/
		main_409_411 = (main_backedge10ii_406_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %409*/
	/*   %411 = or i16 %406, 1*/
	if ((cur_state == LEGUP_F_main_BB__409_118)) begin
		main_409_411_reg <= main_409_411;
		if (start == 1'b0 && ^(main_409_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_409_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_408 == 1'd1))) begin
		main_backedge11ii_L_num0be11ii = main_backedge10ii_407;
	end
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.10.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__409_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge11ii_L_num0be11ii = main_409_410;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_408 == 1'd1))) begin
		main_backedge11ii_L_num0be11ii_reg <= main_backedge11ii_L_num0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_L_num0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_L_num0be11ii_reg"); $finish; end
	end
	/* main: %.backedge.11.i.i*/
	/*   %L_num.0.be.11.i.i = phi i32 [ %410, %409 ], [ %407, %.backedge.10.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__409_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge11ii_L_num0be11ii_reg <= main_backedge11ii_L_num0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_L_num0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_L_num0be11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_408 == 1'd1))) begin
		main_backedge11ii_div0be11ii = main_backedge10ii_406;
	end
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.10.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__409_118) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge11ii_div0be11ii = main_409_411;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.10.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge10ii_117) & (memory_controller_waitrequest == 1'd0)) & (main_backedge10ii_408 == 1'd1))) begin
		main_backedge11ii_div0be11ii_reg <= main_backedge11ii_div0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_div0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_div0be11ii_reg"); $finish; end
	end
	/* main: %.backedge.11.i.i*/
	/*   %div.0.be.11.i.i = phi i16 [ %411, %409 ], [ %406, %.backedge.10.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__409_118) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge11ii_div0be11ii_reg <= main_backedge11ii_div0be11ii;
		if (start == 1'b0 && ^(main_backedge11ii_div0be11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_div0be11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %412 = shl i16 %div.0.be.11.i.i, 1*/
		main_backedge11ii_412 = (main_backedge11ii_div0be11ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %412 = shl i16 %div.0.be.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_119)) begin
		main_backedge11ii_412_reg <= main_backedge11ii_412;
		if (start == 1'b0 && ^(main_backedge11ii_412) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_412_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %413 = shl i32 %L_num.0.be.11.i.i, 1*/
		main_backedge11ii_413 = (main_backedge11ii_L_num0be11ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %413 = shl i32 %L_num.0.be.11.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_119)) begin
		main_backedge11ii_413_reg <= main_backedge11ii_413;
		if (start == 1'b0 && ^(main_backedge11ii_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.11.i.i*/
	/*   %414 = icmp slt i32 %413, %341*/
		main_backedge11ii_414 = ($signed(main_backedge11ii_413) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.11.i.i*/
	/*   %414 = icmp slt i32 %413, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge11ii_119)) begin
		main_backedge11ii_414_reg <= main_backedge11ii_414;
		if (start == 1'b0 && ^(main_backedge11ii_414) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge11ii_414_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %341*/
		main_415_416 = (main_backedge11ii_413_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %415*/
	/*   %416 = sub nsw i32 %413, %341*/
	if ((cur_state == LEGUP_F_main_BB__415_120)) begin
		main_415_416_reg <= main_415_416;
		if (start == 1'b0 && ^(main_415_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %415*/
	/*   %417 = or i16 %412, 1*/
		main_415_417 = (main_backedge11ii_412_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %415*/
	/*   %417 = or i16 %412, 1*/
	if ((cur_state == LEGUP_F_main_BB__415_120)) begin
		main_415_417_reg <= main_415_417;
		if (start == 1'b0 && ^(main_415_417) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_415_417_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_414 == 1'd1))) begin
		main_backedge12ii_L_num0be12ii = main_backedge11ii_413;
	end
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__415_120) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge12ii_L_num0be12ii = main_415_416;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_414 == 1'd1))) begin
		main_backedge12ii_L_num0be12ii_reg <= main_backedge12ii_L_num0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_L_num0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_L_num0be12ii_reg"); $finish; end
	end
	/* main: %.backedge.12.i.i*/
	/*   %L_num.0.be.12.i.i = phi i32 [ %416, %415 ], [ %413, %.backedge.11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__415_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge12ii_L_num0be12ii_reg <= main_backedge12ii_L_num0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_L_num0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_L_num0be12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_414 == 1'd1))) begin
		main_backedge12ii_div0be12ii = main_backedge11ii_412;
	end
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.11.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__415_120) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge12ii_div0be12ii = main_415_417;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.11.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge11ii_119) & (memory_controller_waitrequest == 1'd0)) & (main_backedge11ii_414 == 1'd1))) begin
		main_backedge12ii_div0be12ii_reg <= main_backedge12ii_div0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_div0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_div0be12ii_reg"); $finish; end
	end
	/* main: %.backedge.12.i.i*/
	/*   %div.0.be.12.i.i = phi i16 [ %417, %415 ], [ %412, %.backedge.11.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__415_120) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge12ii_div0be12ii_reg <= main_backedge12ii_div0be12ii;
		if (start == 1'b0 && ^(main_backedge12ii_div0be12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_div0be12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %418 = shl i16 %div.0.be.12.i.i, 1*/
		main_backedge12ii_418 = (main_backedge12ii_div0be12ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %418 = shl i16 %div.0.be.12.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_121)) begin
		main_backedge12ii_418_reg <= main_backedge12ii_418;
		if (start == 1'b0 && ^(main_backedge12ii_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %419 = shl i32 %L_num.0.be.12.i.i, 1*/
		main_backedge12ii_419 = (main_backedge12ii_L_num0be12ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %419 = shl i32 %L_num.0.be.12.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_121)) begin
		main_backedge12ii_419_reg <= main_backedge12ii_419;
		if (start == 1'b0 && ^(main_backedge12ii_419) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_419_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.12.i.i*/
	/*   %420 = icmp slt i32 %419, %341*/
		main_backedge12ii_420 = ($signed(main_backedge12ii_419) < $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.12.i.i*/
	/*   %420 = icmp slt i32 %419, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge12ii_121)) begin
		main_backedge12ii_420_reg <= main_backedge12ii_420;
		if (start == 1'b0 && ^(main_backedge12ii_420) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge12ii_420_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %341*/
		main_421_422 = (main_backedge12ii_419_reg - main_340_341_reg);
end
always @(posedge clk) begin
	/* main: %421*/
	/*   %422 = sub nsw i32 %419, %341*/
	if ((cur_state == LEGUP_F_main_BB__421_122)) begin
		main_421_422_reg <= main_421_422;
		if (start == 1'b0 && ^(main_421_422) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_421_422_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %421*/
	/*   %423 = or i16 %418, 1*/
		main_421_423 = (main_backedge12ii_418_reg | 16'd1);
end
always @(posedge clk) begin
	/* main: %421*/
	/*   %423 = or i16 %418, 1*/
	if ((cur_state == LEGUP_F_main_BB__421_122)) begin
		main_421_423_reg <= main_421_423;
		if (start == 1'b0 && ^(main_421_423) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_421_423_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_420 == 1'd1))) begin
		main_backedge13ii_L_num0be13ii = main_backedge12ii_419;
	end
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.12.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__421_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge13ii_L_num0be13ii = main_421_422;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_420 == 1'd1))) begin
		main_backedge13ii_L_num0be13ii_reg <= main_backedge13ii_L_num0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_L_num0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_L_num0be13ii_reg"); $finish; end
	end
	/* main: %.backedge.13.i.i*/
	/*   %L_num.0.be.13.i.i = phi i32 [ %422, %421 ], [ %419, %.backedge.12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__421_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge13ii_L_num0be13ii_reg <= main_backedge13ii_L_num0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_L_num0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_L_num0be13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_420 == 1'd1))) begin
		main_backedge13ii_div0be13ii = main_backedge12ii_418;
	end
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.12.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__421_122) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_backedge13ii_div0be13ii = main_421_423;
	end
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.12.i.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_backedge12ii_121) & (memory_controller_waitrequest == 1'd0)) & (main_backedge12ii_420 == 1'd1))) begin
		main_backedge13ii_div0be13ii_reg <= main_backedge13ii_div0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_div0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_div0be13ii_reg"); $finish; end
	end
	/* main: %.backedge.13.i.i*/
	/*   %div.0.be.13.i.i = phi i16 [ %423, %421 ], [ %418, %.backedge.12.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__421_122) & (memory_controller_waitrequest == 1'd0))) begin
		main_backedge13ii_div0be13ii_reg <= main_backedge13ii_div0be13ii;
		if (start == 1'b0 && ^(main_backedge13ii_div0be13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_div0be13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %424 = shl i16 %div.0.be.13.i.i, 1*/
		main_backedge13ii_424 = (main_backedge13ii_div0be13ii_reg <<< (16'd1 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %424 = shl i16 %div.0.be.13.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_123)) begin
		main_backedge13ii_424_reg <= main_backedge13ii_424;
		if (start == 1'b0 && ^(main_backedge13ii_424) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_424_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %425 = shl i32 %L_num.0.be.13.i.i, 1*/
		main_backedge13ii_425 = (main_backedge13ii_L_num0be13ii_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %425 = shl i32 %L_num.0.be.13.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_123)) begin
		main_backedge13ii_425_reg <= main_backedge13ii_425;
		if (start == 1'b0 && ^(main_backedge13ii_425) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_425_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %not..i.i = icmp sge i32 %425, %341*/
		main_backedge13ii_notii = ($signed(main_backedge13ii_425) >= $signed(main_340_341_reg));
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %not..i.i = icmp sge i32 %425, %341*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_123)) begin
		main_backedge13ii_notii_reg <= main_backedge13ii_notii;
		if (start == 1'b0 && ^(main_backedge13ii_notii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_notii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %426 = zext i1 %not..i.i to i16*/
		main_backedge13ii_426 = main_backedge13ii_notii;
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %426 = zext i1 %not..i.i to i16*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_123)) begin
		main_backedge13ii_426_reg <= main_backedge13ii_426;
		if (start == 1'b0 && ^(main_backedge13ii_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.backedge.13.i.i*/
	/*   %.4.i.i = or i16 %424, %426*/
		main_backedge13ii_4ii = (main_backedge13ii_424 | main_backedge13ii_426);
end
always @(posedge clk) begin
	/* main: %.backedge.13.i.i*/
	/*   %.4.i.i = or i16 %424, %426*/
	if ((cur_state == LEGUP_F_main_BB_backedge13ii_123)) begin
		main_backedge13ii_4ii_reg <= main_backedge13ii_4ii;
		if (start == 1'b0 && ^(main_backedge13ii_4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_backedge13ii_4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %427 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %340 ]*/
	if ((((cur_state == LEGUP_F_main_BB__340_96) & (memory_controller_waitrequest == 1'd0)) & (main_340_342 == 1'd1))) begin
		main_gsm_divexiti_427 = 16'd0;
	end
	/* main: %gsm_div.exit.i*/
	/*   %427 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %340 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_backedge13ii_123) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_divexiti_427 = main_backedge13ii_4ii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %427 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %340 ]*/
	if ((((cur_state == LEGUP_F_main_BB__340_96) & (memory_controller_waitrequest == 1'd0)) & (main_340_342 == 1'd1))) begin
		main_gsm_divexiti_427_reg <= main_gsm_divexiti_427;
		if (start == 1'b0 && ^(main_gsm_divexiti_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_427_reg"); $finish; end
	end
	/* main: %gsm_div.exit.i*/
	/*   %427 = phi i16 [ %.4.i.i, %.backedge.13.i.i ], [ 0, %340 ]*/
	if (((cur_state == LEGUP_F_main_BB_backedge13ii_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_divexiti_427_reg <= main_gsm_divexiti_427;
		if (start == 1'b0 && ^(main_gsm_divexiti_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %428 = load i16* %319, align 2, !tbaa !1*/
		main_gsm_divexiti_428 = main_0_Pi_out_b;
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %428 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_125)) begin
		main_gsm_divexiti_428_reg <= main_gsm_divexiti_428;
		if (start == 1'b0 && ^(main_gsm_divexiti_428) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_428_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_div.exit.i*/
	/*   %429 = icmp sgt i16 %428, 0*/
		main_gsm_divexiti_429 = ($signed(main_gsm_divexiti_428) > $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %gsm_div.exit.i*/
	/*   %429 = icmp sgt i16 %428, 0*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_125)) begin
		main_gsm_divexiti_429_reg <= main_gsm_divexiti_429;
		if (start == 1'b0 && ^(main_gsm_divexiti_429) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_divexiti_429_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %430*/
	/*   %431 = sub i16 0, %427*/
		main_430_431 = (16'd0 - main_gsm_divexiti_427_reg);
end
always @(posedge clk) begin
	/* main: %430*/
	/*   %431 = sub i16 0, %427*/
	if ((cur_state == LEGUP_F_main_BB__430_126)) begin
		main_430_431_reg <= main_430_431;
		if (start == 1'b0 && ^(main_430_431) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_430_431_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %432*/
	/*   %433 = phi i16 [ %431, %430 ], [ %427, %gsm_div.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_divexiti_125) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_divexiti_429 == 1'd0))) begin
		main_432_433 = main_gsm_divexiti_427_reg;
	end
	/* main: %432*/
	/*   %433 = phi i16 [ %431, %430 ], [ %427, %gsm_div.exit.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__430_127) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_432_433 = main_430_431_reg;
	end
end
always @(posedge clk) begin
	/* main: %432*/
	/*   %433 = phi i16 [ %431, %430 ], [ %427, %gsm_div.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_divexiti_125) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_divexiti_429 == 1'd0))) begin
		main_432_433_reg <= main_432_433;
		if (start == 1'b0 && ^(main_432_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_433_reg"); $finish; end
	end
	/* main: %432*/
	/*   %433 = phi i16 [ %431, %430 ], [ %427, %gsm_div.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB__430_127) & (memory_controller_waitrequest == 1'd0))) begin
		main_432_433_reg <= main_432_433;
		if (start == 1'b0 && ^(main_432_433) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_433_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %432*/
	/*   %434 = icmp eq i32 %n.029.i, 8*/
		main_432_434 = (main_327_n029i_reg == 32'd8);
end
always @(posedge clk) begin
	/* main: %432*/
	/*   %434 = icmp eq i32 %n.029.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__432_128)) begin
		main_432_434_reg <= main_432_434;
		if (start == 1'b0 && ^(main_432_434) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_432_434_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %435*/
	/*   %436 = load i16* %319, align 2, !tbaa !1*/
		main_435_436 = main_0_Pi_out_b;
end
always @(posedge clk) begin
	/* main: %435*/
	/*   %436 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__435_130)) begin
		main_435_436_reg <= main_435_436;
		if (start == 1'b0 && ^(main_435_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_435_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %435*/
	/*   %437 = icmp eq i16 %433, -32768*/
		main_435_437 = (main_432_433_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %435*/
	/*   %437 = icmp eq i16 %433, -32768*/
	if ((cur_state == LEGUP_F_main_BB__435_129)) begin
		main_435_437_reg <= main_435_437;
		if (start == 1'b0 && ^(main_435_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_435_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %435*/
	/*   %438 = icmp eq i16 %436, -32768*/
		main_435_438 = (main_435_436 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %435*/
	/*   %438 = icmp eq i16 %436, -32768*/
	if ((cur_state == LEGUP_F_main_BB__435_130)) begin
		main_435_438_reg <= main_435_438;
		if (start == 1'b0 && ^(main_435_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_435_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %435*/
	/*   %or.cond.i9.i = and i1 %437, %438*/
		main_435_orcondi9i = (main_435_437_reg & main_435_438);
end
always @(posedge clk) begin
	/* main: %435*/
	/*   %or.cond.i9.i = and i1 %437, %438*/
	if ((cur_state == LEGUP_F_main_BB__435_130)) begin
		main_435_orcondi9i_reg <= main_435_orcondi9i;
		if (start == 1'b0 && ^(main_435_orcondi9i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_435_orcondi9i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %439*/
	/*   %440 = sext i16 %433 to i32*/
		main_439_440 = $signed(main_432_433_reg);
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %440 = sext i16 %433 to i32*/
	if ((cur_state == LEGUP_F_main_BB__439_131)) begin
		main_439_440_reg <= main_439_440;
		if (start == 1'b0 && ^(main_439_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_440_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %439*/
	/*   %441 = sext i16 %436 to i32*/
		main_439_441 = $signed(main_435_436_reg);
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %441 = sext i16 %436 to i32*/
	if ((cur_state == LEGUP_F_main_BB__439_131)) begin
		main_439_441_reg <= main_439_441;
		if (start == 1'b0 && ^(main_439_441) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_441_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %439*/
	/*   %442 = shl nsw i32 %441, 1*/
		main_439_442 = (main_439_441 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %442 = shl nsw i32 %441, 1*/
	if ((cur_state == LEGUP_F_main_BB__439_131)) begin
		main_439_442_reg <= main_439_442;
		if (start == 1'b0 && ^(main_439_442) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_442_reg"); $finish; end
	end
end
always @(*) begin
	main_439_443 = main_439_443_stage0_reg;
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %443 = mul i32 %442, %440*/
	if ((cur_state == LEGUP_F_main_BB__439_132)) begin
		main_439_443_reg <= main_439_443;
		if (start == 1'b0 && ^(main_439_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_443_reg"); $finish; end
	end
	/* main: %439*/
	/*   %443 = mul i32 %442, %440*/
	if ((cur_state == LEGUP_F_main_BB__439_132)) begin
		main_439_443_reg <= main_439_443;
		if (start == 1'b0 && ^(main_439_443) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_443_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %439*/
	/*   %444 = add i32 %443, 32768*/
		main_439_444 = (main_439_443 + 32'd32768);
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %444 = add i32 %443, 32768*/
	if ((cur_state == LEGUP_F_main_BB__439_132)) begin
		main_439_444_reg <= main_439_444;
		if (start == 1'b0 && ^(main_439_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %439*/
	/*   %phitmp.i11 = ashr i32 %444, 16*/
		main_439_phitmpi11 = ($signed(main_439_444) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %phitmp.i11 = ashr i32 %444, 16*/
	if ((cur_state == LEGUP_F_main_BB__439_132)) begin
		main_439_phitmpi11_reg <= main_439_phitmpi11;
		if (start == 1'b0 && ^(main_439_phitmpi11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_439_phitmpi11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %439 ], [ 32767, %435 ]*/
	if ((((cur_state == LEGUP_F_main_BB__435_130) & (memory_controller_waitrequest == 1'd0)) & (main_435_orcondi9i == 1'd1))) begin
		main_gsm_mult_rexit11i_0i10i = 32'd32767;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %439 ], [ 32767, %435 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__439_132) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexit11i_0i10i = main_439_phitmpi11;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %439 ], [ 32767, %435 ]*/
	if ((((cur_state == LEGUP_F_main_BB__435_130) & (memory_controller_waitrequest == 1'd0)) & (main_435_orcondi9i == 1'd1))) begin
		main_gsm_mult_rexit11i_0i10i_reg <= main_gsm_mult_rexit11i_0i10i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_0i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_0i10i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %.0.i10.i = phi i32 [ %phitmp.i11, %439 ], [ 32767, %435 ]*/
	if (((cur_state == LEGUP_F_main_BB__439_132) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexit11i_0i10i_reg <= main_gsm_mult_rexit11i_0i10i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_0i10i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_0i10i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %445 = load i16* %318, align 2, !tbaa !1*/
		main_gsm_mult_rexit11i_445 = main_0_Pi_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %445 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134)) begin
		main_gsm_mult_rexit11i_445_reg <= main_gsm_mult_rexit11i_445;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %446 = sext i16 %445 to i32*/
		main_gsm_mult_rexit11i_446 = $signed(main_gsm_mult_rexit11i_445);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %446 = sext i16 %445 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134)) begin
		main_gsm_mult_rexit11i_446_reg <= main_gsm_mult_rexit11i_446;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_446) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_446_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %447 = add nsw i32 %446, %.0.i10.i*/
		main_gsm_mult_rexit11i_447 = (main_gsm_mult_rexit11i_446 + main_gsm_mult_rexit11i_0i10i_reg);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %447 = add nsw i32 %446, %.0.i10.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134)) begin
		main_gsm_mult_rexit11i_447_reg <= main_gsm_mult_rexit11i_447;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %448 = icmp slt i32 %447, -32768*/
		main_gsm_mult_rexit11i_448 = ($signed(main_gsm_mult_rexit11i_447) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit11.i*/
	/*   %448 = icmp slt i32 %447, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134)) begin
		main_gsm_mult_rexit11i_448_reg <= main_gsm_mult_rexit11i_448;
		if (start == 1'b0 && ^(main_gsm_mult_rexit11i_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit11i_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %449*/
	/*   %450 = icmp sgt i32 %447, 32767*/
		main_449_450 = ($signed(main_gsm_mult_rexit11i_447_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %449*/
	/*   %450 = icmp sgt i32 %447, 32767*/
	if ((cur_state == LEGUP_F_main_BB__449_135)) begin
		main_449_450_reg <= main_449_450;
		if (start == 1'b0 && ^(main_449_450) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_449_450_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %449*/
	/*   %451 = trunc i32 %447 to i16*/
		main_449_451 = main_gsm_mult_rexit11i_447_reg[15:0];
end
always @(posedge clk) begin
	/* main: %449*/
	/*   %451 = trunc i32 %447 to i16*/
	if ((cur_state == LEGUP_F_main_BB__449_135)) begin
		main_449_451_reg <= main_449_451;
		if (start == 1'b0 && ^(main_449_451) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_449_451_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %449*/
	/*   %phitmp.i7.i = select i1 %450, i16 32767, i16 %451*/
		main_449_phitmpi7i = (main_449_450 ? 16'd32767 : main_449_451);
end
always @(posedge clk) begin
	/* main: %449*/
	/*   %phitmp.i7.i = select i1 %450, i16 32767, i16 %451*/
	if ((cur_state == LEGUP_F_main_BB__449_135)) begin
		main_449_phitmpi7i_reg <= main_449_phitmpi7i;
		if (start == 1'b0 && ^(main_449_phitmpi7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_449_phitmpi7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit8.i*/
	/*   %452 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %449 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit11i_448 == 1'd1))) begin
		main_gsm_addexit8i_452 = -16'd32768;
	end
	/* main: %gsm_add.exit8.i*/
	/*   %452 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %449 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__449_135) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexit8i_452 = main_449_phitmpi7i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit8.i*/
	/*   %452 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %449 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_134) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit11i_448 == 1'd1))) begin
		main_gsm_addexit8i_452_reg <= main_gsm_addexit8i_452;
		if (start == 1'b0 && ^(main_gsm_addexit8i_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_452_reg"); $finish; end
	end
	/* main: %gsm_add.exit8.i*/
	/*   %452 = phi i16 [ -32768, %gsm_mult_r.exit11.i ], [ %phitmp.i7.i, %449 ]*/
	if (((cur_state == LEGUP_F_main_BB__449_135) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexit8i_452_reg <= main_gsm_addexit8i_452;
		if (start == 1'b0 && ^(main_gsm_addexit8i_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit8.i*/
	/*   %453 = icmp slt i32 %329, 1*/
		main_gsm_addexit8i_453 = ($signed(main_327_329_reg) < $signed(32'd1));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit8.i*/
	/*   %453 = icmp slt i32 %329, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_136)) begin
		main_gsm_addexit8i_453_reg <= main_gsm_addexit8i_453;
		if (start == 1'b0 && ^(main_gsm_addexit8i_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit8i_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %indvar16 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next17, %gsm_add.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27ipreheader_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph27i_indvar16 = 32'd0;
	end
	/* main: %.lr.ph27.i*/
	/*   %indvar16 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next17, %gsm_add.exit.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_gsm_addexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexiti_exitcond20_reg == 1'd0))) */ begin
		main_lrph27i_indvar16 = main_gsm_addexiti_indvarnext17_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %indvar16 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next17, %gsm_add.exit.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph27ipreheader_138) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph27i_indvar16_reg <= main_lrph27i_indvar16;
		if (start == 1'b0 && ^(main_lrph27i_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_indvar16_reg"); $finish; end
	end
	/* main: %.lr.ph27.i*/
	/*   %indvar16 = phi i32 [ 0, %.lr.ph27.i.preheader ], [ %indvar.next17, %gsm_add.exit.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexiti_154) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexiti_exitcond20_reg == 1'd0))) begin
		main_lrph27i_indvar16_reg <= main_lrph27i_indvar16;
		if (start == 1'b0 && ^(main_lrph27i_indvar16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_indvar16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %454 = add i32 %indvar16, 1*/
		main_lrph27i_454 = (main_lrph27i_indvar16_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %454 = add i32 %indvar16, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_139)) begin
		main_lrph27i_454_reg <= main_lrph27i_454;
		if (start == 1'b0 && ^(main_lrph27i_454) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_454_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep21 = getelementptr [9 x i16]* %P.i, i32 0, i32 %454*/
		main_lrph27i_scevgep21 = (1'd0 | (2 * main_lrph27i_454_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep21 = getelementptr [9 x i16]* %P.i, i32 0, i32 %454*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_lrph27i_scevgep21_reg <= main_lrph27i_scevgep21;
		if (start == 1'b0 && ^(main_lrph27i_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %455 = add i32 %indvar16, 2*/
		main_lrph27i_455 = (main_lrph27i_indvar16_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %455 = add i32 %indvar16, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_139)) begin
		main_lrph27i_455_reg <= main_lrph27i_455;
		if (start == 1'b0 && ^(main_lrph27i_455) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_455_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep22 = getelementptr [9 x i16]* %P.i, i32 0, i32 %455*/
		main_lrph27i_scevgep22 = (1'd0 | (2 * main_lrph27i_455_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep22 = getelementptr [9 x i16]* %P.i, i32 0, i32 %455*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_lrph27i_scevgep22_reg <= main_lrph27i_scevgep22;
		if (start == 1'b0 && ^(main_lrph27i_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep23 = getelementptr [9 x i16]* %K.i, i32 0, i32 %454*/
		main_lrph27i_scevgep23 = (1'd0 | (2 * main_lrph27i_454_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %scevgep23 = getelementptr [9 x i16]* %K.i, i32 0, i32 %454*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_lrph27i_scevgep23_reg <= main_lrph27i_scevgep23;
		if (start == 1'b0 && ^(main_lrph27i_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %456 = load i16* %scevgep23, align 2, !tbaa !1*/
		main_lrph27i_456 = main_0_Ki_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %456 = load i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_141)) begin
		main_lrph27i_456_reg <= main_lrph27i_456;
		if (start == 1'b0 && ^(main_lrph27i_456) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_456_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %457 = load i16* %.128.i, align 2, !tbaa !1*/
		main_lrph27i_457 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %457 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_lrph27i_457_reg <= main_lrph27i_457;
		if (start == 1'b0 && ^(main_lrph27i_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %458 = icmp eq i16 %457, -32768*/
		main_lrph27i_458 = (main_lrph27i_457 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %458 = icmp eq i16 %457, -32768*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_lrph27i_458_reg <= main_lrph27i_458;
		if (start == 1'b0 && ^(main_lrph27i_458) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_458_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %459 = icmp eq i16 %456, -32768*/
		main_lrph27i_459 = (main_lrph27i_456 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %459 = icmp eq i16 %456, -32768*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_141)) begin
		main_lrph27i_459_reg <= main_lrph27i_459;
		if (start == 1'b0 && ^(main_lrph27i_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph27.i*/
	/*   %or.cond.i4.i = and i1 %458, %459*/
		main_lrph27i_orcondi4i = (main_lrph27i_458_reg & main_lrph27i_459);
end
always @(posedge clk) begin
	/* main: %.lr.ph27.i*/
	/*   %or.cond.i4.i = and i1 %458, %459*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_141)) begin
		main_lrph27i_orcondi4i_reg <= main_lrph27i_orcondi4i;
		if (start == 1'b0 && ^(main_lrph27i_orcondi4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph27i_orcondi4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %460*/
	/*   %461 = sext i16 %457 to i32*/
		main_460_461 = $signed(main_lrph27i_457_reg);
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %461 = sext i16 %457 to i32*/
	if ((cur_state == LEGUP_F_main_BB__460_142)) begin
		main_460_461_reg <= main_460_461;
		if (start == 1'b0 && ^(main_460_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %460*/
	/*   %462 = sext i16 %456 to i32*/
		main_460_462 = $signed(main_lrph27i_456_reg);
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %462 = sext i16 %456 to i32*/
	if ((cur_state == LEGUP_F_main_BB__460_142)) begin
		main_460_462_reg <= main_460_462;
		if (start == 1'b0 && ^(main_460_462) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_462_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %460*/
	/*   %463 = shl nsw i32 %462, 1*/
		main_460_463 = (main_460_462 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %463 = shl nsw i32 %462, 1*/
	if ((cur_state == LEGUP_F_main_BB__460_142)) begin
		main_460_463_reg <= main_460_463;
		if (start == 1'b0 && ^(main_460_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_463_reg"); $finish; end
	end
end
always @(*) begin
	main_460_464 = main_460_464_stage0_reg;
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %464 = mul i32 %463, %461*/
	if ((cur_state == LEGUP_F_main_BB__460_143)) begin
		main_460_464_reg <= main_460_464;
		if (start == 1'b0 && ^(main_460_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_464_reg"); $finish; end
	end
	/* main: %460*/
	/*   %464 = mul i32 %463, %461*/
	if ((cur_state == LEGUP_F_main_BB__460_143)) begin
		main_460_464_reg <= main_460_464;
		if (start == 1'b0 && ^(main_460_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %460*/
	/*   %465 = add i32 %464, 32768*/
		main_460_465 = (main_460_464 + 32'd32768);
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %465 = add i32 %464, 32768*/
	if ((cur_state == LEGUP_F_main_BB__460_143)) begin
		main_460_465_reg <= main_460_465;
		if (start == 1'b0 && ^(main_460_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %460*/
	/*   %phitmp12.i = ashr i32 %465, 16*/
		main_460_phitmp12i = ($signed(main_460_465) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %phitmp12.i = ashr i32 %465, 16*/
	if ((cur_state == LEGUP_F_main_BB__460_143)) begin
		main_460_phitmp12i_reg <= main_460_phitmp12i;
		if (start == 1'b0 && ^(main_460_phitmp12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_460_phitmp12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %460 ], [ 32767, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph27i_141) & (memory_controller_waitrequest == 1'd0)) & (main_lrph27i_orcondi4i == 1'd1))) begin
		main_gsm_mult_rexit6i_0i5i = 32'd32767;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %460 ], [ 32767, %.lr.ph27.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__460_143) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexit6i_0i5i = main_460_phitmp12i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %460 ], [ 32767, %.lr.ph27.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrph27i_141) & (memory_controller_waitrequest == 1'd0)) & (main_lrph27i_orcondi4i == 1'd1))) begin
		main_gsm_mult_rexit6i_0i5i_reg <= main_gsm_mult_rexit6i_0i5i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_0i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_0i5i_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %.0.i5.i = phi i32 [ %phitmp12.i, %460 ], [ 32767, %.lr.ph27.i ]*/
	if (((cur_state == LEGUP_F_main_BB__460_143) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexit6i_0i5i_reg <= main_gsm_mult_rexit6i_0i5i;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_0i5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_0i5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %466 = load i16* %scevgep22, align 2, !tbaa !1*/
		main_gsm_mult_rexit6i_466 = main_0_Pi_out_b;
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %466 = load i16* %scevgep22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145)) begin
		main_gsm_mult_rexit6i_466_reg <= main_gsm_mult_rexit6i_466;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_466) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_466_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %467 = sext i16 %466 to i32*/
		main_gsm_mult_rexit6i_467 = $signed(main_gsm_mult_rexit6i_466);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %467 = sext i16 %466 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145)) begin
		main_gsm_mult_rexit6i_467_reg <= main_gsm_mult_rexit6i_467;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_467) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_467_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %468 = add nsw i32 %467, %.0.i5.i*/
		main_gsm_mult_rexit6i_468 = (main_gsm_mult_rexit6i_467 + main_gsm_mult_rexit6i_0i5i_reg);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %468 = add nsw i32 %467, %.0.i5.i*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145)) begin
		main_gsm_mult_rexit6i_468_reg <= main_gsm_mult_rexit6i_468;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_468) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_468_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %469 = icmp slt i32 %468, -32768*/
		main_gsm_mult_rexit6i_469 = ($signed(main_gsm_mult_rexit6i_468) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit6.i*/
	/*   %469 = icmp slt i32 %468, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145)) begin
		main_gsm_mult_rexit6i_469_reg <= main_gsm_mult_rexit6i_469;
		if (start == 1'b0 && ^(main_gsm_mult_rexit6i_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexit6i_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %470*/
	/*   %471 = icmp sgt i32 %468, 32767*/
		main_470_471 = ($signed(main_gsm_mult_rexit6i_468_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %470*/
	/*   %471 = icmp sgt i32 %468, 32767*/
	if ((cur_state == LEGUP_F_main_BB__470_146)) begin
		main_470_471_reg <= main_470_471;
		if (start == 1'b0 && ^(main_470_471) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_470_471_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %470*/
	/*   %472 = trunc i32 %468 to i16*/
		main_470_472 = main_gsm_mult_rexit6i_468_reg[15:0];
end
always @(posedge clk) begin
	/* main: %470*/
	/*   %472 = trunc i32 %468 to i16*/
	if ((cur_state == LEGUP_F_main_BB__470_146)) begin
		main_470_472_reg <= main_470_472;
		if (start == 1'b0 && ^(main_470_472) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_470_472_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %470*/
	/*   %phitmp.i2.i = select i1 %471, i16 32767, i16 %472*/
		main_470_phitmpi2i = (main_470_471 ? 16'd32767 : main_470_472);
end
always @(posedge clk) begin
	/* main: %470*/
	/*   %phitmp.i2.i = select i1 %471, i16 32767, i16 %472*/
	if ((cur_state == LEGUP_F_main_BB__470_146)) begin
		main_470_phitmpi2i_reg <= main_470_phitmpi2i;
		if (start == 1'b0 && ^(main_470_phitmpi2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_470_phitmpi2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %473 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %470 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit6i_469 == 1'd1))) begin
		main_gsm_addexit3i_473 = -16'd32768;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %473 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %470 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__470_146) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexit3i_473 = main_470_phitmpi2i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %473 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %470 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_145) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexit6i_469 == 1'd1))) begin
		main_gsm_addexit3i_473_reg <= main_gsm_addexit3i_473;
		if (start == 1'b0 && ^(main_gsm_addexit3i_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_473_reg"); $finish; end
	end
	/* main: %gsm_add.exit3.i*/
	/*   %473 = phi i16 [ -32768, %gsm_mult_r.exit6.i ], [ %phitmp.i2.i, %470 ]*/
	if (((cur_state == LEGUP_F_main_BB__470_146) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexit3i_473_reg <= main_gsm_addexit3i_473;
		if (start == 1'b0 && ^(main_gsm_addexit3i_473) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_473_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %474 = load i16* %.128.i, align 2, !tbaa !1*/
		main_gsm_addexit3i_474 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %474 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_148)) begin
		main_gsm_addexit3i_474_reg <= main_gsm_addexit3i_474;
		if (start == 1'b0 && ^(main_gsm_addexit3i_474) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_474_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %475 = icmp eq i16 %474, -32768*/
		main_gsm_addexit3i_475 = (main_gsm_addexit3i_474 == -16'd32768);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %475 = icmp eq i16 %474, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_148)) begin
		main_gsm_addexit3i_475_reg <= main_gsm_addexit3i_475;
		if (start == 1'b0 && ^(main_gsm_addexit3i_475) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_475_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %476 = icmp eq i16 %466, -32768*/
		main_gsm_addexit3i_476 = (main_gsm_mult_rexit6i_466_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %476 = icmp eq i16 %466, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_gsm_addexit3i_476_reg <= main_gsm_addexit3i_476;
		if (start == 1'b0 && ^(main_gsm_addexit3i_476) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_476_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit3.i*/
	/*   %or.cond.i.i = and i1 %475, %476*/
		main_gsm_addexit3i_orcondii = (main_gsm_addexit3i_475 & main_gsm_addexit3i_476_reg);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit3.i*/
	/*   %or.cond.i.i = and i1 %475, %476*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_148)) begin
		main_gsm_addexit3i_orcondii_reg <= main_gsm_addexit3i_orcondii;
		if (start == 1'b0 && ^(main_gsm_addexit3i_orcondii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit3i_orcondii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %477*/
	/*   %478 = sext i16 %474 to i32*/
		main_477_478 = $signed(main_gsm_addexit3i_474_reg);
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %478 = sext i16 %474 to i32*/
	if ((cur_state == LEGUP_F_main_BB__477_149)) begin
		main_477_478_reg <= main_477_478;
		if (start == 1'b0 && ^(main_477_478) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_478_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %477*/
	/*   %479 = shl nsw i32 %467, 1*/
		main_477_479 = (main_gsm_mult_rexit6i_467_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %479 = shl nsw i32 %467, 1*/
	if ((cur_state == LEGUP_F_main_BB__477_149)) begin
		main_477_479_reg <= main_477_479;
		if (start == 1'b0 && ^(main_477_479) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_479_reg"); $finish; end
	end
end
always @(*) begin
	main_477_480 = main_477_480_stage0_reg;
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %480 = mul i32 %479, %478*/
	if ((cur_state == LEGUP_F_main_BB__477_150)) begin
		main_477_480_reg <= main_477_480;
		if (start == 1'b0 && ^(main_477_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_480_reg"); $finish; end
	end
	/* main: %477*/
	/*   %480 = mul i32 %479, %478*/
	if ((cur_state == LEGUP_F_main_BB__477_150)) begin
		main_477_480_reg <= main_477_480;
		if (start == 1'b0 && ^(main_477_480) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_480_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %477*/
	/*   %481 = add i32 %480, 32768*/
		main_477_481 = (main_477_480 + 32'd32768);
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %481 = add i32 %480, 32768*/
	if ((cur_state == LEGUP_F_main_BB__477_150)) begin
		main_477_481_reg <= main_477_481;
		if (start == 1'b0 && ^(main_477_481) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_481_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %477*/
	/*   %phitmp13.i = ashr i32 %481, 16*/
		main_477_phitmp13i = ($signed(main_477_481) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %phitmp13.i = ashr i32 %481, 16*/
	if ((cur_state == LEGUP_F_main_BB__477_150)) begin
		main_477_phitmp13i_reg <= main_477_phitmp13i;
		if (start == 1'b0 && ^(main_477_phitmp13i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_477_phitmp13i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %477 ], [ 32767, %gsm_add.exit3.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit3i_148) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit3i_orcondii == 1'd1))) begin
		main_gsm_mult_rexiti13_0i1i12 = 32'd32767;
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %477 ], [ 32767, %gsm_add.exit3.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__477_150) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_mult_rexiti13_0i1i12 = main_477_phitmp13i;
	end
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %477 ], [ 32767, %gsm_add.exit3.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit3i_148) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit3i_orcondii == 1'd1))) begin
		main_gsm_mult_rexiti13_0i1i12_reg <= main_gsm_mult_rexiti13_0i1i12;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_0i1i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_0i1i12_reg"); $finish; end
	end
	/* main: %gsm_mult_r.exit.i13*/
	/*   %.0.i1.i12 = phi i32 [ %phitmp13.i, %477 ], [ 32767, %gsm_add.exit3.i ]*/
	if (((cur_state == LEGUP_F_main_BB__477_150) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_mult_rexiti13_0i1i12_reg <= main_gsm_mult_rexiti13_0i1i12;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_0i1i12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_0i1i12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %482 = sext i16 %456 to i32*/
		main_gsm_mult_rexiti13_482 = $signed(main_lrph27i_456_reg);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %482 = sext i16 %456 to i32*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_151)) begin
		main_gsm_mult_rexiti13_482_reg <= main_gsm_mult_rexiti13_482;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_482) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_482_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %483 = add nsw i32 %482, %.0.i1.i12*/
		main_gsm_mult_rexiti13_483 = (main_gsm_mult_rexiti13_482 + main_gsm_mult_rexiti13_0i1i12_reg);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %483 = add nsw i32 %482, %.0.i1.i12*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_151)) begin
		main_gsm_mult_rexiti13_483_reg <= main_gsm_mult_rexiti13_483;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %484 = icmp slt i32 %483, -32768*/
		main_gsm_mult_rexiti13_484 = ($signed(main_gsm_mult_rexiti13_483) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i13*/
	/*   %484 = icmp slt i32 %483, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_151)) begin
		main_gsm_mult_rexiti13_484_reg <= main_gsm_mult_rexiti13_484;
		if (start == 1'b0 && ^(main_gsm_mult_rexiti13_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_mult_rexiti13_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %486 = icmp sgt i32 %483, 32767*/
		main_485_486 = ($signed(main_gsm_mult_rexiti13_483_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %486 = icmp sgt i32 %483, 32767*/
	if ((cur_state == LEGUP_F_main_BB__485_152)) begin
		main_485_486_reg <= main_485_486;
		if (start == 1'b0 && ^(main_485_486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %487 = trunc i32 %483 to i16*/
		main_485_487 = main_gsm_mult_rexiti13_483_reg[15:0];
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %487 = trunc i32 %483 to i16*/
	if ((cur_state == LEGUP_F_main_BB__485_152)) begin
		main_485_487_reg <= main_485_487;
		if (start == 1'b0 && ^(main_485_487) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_487_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %485*/
	/*   %phitmp.i.i = select i1 %486, i16 32767, i16 %487*/
		main_485_phitmpii = (main_485_486 ? 16'd32767 : main_485_487);
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %phitmp.i.i = select i1 %486, i16 32767, i16 %487*/
	if ((cur_state == LEGUP_F_main_BB__485_152)) begin
		main_485_phitmpii_reg <= main_485_phitmpii;
		if (start == 1'b0 && ^(main_485_phitmpii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_phitmpii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit.i*/
	/*   %488 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_151) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti13_484 == 1'd1))) begin
		main_gsm_addexiti_488 = -16'd32768;
	end
	/* main: %gsm_add.exit.i*/
	/*   %488 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %485 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__485_152) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_gsm_addexiti_488 = main_485_phitmpii;
	end
end
always @(posedge clk) begin
	/* main: %gsm_add.exit.i*/
	/*   %488 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %485 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti13_151) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_mult_rexiti13_484 == 1'd1))) begin
		main_gsm_addexiti_488_reg <= main_gsm_addexiti_488;
		if (start == 1'b0 && ^(main_gsm_addexiti_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_488_reg"); $finish; end
	end
	/* main: %gsm_add.exit.i*/
	/*   %488 = phi i16 [ -32768, %gsm_mult_r.exit.i13 ], [ %phitmp.i.i, %485 ]*/
	if (((cur_state == LEGUP_F_main_BB__485_152) & (memory_controller_waitrequest == 1'd0))) begin
		main_gsm_addexiti_488_reg <= main_gsm_addexiti_488;
		if (start == 1'b0 && ^(main_gsm_addexiti_488) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_488_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit.i*/
	/*   %indvar.next17 = add i32 %indvar16, 1*/
		main_gsm_addexiti_indvarnext17 = (main_lrph27i_indvar16_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit.i*/
	/*   %indvar.next17 = add i32 %indvar16, 1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_153)) begin
		main_gsm_addexiti_indvarnext17_reg <= main_gsm_addexiti_indvarnext17;
		if (start == 1'b0 && ^(main_gsm_addexiti_indvarnext17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_indvarnext17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit.i*/
	/*   %exitcond20 = icmp eq i32 %indvar.next17, %329*/
		main_gsm_addexiti_exitcond20 = (main_gsm_addexiti_indvarnext17 == main_327_329_reg);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit.i*/
	/*   %exitcond20 = icmp eq i32 %indvar.next17, %329*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_153)) begin
		main_gsm_addexiti_exitcond20_reg <= main_gsm_addexiti_exitcond20;
		if (start == 1'b0 && ^(main_gsm_addexiti_exitcond20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexiti_exitcond20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i14*/
	/*   %489 = icmp slt i32 %330, 9*/
		main__crit_edgei14_489 = ($signed(main_327_330_reg) < $signed(32'd9));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i14*/
	/*   %489 = icmp slt i32 %330, 9*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei14_156)) begin
		main__crit_edgei14_489_reg <= main__crit_edgei14_489;
		if (start == 1'b0 && ^(main__crit_edgei14_489) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei14_489_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %319, align 2, !tbaa !1*/
		main__crit_edge43i_prei15 = main_0_Pi_out_b;
end
always @(posedge clk) begin
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_162)) begin
		main__crit_edge43i_prei15_reg <= main__crit_edge43i_prei15;
		if (start == 1'b0 && ^(main__crit_edge43i_prei15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge43i_prei15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge43.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
		main__crit_edge43i_indvarnext19 = (main_327_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge43.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_161)) begin
		main__crit_edge43i_indvarnext19_reg <= main__crit_edge43i_indvarnext19;
		if (start == 1'b0 && ^(main__crit_edge43i_indvarnext19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edge43i_indvarnext19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %indvar = phi i32 [ 0, %Reflection_coefficients.exit.preheader ], [ %indvar.next, %508 ]*/
	if (((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_indvar = 32'd0;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %indvar = phi i32 [ 0, %Reflection_coefficients.exit.preheader ], [ %indvar.next, %508 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__508_172) & (memory_controller_waitrequest == 1'd0)) & (main_508_exitcond_reg == 1'd0))) */ begin
		main_Reflection_coefficientsexit_indvar = main_508_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %indvar = phi i32 [ 0, %Reflection_coefficients.exit.preheader ], [ %indvar.next, %508 ]*/
	if (((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexitpreheader_160) & (memory_controller_waitrequest == 1'd0))) begin
		main_Reflection_coefficientsexit_indvar_reg <= main_Reflection_coefficientsexit_indvar;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_indvar_reg"); $finish; end
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %indvar = phi i32 [ 0, %Reflection_coefficients.exit.preheader ], [ %indvar.next, %508 ]*/
	if ((((cur_state == LEGUP_F_main_BB__508_172) & (memory_controller_waitrequest == 1'd0)) & (main_508_exitcond_reg == 1'd0))) begin
		main_Reflection_coefficientsexit_indvar_reg <= main_Reflection_coefficientsexit_indvar;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %indvar*/
		main_Reflection_coefficientsexit_01ii = (1'd0 | (2 * main_Reflection_coefficientsexit_indvar_reg));
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %.01.i.i = getelementptr [8 x i16]* %LARc, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_163)) begin
		main_Reflection_coefficientsexit_01ii_reg <= main_Reflection_coefficientsexit_01ii;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %490 = load i16* %.01.i.i, align 2, !tbaa !1*/
		main_Reflection_coefficientsexit_490 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %490 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_164)) begin
		main_Reflection_coefficientsexit_490_reg <= main_Reflection_coefficientsexit_490;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %491 = icmp slt i16 %490, 0*/
		main_Reflection_coefficientsexit_491 = ($signed(main_Reflection_coefficientsexit_490) < $signed(16'd0));
end
always @(posedge clk) begin
	/* main: %Reflection_coefficients.exit*/
	/*   %491 = icmp slt i16 %490, 0*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_164)) begin
		main_Reflection_coefficientsexit_491_reg <= main_Reflection_coefficientsexit_491;
		if (start == 1'b0 && ^(main_Reflection_coefficientsexit_491) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Reflection_coefficientsexit_491_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %492*/
	/*   %493 = icmp eq i16 %490, -32768*/
		main_492_493 = (main_Reflection_coefficientsexit_490_reg == -16'd32768);
end
always @(posedge clk) begin
	/* main: %492*/
	/*   %493 = icmp eq i16 %490, -32768*/
	if ((cur_state == LEGUP_F_main_BB__492_165)) begin
		main_492_493_reg <= main_492_493;
		if (start == 1'b0 && ^(main_492_493) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_492_493_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %492*/
	/*   %494 = sub i16 0, %490*/
		main_492_494 = (16'd0 - main_Reflection_coefficientsexit_490_reg);
end
always @(posedge clk) begin
	/* main: %492*/
	/*   %494 = sub i16 0, %490*/
	if ((cur_state == LEGUP_F_main_BB__492_165)) begin
		main_492_494_reg <= main_492_494;
		if (start == 1'b0 && ^(main_492_494) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_492_494_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %495 = phi i16 [ %494, %492 ], [ %490, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_164) & (memory_controller_waitrequest == 1'd0)) & (main_Reflection_coefficientsexit_491 == 1'd0))) begin
		main_gsm_absexitii_495 = main_Reflection_coefficientsexit_490;
	end
	/* main: %gsm_abs.exit.i.i*/
	/*   %495 = phi i16 [ %494, %492 ], [ %490, %Reflection_coefficients.exit ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__492_165) & (memory_controller_waitrequest == 1'd0)) & (main_492_493 == 1'd0))) */ begin
		main_gsm_absexitii_495 = main_492_494;
	end
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %495 = phi i16 [ %494, %492 ], [ %490, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_164) & (memory_controller_waitrequest == 1'd0)) & (main_Reflection_coefficientsexit_491 == 1'd0))) begin
		main_gsm_absexitii_495_reg <= main_gsm_absexitii_495;
		if (start == 1'b0 && ^(main_gsm_absexitii_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_495_reg"); $finish; end
	end
	/* main: %gsm_abs.exit.i.i*/
	/*   %495 = phi i16 [ %494, %492 ], [ %490, %Reflection_coefficients.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB__492_165) & (memory_controller_waitrequest == 1'd0)) & (main_492_493 == 1'd0))) begin
		main_gsm_absexitii_495_reg <= main_gsm_absexitii_495;
		if (start == 1'b0 && ^(main_gsm_absexitii_495) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_495_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %496 = icmp slt i16 %495, 22118*/
		main_gsm_absexitii_496 = ($signed(main_gsm_absexitii_495_reg) < $signed(16'd22118));
end
always @(posedge clk) begin
	/* main: %gsm_abs.exit.i.i*/
	/*   %496 = icmp slt i16 %495, 22118*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexitii_166)) begin
		main_gsm_absexitii_496_reg <= main_gsm_absexitii_496;
		if (start == 1'b0 && ^(main_gsm_absexitii_496) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_absexitii_496_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %498 = sext i16 %495 to i32*/
		main_497_498 = $signed(main_gsm_absexitii_495_reg);
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %498 = sext i16 %495 to i32*/
	if ((cur_state == LEGUP_F_main_BB__497_167)) begin
		main_497_498_reg <= main_497_498;
		if (start == 1'b0 && ^(main_497_498) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_498_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %499 = lshr i32 %498, 1*/
		main_497_499 = (main_497_498 >>> (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %499 = lshr i32 %498, 1*/
	if ((cur_state == LEGUP_F_main_BB__497_167)) begin
		main_497_499_reg <= main_497_499;
		if (start == 1'b0 && ^(main_497_499) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_499_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %497*/
	/*   %500 = trunc i32 %499 to i16*/
		main_497_500 = main_497_499[15:0];
end
always @(posedge clk) begin
	/* main: %497*/
	/*   %500 = trunc i32 %499 to i16*/
	if ((cur_state == LEGUP_F_main_BB__497_167)) begin
		main_497_500_reg <= main_497_500;
		if (start == 1'b0 && ^(main_497_500) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_497_500_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %501*/
	/*   %502 = icmp slt i16 %495, 31130*/
		main_501_502 = ($signed(main_gsm_absexitii_495_reg) < $signed(16'd31130));
end
always @(posedge clk) begin
	/* main: %501*/
	/*   %502 = icmp slt i16 %495, 31130*/
	if ((cur_state == LEGUP_F_main_BB__501_168)) begin
		main_501_502_reg <= main_501_502;
		if (start == 1'b0 && ^(main_501_502) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_501_502_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %503*/
	/*   %504 = add i16 %495, -11059*/
		main_503_504 = (main_gsm_absexitii_495_reg + -16'd11059);
end
always @(posedge clk) begin
	/* main: %503*/
	/*   %504 = add i16 %495, -11059*/
	if ((cur_state == LEGUP_F_main_BB__503_169)) begin
		main_503_504_reg <= main_503_504;
		if (start == 1'b0 && ^(main_503_504) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_503_504_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %505 = phi i16 [ %495, %501 ], [ 32767, %492 ]*/
	if ((((cur_state == LEGUP_F_main_BB__492_165) & (memory_controller_waitrequest == 1'd0)) & (main_492_493 == 1'd1))) begin
		main_threadii_505 = 16'd32767;
	end
	/* main: %.thread.i.i*/
	/*   %505 = phi i16 [ %495, %501 ], [ 32767, %492 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__501_168) & (memory_controller_waitrequest == 1'd0)) & (main_501_502 == 1'd0))) */ begin
		main_threadii_505 = main_gsm_absexitii_495_reg;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %505 = phi i16 [ %495, %501 ], [ 32767, %492 ]*/
	if ((((cur_state == LEGUP_F_main_BB__492_165) & (memory_controller_waitrequest == 1'd0)) & (main_492_493 == 1'd1))) begin
		main_threadii_505_reg <= main_threadii_505;
		if (start == 1'b0 && ^(main_threadii_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_505_reg"); $finish; end
	end
	/* main: %.thread.i.i*/
	/*   %505 = phi i16 [ %495, %501 ], [ 32767, %492 ]*/
	if ((((cur_state == LEGUP_F_main_BB__501_168) & (memory_controller_waitrequest == 1'd0)) & (main_501_502 == 1'd0))) begin
		main_threadii_505_reg <= main_threadii_505;
		if (start == 1'b0 && ^(main_threadii_505) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_505_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %506 = shl i16 %505, 2*/
		main_threadii_506 = (main_threadii_505_reg <<< (16'd2 % 16'd16));
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %506 = shl i16 %505, 2*/
	if ((cur_state == LEGUP_F_main_BB_threadii_170)) begin
		main_threadii_506_reg <= main_threadii_506;
		if (start == 1'b0 && ^(main_threadii_506) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_506_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i.i*/
	/*   %507 = add i16 %506, 26624*/
		main_threadii_507 = (main_threadii_506 + 16'd26624);
end
always @(posedge clk) begin
	/* main: %.thread.i.i*/
	/*   %507 = add i16 %506, 26624*/
	if ((cur_state == LEGUP_F_main_BB_threadii_170)) begin
		main_threadii_507_reg <= main_threadii_507;
		if (start == 1'b0 && ^(main_threadii_507) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadii_507_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__497_167) & (memory_controller_waitrequest == 1'd0))) begin
		main_508_temp0ii = main_497_500;
	end
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	else if (((cur_state == LEGUP_F_main_BB__503_169) & (memory_controller_waitrequest == 1'd0))) begin
		main_508_temp0ii = main_503_504;
	end
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_threadii_170) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_508_temp0ii = main_threadii_507;
	end
end
always @(posedge clk) begin
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__497_167) & (memory_controller_waitrequest == 1'd0))) begin
		main_508_temp0ii_reg <= main_508_temp0ii;
		if (start == 1'b0 && ^(main_508_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_temp0ii_reg"); $finish; end
	end
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB__503_169) & (memory_controller_waitrequest == 1'd0))) begin
		main_508_temp0ii_reg <= main_508_temp0ii;
		if (start == 1'b0 && ^(main_508_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_temp0ii_reg"); $finish; end
	end
	/* main: %508*/
	/*   %temp.0.i.i = phi i16 [ %500, %497 ], [ %504, %503 ], [ %507, %.thread.i.i ]*/
	if (((cur_state == LEGUP_F_main_BB_threadii_170) & (memory_controller_waitrequest == 1'd0))) begin
		main_508_temp0ii_reg <= main_508_temp0ii;
		if (start == 1'b0 && ^(main_508_temp0ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_temp0ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %508*/
	/*   %509 = sub i16 0, %temp.0.i.i*/
		main_508_509 = (16'd0 - main_508_temp0ii_reg);
end
always @(posedge clk) begin
	/* main: %508*/
	/*   %509 = sub i16 0, %temp.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_508_509_reg <= main_508_509;
		if (start == 1'b0 && ^(main_508_509) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_509_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %508*/
	/*   %510 = select i1 %491, i16 %509, i16 %temp.0.i.i*/
		main_508_510 = (main_Reflection_coefficientsexit_491_reg ? main_508_509 : main_508_temp0ii_reg);
end
always @(posedge clk) begin
	/* main: %508*/
	/*   %510 = select i1 %491, i16 %509, i16 %temp.0.i.i*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_508_510_reg <= main_508_510;
		if (start == 1'b0 && ^(main_508_510) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_510_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %508*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_508_indvarnext = (main_Reflection_coefficientsexit_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %508*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_508_indvarnext_reg <= main_508_indvarnext;
		if (start == 1'b0 && ^(main_508_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %508*/
	/*   %exitcond = icmp eq i32 %indvar.next, 8*/
		main_508_exitcond = (main_508_indvarnext == 32'd8);
end
always @(posedge clk) begin
	/* main: %508*/
	/*   %exitcond = icmp eq i32 %indvar.next, 8*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_508_exitcond_reg <= main_508_exitcond;
		if (start == 1'b0 && ^(main_508_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_508_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %511 = load i16* %15, align 2, !tbaa !1*/
		main_Gsm_LPC_Analysisexit_511 = main_0_LARc_out_b;
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %511 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_174)) begin
		main_Gsm_LPC_Analysisexit_511_reg <= main_Gsm_LPC_Analysisexit_511;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_511) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_511_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %512 = sext i16 %511 to i32*/
		main_Gsm_LPC_Analysisexit_512 = $signed(main_Gsm_LPC_Analysisexit_511);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %512 = sext i16 %511 to i32*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_174)) begin
		main_Gsm_LPC_Analysisexit_512_reg <= main_Gsm_LPC_Analysisexit_512;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_512) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_512_reg"); $finish; end
	end
end
always @(*) begin
	main_Gsm_LPC_Analysisexit_513 = main_Gsm_LPC_Analysisexit_513_stage0_reg;
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %513 = mul i32 %512, 40960*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175)) begin
		main_Gsm_LPC_Analysisexit_513_reg <= main_Gsm_LPC_Analysisexit_513;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_513_reg"); $finish; end
	end
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %513 = mul i32 %512, 40960*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175)) begin
		main_Gsm_LPC_Analysisexit_513_reg <= main_Gsm_LPC_Analysisexit_513;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_513) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_513_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %514 = ashr i32 %513, 16*/
		main_Gsm_LPC_Analysisexit_514 = ($signed(main_Gsm_LPC_Analysisexit_513) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %514 = ashr i32 %513, 16*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175)) begin
		main_Gsm_LPC_Analysisexit_514_reg <= main_Gsm_LPC_Analysisexit_514;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_514) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_514_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %515 = add nsw i32 %514, 256*/
		main_Gsm_LPC_Analysisexit_515 = (main_Gsm_LPC_Analysisexit_514 + 32'd256);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %515 = add nsw i32 %514, 256*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175)) begin
		main_Gsm_LPC_Analysisexit_515_reg <= main_Gsm_LPC_Analysisexit_515;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_515) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_515_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %516 = icmp slt i32 %515, -32768*/
		main_Gsm_LPC_Analysisexit_516 = ($signed(main_Gsm_LPC_Analysisexit_515) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %516 = icmp slt i32 %515, -32768*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175)) begin
		main_Gsm_LPC_Analysisexit_516_reg <= main_Gsm_LPC_Analysisexit_516;
		if (start == 1'b0 && ^(main_Gsm_LPC_Analysisexit_516) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Gsm_LPC_Analysisexit_516_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %518 = icmp sgt i32 %515, 32767*/
		main_517_518 = ($signed(main_Gsm_LPC_Analysisexit_515_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %518 = icmp sgt i32 %515, 32767*/
	if ((cur_state == LEGUP_F_main_BB__517_176)) begin
		main_517_518_reg <= main_517_518;
		if (start == 1'b0 && ^(main_517_518) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_518_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %sext.i2 = shl i32 %515, 16*/
		main_517_sexti2 = (main_Gsm_LPC_Analysisexit_515_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %sext.i2 = shl i32 %515, 16*/
	if ((cur_state == LEGUP_F_main_BB__517_176)) begin
		main_517_sexti2_reg <= main_517_sexti2;
		if (start == 1'b0 && ^(main_517_sexti2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_sexti2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %.op.i = ashr i32 %sext.i2, 25*/
		main_517_opi = ($signed(main_517_sexti2) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %.op.i = ashr i32 %sext.i2, 25*/
	if ((cur_state == LEGUP_F_main_BB__517_176)) begin
		main_517_opi_reg <= main_517_opi;
		if (start == 1'b0 && ^(main_517_opi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_opi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %519 = icmp sgt i32 %.op.i, 31*/
		main_517_519 = ($signed(main_517_opi) > $signed(32'd31));
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %519 = icmp sgt i32 %.op.i, 31*/
	if ((cur_state == LEGUP_F_main_BB__517_176)) begin
		main_517_519_reg <= main_517_519;
		if (start == 1'b0 && ^(main_517_519) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_519_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %517*/
	/*   %or.cond.i = or i1 %518, %519*/
		main_517_orcondi = (main_517_518 | main_517_519);
end
always @(posedge clk) begin
	/* main: %517*/
	/*   %or.cond.i = or i1 %518, %519*/
	if ((cur_state == LEGUP_F_main_BB__517_176)) begin
		main_517_orcondi_reg <= main_517_orcondi;
		if (start == 1'b0 && ^(main_517_orcondi) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_517_orcondi_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %520*/
	/*   %521 = icmp slt i32 %.op.i, -32*/
		main_520_521 = ($signed(main_517_opi_reg) < $signed(-32'd32));
end
always @(posedge clk) begin
	/* main: %520*/
	/*   %521 = icmp slt i32 %.op.i, -32*/
	if ((cur_state == LEGUP_F_main_BB__520_177)) begin
		main_520_521_reg <= main_520_521;
		if (start == 1'b0 && ^(main_520_521) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_520_521_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %523 = add nsw i32 %.op.i, 32*/
		main_522_523 = (main_517_opi_reg + 32'd32);
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %523 = add nsw i32 %.op.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__522_178)) begin
		main_522_523_reg <= main_522_523;
		if (start == 1'b0 && ^(main_522_523) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_523_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %522*/
	/*   %phitmp.i3 = trunc i32 %523 to i16*/
		main_522_phitmpi3 = main_522_523[15:0];
end
always @(posedge clk) begin
	/* main: %522*/
	/*   %phitmp.i3 = trunc i32 %523 to i16*/
	if ((cur_state == LEGUP_F_main_BB__522_178)) begin
		main_522_phitmpi3_reg <= main_522_phitmpi3;
		if (start == 1'b0 && ^(main_522_phitmpi3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_522_phitmpi3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175) & (memory_controller_waitrequest == 1'd0)) & (main_Gsm_LPC_Analysisexit_516 == 1'd1))) begin
		main_threadi4_524 = 16'd0;
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__517_176) & (memory_controller_waitrequest == 1'd0)) & (main_517_orcondi == 1'd1))) begin
		main_threadi4_524 = 16'd63;
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__520_177) & (memory_controller_waitrequest == 1'd0)) & (main_520_521 == 1'd1))) begin
		main_threadi4_524 = 16'd0;
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__522_178) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_threadi4_524 = main_522_phitmpi3;
	end
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	if ((((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_175) & (memory_controller_waitrequest == 1'd0)) & (main_Gsm_LPC_Analysisexit_516 == 1'd1))) begin
		main_threadi4_524_reg <= main_threadi4_524;
		if (start == 1'b0 && ^(main_threadi4_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_524_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	if ((((cur_state == LEGUP_F_main_BB__517_176) & (memory_controller_waitrequest == 1'd0)) & (main_517_orcondi == 1'd1))) begin
		main_threadi4_524_reg <= main_threadi4_524;
		if (start == 1'b0 && ^(main_threadi4_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_524_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	if ((((cur_state == LEGUP_F_main_BB__520_177) & (memory_controller_waitrequest == 1'd0)) & (main_520_521 == 1'd1))) begin
		main_threadi4_524_reg <= main_threadi4_524;
		if (start == 1'b0 && ^(main_threadi4_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_524_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %524 = phi i16 [ %phitmp.i3, %522 ], [ 0, %520 ], [ 0, %Gsm_LPC_Analysis.exit ], [ 63, %517 ]*/
	if (((cur_state == LEGUP_F_main_BB__522_178) & (memory_controller_waitrequest == 1'd0))) begin
		main_threadi4_524_reg <= main_threadi4_524;
		if (start == 1'b0 && ^(main_threadi4_524) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_524_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %525 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 1*/
if (reset) begin main_threadi4_525 = 0; end
		main_threadi4_525 = (1'd0 | (2 * 32'd1));
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %525 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_threadi4_525_reg <= main_threadi4_525;
		if (start == 1'b0 && ^(main_threadi4_525) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_525_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %526 = load i16* %525, align 2, !tbaa !1*/
		main_threadi4_526 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %526 = load i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_180)) begin
		main_threadi4_526_reg <= main_threadi4_526;
		if (start == 1'b0 && ^(main_threadi4_526) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_526_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %527 = sext i16 %526 to i32*/
		main_threadi4_527 = $signed(main_threadi4_526);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %527 = sext i16 %526 to i32*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_180)) begin
		main_threadi4_527_reg <= main_threadi4_527;
		if (start == 1'b0 && ^(main_threadi4_527) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_527_reg"); $finish; end
	end
end
always @(*) begin
	main_threadi4_528 = main_threadi4_528_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %528 = mul i32 %527, 40960*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_181)) begin
		main_threadi4_528_reg <= main_threadi4_528;
		if (start == 1'b0 && ^(main_threadi4_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_528_reg"); $finish; end
	end
	/* main: %.thread.i4*/
	/*   %528 = mul i32 %527, 40960*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_181)) begin
		main_threadi4_528_reg <= main_threadi4_528;
		if (start == 1'b0 && ^(main_threadi4_528) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_528_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %529 = ashr i32 %528, 16*/
		main_threadi4_529 = ($signed(main_threadi4_528) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %529 = ashr i32 %528, 16*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_181)) begin
		main_threadi4_529_reg <= main_threadi4_529;
		if (start == 1'b0 && ^(main_threadi4_529) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_529_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %530 = add nsw i32 %529, 256*/
		main_threadi4_530 = (main_threadi4_529 + 32'd256);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %530 = add nsw i32 %529, 256*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_181)) begin
		main_threadi4_530_reg <= main_threadi4_530;
		if (start == 1'b0 && ^(main_threadi4_530) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_530_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread.i4*/
	/*   %531 = icmp slt i32 %530, -32768*/
		main_threadi4_531 = ($signed(main_threadi4_530) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %531 = icmp slt i32 %530, -32768*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_181)) begin
		main_threadi4_531_reg <= main_threadi4_531;
		if (start == 1'b0 && ^(main_threadi4_531) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_threadi4_531_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %533 = icmp sgt i32 %530, 32767*/
		main_532_533 = ($signed(main_threadi4_530_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %533 = icmp sgt i32 %530, 32767*/
	if ((cur_state == LEGUP_F_main_BB__532_182)) begin
		main_532_533_reg <= main_532_533;
		if (start == 1'b0 && ^(main_532_533) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_533_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %sext38.i = shl i32 %530, 16*/
		main_532_sext38i = (main_threadi4_530_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %sext38.i = shl i32 %530, 16*/
	if ((cur_state == LEGUP_F_main_BB__532_182)) begin
		main_532_sext38i_reg <= main_532_sext38i;
		if (start == 1'b0 && ^(main_532_sext38i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_sext38i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %.op40.i = ashr i32 %sext38.i, 25*/
		main_532_op40i = ($signed(main_532_sext38i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %.op40.i = ashr i32 %sext38.i, 25*/
	if ((cur_state == LEGUP_F_main_BB__532_182)) begin
		main_532_op40i_reg <= main_532_op40i;
		if (start == 1'b0 && ^(main_532_op40i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_op40i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %534 = icmp sgt i32 %.op40.i, 31*/
		main_532_534 = ($signed(main_532_op40i) > $signed(32'd31));
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %534 = icmp sgt i32 %.op40.i, 31*/
	if ((cur_state == LEGUP_F_main_BB__532_182)) begin
		main_532_534_reg <= main_532_534;
		if (start == 1'b0 && ^(main_532_534) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_534_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %532*/
	/*   %or.cond164.i = or i1 %533, %534*/
		main_532_orcond164i = (main_532_533 | main_532_534);
end
always @(posedge clk) begin
	/* main: %532*/
	/*   %or.cond164.i = or i1 %533, %534*/
	if ((cur_state == LEGUP_F_main_BB__532_182)) begin
		main_532_orcond164i_reg <= main_532_orcond164i;
		if (start == 1'b0 && ^(main_532_orcond164i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_532_orcond164i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %535*/
	/*   %536 = icmp slt i32 %.op40.i, -32*/
		main_535_536 = ($signed(main_532_op40i_reg) < $signed(-32'd32));
end
always @(posedge clk) begin
	/* main: %535*/
	/*   %536 = icmp slt i32 %.op40.i, -32*/
	if ((cur_state == LEGUP_F_main_BB__535_183)) begin
		main_535_536_reg <= main_535_536;
		if (start == 1'b0 && ^(main_535_536) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_535_536_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %537*/
	/*   %538 = add nsw i32 %.op40.i, 32*/
		main_537_538 = (main_532_op40i_reg + 32'd32);
end
always @(posedge clk) begin
	/* main: %537*/
	/*   %538 = add nsw i32 %.op40.i, 32*/
	if ((cur_state == LEGUP_F_main_BB__537_184)) begin
		main_537_538_reg <= main_537_538;
		if (start == 1'b0 && ^(main_537_538) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_537_538_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %537*/
	/*   %phitmp1.i = trunc i32 %538 to i16*/
		main_537_phitmp1i = main_537_538[15:0];
end
always @(posedge clk) begin
	/* main: %537*/
	/*   %phitmp1.i = trunc i32 %538 to i16*/
	if ((cur_state == LEGUP_F_main_BB__537_184)) begin
		main_537_phitmp1i_reg <= main_537_phitmp1i;
		if (start == 1'b0 && ^(main_537_phitmp1i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_537_phitmp1i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	if ((((cur_state == LEGUP_F_main_BB_threadi4_181) & (memory_controller_waitrequest == 1'd0)) & (main_threadi4_531 == 1'd1))) begin
		main_thread98i_539 = 16'd0;
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__532_182) & (memory_controller_waitrequest == 1'd0)) & (main_532_orcond164i == 1'd1))) begin
		main_thread98i_539 = 16'd63;
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__535_183) & (memory_controller_waitrequest == 1'd0)) & (main_535_536 == 1'd1))) begin
		main_thread98i_539 = 16'd0;
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__537_184) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread98i_539 = main_537_phitmp1i;
	end
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	if ((((cur_state == LEGUP_F_main_BB_threadi4_181) & (memory_controller_waitrequest == 1'd0)) & (main_threadi4_531 == 1'd1))) begin
		main_thread98i_539_reg <= main_thread98i_539;
		if (start == 1'b0 && ^(main_thread98i_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_539_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	if ((((cur_state == LEGUP_F_main_BB__532_182) & (memory_controller_waitrequest == 1'd0)) & (main_532_orcond164i == 1'd1))) begin
		main_thread98i_539_reg <= main_thread98i_539;
		if (start == 1'b0 && ^(main_thread98i_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_539_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	if ((((cur_state == LEGUP_F_main_BB__535_183) & (memory_controller_waitrequest == 1'd0)) & (main_535_536 == 1'd1))) begin
		main_thread98i_539_reg <= main_thread98i_539;
		if (start == 1'b0 && ^(main_thread98i_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_539_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %539 = phi i16 [ %phitmp1.i, %537 ], [ 0, %535 ], [ 0, %.thread.i4 ], [ 63, %532 ]*/
	if (((cur_state == LEGUP_F_main_BB__537_184) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread98i_539_reg <= main_thread98i_539;
		if (start == 1'b0 && ^(main_thread98i_539) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_539_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %540 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 2*/
if (reset) begin main_thread98i_540 = 0; end
		main_thread98i_540 = (1'd0 | (2 * 32'd2));
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %540 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_thread98i_540_reg <= main_thread98i_540;
		if (start == 1'b0 && ^(main_thread98i_540) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_540_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %541 = load i16* %540, align 2, !tbaa !1*/
		main_thread98i_541 = main_0_LARc_out_b;
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %541 = load i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_186)) begin
		main_thread98i_541_reg <= main_thread98i_541;
		if (start == 1'b0 && ^(main_thread98i_541) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_541_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %542 = sext i16 %541 to i32*/
		main_thread98i_542 = $signed(main_thread98i_541);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %542 = sext i16 %541 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_186)) begin
		main_thread98i_542_reg <= main_thread98i_542;
		if (start == 1'b0 && ^(main_thread98i_542) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_542_reg"); $finish; end
	end
end
always @(*) begin
	main_thread98i_543 = main_thread98i_543_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %543 = mul i32 %542, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_187)) begin
		main_thread98i_543_reg <= main_thread98i_543;
		if (start == 1'b0 && ^(main_thread98i_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_543_reg"); $finish; end
	end
	/* main: %.thread98.i*/
	/*   %543 = mul i32 %542, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_187)) begin
		main_thread98i_543_reg <= main_thread98i_543;
		if (start == 1'b0 && ^(main_thread98i_543) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_543_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %544 = ashr i32 %543, 16*/
		main_thread98i_544 = ($signed(main_thread98i_543) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %544 = ashr i32 %543, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_187)) begin
		main_thread98i_544_reg <= main_thread98i_544;
		if (start == 1'b0 && ^(main_thread98i_544) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_544_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %545 = add nsw i32 %544, 2048*/
		main_thread98i_545 = (main_thread98i_544 + 32'd2048);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %545 = add nsw i32 %544, 2048*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_187)) begin
		main_thread98i_545_reg <= main_thread98i_545;
		if (start == 1'b0 && ^(main_thread98i_545) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_545_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread98.i*/
	/*   %546 = icmp slt i32 %545, -32768*/
		main_thread98i_546 = ($signed(main_thread98i_545) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %546 = icmp slt i32 %545, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_187)) begin
		main_thread98i_546_reg <= main_thread98i_546;
		if (start == 1'b0 && ^(main_thread98i_546) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread98i_546_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %547*/
	/*   %548 = icmp sgt i32 %545, 32767*/
		main_547_548 = ($signed(main_thread98i_545_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %547*/
	/*   %548 = icmp sgt i32 %545, 32767*/
	if ((cur_state == LEGUP_F_main_BB__547_188)) begin
		main_547_548_reg <= main_547_548;
		if (start == 1'b0 && ^(main_547_548) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_547_548_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %547*/
	/*   %sext43.i = shl i32 %545, 16*/
		main_547_sext43i = (main_thread98i_545_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %547*/
	/*   %sext43.i = shl i32 %545, 16*/
	if ((cur_state == LEGUP_F_main_BB__547_188)) begin
		main_547_sext43i_reg <= main_547_sext43i;
		if (start == 1'b0 && ^(main_547_sext43i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_547_sext43i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %547*/
	/*   %549 = ashr exact i32 %sext43.i, 16*/
		main_547_549 = ($signed(main_547_sext43i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %547*/
	/*   %549 = ashr exact i32 %sext43.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__547_188)) begin
		main_547_549_reg <= main_547_549;
		if (start == 1'b0 && ^(main_547_549) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_547_549_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %547*/
	/*   %.op45.i = add nsw i32 %549, 256*/
		main_547_op45i = (main_547_549 + 32'd256);
end
always @(posedge clk) begin
	/* main: %547*/
	/*   %.op45.i = add nsw i32 %549, 256*/
	if ((cur_state == LEGUP_F_main_BB__547_188)) begin
		main_547_op45i_reg <= main_547_op45i;
		if (start == 1'b0 && ^(main_547_op45i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_547_op45i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.i*/
	/*   %550 = icmp slt i32 %.op45.i, -32768*/
		main_gsm_addexit29i_550 = ($signed(main_547_op45i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.i*/
	/*   %550 = icmp slt i32 %.op45.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29i_189)) begin
		main_gsm_addexit29i_550_reg <= main_gsm_addexit29i_550;
		if (start == 1'b0 && ^(main_gsm_addexit29i_550) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29i_550_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %551 = icmp sgt i32 %.op45.i, 32767*/
		main_gsm_addexit29threadi_551 = ($signed(main_547_op45i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %551 = icmp sgt i32 %.op45.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190)) begin
		main_gsm_addexit29threadi_551_reg <= main_gsm_addexit29threadi_551;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_551) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_551_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %sext47.i = shl i32 %.op45.i, 16*/
		main_gsm_addexit29threadi_sext47i = (main_547_op45i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %sext47.i = shl i32 %.op45.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190)) begin
		main_gsm_addexit29threadi_sext47i_reg <= main_gsm_addexit29threadi_sext47i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_sext47i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_sext47i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %.op49.i = ashr i32 %sext47.i, 25*/
		main_gsm_addexit29threadi_op49i = ($signed(main_gsm_addexit29threadi_sext47i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %.op49.i = ashr i32 %sext47.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190)) begin
		main_gsm_addexit29threadi_op49i_reg <= main_gsm_addexit29threadi_op49i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_op49i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_op49i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %552 = icmp sgt i32 %.op49.i, 15*/
		main_gsm_addexit29threadi_552 = ($signed(main_gsm_addexit29threadi_op49i) > $signed(32'd15));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %552 = icmp sgt i32 %.op49.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190)) begin
		main_gsm_addexit29threadi_552_reg <= main_gsm_addexit29threadi_552;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_552) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_552_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %or.cond165.i = or i1 %551, %552*/
		main_gsm_addexit29threadi_orcond165i = (main_gsm_addexit29threadi_551 | main_gsm_addexit29threadi_552);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit29.thread.i*/
	/*   %or.cond165.i = or i1 %551, %552*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190)) begin
		main_gsm_addexit29threadi_orcond165i_reg <= main_gsm_addexit29threadi_orcond165i;
		if (start == 1'b0 && ^(main_gsm_addexit29threadi_orcond165i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit29threadi_orcond165i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %553*/
	/*   %554 = icmp slt i32 %.op49.i, -16*/
		main_553_554 = ($signed(main_gsm_addexit29threadi_op49i_reg) < $signed(-32'd16));
end
always @(posedge clk) begin
	/* main: %553*/
	/*   %554 = icmp slt i32 %.op49.i, -16*/
	if ((cur_state == LEGUP_F_main_BB__553_191)) begin
		main_553_554_reg <= main_553_554;
		if (start == 1'b0 && ^(main_553_554) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_553_554_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %555*/
	/*   %556 = add nsw i32 %.op49.i, 16*/
		main_555_556 = (main_gsm_addexit29threadi_op49i_reg + 32'd16);
end
always @(posedge clk) begin
	/* main: %555*/
	/*   %556 = add nsw i32 %.op49.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_555_556_reg <= main_555_556;
		if (start == 1'b0 && ^(main_555_556) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_555_556_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %555*/
	/*   %phitmp2.i = trunc i32 %556 to i16*/
		main_555_phitmp2i = main_555_556[15:0];
end
always @(posedge clk) begin
	/* main: %555*/
	/*   %phitmp2.i = trunc i32 %556 to i16*/
	if ((cur_state == LEGUP_F_main_BB__555_192)) begin
		main_555_phitmp2i_reg <= main_555_phitmp2i;
		if (start == 1'b0 && ^(main_555_phitmp2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_555_phitmp2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread98i_187) & (memory_controller_waitrequest == 1'd0)) & (main_thread98i_546 == 1'd1))) begin
		main_thread102i_557 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__547_188) & (memory_controller_waitrequest == 1'd0)) & (main_547_548 == 1'd1))) begin
		main_thread102i_557 = 16'd31;
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29i_189) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29i_550 == 1'd1))) begin
		main_thread102i_557 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29threadi_orcond165i == 1'd1))) begin
		main_thread102i_557 = 16'd31;
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__553_191) & (memory_controller_waitrequest == 1'd0)) & (main_553_554 == 1'd1))) begin
		main_thread102i_557 = 16'd0;
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__555_192) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread102i_557 = main_555_phitmp2i;
	end
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread98i_187) & (memory_controller_waitrequest == 1'd0)) & (main_thread98i_546 == 1'd1))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB__547_188) & (memory_controller_waitrequest == 1'd0)) & (main_547_548 == 1'd1))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29i_189) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29i_550 == 1'd1))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit29threadi_190) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit29threadi_orcond165i == 1'd1))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if ((((cur_state == LEGUP_F_main_BB__553_191) & (memory_controller_waitrequest == 1'd0)) & (main_553_554 == 1'd1))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %557 = phi i16 [ %phitmp2.i, %555 ], [ 0, %553 ], [ 0, %gsm_add.exit29.i ], [ 31, %gsm_add.exit29.thread.i ], [ 0, %.thread98.i ], [ 31, %547 ]*/
	if (((cur_state == LEGUP_F_main_BB__555_192) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread102i_557_reg <= main_thread102i_557;
		if (start == 1'b0 && ^(main_thread102i_557) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_557_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %558 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 3*/
if (reset) begin main_thread102i_558 = 0; end
		main_thread102i_558 = (1'd0 | (2 * 32'd3));
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %558 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_thread102i_558_reg <= main_thread102i_558;
		if (start == 1'b0 && ^(main_thread102i_558) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_558_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
		main_thread102i_559 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_194)) begin
		main_thread102i_559_reg <= main_thread102i_559;
		if (start == 1'b0 && ^(main_thread102i_559) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_559_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %560 = sext i16 %559 to i32*/
		main_thread102i_560 = $signed(main_thread102i_559);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %560 = sext i16 %559 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_194)) begin
		main_thread102i_560_reg <= main_thread102i_560;
		if (start == 1'b0 && ^(main_thread102i_560) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_560_reg"); $finish; end
	end
end
always @(*) begin
	main_thread102i_561 = main_thread102i_561_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %561 = mul i32 %560, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_195)) begin
		main_thread102i_561_reg <= main_thread102i_561;
		if (start == 1'b0 && ^(main_thread102i_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_561_reg"); $finish; end
	end
	/* main: %.thread102.i*/
	/*   %561 = mul i32 %560, 40960*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_195)) begin
		main_thread102i_561_reg <= main_thread102i_561;
		if (start == 1'b0 && ^(main_thread102i_561) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_561_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %562 = ashr i32 %561, 16*/
		main_thread102i_562 = ($signed(main_thread102i_561) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %562 = ashr i32 %561, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_195)) begin
		main_thread102i_562_reg <= main_thread102i_562;
		if (start == 1'b0 && ^(main_thread102i_562) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_562_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %563 = add nsw i32 %562, -2560*/
		main_thread102i_563 = (main_thread102i_562 + -32'd2560);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %563 = add nsw i32 %562, -2560*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_195)) begin
		main_thread102i_563_reg <= main_thread102i_563;
		if (start == 1'b0 && ^(main_thread102i_563) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_563_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread102.i*/
	/*   %564 = icmp slt i32 %563, -32768*/
		main_thread102i_564 = ($signed(main_thread102i_563) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %564 = icmp slt i32 %563, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_195)) begin
		main_thread102i_564_reg <= main_thread102i_564;
		if (start == 1'b0 && ^(main_thread102i_564) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread102i_564_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %565*/
	/*   %566 = icmp sgt i32 %563, 32767*/
		main_565_566 = ($signed(main_thread102i_563_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %565*/
	/*   %566 = icmp sgt i32 %563, 32767*/
	if ((cur_state == LEGUP_F_main_BB__565_196)) begin
		main_565_566_reg <= main_565_566;
		if (start == 1'b0 && ^(main_565_566) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_565_566_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %565*/
	/*   %sext52.i = shl i32 %563, 16*/
		main_565_sext52i = (main_thread102i_563_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %565*/
	/*   %sext52.i = shl i32 %563, 16*/
	if ((cur_state == LEGUP_F_main_BB__565_196)) begin
		main_565_sext52i_reg <= main_565_sext52i;
		if (start == 1'b0 && ^(main_565_sext52i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_565_sext52i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %565*/
	/*   %567 = ashr exact i32 %sext52.i, 16*/
		main_565_567 = ($signed(main_565_sext52i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %565*/
	/*   %567 = ashr exact i32 %sext52.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__565_196)) begin
		main_565_567_reg <= main_565_567;
		if (start == 1'b0 && ^(main_565_567) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_565_567_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %565*/
	/*   %.op54.i = add nsw i32 %567, 256*/
		main_565_op54i = (main_565_567 + 32'd256);
end
always @(posedge clk) begin
	/* main: %565*/
	/*   %.op54.i = add nsw i32 %567, 256*/
	if ((cur_state == LEGUP_F_main_BB__565_196)) begin
		main_565_op54i_reg <= main_565_op54i;
		if (start == 1'b0 && ^(main_565_op54i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_565_op54i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.i*/
	/*   %568 = icmp slt i32 %.op54.i, -32768*/
		main_gsm_addexit25i_568 = ($signed(main_565_op54i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.i*/
	/*   %568 = icmp slt i32 %.op54.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25i_197)) begin
		main_gsm_addexit25i_568_reg <= main_gsm_addexit25i_568;
		if (start == 1'b0 && ^(main_gsm_addexit25i_568) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25i_568_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %569 = icmp sgt i32 %.op54.i, 32767*/
		main_gsm_addexit25threadi_569 = ($signed(main_565_op54i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %569 = icmp sgt i32 %.op54.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198)) begin
		main_gsm_addexit25threadi_569_reg <= main_gsm_addexit25threadi_569;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_569) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_569_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %sext56.i = shl i32 %.op54.i, 16*/
		main_gsm_addexit25threadi_sext56i = (main_565_op54i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %sext56.i = shl i32 %.op54.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198)) begin
		main_gsm_addexit25threadi_sext56i_reg <= main_gsm_addexit25threadi_sext56i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_sext56i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_sext56i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %.op58.i = ashr i32 %sext56.i, 25*/
		main_gsm_addexit25threadi_op58i = ($signed(main_gsm_addexit25threadi_sext56i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %.op58.i = ashr i32 %sext56.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198)) begin
		main_gsm_addexit25threadi_op58i_reg <= main_gsm_addexit25threadi_op58i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_op58i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_op58i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %570 = icmp sgt i32 %.op58.i, 15*/
		main_gsm_addexit25threadi_570 = ($signed(main_gsm_addexit25threadi_op58i) > $signed(32'd15));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %570 = icmp sgt i32 %.op58.i, 15*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198)) begin
		main_gsm_addexit25threadi_570_reg <= main_gsm_addexit25threadi_570;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_570) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_570_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %or.cond166.i = or i1 %569, %570*/
		main_gsm_addexit25threadi_orcond166i = (main_gsm_addexit25threadi_569 | main_gsm_addexit25threadi_570);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit25.thread.i*/
	/*   %or.cond166.i = or i1 %569, %570*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198)) begin
		main_gsm_addexit25threadi_orcond166i_reg <= main_gsm_addexit25threadi_orcond166i;
		if (start == 1'b0 && ^(main_gsm_addexit25threadi_orcond166i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit25threadi_orcond166i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %571*/
	/*   %572 = icmp slt i32 %.op58.i, -16*/
		main_571_572 = ($signed(main_gsm_addexit25threadi_op58i_reg) < $signed(-32'd16));
end
always @(posedge clk) begin
	/* main: %571*/
	/*   %572 = icmp slt i32 %.op58.i, -16*/
	if ((cur_state == LEGUP_F_main_BB__571_199)) begin
		main_571_572_reg <= main_571_572;
		if (start == 1'b0 && ^(main_571_572) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_571_572_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %573*/
	/*   %574 = add nsw i32 %.op58.i, 16*/
		main_573_574 = (main_gsm_addexit25threadi_op58i_reg + 32'd16);
end
always @(posedge clk) begin
	/* main: %573*/
	/*   %574 = add nsw i32 %.op58.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__573_200)) begin
		main_573_574_reg <= main_573_574;
		if (start == 1'b0 && ^(main_573_574) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_574_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %573*/
	/*   %phitmp3.i = trunc i32 %574 to i16*/
		main_573_phitmp3i = main_573_574[15:0];
end
always @(posedge clk) begin
	/* main: %573*/
	/*   %phitmp3.i = trunc i32 %574 to i16*/
	if ((cur_state == LEGUP_F_main_BB__573_200)) begin
		main_573_phitmp3i_reg <= main_573_phitmp3i;
		if (start == 1'b0 && ^(main_573_phitmp3i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_573_phitmp3i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread102i_195) & (memory_controller_waitrequest == 1'd0)) & (main_thread102i_564 == 1'd1))) begin
		main_thread107i_575 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__565_196) & (memory_controller_waitrequest == 1'd0)) & (main_565_566 == 1'd1))) begin
		main_thread107i_575 = 16'd31;
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25i_197) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25i_568 == 1'd1))) begin
		main_thread107i_575 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25threadi_orcond166i == 1'd1))) begin
		main_thread107i_575 = 16'd31;
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__571_199) & (memory_controller_waitrequest == 1'd0)) & (main_571_572 == 1'd1))) begin
		main_thread107i_575 = 16'd0;
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__573_200) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread107i_575 = main_573_phitmp3i;
	end
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread102i_195) & (memory_controller_waitrequest == 1'd0)) & (main_thread102i_564 == 1'd1))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB__565_196) & (memory_controller_waitrequest == 1'd0)) & (main_565_566 == 1'd1))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25i_197) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25i_568 == 1'd1))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit25threadi_198) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit25threadi_orcond166i == 1'd1))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if ((((cur_state == LEGUP_F_main_BB__571_199) & (memory_controller_waitrequest == 1'd0)) & (main_571_572 == 1'd1))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %575 = phi i16 [ %phitmp3.i, %573 ], [ 0, %571 ], [ 0, %gsm_add.exit25.i ], [ 31, %gsm_add.exit25.thread.i ], [ 0, %.thread102.i ], [ 31, %565 ]*/
	if (((cur_state == LEGUP_F_main_BB__573_200) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread107i_575_reg <= main_thread107i_575;
		if (start == 1'b0 && ^(main_thread107i_575) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_575_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %576 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 4*/
if (reset) begin main_thread107i_576 = 0; end
		main_thread107i_576 = (1'd0 | (2 * 32'd4));
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %576 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_thread107i_576_reg <= main_thread107i_576;
		if (start == 1'b0 && ^(main_thread107i_576) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_576_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %577 = load i16* %576, align 2, !tbaa !1*/
		main_thread107i_577 = main_0_LARc_out_b;
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %577 = load i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_202)) begin
		main_thread107i_577_reg <= main_thread107i_577;
		if (start == 1'b0 && ^(main_thread107i_577) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_577_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %578 = sext i16 %577 to i32*/
		main_thread107i_578 = $signed(main_thread107i_577);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %578 = sext i16 %577 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_202)) begin
		main_thread107i_578_reg <= main_thread107i_578;
		if (start == 1'b0 && ^(main_thread107i_578) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_578_reg"); $finish; end
	end
end
always @(*) begin
	main_thread107i_579 = main_thread107i_579_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %579 = mul i32 %578, 27928*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_203)) begin
		main_thread107i_579_reg <= main_thread107i_579;
		if (start == 1'b0 && ^(main_thread107i_579) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_579_reg"); $finish; end
	end
	/* main: %.thread107.i*/
	/*   %579 = mul i32 %578, 27928*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_203)) begin
		main_thread107i_579_reg <= main_thread107i_579;
		if (start == 1'b0 && ^(main_thread107i_579) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_579_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %580 = ashr i32 %579, 16*/
		main_thread107i_580 = ($signed(main_thread107i_579) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %580 = ashr i32 %579, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_203)) begin
		main_thread107i_580_reg <= main_thread107i_580;
		if (start == 1'b0 && ^(main_thread107i_580) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_580_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %581 = add nsw i32 %580, 94*/
		main_thread107i_581 = (main_thread107i_580 + 32'd94);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %581 = add nsw i32 %580, 94*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_203)) begin
		main_thread107i_581_reg <= main_thread107i_581;
		if (start == 1'b0 && ^(main_thread107i_581) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_581_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread107.i*/
	/*   %582 = icmp slt i32 %581, -32768*/
		main_thread107i_582 = ($signed(main_thread107i_581) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %582 = icmp slt i32 %581, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_203)) begin
		main_thread107i_582_reg <= main_thread107i_582;
		if (start == 1'b0 && ^(main_thread107i_582) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread107i_582_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %583*/
	/*   %584 = icmp sgt i32 %581, 32767*/
		main_583_584 = ($signed(main_thread107i_581_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %583*/
	/*   %584 = icmp sgt i32 %581, 32767*/
	if ((cur_state == LEGUP_F_main_BB__583_204)) begin
		main_583_584_reg <= main_583_584;
		if (start == 1'b0 && ^(main_583_584) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_583_584_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %583*/
	/*   %sext61.i = shl i32 %581, 16*/
		main_583_sext61i = (main_thread107i_581_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %583*/
	/*   %sext61.i = shl i32 %581, 16*/
	if ((cur_state == LEGUP_F_main_BB__583_204)) begin
		main_583_sext61i_reg <= main_583_sext61i;
		if (start == 1'b0 && ^(main_583_sext61i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_583_sext61i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %583*/
	/*   %585 = ashr exact i32 %sext61.i, 16*/
		main_583_585 = ($signed(main_583_sext61i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %583*/
	/*   %585 = ashr exact i32 %sext61.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__583_204)) begin
		main_583_585_reg <= main_583_585;
		if (start == 1'b0 && ^(main_583_585) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_583_585_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %583*/
	/*   %.op63.i = add nsw i32 %585, 256*/
		main_583_op63i = (main_583_585 + 32'd256);
end
always @(posedge clk) begin
	/* main: %583*/
	/*   %.op63.i = add nsw i32 %585, 256*/
	if ((cur_state == LEGUP_F_main_BB__583_204)) begin
		main_583_op63i_reg <= main_583_op63i;
		if (start == 1'b0 && ^(main_583_op63i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_583_op63i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.i*/
	/*   %586 = icmp slt i32 %.op63.i, -32768*/
		main_gsm_addexit21i_586 = ($signed(main_583_op63i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.i*/
	/*   %586 = icmp slt i32 %.op63.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21i_205)) begin
		main_gsm_addexit21i_586_reg <= main_gsm_addexit21i_586;
		if (start == 1'b0 && ^(main_gsm_addexit21i_586) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21i_586_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %587 = icmp sgt i32 %.op63.i, 32767*/
		main_gsm_addexit21threadi_587 = ($signed(main_583_op63i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %587 = icmp sgt i32 %.op63.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206)) begin
		main_gsm_addexit21threadi_587_reg <= main_gsm_addexit21threadi_587;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_587) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_587_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %sext65.i = shl i32 %.op63.i, 16*/
		main_gsm_addexit21threadi_sext65i = (main_583_op63i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %sext65.i = shl i32 %.op63.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206)) begin
		main_gsm_addexit21threadi_sext65i_reg <= main_gsm_addexit21threadi_sext65i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_sext65i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_sext65i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %.op67.i = ashr i32 %sext65.i, 25*/
		main_gsm_addexit21threadi_op67i = ($signed(main_gsm_addexit21threadi_sext65i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %.op67.i = ashr i32 %sext65.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206)) begin
		main_gsm_addexit21threadi_op67i_reg <= main_gsm_addexit21threadi_op67i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_op67i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_op67i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %588 = icmp sgt i32 %.op67.i, 7*/
		main_gsm_addexit21threadi_588 = ($signed(main_gsm_addexit21threadi_op67i) > $signed(32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %588 = icmp sgt i32 %.op67.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206)) begin
		main_gsm_addexit21threadi_588_reg <= main_gsm_addexit21threadi_588;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_588) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_588_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %or.cond167.i = or i1 %587, %588*/
		main_gsm_addexit21threadi_orcond167i = (main_gsm_addexit21threadi_587 | main_gsm_addexit21threadi_588);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit21.thread.i*/
	/*   %or.cond167.i = or i1 %587, %588*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206)) begin
		main_gsm_addexit21threadi_orcond167i_reg <= main_gsm_addexit21threadi_orcond167i;
		if (start == 1'b0 && ^(main_gsm_addexit21threadi_orcond167i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit21threadi_orcond167i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %589*/
	/*   %590 = icmp slt i32 %.op67.i, -8*/
		main_589_590 = ($signed(main_gsm_addexit21threadi_op67i_reg) < $signed(-32'd8));
end
always @(posedge clk) begin
	/* main: %589*/
	/*   %590 = icmp slt i32 %.op67.i, -8*/
	if ((cur_state == LEGUP_F_main_BB__589_207)) begin
		main_589_590_reg <= main_589_590;
		if (start == 1'b0 && ^(main_589_590) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_589_590_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %591*/
	/*   %592 = add nsw i32 %.op67.i, 8*/
		main_591_592 = (main_gsm_addexit21threadi_op67i_reg + 32'd8);
end
always @(posedge clk) begin
	/* main: %591*/
	/*   %592 = add nsw i32 %.op67.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__591_208)) begin
		main_591_592_reg <= main_591_592;
		if (start == 1'b0 && ^(main_591_592) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_591_592_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %591*/
	/*   %phitmp4.i = trunc i32 %592 to i16*/
		main_591_phitmp4i = main_591_592[15:0];
end
always @(posedge clk) begin
	/* main: %591*/
	/*   %phitmp4.i = trunc i32 %592 to i16*/
	if ((cur_state == LEGUP_F_main_BB__591_208)) begin
		main_591_phitmp4i_reg <= main_591_phitmp4i;
		if (start == 1'b0 && ^(main_591_phitmp4i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_591_phitmp4i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread107i_203) & (memory_controller_waitrequest == 1'd0)) & (main_thread107i_582 == 1'd1))) begin
		main_thread112i_593 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__583_204) & (memory_controller_waitrequest == 1'd0)) & (main_583_584 == 1'd1))) begin
		main_thread112i_593 = 16'd15;
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21i_205) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21i_586 == 1'd1))) begin
		main_thread112i_593 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21threadi_orcond167i == 1'd1))) begin
		main_thread112i_593 = 16'd15;
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__589_207) & (memory_controller_waitrequest == 1'd0)) & (main_589_590 == 1'd1))) begin
		main_thread112i_593 = 16'd0;
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__591_208) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread112i_593 = main_591_phitmp4i;
	end
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread107i_203) & (memory_controller_waitrequest == 1'd0)) & (main_thread107i_582 == 1'd1))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB__583_204) & (memory_controller_waitrequest == 1'd0)) & (main_583_584 == 1'd1))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21i_205) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21i_586 == 1'd1))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit21threadi_206) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit21threadi_orcond167i == 1'd1))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if ((((cur_state == LEGUP_F_main_BB__589_207) & (memory_controller_waitrequest == 1'd0)) & (main_589_590 == 1'd1))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %593 = phi i16 [ %phitmp4.i, %591 ], [ 0, %589 ], [ 0, %gsm_add.exit21.i ], [ 15, %gsm_add.exit21.thread.i ], [ 0, %.thread107.i ], [ 15, %583 ]*/
	if (((cur_state == LEGUP_F_main_BB__591_208) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread112i_593_reg <= main_thread112i_593;
		if (start == 1'b0 && ^(main_thread112i_593) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_593_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %594 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 5*/
if (reset) begin main_thread112i_594 = 0; end
		main_thread112i_594 = (1'd0 | (2 * 32'd5));
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %594 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_thread112i_594_reg <= main_thread112i_594;
		if (start == 1'b0 && ^(main_thread112i_594) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_594_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %595 = load i16* %594, align 2, !tbaa !1*/
		main_thread112i_595 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %595 = load i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_210)) begin
		main_thread112i_595_reg <= main_thread112i_595;
		if (start == 1'b0 && ^(main_thread112i_595) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_595_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %596 = sext i16 %595 to i32*/
		main_thread112i_596 = $signed(main_thread112i_595);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %596 = sext i16 %595 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_210)) begin
		main_thread112i_596_reg <= main_thread112i_596;
		if (start == 1'b0 && ^(main_thread112i_596) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_596_reg"); $finish; end
	end
end
always @(*) begin
	main_thread112i_597 = main_thread112i_597_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %597 = mul i32 %596, 30720*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_211)) begin
		main_thread112i_597_reg <= main_thread112i_597;
		if (start == 1'b0 && ^(main_thread112i_597) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_597_reg"); $finish; end
	end
	/* main: %.thread112.i*/
	/*   %597 = mul i32 %596, 30720*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_211)) begin
		main_thread112i_597_reg <= main_thread112i_597;
		if (start == 1'b0 && ^(main_thread112i_597) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_597_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %598 = ashr i32 %597, 16*/
		main_thread112i_598 = ($signed(main_thread112i_597) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %598 = ashr i32 %597, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_211)) begin
		main_thread112i_598_reg <= main_thread112i_598;
		if (start == 1'b0 && ^(main_thread112i_598) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_598_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %599 = add nsw i32 %598, -1792*/
		main_thread112i_599 = (main_thread112i_598 + -32'd1792);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %599 = add nsw i32 %598, -1792*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_211)) begin
		main_thread112i_599_reg <= main_thread112i_599;
		if (start == 1'b0 && ^(main_thread112i_599) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_599_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread112.i*/
	/*   %600 = icmp slt i32 %599, -32768*/
		main_thread112i_600 = ($signed(main_thread112i_599) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %600 = icmp slt i32 %599, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_211)) begin
		main_thread112i_600_reg <= main_thread112i_600;
		if (start == 1'b0 && ^(main_thread112i_600) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread112i_600_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %601*/
	/*   %602 = icmp sgt i32 %599, 32767*/
		main_601_602 = ($signed(main_thread112i_599_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %601*/
	/*   %602 = icmp sgt i32 %599, 32767*/
	if ((cur_state == LEGUP_F_main_BB__601_212)) begin
		main_601_602_reg <= main_601_602;
		if (start == 1'b0 && ^(main_601_602) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_601_602_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %601*/
	/*   %sext70.i = shl i32 %599, 16*/
		main_601_sext70i = (main_thread112i_599_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %601*/
	/*   %sext70.i = shl i32 %599, 16*/
	if ((cur_state == LEGUP_F_main_BB__601_212)) begin
		main_601_sext70i_reg <= main_601_sext70i;
		if (start == 1'b0 && ^(main_601_sext70i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_601_sext70i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %601*/
	/*   %603 = ashr exact i32 %sext70.i, 16*/
		main_601_603 = ($signed(main_601_sext70i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %601*/
	/*   %603 = ashr exact i32 %sext70.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__601_212)) begin
		main_601_603_reg <= main_601_603;
		if (start == 1'b0 && ^(main_601_603) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_601_603_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %601*/
	/*   %.op72.i = add nsw i32 %603, 256*/
		main_601_op72i = (main_601_603 + 32'd256);
end
always @(posedge clk) begin
	/* main: %601*/
	/*   %.op72.i = add nsw i32 %603, 256*/
	if ((cur_state == LEGUP_F_main_BB__601_212)) begin
		main_601_op72i_reg <= main_601_op72i;
		if (start == 1'b0 && ^(main_601_op72i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_601_op72i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.i*/
	/*   %604 = icmp slt i32 %.op72.i, -32768*/
		main_gsm_addexit17i_604 = ($signed(main_601_op72i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.i*/
	/*   %604 = icmp slt i32 %.op72.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17i_213)) begin
		main_gsm_addexit17i_604_reg <= main_gsm_addexit17i_604;
		if (start == 1'b0 && ^(main_gsm_addexit17i_604) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17i_604_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %605 = icmp sgt i32 %.op72.i, 32767*/
		main_gsm_addexit17threadi_605 = ($signed(main_601_op72i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %605 = icmp sgt i32 %.op72.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214)) begin
		main_gsm_addexit17threadi_605_reg <= main_gsm_addexit17threadi_605;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_605) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_605_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %sext74.i = shl i32 %.op72.i, 16*/
		main_gsm_addexit17threadi_sext74i = (main_601_op72i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %sext74.i = shl i32 %.op72.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214)) begin
		main_gsm_addexit17threadi_sext74i_reg <= main_gsm_addexit17threadi_sext74i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_sext74i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_sext74i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %.op76.i = ashr i32 %sext74.i, 25*/
		main_gsm_addexit17threadi_op76i = ($signed(main_gsm_addexit17threadi_sext74i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %.op76.i = ashr i32 %sext74.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214)) begin
		main_gsm_addexit17threadi_op76i_reg <= main_gsm_addexit17threadi_op76i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_op76i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_op76i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %606 = icmp sgt i32 %.op76.i, 7*/
		main_gsm_addexit17threadi_606 = ($signed(main_gsm_addexit17threadi_op76i) > $signed(32'd7));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %606 = icmp sgt i32 %.op76.i, 7*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214)) begin
		main_gsm_addexit17threadi_606_reg <= main_gsm_addexit17threadi_606;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_606) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_606_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %or.cond168.i = or i1 %605, %606*/
		main_gsm_addexit17threadi_orcond168i = (main_gsm_addexit17threadi_605 | main_gsm_addexit17threadi_606);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit17.thread.i*/
	/*   %or.cond168.i = or i1 %605, %606*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214)) begin
		main_gsm_addexit17threadi_orcond168i_reg <= main_gsm_addexit17threadi_orcond168i;
		if (start == 1'b0 && ^(main_gsm_addexit17threadi_orcond168i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit17threadi_orcond168i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %607*/
	/*   %608 = icmp slt i32 %.op76.i, -8*/
		main_607_608 = ($signed(main_gsm_addexit17threadi_op76i_reg) < $signed(-32'd8));
end
always @(posedge clk) begin
	/* main: %607*/
	/*   %608 = icmp slt i32 %.op76.i, -8*/
	if ((cur_state == LEGUP_F_main_BB__607_215)) begin
		main_607_608_reg <= main_607_608;
		if (start == 1'b0 && ^(main_607_608) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_607_608_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %609*/
	/*   %610 = add nsw i32 %.op76.i, 8*/
		main_609_610 = (main_gsm_addexit17threadi_op76i_reg + 32'd8);
end
always @(posedge clk) begin
	/* main: %609*/
	/*   %610 = add nsw i32 %.op76.i, 8*/
	if ((cur_state == LEGUP_F_main_BB__609_216)) begin
		main_609_610_reg <= main_609_610;
		if (start == 1'b0 && ^(main_609_610) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_609_610_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %609*/
	/*   %phitmp5.i = trunc i32 %610 to i16*/
		main_609_phitmp5i = main_609_610[15:0];
end
always @(posedge clk) begin
	/* main: %609*/
	/*   %phitmp5.i = trunc i32 %610 to i16*/
	if ((cur_state == LEGUP_F_main_BB__609_216)) begin
		main_609_phitmp5i_reg <= main_609_phitmp5i;
		if (start == 1'b0 && ^(main_609_phitmp5i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_609_phitmp5i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread112i_211) & (memory_controller_waitrequest == 1'd0)) & (main_thread112i_600 == 1'd1))) begin
		main_thread117i_611 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__601_212) & (memory_controller_waitrequest == 1'd0)) & (main_601_602 == 1'd1))) begin
		main_thread117i_611 = 16'd15;
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17i_213) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17i_604 == 1'd1))) begin
		main_thread117i_611 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17threadi_orcond168i == 1'd1))) begin
		main_thread117i_611 = 16'd15;
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__607_215) & (memory_controller_waitrequest == 1'd0)) & (main_607_608 == 1'd1))) begin
		main_thread117i_611 = 16'd0;
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__609_216) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread117i_611 = main_609_phitmp5i;
	end
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread112i_211) & (memory_controller_waitrequest == 1'd0)) & (main_thread112i_600 == 1'd1))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB__601_212) & (memory_controller_waitrequest == 1'd0)) & (main_601_602 == 1'd1))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17i_213) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17i_604 == 1'd1))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit17threadi_214) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit17threadi_orcond168i == 1'd1))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if ((((cur_state == LEGUP_F_main_BB__607_215) & (memory_controller_waitrequest == 1'd0)) & (main_607_608 == 1'd1))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %611 = phi i16 [ %phitmp5.i, %609 ], [ 0, %607 ], [ 0, %gsm_add.exit17.i ], [ 15, %gsm_add.exit17.thread.i ], [ 0, %.thread112.i ], [ 15, %601 ]*/
	if (((cur_state == LEGUP_F_main_BB__609_216) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread117i_611_reg <= main_thread117i_611;
		if (start == 1'b0 && ^(main_thread117i_611) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_611_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %612 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 6*/
if (reset) begin main_thread117i_612 = 0; end
		main_thread117i_612 = (1'd0 | (2 * 32'd6));
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %612 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_thread117i_612_reg <= main_thread117i_612;
		if (start == 1'b0 && ^(main_thread117i_612) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_612_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %613 = load i16* %612, align 2, !tbaa !1*/
		main_thread117i_613 = main_0_LARc_out_b;
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %613 = load i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_218)) begin
		main_thread117i_613_reg <= main_thread117i_613;
		if (start == 1'b0 && ^(main_thread117i_613) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_613_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %614 = sext i16 %613 to i32*/
		main_thread117i_614 = $signed(main_thread117i_613);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %614 = sext i16 %613 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_218)) begin
		main_thread117i_614_reg <= main_thread117i_614;
		if (start == 1'b0 && ^(main_thread117i_614) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_614_reg"); $finish; end
	end
end
always @(*) begin
	main_thread117i_615 = main_thread117i_615_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %615 = mul i32 %614, 17068*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_219)) begin
		main_thread117i_615_reg <= main_thread117i_615;
		if (start == 1'b0 && ^(main_thread117i_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_615_reg"); $finish; end
	end
	/* main: %.thread117.i*/
	/*   %615 = mul i32 %614, 17068*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_219)) begin
		main_thread117i_615_reg <= main_thread117i_615;
		if (start == 1'b0 && ^(main_thread117i_615) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_615_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %616 = ashr i32 %615, 16*/
		main_thread117i_616 = ($signed(main_thread117i_615) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %616 = ashr i32 %615, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_219)) begin
		main_thread117i_616_reg <= main_thread117i_616;
		if (start == 1'b0 && ^(main_thread117i_616) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_616_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %617 = add nsw i32 %616, -341*/
		main_thread117i_617 = (main_thread117i_616 + -32'd341);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %617 = add nsw i32 %616, -341*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_219)) begin
		main_thread117i_617_reg <= main_thread117i_617;
		if (start == 1'b0 && ^(main_thread117i_617) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_617_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread117.i*/
	/*   %618 = icmp slt i32 %617, -32768*/
		main_thread117i_618 = ($signed(main_thread117i_617) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %618 = icmp slt i32 %617, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_219)) begin
		main_thread117i_618_reg <= main_thread117i_618;
		if (start == 1'b0 && ^(main_thread117i_618) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread117i_618_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %619*/
	/*   %620 = icmp sgt i32 %617, 32767*/
		main_619_620 = ($signed(main_thread117i_617_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %619*/
	/*   %620 = icmp sgt i32 %617, 32767*/
	if ((cur_state == LEGUP_F_main_BB__619_220)) begin
		main_619_620_reg <= main_619_620;
		if (start == 1'b0 && ^(main_619_620) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_619_620_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %619*/
	/*   %sext79.i = shl i32 %617, 16*/
		main_619_sext79i = (main_thread117i_617_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %619*/
	/*   %sext79.i = shl i32 %617, 16*/
	if ((cur_state == LEGUP_F_main_BB__619_220)) begin
		main_619_sext79i_reg <= main_619_sext79i;
		if (start == 1'b0 && ^(main_619_sext79i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_619_sext79i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %619*/
	/*   %621 = ashr exact i32 %sext79.i, 16*/
		main_619_621 = ($signed(main_619_sext79i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %619*/
	/*   %621 = ashr exact i32 %sext79.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__619_220)) begin
		main_619_621_reg <= main_619_621;
		if (start == 1'b0 && ^(main_619_621) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_619_621_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %619*/
	/*   %.op81.i = add nsw i32 %621, 256*/
		main_619_op81i = (main_619_621 + 32'd256);
end
always @(posedge clk) begin
	/* main: %619*/
	/*   %.op81.i = add nsw i32 %621, 256*/
	if ((cur_state == LEGUP_F_main_BB__619_220)) begin
		main_619_op81i_reg <= main_619_op81i;
		if (start == 1'b0 && ^(main_619_op81i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_619_op81i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.i*/
	/*   %622 = icmp slt i32 %.op81.i, -32768*/
		main_gsm_addexit13i_622 = ($signed(main_619_op81i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.i*/
	/*   %622 = icmp slt i32 %.op81.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13i_221)) begin
		main_gsm_addexit13i_622_reg <= main_gsm_addexit13i_622;
		if (start == 1'b0 && ^(main_gsm_addexit13i_622) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13i_622_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %623 = icmp sgt i32 %.op81.i, 32767*/
		main_gsm_addexit13threadi_623 = ($signed(main_619_op81i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %623 = icmp sgt i32 %.op81.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222)) begin
		main_gsm_addexit13threadi_623_reg <= main_gsm_addexit13threadi_623;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_623) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_623_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %sext83.i = shl i32 %.op81.i, 16*/
		main_gsm_addexit13threadi_sext83i = (main_619_op81i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %sext83.i = shl i32 %.op81.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222)) begin
		main_gsm_addexit13threadi_sext83i_reg <= main_gsm_addexit13threadi_sext83i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_sext83i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_sext83i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %.op85.i = ashr i32 %sext83.i, 25*/
		main_gsm_addexit13threadi_op85i = ($signed(main_gsm_addexit13threadi_sext83i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %.op85.i = ashr i32 %sext83.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222)) begin
		main_gsm_addexit13threadi_op85i_reg <= main_gsm_addexit13threadi_op85i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_op85i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_op85i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %624 = icmp sgt i32 %.op85.i, 3*/
		main_gsm_addexit13threadi_624 = ($signed(main_gsm_addexit13threadi_op85i) > $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %624 = icmp sgt i32 %.op85.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222)) begin
		main_gsm_addexit13threadi_624_reg <= main_gsm_addexit13threadi_624;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_624) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_624_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %or.cond169.i = or i1 %623, %624*/
		main_gsm_addexit13threadi_orcond169i = (main_gsm_addexit13threadi_623 | main_gsm_addexit13threadi_624);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit13.thread.i*/
	/*   %or.cond169.i = or i1 %623, %624*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222)) begin
		main_gsm_addexit13threadi_orcond169i_reg <= main_gsm_addexit13threadi_orcond169i;
		if (start == 1'b0 && ^(main_gsm_addexit13threadi_orcond169i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit13threadi_orcond169i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %625*/
	/*   %626 = icmp slt i32 %.op85.i, -4*/
		main_625_626 = ($signed(main_gsm_addexit13threadi_op85i_reg) < $signed(-32'd4));
end
always @(posedge clk) begin
	/* main: %625*/
	/*   %626 = icmp slt i32 %.op85.i, -4*/
	if ((cur_state == LEGUP_F_main_BB__625_223)) begin
		main_625_626_reg <= main_625_626;
		if (start == 1'b0 && ^(main_625_626) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_625_626_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %627*/
	/*   %628 = add nsw i32 %.op85.i, 4*/
		main_627_628 = (main_gsm_addexit13threadi_op85i_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %627*/
	/*   %628 = add nsw i32 %.op85.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__627_224)) begin
		main_627_628_reg <= main_627_628;
		if (start == 1'b0 && ^(main_627_628) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_627_628_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %627*/
	/*   %phitmp6.i = trunc i32 %628 to i16*/
		main_627_phitmp6i = main_627_628[15:0];
end
always @(posedge clk) begin
	/* main: %627*/
	/*   %phitmp6.i = trunc i32 %628 to i16*/
	if ((cur_state == LEGUP_F_main_BB__627_224)) begin
		main_627_phitmp6i_reg <= main_627_phitmp6i;
		if (start == 1'b0 && ^(main_627_phitmp6i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_627_phitmp6i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread117i_219) & (memory_controller_waitrequest == 1'd0)) & (main_thread117i_618 == 1'd1))) begin
		main_thread122i_629 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__619_220) & (memory_controller_waitrequest == 1'd0)) & (main_619_620 == 1'd1))) begin
		main_thread122i_629 = 16'd7;
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13i_221) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13i_622 == 1'd1))) begin
		main_thread122i_629 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13threadi_orcond169i == 1'd1))) begin
		main_thread122i_629 = 16'd7;
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__625_223) & (memory_controller_waitrequest == 1'd0)) & (main_625_626 == 1'd1))) begin
		main_thread122i_629 = 16'd0;
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__627_224) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_thread122i_629 = main_627_phitmp6i;
	end
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread117i_219) & (memory_controller_waitrequest == 1'd0)) & (main_thread117i_618 == 1'd1))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB__619_220) & (memory_controller_waitrequest == 1'd0)) & (main_619_620 == 1'd1))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13i_221) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13i_622 == 1'd1))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit13threadi_222) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit13threadi_orcond169i == 1'd1))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if ((((cur_state == LEGUP_F_main_BB__625_223) & (memory_controller_waitrequest == 1'd0)) & (main_625_626 == 1'd1))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %629 = phi i16 [ %phitmp6.i, %627 ], [ 0, %625 ], [ 0, %gsm_add.exit13.i ], [ 7, %gsm_add.exit13.thread.i ], [ 0, %.thread117.i ], [ 7, %619 ]*/
	if (((cur_state == LEGUP_F_main_BB__627_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_thread122i_629_reg <= main_thread122i_629;
		if (start == 1'b0 && ^(main_thread122i_629) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_629_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %630 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 7*/
if (reset) begin main_thread122i_630 = 0; end
		main_thread122i_630 = (1'd0 | (2 * 32'd7));
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %630 = getelementptr inbounds [8 x i16]* %LARc, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_thread122i_630_reg <= main_thread122i_630;
		if (start == 1'b0 && ^(main_thread122i_630) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_630_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %631 = load i16* %630, align 2, !tbaa !1*/
		main_thread122i_631 = main_0_LARc_out_a;
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %631 = load i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_226)) begin
		main_thread122i_631_reg <= main_thread122i_631;
		if (start == 1'b0 && ^(main_thread122i_631) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_631_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %632 = sext i16 %631 to i32*/
		main_thread122i_632 = $signed(main_thread122i_631);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %632 = sext i16 %631 to i32*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_226)) begin
		main_thread122i_632_reg <= main_thread122i_632;
		if (start == 1'b0 && ^(main_thread122i_632) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_632_reg"); $finish; end
	end
end
always @(*) begin
	main_thread122i_633 = main_thread122i_633_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %633 = mul i32 %632, 18072*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_227)) begin
		main_thread122i_633_reg <= main_thread122i_633;
		if (start == 1'b0 && ^(main_thread122i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_633_reg"); $finish; end
	end
	/* main: %.thread122.i*/
	/*   %633 = mul i32 %632, 18072*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_227)) begin
		main_thread122i_633_reg <= main_thread122i_633;
		if (start == 1'b0 && ^(main_thread122i_633) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_633_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %634 = ashr i32 %633, 16*/
		main_thread122i_634 = ($signed(main_thread122i_633) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %634 = ashr i32 %633, 16*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_227)) begin
		main_thread122i_634_reg <= main_thread122i_634;
		if (start == 1'b0 && ^(main_thread122i_634) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_634_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %635 = add nsw i32 %634, -1144*/
		main_thread122i_635 = (main_thread122i_634 + -32'd1144);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %635 = add nsw i32 %634, -1144*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_227)) begin
		main_thread122i_635_reg <= main_thread122i_635;
		if (start == 1'b0 && ^(main_thread122i_635) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_635_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.thread122.i*/
	/*   %636 = icmp slt i32 %635, -32768*/
		main_thread122i_636 = ($signed(main_thread122i_635) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %636 = icmp slt i32 %635, -32768*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_227)) begin
		main_thread122i_636_reg <= main_thread122i_636;
		if (start == 1'b0 && ^(main_thread122i_636) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_thread122i_636_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %637*/
	/*   %638 = icmp sgt i32 %635, 32767*/
		main_637_638 = ($signed(main_thread122i_635_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %637*/
	/*   %638 = icmp sgt i32 %635, 32767*/
	if ((cur_state == LEGUP_F_main_BB__637_228)) begin
		main_637_638_reg <= main_637_638;
		if (start == 1'b0 && ^(main_637_638) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_637_638_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %637*/
	/*   %sext88.i = shl i32 %635, 16*/
		main_637_sext88i = (main_thread122i_635_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %637*/
	/*   %sext88.i = shl i32 %635, 16*/
	if ((cur_state == LEGUP_F_main_BB__637_228)) begin
		main_637_sext88i_reg <= main_637_sext88i;
		if (start == 1'b0 && ^(main_637_sext88i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_637_sext88i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %637*/
	/*   %639 = ashr exact i32 %sext88.i, 16*/
		main_637_639 = ($signed(main_637_sext88i) >>> 32'd16);
end
always @(posedge clk) begin
	/* main: %637*/
	/*   %639 = ashr exact i32 %sext88.i, 16*/
	if ((cur_state == LEGUP_F_main_BB__637_228)) begin
		main_637_639_reg <= main_637_639;
		if (start == 1'b0 && ^(main_637_639) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_637_639_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %637*/
	/*   %.op90.i = add nsw i32 %639, 256*/
		main_637_op90i = (main_637_639 + 32'd256);
end
always @(posedge clk) begin
	/* main: %637*/
	/*   %.op90.i = add nsw i32 %639, 256*/
	if ((cur_state == LEGUP_F_main_BB__637_228)) begin
		main_637_op90i_reg <= main_637_op90i;
		if (start == 1'b0 && ^(main_637_op90i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_637_op90i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.i*/
	/*   %640 = icmp slt i32 %.op90.i, -32768*/
		main_gsm_addexit9i_640 = ($signed(main_637_op90i_reg) < $signed(-32'd32768));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.i*/
	/*   %640 = icmp slt i32 %.op90.i, -32768*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9i_229)) begin
		main_gsm_addexit9i_640_reg <= main_gsm_addexit9i_640;
		if (start == 1'b0 && ^(main_gsm_addexit9i_640) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9i_640_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %641 = icmp sgt i32 %.op90.i, 32767*/
		main_gsm_addexit9threadi_641 = ($signed(main_637_op90i_reg) > $signed(32'd32767));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %641 = icmp sgt i32 %.op90.i, 32767*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230)) begin
		main_gsm_addexit9threadi_641_reg <= main_gsm_addexit9threadi_641;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_641) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_641_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %sext92.i = shl i32 %.op90.i, 16*/
		main_gsm_addexit9threadi_sext92i = (main_637_op90i_reg <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %sext92.i = shl i32 %.op90.i, 16*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230)) begin
		main_gsm_addexit9threadi_sext92i_reg <= main_gsm_addexit9threadi_sext92i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_sext92i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_sext92i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %.op94.i = ashr i32 %sext92.i, 25*/
		main_gsm_addexit9threadi_op94i = ($signed(main_gsm_addexit9threadi_sext92i) >>> 32'd25);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %.op94.i = ashr i32 %sext92.i, 25*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230)) begin
		main_gsm_addexit9threadi_op94i_reg <= main_gsm_addexit9threadi_op94i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_op94i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_op94i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %642 = icmp sgt i32 %.op94.i, 3*/
		main_gsm_addexit9threadi_642 = ($signed(main_gsm_addexit9threadi_op94i) > $signed(32'd3));
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %642 = icmp sgt i32 %.op94.i, 3*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230)) begin
		main_gsm_addexit9threadi_642_reg <= main_gsm_addexit9threadi_642;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_642) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_642_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %or.cond170.i = or i1 %641, %642*/
		main_gsm_addexit9threadi_orcond170i = (main_gsm_addexit9threadi_641 | main_gsm_addexit9threadi_642);
end
always @(posedge clk) begin
	/* main: %gsm_add.exit9.thread.i*/
	/*   %or.cond170.i = or i1 %641, %642*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230)) begin
		main_gsm_addexit9threadi_orcond170i_reg <= main_gsm_addexit9threadi_orcond170i;
		if (start == 1'b0 && ^(main_gsm_addexit9threadi_orcond170i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_gsm_addexit9threadi_orcond170i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %643*/
	/*   %644 = icmp slt i32 %.op94.i, -4*/
		main_643_644 = ($signed(main_gsm_addexit9threadi_op94i_reg) < $signed(-32'd4));
end
always @(posedge clk) begin
	/* main: %643*/
	/*   %644 = icmp slt i32 %.op94.i, -4*/
	if ((cur_state == LEGUP_F_main_BB__643_231)) begin
		main_643_644_reg <= main_643_644;
		if (start == 1'b0 && ^(main_643_644) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_643_644_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %645*/
	/*   %646 = add nsw i32 %.op94.i, 4*/
		main_645_646 = (main_gsm_addexit9threadi_op94i_reg + 32'd4);
end
always @(posedge clk) begin
	/* main: %645*/
	/*   %646 = add nsw i32 %.op94.i, 4*/
	if ((cur_state == LEGUP_F_main_BB__645_232)) begin
		main_645_646_reg <= main_645_646;
		if (start == 1'b0 && ^(main_645_646) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_645_646_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %645*/
	/*   %phitmp7.i = trunc i32 %646 to i16*/
		main_645_phitmp7i = main_645_646[15:0];
end
always @(posedge clk) begin
	/* main: %645*/
	/*   %phitmp7.i = trunc i32 %646 to i16*/
	if ((cur_state == LEGUP_F_main_BB__645_232)) begin
		main_645_phitmp7i_reg <= main_645_phitmp7i;
		if (start == 1'b0 && ^(main_645_phitmp7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_645_phitmp7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread122i_227) & (memory_controller_waitrequest == 1'd0)) & (main_thread122i_636 == 1'd1))) begin
		main_Quantization_and_codingexit_647 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__637_228) & (memory_controller_waitrequest == 1'd0)) & (main_637_638 == 1'd1))) begin
		main_Quantization_and_codingexit_647 = 16'd7;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9i_229) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9i_640 == 1'd1))) begin
		main_Quantization_and_codingexit_647 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	else if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9threadi_orcond170i == 1'd1))) begin
		main_Quantization_and_codingexit_647 = 16'd7;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	else if ((((cur_state == LEGUP_F_main_BB__643_231) & (memory_controller_waitrequest == 1'd0)) & (main_643_644 == 1'd1))) begin
		main_Quantization_and_codingexit_647 = 16'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__645_232) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_Quantization_and_codingexit_647 = main_645_phitmp7i;
	end
end
always @(posedge clk) begin
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB_thread122i_227) & (memory_controller_waitrequest == 1'd0)) & (main_thread122i_636 == 1'd1))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB__637_228) & (memory_controller_waitrequest == 1'd0)) & (main_637_638 == 1'd1))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9i_229) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9i_640 == 1'd1))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB_gsm_addexit9threadi_230) & (memory_controller_waitrequest == 1'd0)) & (main_gsm_addexit9threadi_orcond170i == 1'd1))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if ((((cur_state == LEGUP_F_main_BB__643_231) & (memory_controller_waitrequest == 1'd0)) & (main_643_644 == 1'd1))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
	/* main: %Quantization_and_coding.exit*/
	/*   %647 = phi i16 [ %phitmp7.i, %645 ], [ 0, %643 ], [ 0, %gsm_add.exit9.i ], [ 7, %gsm_add.exit9.thread.i ], [ 0, %.thread122.i ], [ 7, %637 ]*/
	if (((cur_state == LEGUP_F_main_BB__645_232) & (memory_controller_waitrequest == 1'd0))) begin
		main_Quantization_and_codingexit_647_reg <= main_Quantization_and_codingexit_647;
		if (start == 1'b0 && ^(main_Quantization_and_codingexit_647) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_Quantization_and_codingexit_647_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %648 = icmp eq i16 %524, 32*/
		main_preheader_648 = (main_threadi4_524_reg == 16'd32);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %648 = icmp eq i16 %524, 32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_648_reg <= main_preheader_648;
		if (start == 1'b0 && ^(main_preheader_648) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_648_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %649 = zext i1 %648 to i32*/
		main_preheader_649 = main_preheader_648;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %649 = zext i1 %648 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_649_reg <= main_preheader_649;
		if (start == 1'b0 && ^(main_preheader_649) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_649_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %650 = add nsw i32 %649, %679*/
		main_preheader_650 = (main_preheader_649 + main_674_679_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %650 = add nsw i32 %649, %679*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_650_reg <= main_preheader_650;
		if (start == 1'b0 && ^(main_preheader_650) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_650_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %651 = icmp eq i16 %539, 33*/
		main_preheader_651 = (main_thread98i_539_reg == 16'd33);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %651 = icmp eq i16 %539, 33*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_651_reg <= main_preheader_651;
		if (start == 1'b0 && ^(main_preheader_651) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_651_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %652 = zext i1 %651 to i32*/
		main_preheader_652 = main_preheader_651;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %652 = zext i1 %651 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_652_reg <= main_preheader_652;
		if (start == 1'b0 && ^(main_preheader_652) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_652_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %653 = add nsw i32 %652, %650*/
		main_preheader_653 = (main_preheader_652 + main_preheader_650);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %653 = add nsw i32 %652, %650*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_653_reg <= main_preheader_653;
		if (start == 1'b0 && ^(main_preheader_653) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_653_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %654 = icmp eq i16 %557, 22*/
		main_preheader_654 = (main_thread102i_557_reg == 16'd22);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %654 = icmp eq i16 %557, 22*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_654_reg <= main_preheader_654;
		if (start == 1'b0 && ^(main_preheader_654) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_654_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %655 = zext i1 %654 to i32*/
		main_preheader_655 = main_preheader_654;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %655 = zext i1 %654 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_655_reg <= main_preheader_655;
		if (start == 1'b0 && ^(main_preheader_655) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_655_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %656 = add nsw i32 %655, %653*/
		main_preheader_656 = (main_preheader_655 + main_preheader_653);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %656 = add nsw i32 %655, %653*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_656_reg <= main_preheader_656;
		if (start == 1'b0 && ^(main_preheader_656) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_656_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %657 = icmp eq i16 %575, 13*/
		main_preheader_657 = (main_thread107i_575_reg == 16'd13);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %657 = icmp eq i16 %575, 13*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_657_reg <= main_preheader_657;
		if (start == 1'b0 && ^(main_preheader_657) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_657_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %658 = zext i1 %657 to i32*/
		main_preheader_658 = main_preheader_657;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %658 = zext i1 %657 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_658_reg <= main_preheader_658;
		if (start == 1'b0 && ^(main_preheader_658) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_658_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %659 = add nsw i32 %658, %656*/
		main_preheader_659 = (main_preheader_658 + main_preheader_656);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %659 = add nsw i32 %658, %656*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_659_reg <= main_preheader_659;
		if (start == 1'b0 && ^(main_preheader_659) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_659_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %660 = icmp eq i16 %593, 7*/
		main_preheader_660 = (main_thread112i_593_reg == 16'd7);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %660 = icmp eq i16 %593, 7*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_660_reg <= main_preheader_660;
		if (start == 1'b0 && ^(main_preheader_660) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_660_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %661 = zext i1 %660 to i32*/
		main_preheader_661 = main_preheader_660;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %661 = zext i1 %660 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_661_reg <= main_preheader_661;
		if (start == 1'b0 && ^(main_preheader_661) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_661_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %662 = add nsw i32 %661, %659*/
		main_preheader_662 = (main_preheader_661 + main_preheader_659);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %662 = add nsw i32 %661, %659*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_662_reg <= main_preheader_662;
		if (start == 1'b0 && ^(main_preheader_662) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_662_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %663 = icmp eq i16 %611, 5*/
		main_preheader_663 = (main_thread117i_611_reg == 16'd5);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %663 = icmp eq i16 %611, 5*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_663_reg <= main_preheader_663;
		if (start == 1'b0 && ^(main_preheader_663) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_663_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %664 = zext i1 %663 to i32*/
		main_preheader_664 = main_preheader_663;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %664 = zext i1 %663 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_664_reg <= main_preheader_664;
		if (start == 1'b0 && ^(main_preheader_664) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_664_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %665 = add nsw i32 %664, %662*/
		main_preheader_665 = (main_preheader_664 + main_preheader_662);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %665 = add nsw i32 %664, %662*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_665_reg <= main_preheader_665;
		if (start == 1'b0 && ^(main_preheader_665) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_665_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %666 = icmp eq i16 %629, 3*/
		main_preheader_666 = (main_thread122i_629_reg == 16'd3);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %666 = icmp eq i16 %629, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_666_reg <= main_preheader_666;
		if (start == 1'b0 && ^(main_preheader_666) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_666_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %667 = zext i1 %666 to i32*/
		main_preheader_667 = main_preheader_666;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %667 = zext i1 %666 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_667_reg <= main_preheader_667;
		if (start == 1'b0 && ^(main_preheader_667) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_667_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %668 = add nsw i32 %667, %665*/
		main_preheader_668 = (main_preheader_667 + main_preheader_665);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %668 = add nsw i32 %667, %665*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_668_reg <= main_preheader_668;
		if (start == 1'b0 && ^(main_preheader_668) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_668_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %669 = icmp eq i16 %647, 2*/
		main_preheader_669 = (main_Quantization_and_codingexit_647_reg == 16'd2);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %669 = icmp eq i16 %647, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_669_reg <= main_preheader_669;
		if (start == 1'b0 && ^(main_preheader_669) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_669_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %670 = zext i1 %669 to i32*/
		main_preheader_670 = main_preheader_669;
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %670 = zext i1 %669 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheader_235)) begin
		main_preheader_670_reg <= main_preheader_670;
		if (start == 1'b0 && ^(main_preheader_670) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_670_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %671 = add nsw i32 %670, %668*/
		main_preheader_671 = (main_preheader_670_reg + main_preheader_668_reg);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %671 = add nsw i32 %670, %668*/
	if ((cur_state == LEGUP_F_main_BB_preheader_236)) begin
		main_preheader_671_reg <= main_preheader_671;
		if (start == 1'b0 && ^(main_preheader_671) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_671_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %673 = icmp eq i32 %671, 168*/
		main_preheader_673 = (main_preheader_671 == 32'd168);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %673 = icmp eq i32 %671, 168*/
	if ((cur_state == LEGUP_F_main_BB_preheader_236)) begin
		main_preheader_673_reg <= main_preheader_673;
		if (start == 1'b0 && ^(main_preheader_673) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_673_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %679, %674 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_234) & (memory_controller_waitrequest == 1'd0))) begin
		main_674_main_result04 = 32'd0;
	end
	/* main: %674*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %679, %674 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__674_238) & (memory_controller_waitrequest == 1'd0)) & (main_674_exitcond5_reg == 1'd0))) */ begin
		main_674_main_result04 = main_674_679;
	end
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %679, %674 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_234) & (memory_controller_waitrequest == 1'd0))) begin
		main_674_main_result04_reg <= main_674_main_result04;
		if (start == 1'b0 && ^(main_674_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_main_result04_reg"); $finish; end
	end
	/* main: %674*/
	/*   %main_result.04 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %679, %674 ]*/
	if ((((cur_state == LEGUP_F_main_BB__674_238) & (memory_controller_waitrequest == 1'd0)) & (main_674_exitcond5_reg == 1'd0))) begin
		main_674_main_result04_reg <= main_674_main_result04;
		if (start == 1'b0 && ^(main_674_main_result04) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_main_result04_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %680, %674 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_234) & (memory_controller_waitrequest == 1'd0))) begin
		main_674_i13 = 32'd0;
	end
	/* main: %674*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %680, %674 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__674_238) & (memory_controller_waitrequest == 1'd0)) & (main_674_exitcond5_reg == 1'd0))) */ begin
		main_674_i13 = main_674_680_reg;
	end
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %680, %674 ]*/
	if (((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_234) & (memory_controller_waitrequest == 1'd0))) begin
		main_674_i13_reg <= main_674_i13;
		if (start == 1'b0 && ^(main_674_i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_i13_reg"); $finish; end
	end
	/* main: %674*/
	/*   %i.13 = phi i32 [ 0, %Quantization_and_coding.exit ], [ %680, %674 ]*/
	if ((((cur_state == LEGUP_F_main_BB__674_238) & (memory_controller_waitrequest == 1'd0)) & (main_674_exitcond5_reg == 1'd0))) begin
		main_674_i13_reg <= main_674_i13;
		if (start == 1'b0 && ^(main_674_i13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_i13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %scevgep = getelementptr [160 x i16]* @outData, i32 0, i32 %i.13*/
		main_674_scevgep = (1'd0 | (2 * main_674_i13_reg));
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %scevgep = getelementptr [160 x i16]* @outData, i32 0, i32 %i.13*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_674_scevgep_reg <= main_674_scevgep;
		if (start == 1'b0 && ^(main_674_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %scevgep6 = getelementptr [160 x i16]* %so, i32 0, i32 %i.13*/
		main_674_scevgep6 = (1'd0 | (2 * main_674_i13_reg));
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %scevgep6 = getelementptr [160 x i16]* %so, i32 0, i32 %i.13*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_674_scevgep6_reg <= main_674_scevgep6;
		if (start == 1'b0 && ^(main_674_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %675 = load i16* %scevgep6, align 2, !tbaa !1*/
		main_674_675 = main_0_so_out_b;
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %675 = load i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_238)) begin
		main_674_675_reg <= main_674_675;
		if (start == 1'b0 && ^(main_674_675) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_675_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %676 = load i16* %scevgep, align 2, !tbaa !1*/
		main_674_676 = outData_out_a;
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %676 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_238)) begin
		main_674_676_reg <= main_674_676;
		if (start == 1'b0 && ^(main_674_676) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_676_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %677 = icmp eq i16 %675, %676*/
		main_674_677 = (main_674_675 == main_674_676);
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %677 = icmp eq i16 %675, %676*/
	if ((cur_state == LEGUP_F_main_BB__674_238)) begin
		main_674_677_reg <= main_674_677;
		if (start == 1'b0 && ^(main_674_677) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_677_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %678 = zext i1 %677 to i32*/
		main_674_678 = main_674_677;
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %678 = zext i1 %677 to i32*/
	if ((cur_state == LEGUP_F_main_BB__674_238)) begin
		main_674_678_reg <= main_674_678;
		if (start == 1'b0 && ^(main_674_678) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_678_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %679 = add nsw i32 %678, %main_result.04*/
		main_674_679 = (main_674_678 + main_674_main_result04_reg);
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %679 = add nsw i32 %678, %main_result.04*/
	if ((cur_state == LEGUP_F_main_BB__674_238)) begin
		main_674_679_reg <= main_674_679;
		if (start == 1'b0 && ^(main_674_679) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_679_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %680 = add nsw i32 %i.13, 1*/
		main_674_680 = (main_674_i13_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %680 = add nsw i32 %i.13, 1*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_674_680_reg <= main_674_680;
		if (start == 1'b0 && ^(main_674_680) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_680_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %674*/
	/*   %exitcond5 = icmp eq i32 %680, 160*/
		main_674_exitcond5 = (main_674_680 == 32'd160);
end
always @(posedge clk) begin
	/* main: %674*/
	/*   %exitcond5 = icmp eq i32 %680, 160*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_674_exitcond5_reg <= main_674_exitcond5;
		if (start == 1'b0 && ^(main_674_exitcond5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_674_exitcond5_reg"); $finish; end
	end
end
always @(*) begin
	bitoff_address_a = 1'd0;
	/* main: %29*/
	/*   %32 = load i8* %31, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__29_16)) begin
		bitoff_address_a = (main_29_31 >>> 3'd0);
	end
	/* main: %35*/
	/*   %39 = load i8* %38, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__35_18)) begin
		bitoff_address_a = (main_35_38 >>> 3'd0);
	end
	/* main: %45*/
	/*   %49 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__45_21)) begin
		bitoff_address_a = (main_45_48 >>> 3'd0);
	end
	/* main: %52*/
	/*   %55 = load i8* %54, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__52_23)) begin
		bitoff_address_a = (main_52_54 >>> 3'd0);
	end
	/* main: %254*/
	/*   %257 = load i8* %256, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__254_72)) begin
		bitoff_address_a = (main_254_256 >>> 3'd0);
	end
	/* main: %260*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__260_74)) begin
		bitoff_address_a = (main_260_263 >>> 3'd0);
	end
	/* main: %270*/
	/*   %274 = load i8* %273, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__270_77)) begin
		bitoff_address_a = (main_270_273 >>> 3'd0);
	end
	/* main: %277*/
	/*   %280 = load i8* %279, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_79)) begin
		bitoff_address_a = (main_277_279 >>> 3'd0);
	end
end
always @(*) begin
	bitoff_write_enable_a = 1'd0;
	/* main: %29*/
	/*   %32 = load i8* %31, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__29_16)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %35*/
	/*   %39 = load i8* %38, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__35_18)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %45*/
	/*   %49 = load i8* %48, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__45_21)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %52*/
	/*   %55 = load i8* %54, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__52_23)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %254*/
	/*   %257 = load i8* %256, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__254_72)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %260*/
	/*   %264 = load i8* %263, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__260_74)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %270*/
	/*   %274 = load i8* %273, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__270_77)) begin
		bitoff_write_enable_a = 1'd0;
	end
	/* main: %277*/
	/*   %280 = load i8* %279, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__277_79)) begin
		bitoff_write_enable_a = 1'd0;
	end
end
always @(*) begin
	inData_address_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i16* %scevgep49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		inData_address_a = (main_1_scevgep49 >>> 3'd1);
	end
end
always @(*) begin
	inData_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %2 = load i16* %scevgep49, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		inData_write_enable_a = 1'd0;
	end
end
always @(*) begin
	outData_address_a = 1'd0;
	/* main: %674*/
	/*   %676 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		outData_address_a = (main_674_scevgep >>> 3'd1);
	end
end
always @(*) begin
	outData_write_enable_a = 1'd0;
	/* main: %674*/
	/*   %676 = load i16* %scevgep, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		outData_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_Pi_address_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %286, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_318 >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_320_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_322_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_324_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %310, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_326_reg >>> 3'd1);
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %336 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_89)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_318_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %445 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_133)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_318_reg >>> 3'd1);
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %452, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_136)) begin
		main_0_Pi_address_a = (main_gsm_normexiti_318_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Pi_write_enable_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %286, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %310, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
	/* main: %gsm_abs.exit.i9*/
	/*   %336 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_absexiti9_89)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit11.i*/
	/*   %445 = load i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit11i_133)) begin
		main_0_Pi_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %452, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_136)) begin
		main_0_Pi_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_Pi_in_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %286, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_in_a = main_gsm_normexiti_286;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %320, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_in_a = main_gsm_normexiti_292_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %322, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_in_a = main_gsm_normexiti_298_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %324, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_in_a = main_gsm_normexiti_304_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %310, i16* %326, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_85)) begin
		main_0_Pi_in_a = main_gsm_normexiti_310_reg;
	end
	/* main: %gsm_add.exit8.i*/
	/*   store i16 %452, i16* %318, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit8i_136)) begin
		main_0_Pi_in_a = main_gsm_addexit8i_452_reg;
	end
end
always @(*) begin
	main_0_Pi_address_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_319 >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_321_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_323_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_325_reg >>> 3'd1);
	end
	/* main: %gsm_div.exit.i*/
	/*   %428 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_124)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_319_reg >>> 3'd1);
	end
	/* main: %435*/
	/*   %436 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__435_129)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_319_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %466 = load i16* %scevgep22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_144)) begin
		main_0_Pi_address_b = (main_lrph27i_scevgep22_reg >>> 3'd1);
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %473, i16* %scevgep21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_0_Pi_address_b = (main_lrph27i_scevgep21_reg >>> 3'd1);
	end
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_161)) begin
		main_0_Pi_address_b = (main_gsm_normexiti_319_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Pi_write_enable_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_write_enable_b = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_write_enable_b = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_write_enable_b = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_write_enable_b = 1'd1;
	end
	/* main: %gsm_div.exit.i*/
	/*   %428 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_124)) begin
		main_0_Pi_write_enable_b = 1'd0;
	end
	/* main: %435*/
	/*   %436 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__435_129)) begin
		main_0_Pi_write_enable_b = 1'd0;
	end
	/* main: %gsm_mult_r.exit6.i*/
	/*   %466 = load i16* %scevgep22, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexit6i_144)) begin
		main_0_Pi_write_enable_b = 1'd0;
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %473, i16* %scevgep21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_0_Pi_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge43.i*/
	/*   %.pre.i15 = load i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge43i_161)) begin
		main_0_Pi_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_Pi_in_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %319, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Pi_in_b = main_gsm_normexiti_289;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %321, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Pi_in_b = main_gsm_normexiti_295_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %323, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Pi_in_b = main_gsm_normexiti_301_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %325, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Pi_in_b = main_gsm_normexiti_307_reg;
	end
	/* main: %gsm_add.exit3.i*/
	/*   store i16 %473, i16* %scevgep21, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_0_Pi_in_b = main_gsm_addexit3i_473_reg;
	end
end
always @(*) begin
	main_0_Ki_address_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_311 >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_313_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_315_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Ki_address_a = (main_gsm_normexiti_317_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Ki_write_enable_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Ki_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_Ki_in_a = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %289, i16* %311, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_in_a = main_gsm_normexiti_289;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %295, i16* %313, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_in_a = main_gsm_normexiti_295_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %301, i16* %315, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_in_a = main_gsm_normexiti_301_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %307, i16* %317, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_84)) begin
		main_0_Ki_in_a = main_gsm_normexiti_307_reg;
	end
end
always @(*) begin
	main_0_Ki_address_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_address_b = (main_gsm_normexiti_312 >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_address_b = (main_gsm_normexiti_314_reg >>> 3'd1);
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_address_b = (main_gsm_normexiti_316_reg >>> 3'd1);
	end
	/* main: %.lr.ph27.i*/
	/*   %456 = load i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_0_Ki_address_b = (main_lrph27i_scevgep23 >>> 3'd1);
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %488, i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_153)) begin
		main_0_Ki_address_b = (main_lrph27i_scevgep23_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_Ki_write_enable_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_write_enable_b = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_write_enable_b = 1'd1;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %456 = load i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_140)) begin
		main_0_Ki_write_enable_b = 1'd0;
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %488, i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_153)) begin
		main_0_Ki_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_Ki_in_b = 1'd0;
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %292, i16* %312, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_81)) begin
		main_0_Ki_in_b = main_gsm_normexiti_292;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %298, i16* %314, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_82)) begin
		main_0_Ki_in_b = main_gsm_normexiti_298_reg;
	end
	/* main: %gsm_norm.exit.i*/
	/*   store i16 %304, i16* %316, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_normexiti_83)) begin
		main_0_Ki_in_b = main_gsm_normexiti_304_reg;
	end
	/* main: %gsm_add.exit.i*/
	/*   store i16 %488, i16* %scevgep23, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexiti_153)) begin
		main_0_Ki_in_b = main_gsm_addexiti_488_reg;
	end
end
always @(*) begin
	main_0_so_address_a = 1'd0;
	/* main: %1*/
	/*   store i16 %2, i16* %scevgep48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_0_so_address_a = (main_1_scevgep48_reg >>> 3'd1);
	end
	/* main: %4*/
	/*   %5 = load i16* %scevgep46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_0_so_address_a = (main_4_scevgep46 >>> 3'd1);
	end
	/* main: %.preheader6.split.us.i*/
	/*   %67 = load i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_29)) begin
		main_0_so_address_a = (main_preheader6splitusi_scevgep42 >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_33)) begin
		main_0_so_address_a = (main_preheader6splitusi_scevgep42_reg >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %76 = load i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_35)) begin
		main_0_so_address_a = (main_gsm_mult_rexiti_scevgep44 >>> 3'd1);
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %81, i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_0_so_address_a = (main_gsm_mult_rexiti_scevgep44_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %84 = load i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_address_a = (main_13_14_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %93 = load i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_address_a = (main_threadi_92_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %111 = load i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_address_a = (main_threadi_110_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %153 = load i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_address_a = (main_threadi_152_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %197 = load i16* %scevgep40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_0_so_address_a = (main_179_scevgep40 >>> 3'd1);
	end
	/* main: %179*/
	/*   %208 = load i16* %scevgep38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_0_so_address_a = (main_179_scevgep38_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %216 = load i16* %scevgep36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_0_so_address_a = (main_179_scevgep36_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %224 = load i16* %scevgep34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_0_so_address_a = (main_179_scevgep34_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_so_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store i16 %2, i16* %scevgep48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %4*/
	/*   %5 = load i16* %scevgep46, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.preheader6.split.us.i*/
	/*   %67 = load i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheader6splitusi_29)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_33)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   %76 = load i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_35)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %81, i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_0_so_write_enable_a = 1'd1;
	end
	/* main: %.thread.i*/
	/*   %84 = load i16* %14, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %93 = load i16* %92, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %111 = load i16* %110, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %153 = load i16* %152, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %179*/
	/*   %197 = load i16* %scevgep40, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %179*/
	/*   %208 = load i16* %scevgep38, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %179*/
	/*   %216 = load i16* %scevgep36, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_0_so_write_enable_a = 1'd0;
	end
	/* main: %179*/
	/*   %224 = load i16* %scevgep34, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_0_so_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_so_in_a = 1'd0;
	/* main: %1*/
	/*   store i16 %2, i16* %scevgep48, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_3)) begin
		main_0_so_in_a = main_1_2;
	end
	/* main: %gsm_mult_r.exit.us.i*/
	/*   store i16 %.0.i.us.i, i16* %scevgep42, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexitusi_33)) begin
		main_0_so_in_a = main_gsm_mult_rexitusi_0iusi_reg;
	end
	/* main: %gsm_mult_r.exit.i*/
	/*   store i16 %81, i16* %scevgep44, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_mult_rexiti_37)) begin
		main_0_so_in_a = main_gsm_mult_rexiti_81;
	end
end
always @(*) begin
	main_0_so_address_b = 1'd0;
	/* main: %.thread.i*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_address_b = (main_threadi_87 >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_address_b = (main_threadi_100_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %123 = load i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_address_b = (main_threadi_122_reg >>> 3'd1);
	end
	/* main: %.thread.i*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_address_b = (main_threadi_136_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %204 = load i16* %scevgep39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_0_so_address_b = (main_179_scevgep39 >>> 3'd1);
	end
	/* main: %179*/
	/*   %212 = load i16* %scevgep37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_0_so_address_b = (main_179_scevgep37_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %220 = load i16* %scevgep35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_0_so_address_b = (main_179_scevgep35_reg >>> 3'd1);
	end
	/* main: %179*/
	/*   %228 = load i16* %scevgep33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_0_so_address_b = (main_179_scevgep33_reg >>> 3'd1);
	end
	/* main: %.preheader.i*/
	/*   store i16 %235, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_0_so_address_b = (main_preheaderi_08i >>> 3'd1);
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %scevgep29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_59)) begin
		main_0_so_address_b = (main__crit_edgei_scevgep29 >>> 3'd1);
	end
	/* main: %674*/
	/*   %675 = load i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_0_so_address_b = (main_674_scevgep6 >>> 3'd1);
	end
end
always @(*) begin
	main_0_so_write_enable_b = 1'd0;
	/* main: %.thread.i*/
	/*   %88 = load i16* %87, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_41)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %101 = load i16* %100, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_42)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %123 = load i16* %122, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_43)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.thread.i*/
	/*   %137 = load i16* %136, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi_44)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %179*/
	/*   %204 = load i16* %scevgep39, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_50)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %179*/
	/*   %212 = load i16* %scevgep37, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_51)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %179*/
	/*   %220 = load i16* %scevgep35, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_52)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %179*/
	/*   %228 = load i16* %scevgep33, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__179_53)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %.preheader.i*/
	/*   store i16 %235, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_0_so_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %.pre.i = load i16* %scevgep29, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_59)) begin
		main_0_so_write_enable_b = 1'd0;
	end
	/* main: %674*/
	/*   %675 = load i16* %scevgep6, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__674_237)) begin
		main_0_so_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_so_in_b = 1'd0;
	/* main: %.preheader.i*/
	/*   store i16 %235, i16* %.08.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_56)) begin
		main_0_so_in_b = main_preheaderi_235;
	end
end
always @(*) begin
	main_0_LARc_address_a = 1'd0;
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_94)) begin
		main_0_LARc_address_a = (main_lrphi_224i >>> 3'd1);
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %427, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_124)) begin
		main_0_LARc_address_a = (main_327_128i_reg >>> 3'd1);
	end
	/* main: %430*/
	/*   store i16 %431, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__430_126)) begin
		main_0_LARc_address_a = (main_327_128i_reg >>> 3'd1);
	end
	/* main: %.lr.ph27.i*/
	/*   %457 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_139)) begin
		main_0_LARc_address_a = (main_327_128i_reg >>> 3'd1);
	end
	/* main: %gsm_add.exit3.i*/
	/*   %474 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_0_LARc_address_a = (main_327_128i_reg >>> 3'd1);
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %490 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_163)) begin
		main_0_LARc_address_a = (main_Reflection_coefficientsexit_01ii >>> 3'd1);
	end
	/* main: %508*/
	/*   store i16 %510, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_0_LARc_address_a = (main_Reflection_coefficientsexit_01ii_reg >>> 3'd1);
	end
	/* main: %.thread.i4*/
	/*   %526 = load i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_0_LARc_address_a = (main_threadi4_525 >>> 3'd1);
	end
	/* main: %.thread98.i*/
	/*   store i16 %539, i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_0_LARc_address_a = (main_threadi4_525_reg >>> 3'd1);
	end
	/* main: %.thread102.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_0_LARc_address_a = (main_thread102i_558 >>> 3'd1);
	end
	/* main: %.thread107.i*/
	/*   store i16 %575, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_0_LARc_address_a = (main_thread102i_558_reg >>> 3'd1);
	end
	/* main: %.thread112.i*/
	/*   %595 = load i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_0_LARc_address_a = (main_thread112i_594 >>> 3'd1);
	end
	/* main: %.thread117.i*/
	/*   store i16 %611, i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_0_LARc_address_a = (main_thread112i_594_reg >>> 3'd1);
	end
	/* main: %.thread122.i*/
	/*   %631 = load i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_0_LARc_address_a = (main_thread122i_630 >>> 3'd1);
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %647, i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_233)) begin
		main_0_LARc_address_a = (main_thread122i_630_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_LARc_write_enable_a = 1'd0;
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_94)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %427, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_124)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %430*/
	/*   store i16 %431, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__430_126)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph27.i*/
	/*   %457 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrph27i_139)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %gsm_add.exit3.i*/
	/*   %474 = load i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_addexit3i_147)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %Reflection_coefficients.exit*/
	/*   %490 = load i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Reflection_coefficientsexit_163)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %508*/
	/*   store i16 %510, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %.thread.i4*/
	/*   %526 = load i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %.thread98.i*/
	/*   store i16 %539, i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %.thread102.i*/
	/*   %559 = load i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %.thread107.i*/
	/*   store i16 %575, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %.thread112.i*/
	/*   %595 = load i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %.thread117.i*/
	/*   store i16 %611, i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
	/* main: %.thread122.i*/
	/*   %631 = load i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_0_LARc_write_enable_a = 1'd0;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %647, i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_233)) begin
		main_0_LARc_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_LARc_in_a = 1'd0;
	/* main: %.lr.ph.i*/
	/*   store i16 0, i16* %.224.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_94)) begin
		main_0_LARc_in_a = 16'd0;
	end
	/* main: %gsm_div.exit.i*/
	/*   store i16 %427, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_gsm_divexiti_124)) begin
		main_0_LARc_in_a = main_gsm_divexiti_427_reg;
	end
	/* main: %430*/
	/*   store i16 %431, i16* %.128.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__430_126)) begin
		main_0_LARc_in_a = main_430_431;
	end
	/* main: %508*/
	/*   store i16 %510, i16* %.01.i.i, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__508_171)) begin
		main_0_LARc_in_a = main_508_510;
	end
	/* main: %.thread98.i*/
	/*   store i16 %539, i16* %525, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_0_LARc_in_a = main_thread98i_539_reg;
	end
	/* main: %.thread107.i*/
	/*   store i16 %575, i16* %558, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_0_LARc_in_a = main_thread107i_575_reg;
	end
	/* main: %.thread117.i*/
	/*   store i16 %611, i16* %594, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_0_LARc_in_a = main_thread117i_611_reg;
	end
	/* main: %Quantization_and_coding.exit*/
	/*   store i16 %647, i16* %630, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Quantization_and_codingexit_233)) begin
		main_0_LARc_in_a = main_Quantization_and_codingexit_647_reg;
	end
end
always @(*) begin
	main_0_LARc_address_b = 1'd0;
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %511 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_173)) begin
		main_0_LARc_address_b = (main_13_15_reg >>> 3'd1);
	end
	/* main: %.thread.i4*/
	/*   store i16 %524, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_0_LARc_address_b = (main_13_15_reg >>> 3'd1);
	end
	/* main: %.thread98.i*/
	/*   %541 = load i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_0_LARc_address_b = (main_thread98i_540 >>> 3'd1);
	end
	/* main: %.thread102.i*/
	/*   store i16 %557, i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_0_LARc_address_b = (main_thread98i_540_reg >>> 3'd1);
	end
	/* main: %.thread107.i*/
	/*   %577 = load i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_0_LARc_address_b = (main_thread107i_576 >>> 3'd1);
	end
	/* main: %.thread112.i*/
	/*   store i16 %593, i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_0_LARc_address_b = (main_thread107i_576_reg >>> 3'd1);
	end
	/* main: %.thread117.i*/
	/*   %613 = load i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_0_LARc_address_b = (main_thread117i_612 >>> 3'd1);
	end
	/* main: %.thread122.i*/
	/*   store i16 %629, i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_0_LARc_address_b = (main_thread117i_612_reg >>> 3'd1);
	end
end
always @(*) begin
	main_0_LARc_write_enable_b = 1'd0;
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %511 = load i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_Gsm_LPC_Analysisexit_173)) begin
		main_0_LARc_write_enable_b = 1'd0;
	end
	/* main: %.thread.i4*/
	/*   store i16 %524, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_0_LARc_write_enable_b = 1'd1;
	end
	/* main: %.thread98.i*/
	/*   %541 = load i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread98i_185)) begin
		main_0_LARc_write_enable_b = 1'd0;
	end
	/* main: %.thread102.i*/
	/*   store i16 %557, i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_0_LARc_write_enable_b = 1'd1;
	end
	/* main: %.thread107.i*/
	/*   %577 = load i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread107i_201)) begin
		main_0_LARc_write_enable_b = 1'd0;
	end
	/* main: %.thread112.i*/
	/*   store i16 %593, i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_0_LARc_write_enable_b = 1'd1;
	end
	/* main: %.thread117.i*/
	/*   %613 = load i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread117i_217)) begin
		main_0_LARc_write_enable_b = 1'd0;
	end
	/* main: %.thread122.i*/
	/*   store i16 %629, i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_0_LARc_write_enable_b = 1'd1;
	end
end
always @(*) begin
	main_0_LARc_in_b = 1'd0;
	/* main: %.thread.i4*/
	/*   store i16 %524, i16* %15, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_threadi4_179)) begin
		main_0_LARc_in_b = main_threadi4_524_reg;
	end
	/* main: %.thread102.i*/
	/*   store i16 %557, i16* %540, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread102i_193)) begin
		main_0_LARc_in_b = main_thread102i_557_reg;
	end
	/* main: %.thread112.i*/
	/*   store i16 %593, i16* %576, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread112i_209)) begin
		main_0_LARc_in_b = main_thread112i_593_reg;
	end
	/* main: %.thread122.i*/
	/*   store i16 %629, i16* %612, align 2, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_thread122i_225)) begin
		main_0_LARc_in_b = main_thread122i_629_reg;
	end
end
always @(*) begin
	lpm_mult_main_69_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %69*/
	/*   %71 = mul nsw i32 %70, %66*/
	if ((lpm_mult_main_69_71_en == 1'd1)) begin
		main_69_71_stage0_reg <= (main_69_70 * main_preheader6i_66_reg);
	end
end
always @(*) begin
	lpm_mult_main_gsm_mult_rexiti_78_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %gsm_mult_r.exit.i*/
	/*   %78 = mul nsw i32 %77, %66*/
	if ((lpm_mult_main_gsm_mult_rexiti_78_en == 1'd1)) begin
		main_gsm_mult_rexiti_78_stage0_reg <= (main_gsm_mult_rexiti_77 * main_preheader6i_66_reg);
	end
end
always @(*) begin
	lpm_mult_main_threadi_86_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %86 = mul nsw i32 %85, %85*/
	if ((lpm_mult_main_threadi_86_en == 1'd1)) begin
		main_threadi_86_stage0_reg <= (main_threadi_85 * main_threadi_85);
	end
end
always @(*) begin
	lpm_mult_main_threadi_90_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %90 = mul nsw i32 %89, %89*/
	if ((lpm_mult_main_threadi_90_en == 1'd1)) begin
		main_threadi_90_stage0_reg <= (main_threadi_89 * main_threadi_89);
	end
end
always @(*) begin
	lpm_mult_main_threadi_95_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %95 = mul nsw i32 %94, %94*/
	if ((lpm_mult_main_threadi_95_en == 1'd1)) begin
		main_threadi_95_stage0_reg <= (main_threadi_94 * main_threadi_94);
	end
end
always @(*) begin
	lpm_mult_main_threadi_98_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %98 = mul nsw i32 %89, %97*/
	if ((lpm_mult_main_threadi_98_en == 1'd1)) begin
		main_threadi_98_stage0_reg <= (main_threadi_89_reg * main_threadi_97);
	end
end
always @(*) begin
	lpm_mult_main_threadi_99_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %99 = mul nsw i32 %85, %94*/
	if ((lpm_mult_main_threadi_99_en == 1'd1)) begin
		main_threadi_99_stage0_reg <= (main_threadi_85_reg * main_threadi_94);
	end
end
always @(*) begin
	lpm_mult_main_threadi_103_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %103 = mul nsw i32 %102, %102*/
	if ((lpm_mult_main_threadi_103_en == 1'd1)) begin
		main_threadi_103_stage0_reg <= (main_threadi_102 * main_threadi_102);
	end
end
always @(*) begin
	lpm_mult_main_threadi_105_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %105 = mul nsw i32 %94, %102*/
	if ((lpm_mult_main_threadi_105_en == 1'd1)) begin
		main_threadi_105_stage0_reg <= (main_threadi_94 * main_threadi_102);
	end
end
always @(*) begin
	lpm_mult_main_threadi_107_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %107 = mul nsw i32 %89, %102*/
	if ((lpm_mult_main_threadi_107_en == 1'd1)) begin
		main_threadi_107_stage0_reg <= (main_threadi_89_reg * main_threadi_102);
	end
end
always @(*) begin
	lpm_mult_main_threadi_109_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %109 = mul nsw i32 %85, %102*/
	if ((lpm_mult_main_threadi_109_en == 1'd1)) begin
		main_threadi_109_stage0_reg <= (main_threadi_85_reg * main_threadi_102);
	end
end
always @(*) begin
	lpm_mult_main_threadi_113_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %113 = mul nsw i32 %112, %112*/
	if ((lpm_mult_main_threadi_113_en == 1'd1)) begin
		main_threadi_113_stage0_reg <= (main_threadi_112 * main_threadi_112);
	end
end
always @(*) begin
	lpm_mult_main_threadi_115_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %115 = mul nsw i32 %102, %112*/
	if ((lpm_mult_main_threadi_115_en == 1'd1)) begin
		main_threadi_115_stage0_reg <= (main_threadi_102_reg * main_threadi_112);
	end
end
always @(*) begin
	lpm_mult_main_threadi_117_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %117 = mul nsw i32 %94, %112*/
	if ((lpm_mult_main_threadi_117_en == 1'd1)) begin
		main_threadi_117_stage0_reg <= (main_threadi_94_reg * main_threadi_112);
	end
end
always @(*) begin
	lpm_mult_main_threadi_119_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %119 = mul nsw i32 %89, %112*/
	if ((lpm_mult_main_threadi_119_en == 1'd1)) begin
		main_threadi_119_stage0_reg <= (main_threadi_89_reg * main_threadi_112);
	end
end
always @(*) begin
	lpm_mult_main_threadi_121_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %121 = mul nsw i32 %85, %112*/
	if ((lpm_mult_main_threadi_121_en == 1'd1)) begin
		main_threadi_121_stage0_reg <= (main_threadi_85_reg * main_threadi_112);
	end
end
always @(*) begin
	lpm_mult_main_threadi_125_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %125 = mul nsw i32 %124, %124*/
	if ((lpm_mult_main_threadi_125_en == 1'd1)) begin
		main_threadi_125_stage0_reg <= (main_threadi_124 * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_127_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %127 = mul nsw i32 %112, %124*/
	if ((lpm_mult_main_threadi_127_en == 1'd1)) begin
		main_threadi_127_stage0_reg <= (main_threadi_112 * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_129_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %129 = mul nsw i32 %102, %124*/
	if ((lpm_mult_main_threadi_129_en == 1'd1)) begin
		main_threadi_129_stage0_reg <= (main_threadi_102_reg * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %131 = mul nsw i32 %94, %124*/
	if ((lpm_mult_main_threadi_131_en == 1'd1)) begin
		main_threadi_131_stage0_reg <= (main_threadi_94_reg * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_133_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %133 = mul nsw i32 %89, %124*/
	if ((lpm_mult_main_threadi_133_en == 1'd1)) begin
		main_threadi_133_stage0_reg <= (main_threadi_89_reg * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %135 = mul nsw i32 %85, %124*/
	if ((lpm_mult_main_threadi_135_en == 1'd1)) begin
		main_threadi_135_stage0_reg <= (main_threadi_85_reg * main_threadi_124);
	end
end
always @(*) begin
	lpm_mult_main_threadi_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %139 = mul nsw i32 %138, %138*/
	if ((lpm_mult_main_threadi_139_en == 1'd1)) begin
		main_threadi_139_stage0_reg <= (main_threadi_138 * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_141_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %141 = mul nsw i32 %124, %138*/
	if ((lpm_mult_main_threadi_141_en == 1'd1)) begin
		main_threadi_141_stage0_reg <= (main_threadi_124_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_143_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %143 = mul nsw i32 %112, %138*/
	if ((lpm_mult_main_threadi_143_en == 1'd1)) begin
		main_threadi_143_stage0_reg <= (main_threadi_112_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_145_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %145 = mul nsw i32 %102, %138*/
	if ((lpm_mult_main_threadi_145_en == 1'd1)) begin
		main_threadi_145_stage0_reg <= (main_threadi_102_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_147_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %147 = mul nsw i32 %94, %138*/
	if ((lpm_mult_main_threadi_147_en == 1'd1)) begin
		main_threadi_147_stage0_reg <= (main_threadi_94_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_149_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %149 = mul nsw i32 %89, %138*/
	if ((lpm_mult_main_threadi_149_en == 1'd1)) begin
		main_threadi_149_stage0_reg <= (main_threadi_89_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_151_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %151 = mul nsw i32 %85, %138*/
	if ((lpm_mult_main_threadi_151_en == 1'd1)) begin
		main_threadi_151_stage0_reg <= (main_threadi_85_reg * main_threadi_138);
	end
end
always @(*) begin
	lpm_mult_main_threadi_155_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %155 = mul nsw i32 %154, %154*/
	if ((lpm_mult_main_threadi_155_en == 1'd1)) begin
		main_threadi_155_stage0_reg <= (main_threadi_154 * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_157_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %157 = mul nsw i32 %138, %154*/
	if ((lpm_mult_main_threadi_157_en == 1'd1)) begin
		main_threadi_157_stage0_reg <= (main_threadi_138 * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_159_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %159 = mul nsw i32 %124, %154*/
	if ((lpm_mult_main_threadi_159_en == 1'd1)) begin
		main_threadi_159_stage0_reg <= (main_threadi_124_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_161_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %161 = mul nsw i32 %112, %154*/
	if ((lpm_mult_main_threadi_161_en == 1'd1)) begin
		main_threadi_161_stage0_reg <= (main_threadi_112_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_163_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %163 = mul nsw i32 %102, %154*/
	if ((lpm_mult_main_threadi_163_en == 1'd1)) begin
		main_threadi_163_stage0_reg <= (main_threadi_102_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_165_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %165 = mul nsw i32 %94, %154*/
	if ((lpm_mult_main_threadi_165_en == 1'd1)) begin
		main_threadi_165_stage0_reg <= (main_threadi_94_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_167_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %167 = mul nsw i32 %89, %154*/
	if ((lpm_mult_main_threadi_167_en == 1'd1)) begin
		main_threadi_167_stage0_reg <= (main_threadi_89_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_threadi_169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i*/
	/*   %169 = mul nsw i32 %85, %154*/
	if ((lpm_mult_main_threadi_169_en == 1'd1)) begin
		main_threadi_169_stage0_reg <= (main_threadi_85_reg * main_threadi_154);
	end
end
always @(*) begin
	lpm_mult_main_179_199_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %199 = mul nsw i32 %198, %198*/
	if ((lpm_mult_main_179_199_en == 1'd1)) begin
		main_179_199_stage0_reg <= (main_179_198 * main_179_198);
	end
end
always @(*) begin
	lpm_mult_main_179_202_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %202 = mul nsw i32 %201, %198*/
	if ((lpm_mult_main_179_202_en == 1'd1)) begin
		main_179_202_stage0_reg <= (main_179_201_reg * main_179_198);
	end
end
always @(*) begin
	lpm_mult_main_179_206_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %206 = mul nsw i32 %205, %198*/
	if ((lpm_mult_main_179_206_en == 1'd1)) begin
		main_179_206_stage0_reg <= (main_179_205 * main_179_198);
	end
end
always @(*) begin
	lpm_mult_main_179_210_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %210 = mul nsw i32 %209, %198*/
	if ((lpm_mult_main_179_210_en == 1'd1)) begin
		main_179_210_stage0_reg <= (main_179_209 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_179_214_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %214 = mul nsw i32 %213, %198*/
	if ((lpm_mult_main_179_214_en == 1'd1)) begin
		main_179_214_stage0_reg <= (main_179_213 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_179_218_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %218 = mul nsw i32 %217, %198*/
	if ((lpm_mult_main_179_218_en == 1'd1)) begin
		main_179_218_stage0_reg <= (main_179_217 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_179_222_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %222 = mul nsw i32 %221, %198*/
	if ((lpm_mult_main_179_222_en == 1'd1)) begin
		main_179_222_stage0_reg <= (main_179_221 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_179_226_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %226 = mul nsw i32 %225, %198*/
	if ((lpm_mult_main_179_226_en == 1'd1)) begin
		main_179_226_stage0_reg <= (main_179_225 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_179_230_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %179*/
	/*   %230 = mul nsw i32 %229, %198*/
	if ((lpm_mult_main_179_230_en == 1'd1)) begin
		main_179_230_stage0_reg <= (main_179_229 * main_179_198_reg);
	end
end
always @(*) begin
	lpm_mult_main_439_443_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %439*/
	/*   %443 = mul i32 %442, %440*/
	if ((lpm_mult_main_439_443_en == 1'd1)) begin
		main_439_443_stage0_reg <= (main_439_442 * main_439_440);
	end
end
always @(*) begin
	lpm_mult_main_460_464_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %460*/
	/*   %464 = mul i32 %463, %461*/
	if ((lpm_mult_main_460_464_en == 1'd1)) begin
		main_460_464_stage0_reg <= (main_460_463 * main_460_461);
	end
end
always @(*) begin
	lpm_mult_main_477_480_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %477*/
	/*   %480 = mul i32 %479, %478*/
	if ((lpm_mult_main_477_480_en == 1'd1)) begin
		main_477_480_stage0_reg <= (main_477_479 * main_477_478);
	end
end
always @(*) begin
	lpm_mult_main_Gsm_LPC_Analysisexit_513_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %Gsm_LPC_Analysis.exit*/
	/*   %513 = mul i32 %512, 40960*/
	if ((lpm_mult_main_Gsm_LPC_Analysisexit_513_en == 1'd1)) begin
		main_Gsm_LPC_Analysisexit_513_stage0_reg <= (main_Gsm_LPC_Analysisexit_512 * 32'd40960);
	end
end
always @(*) begin
	lpm_mult_main_threadi4_528_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread.i4*/
	/*   %528 = mul i32 %527, 40960*/
	if ((lpm_mult_main_threadi4_528_en == 1'd1)) begin
		main_threadi4_528_stage0_reg <= (main_threadi4_527 * 32'd40960);
	end
end
always @(*) begin
	lpm_mult_main_thread98i_543_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread98.i*/
	/*   %543 = mul i32 %542, 40960*/
	if ((lpm_mult_main_thread98i_543_en == 1'd1)) begin
		main_thread98i_543_stage0_reg <= (main_thread98i_542 * 32'd40960);
	end
end
always @(*) begin
	lpm_mult_main_thread102i_561_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread102.i*/
	/*   %561 = mul i32 %560, 40960*/
	if ((lpm_mult_main_thread102i_561_en == 1'd1)) begin
		main_thread102i_561_stage0_reg <= (main_thread102i_560 * 32'd40960);
	end
end
always @(*) begin
	lpm_mult_main_thread107i_579_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread107.i*/
	/*   %579 = mul i32 %578, 27928*/
	if ((lpm_mult_main_thread107i_579_en == 1'd1)) begin
		main_thread107i_579_stage0_reg <= (main_thread107i_578 * 32'd27928);
	end
end
always @(*) begin
	lpm_mult_main_thread112i_597_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread112.i*/
	/*   %597 = mul i32 %596, 30720*/
	if ((lpm_mult_main_thread112i_597_en == 1'd1)) begin
		main_thread112i_597_stage0_reg <= (main_thread112i_596 * 32'd30720);
	end
end
always @(*) begin
	lpm_mult_main_thread117i_615_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread117.i*/
	/*   %615 = mul i32 %614, 17068*/
	if ((lpm_mult_main_thread117i_615_en == 1'd1)) begin
		main_thread117i_615_stage0_reg <= (main_thread117i_614 * 32'd17068);
	end
end
always @(*) begin
	lpm_mult_main_thread122i_633_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.thread122.i*/
	/*   %633 = mul i32 %632, 18072*/
	if ((lpm_mult_main_thread122i_633_en == 1'd1)) begin
		main_thread122i_633_stage0_reg <= (main_thread122i_632 * 32'd18072);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %685*/
	/*   ret i32 %671*/
	if ((cur_state == LEGUP_F_main_BB__685_241)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %240*/
	/*   store i16 0, i16* %s.i.0, align 2*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %240*/
	/*   store i16 0, i16* %s.i.0, align 2*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		memory_controller_address_a = main_240_si0;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %240*/
	/*   store i16 0, i16* %s.i.0, align 2*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %240*/
	/*   store i16 0, i16* %s.i.0, align 2*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		memory_controller_in_a = 16'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %240*/
	/*   store i16 0, i16* %s.i.0, align 2*/
	if ((cur_state == LEGUP_F_main_BB__240_65)) begin
		memory_controller_size_a = 2'd1;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %685*/
	/*   ret i32 %671*/
	if ((cur_state == LEGUP_F_main_BB__685_241)) begin
		return_val <= main_preheader_671_reg;
		if (start == 1'b0 && ^(main_preheader_671_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
