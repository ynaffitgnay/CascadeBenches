//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  8 20:50:34 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 9
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
`define TAG_g_Sbox `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_Sbox_a {`TAG_g_Sbox, 23'd0}
// @key = internal unnamed_addr global [32 x i32] zeroinitializer, align 4
`define TAG_g_key `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_key_a {`TAG_g_key, 23'd2048}
// @statemt = internal unnamed_addr global [32 x i32] zeroinitializer, align 4
`define TAG_g_statemt `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_statemt_a {`TAG_g_statemt, 23'd1920}
// @word = internal unnamed_addr global [4 x [120 x i32]] zeroinitializer, align 4
`define TAG_g_word `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_word_a {`TAG_g_word, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [9:0] ram_32_address_a;
reg [9:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @word = internal unnamed_addr global [4 x [120 x i32]] zeroinitializer, align 4
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 10;
defparam ram_32.widthad_b = 10;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 544;
defparam ram_32.numwords_b = 544;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";

reg [7:0] rom_32_address_a;
reg [7:0] rom_32_address_b;
reg rom_32_write_enable_a;
reg rom_32_write_enable_b;
reg [31:0] rom_32_in_a;
reg [31:0] rom_32_in_b;
wire [31:0] rom_32_out_a;
wire [31:0] rom_32_out_b;

// @Sbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 99, i32 124, i32 119, i32 123, i32 242, i32 107, i32 111, i32 197, i32 48, i32 1, i32 103, i32 43, i32 254, i32 215, i32 171, ...
rom_dual_port rom_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( rom_32_address_a ),
	.address_b( rom_32_address_b ),
	.q_a( rom_32_out_a ),
	.q_b( rom_32_out_b)
);
defparam rom_32.width_a = 32;
defparam rom_32.width_b = 32;
defparam rom_32.widthad_a = 8;
defparam rom_32.widthad_b = 8;
defparam rom_32.numwords_a = 256;
defparam rom_32.numwords_b = 256;
defparam rom_32.latency = ram_latency;
defparam rom_32.init_file = "rom_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

wire select_rom_32_a;
assign select_rom_32_a = (tag_a == 3);
reg [ram_latency:0] select_rom_32_reg_a;
wire [31:0] memory_controller_rom_32_out_a;
assign memory_controller_rom_32_out_a = {32{ select_rom_32_reg_a[ram_latency]}} & rom_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [10-1+2:2] & {10{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	rom_32_address_a = memory_controller_address_a [8-1+2:2] & {8{select_rom_32_a}};
	rom_32_write_enable_a = memory_controller_write_enable_a & select_rom_32_a;
	rom_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}} | {2{select_rom_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a | memory_controller_rom_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_rom_32_reg_a[j+1] <= select_rom_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
select_rom_32_reg_a[0] <= select_rom_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

wire select_rom_32_b;
assign select_rom_32_b = (tag_b == 3);
reg [ram_latency:0] select_rom_32_reg_b;
wire [31:0] memory_controller_rom_32_out_b;
assign memory_controller_rom_32_out_b = {32{ select_rom_32_reg_b[ram_latency]}} & rom_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [10-1+2:2] & {10{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	rom_32_address_b = memory_controller_address_b [8-1+2:2] & {8{select_rom_32_b}};
	rom_32_write_enable_b = memory_controller_write_enable_b & select_rom_32_b;
	rom_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}} | {2{select_rom_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b | memory_controller_rom_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_rom_32_reg_b[j+1] <= select_rom_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
select_rom_32_reg_b[0] <= select_rom_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module KeySchedule
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader4_1 = 6'd1;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader4_2 = 6'd2;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader4_3 = 6'd3;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader4_4 = 6'd4;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader4_5 = 6'd5;
parameter [5:0] LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6 = 6'd6;
parameter [5:0] LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_7 = 6'd7;
parameter [5:0] LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8 = 6'd8;
parameter [5:0] LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9 = 6'd9;
parameter [5:0] LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10 = 6'd10;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_11 = 6'd11;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_12 = 6'd12;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_13 = 6'd13;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_14 = 6'd14;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_15 = 6'd15;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_16 = 6'd16;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_17 = 6'd17;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_18 = 6'd18;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_19 = 6'd19;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_20 = 6'd20;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_21 = 6'd21;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_22 = 6'd22;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_23 = 6'd23;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_24 = 6'd24;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_25 = 6'd25;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_26 = 6'd26;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_27 = 6'd27;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_28 = 6'd28;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_29 = 6'd29;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_30 = 6'd30;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_31 = 6'd31;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_32 = 6'd32;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_33 = 6'd33;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_34 = 6'd34;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_35 = 6'd35;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_36 = 6'd36;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_37 = 6'd37;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_38 = 6'd38;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_39 = 6'd39;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_40 = 6'd40;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_41 = 6'd41;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_42 = 6'd42;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_43 = 6'd43;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_44 = 6'd44;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_45 = 6'd45;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_46 = 6'd46;
parameter [5:0] LEGUP_F_KeySchedule_BB_thread_47 = 6'd47;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_48 = 6'd48;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_49 = 6'd49;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_50 = 6'd50;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_51 = 6'd51;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_52 = 6'd52;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_53 = 6'd53;
parameter [5:0] LEGUP_F_KeySchedule_BB_preheader_54 = 6'd54;
parameter [5:0] LEGUP_F_KeySchedule_BB__46_55 = 6'd55;
parameter [5:0] LEGUP_F_KeySchedule_BB_loopexit_56 = 6'd56;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] KeySchedule_preheader4_j09;
reg [31:0] KeySchedule_preheader4_j09_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep16_reg;
reg [31:0] KeySchedule_preheader4_1;
reg [31:0] KeySchedule_preheader4_1_reg;
reg [31:0] KeySchedule_preheader4_2;
reg [31:0] KeySchedule_preheader4_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep17_reg;
reg [31:0] KeySchedule_preheader4_3;
reg [31:0] KeySchedule_preheader4_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep18_reg;
reg [31:0] KeySchedule_preheader4_4;
reg [31:0] KeySchedule_preheader4_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader4_scevgep20_reg;
reg [31:0] KeySchedule_preheader4_5;
reg [31:0] KeySchedule_preheader4_5_reg;
reg [31:0] KeySchedule_preheader4_6;
reg [31:0] KeySchedule_preheader4_6_reg;
reg [31:0] KeySchedule_preheader4_7;
reg [31:0] KeySchedule_preheader4_7_reg;
reg [31:0] KeySchedule_preheader4_8;
reg [31:0] KeySchedule_preheader4_8_reg;
reg [31:0] KeySchedule_preheader4_9;
reg [31:0] KeySchedule_preheader4_9_reg;
reg  KeySchedule_preheader4_exitcond;
reg  KeySchedule_preheader4_exitcond_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edgepreheader_pre;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edgepreheader_pre_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_indvar;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_indvar_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_10;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_10_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_j17;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_j17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep9_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_11;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_lrphlrphsplit_crit_edge_scevgep12_reg;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_12;
reg [31:0] KeySchedule_lrphlrphsplit_crit_edge_12_reg;
reg  KeySchedule_lrphlrphsplit_crit_edge_cond;
reg  KeySchedule_lrphlrphsplit_crit_edge_cond_reg;
reg [31:0] KeySchedule_thread_13;
reg [31:0] KeySchedule_thread_13_reg;
reg [31:0] KeySchedule_thread_14;
reg [31:0] KeySchedule_thread_14_reg;
reg [31:0] KeySchedule_thread_15;
reg [31:0] KeySchedule_thread_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_16_reg;
reg [31:0] KeySchedule_thread_17;
reg [31:0] KeySchedule_thread_17_reg;
reg [31:0] KeySchedule_thread_18;
reg [31:0] KeySchedule_thread_18_reg;
reg [31:0] KeySchedule_thread_19;
reg [31:0] KeySchedule_thread_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_20_reg;
reg [31:0] KeySchedule_thread_21;
reg [31:0] KeySchedule_thread_21_reg;
reg [31:0] KeySchedule_thread_22;
reg [31:0] KeySchedule_thread_22_reg;
reg [31:0] KeySchedule_thread_23;
reg [31:0] KeySchedule_thread_23_reg;
reg [31:0] KeySchedule_thread_24;
reg [31:0] KeySchedule_thread_24_reg;
reg [31:0] KeySchedule_thread_25;
reg [31:0] KeySchedule_thread_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_26_reg;
reg [31:0] KeySchedule_thread_27;
reg [31:0] KeySchedule_thread_27_reg;
reg [31:0] KeySchedule_thread_28;
reg [31:0] KeySchedule_thread_28_reg;
reg [31:0] KeySchedule_thread_29;
reg [31:0] KeySchedule_thread_29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_30_reg;
reg [31:0] KeySchedule_thread_31;
reg [31:0] KeySchedule_thread_31_reg;
reg [31:0] KeySchedule_thread_32;
reg [31:0] KeySchedule_thread_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_thread_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_preheader_in12_reg;
reg [31:0] KeySchedule_preheader_34;
reg [31:0] KeySchedule_preheader_34_reg;
reg [31:0] KeySchedule_preheader_35;
reg [31:0] KeySchedule_preheader_35_reg;
reg [31:0] KeySchedule_preheader_36;
reg [31:0] KeySchedule_preheader_36_reg;
reg [31:0] KeySchedule_preheader_37;
reg [31:0] KeySchedule_preheader_37_reg;
reg [31:0] KeySchedule_preheader_38;
reg [31:0] KeySchedule_preheader_38_reg;
reg [31:0] KeySchedule_preheader_39;
reg [31:0] KeySchedule_preheader_39_reg;
reg [31:0] KeySchedule_preheader_40;
reg [31:0] KeySchedule_preheader_40_reg;
reg [31:0] KeySchedule_preheader_41;
reg [31:0] KeySchedule_preheader_41_reg;
reg [31:0] KeySchedule_preheader_42;
reg [31:0] KeySchedule_preheader_42_reg;
reg [31:0] KeySchedule_preheader_43;
reg [31:0] KeySchedule_preheader_43_reg;
reg [31:0] KeySchedule_preheader_44;
reg [31:0] KeySchedule_preheader_44_reg;
reg [31:0] KeySchedule_preheader_45;
reg [31:0] KeySchedule_preheader_45_reg;
reg [31:0] KeySchedule_preheader_indvarnext;
reg [31:0] KeySchedule_preheader_indvarnext_reg;
reg  KeySchedule_preheader_exitcond2;
reg  KeySchedule_preheader_exitcond2_reg;
wire [3:0] encryptout_enc_statemt_address_a;
wire  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
wire [3:0] decryptout_dec_statemt_address_a;
wire  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
reg [4:0] Rcon0_address_a;
reg  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [4:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [4:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [7:0] invSbox_address_a;
wire  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
wire [7:0] invSbox_address_b;
wire  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [4:0] main_0_retii_address_a;
wire  main_0_retii_write_enable_a;
wire [31:0] main_0_retii_in_a;
wire [31:0] main_0_retii_out_a;
wire [4:0] main_0_retii_address_b;
wire  main_0_retii_write_enable_b;
wire [31:0] main_0_retii_in_b;
wire [31:0] main_0_retii_out_b;
reg [31:0] KeySchedule_signed_modulus_32_0_op0;
reg [31:0] KeySchedule_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_KeySchedule_thread_14_temp_out;
wire [31:0] KeySchedule_thread_14_unused;
reg  lpm_divide_KeySchedule_thread_14_en;
reg [31:0] lpm_divide_KeySchedule_thread_14_out;
reg [31:0] KeySchedule_signed_modulus_32_0;
reg [31:0] KeySchedule_signed_divide_32_0_op0;
reg [31:0] KeySchedule_signed_divide_32_0_op1;
wire [31:0] lpm_divide_KeySchedule_thread_15_temp_out;
wire [31:0] KeySchedule_thread_15_unused;
reg  lpm_divide_KeySchedule_thread_15_en;
reg [31:0] lpm_divide_KeySchedule_thread_15_out;
reg [31:0] KeySchedule_signed_divide_32_0;
reg  lpm_divide_KeySchedule_thread_18_en;
reg  lpm_divide_KeySchedule_thread_31_en;
reg  lpm_divide_KeySchedule_thread_32_en;
reg  lpm_divide_KeySchedule_thread_24_en;
reg  lpm_divide_KeySchedule_thread_25_en;
reg  lpm_divide_KeySchedule_thread_28_en;
reg  lpm_divide_KeySchedule_thread_29_en;

/*   %14 = srem i32 %13, 16*/
lpm_divide lpm_divide_KeySchedule_thread_14 (
	.quotient (KeySchedule_thread_14_unused),
	.remain (lpm_divide_KeySchedule_thread_14_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_KeySchedule_thread_14_en),
	.numer (KeySchedule_signed_modulus_32_0_op0),
	.denom (KeySchedule_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_KeySchedule_thread_14.lpm_pipeline = 32,
	lpm_divide_KeySchedule_thread_14.lpm_widthn = 32,
	lpm_divide_KeySchedule_thread_14.lpm_widthd = 32,
	lpm_divide_KeySchedule_thread_14.lpm_drepresentation = "SIGNED",
	lpm_divide_KeySchedule_thread_14.lpm_nrepresentation = "SIGNED",
	lpm_divide_KeySchedule_thread_14.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

/*   %15 = sdiv i32 %13, 16*/
lpm_divide lpm_divide_KeySchedule_thread_15 (
	.quotient (lpm_divide_KeySchedule_thread_15_temp_out),
	.remain (KeySchedule_thread_15_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_KeySchedule_thread_15_en),
	.numer (KeySchedule_signed_divide_32_0_op0),
	.denom (KeySchedule_signed_divide_32_0_op1)
);

defparam
	lpm_divide_KeySchedule_thread_15.lpm_pipeline = 32,
	lpm_divide_KeySchedule_thread_15.lpm_widthn = 32,
	lpm_divide_KeySchedule_thread_15.lpm_widthd = 32,
	lpm_divide_KeySchedule_thread_15.lpm_drepresentation = "SIGNED",
	lpm_divide_KeySchedule_thread_15.lpm_nrepresentation = "SIGNED",
	lpm_divide_KeySchedule_thread_15.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";

// Local Rams


// @Rcon0 = internal unnamed_addr constant [30 x i32] [i32 1, i32 2, i32 4, i32 8, i32 16, i32 32, i32 64, i32 128, i32 27, i32 54, i32 108, i32 216, i32 171, i32 77, i32 154, i32 47, i32 94, i32 188, i3...
rom_dual_port Rcon0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( Rcon0_address_a ),
	.address_b( Rcon0_address_b ),
	.q_a( Rcon0_out_a ),
	.q_b( Rcon0_out_b)
);
defparam Rcon0.width_a = 32;
defparam Rcon0.width_b = 32;
defparam Rcon0.widthad_a = 5;
defparam Rcon0.widthad_b = 5;
defparam Rcon0.numwords_a = 30;
defparam Rcon0.numwords_b = 30;
defparam Rcon0.latency = 1;
defparam Rcon0.init_file = "Rcon0.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_KeySchedule_BB_preheader4_1;
LEGUP_F_KeySchedule_BB__46_55:
		next_state = LEGUP_F_KeySchedule_BB_preheader_48;
LEGUP_F_KeySchedule_BB_loopexit_56:
		next_state = LEGUP_0;
LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10:
	if ((KeySchedule_lrphlrphsplit_crit_edge_cond_reg == 1'd1))
		next_state = LEGUP_F_KeySchedule_BB_thread_11;
	else if ((KeySchedule_lrphlrphsplit_crit_edge_cond_reg == 1'd0))
		next_state = LEGUP_F_KeySchedule_BB__46_55;
LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9:
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10;
LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6:
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_7;
LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_7:
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8;
LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8:
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9;
LEGUP_F_KeySchedule_BB_preheader4_1:
		next_state = LEGUP_F_KeySchedule_BB_preheader4_2;
LEGUP_F_KeySchedule_BB_preheader4_2:
		next_state = LEGUP_F_KeySchedule_BB_preheader4_3;
LEGUP_F_KeySchedule_BB_preheader4_3:
		next_state = LEGUP_F_KeySchedule_BB_preheader4_4;
LEGUP_F_KeySchedule_BB_preheader4_4:
		next_state = LEGUP_F_KeySchedule_BB_preheader4_5;
LEGUP_F_KeySchedule_BB_preheader4_5:
	if ((KeySchedule_preheader4_exitcond_reg == 1'd1))
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6;
	else if ((KeySchedule_preheader4_exitcond_reg == 1'd0))
		next_state = LEGUP_F_KeySchedule_BB_preheader4_1;
LEGUP_F_KeySchedule_BB_preheader_48:
		next_state = LEGUP_F_KeySchedule_BB_preheader_49;
LEGUP_F_KeySchedule_BB_preheader_49:
		next_state = LEGUP_F_KeySchedule_BB_preheader_50;
LEGUP_F_KeySchedule_BB_preheader_50:
		next_state = LEGUP_F_KeySchedule_BB_preheader_51;
LEGUP_F_KeySchedule_BB_preheader_51:
		next_state = LEGUP_F_KeySchedule_BB_preheader_52;
LEGUP_F_KeySchedule_BB_preheader_52:
		next_state = LEGUP_F_KeySchedule_BB_preheader_53;
LEGUP_F_KeySchedule_BB_preheader_53:
		next_state = LEGUP_F_KeySchedule_BB_preheader_54;
LEGUP_F_KeySchedule_BB_preheader_54:
	if ((KeySchedule_preheader_exitcond2_reg == 1'd1))
		next_state = LEGUP_F_KeySchedule_BB_loopexit_56;
	else if ((KeySchedule_preheader_exitcond2_reg == 1'd0))
		next_state = LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9;
LEGUP_F_KeySchedule_BB_thread_11:
		next_state = LEGUP_F_KeySchedule_BB_thread_12;
LEGUP_F_KeySchedule_BB_thread_12:
		next_state = LEGUP_F_KeySchedule_BB_thread_13;
LEGUP_F_KeySchedule_BB_thread_13:
		next_state = LEGUP_F_KeySchedule_BB_thread_14;
LEGUP_F_KeySchedule_BB_thread_14:
		next_state = LEGUP_F_KeySchedule_BB_thread_15;
LEGUP_F_KeySchedule_BB_thread_15:
		next_state = LEGUP_F_KeySchedule_BB_thread_16;
LEGUP_F_KeySchedule_BB_thread_16:
		next_state = LEGUP_F_KeySchedule_BB_thread_17;
LEGUP_F_KeySchedule_BB_thread_17:
		next_state = LEGUP_F_KeySchedule_BB_thread_18;
LEGUP_F_KeySchedule_BB_thread_18:
		next_state = LEGUP_F_KeySchedule_BB_thread_19;
LEGUP_F_KeySchedule_BB_thread_19:
		next_state = LEGUP_F_KeySchedule_BB_thread_20;
LEGUP_F_KeySchedule_BB_thread_20:
		next_state = LEGUP_F_KeySchedule_BB_thread_21;
LEGUP_F_KeySchedule_BB_thread_21:
		next_state = LEGUP_F_KeySchedule_BB_thread_22;
LEGUP_F_KeySchedule_BB_thread_22:
		next_state = LEGUP_F_KeySchedule_BB_thread_23;
LEGUP_F_KeySchedule_BB_thread_23:
		next_state = LEGUP_F_KeySchedule_BB_thread_24;
LEGUP_F_KeySchedule_BB_thread_24:
		next_state = LEGUP_F_KeySchedule_BB_thread_25;
LEGUP_F_KeySchedule_BB_thread_25:
		next_state = LEGUP_F_KeySchedule_BB_thread_26;
LEGUP_F_KeySchedule_BB_thread_26:
		next_state = LEGUP_F_KeySchedule_BB_thread_27;
LEGUP_F_KeySchedule_BB_thread_27:
		next_state = LEGUP_F_KeySchedule_BB_thread_28;
LEGUP_F_KeySchedule_BB_thread_28:
		next_state = LEGUP_F_KeySchedule_BB_thread_29;
LEGUP_F_KeySchedule_BB_thread_29:
		next_state = LEGUP_F_KeySchedule_BB_thread_30;
LEGUP_F_KeySchedule_BB_thread_30:
		next_state = LEGUP_F_KeySchedule_BB_thread_31;
LEGUP_F_KeySchedule_BB_thread_31:
		next_state = LEGUP_F_KeySchedule_BB_thread_32;
LEGUP_F_KeySchedule_BB_thread_32:
		next_state = LEGUP_F_KeySchedule_BB_thread_33;
LEGUP_F_KeySchedule_BB_thread_33:
		next_state = LEGUP_F_KeySchedule_BB_thread_34;
LEGUP_F_KeySchedule_BB_thread_34:
		next_state = LEGUP_F_KeySchedule_BB_thread_35;
LEGUP_F_KeySchedule_BB_thread_35:
		next_state = LEGUP_F_KeySchedule_BB_thread_36;
LEGUP_F_KeySchedule_BB_thread_36:
		next_state = LEGUP_F_KeySchedule_BB_thread_37;
LEGUP_F_KeySchedule_BB_thread_37:
		next_state = LEGUP_F_KeySchedule_BB_thread_38;
LEGUP_F_KeySchedule_BB_thread_38:
		next_state = LEGUP_F_KeySchedule_BB_thread_39;
LEGUP_F_KeySchedule_BB_thread_39:
		next_state = LEGUP_F_KeySchedule_BB_thread_40;
LEGUP_F_KeySchedule_BB_thread_40:
		next_state = LEGUP_F_KeySchedule_BB_thread_41;
LEGUP_F_KeySchedule_BB_thread_41:
		next_state = LEGUP_F_KeySchedule_BB_thread_42;
LEGUP_F_KeySchedule_BB_thread_42:
		next_state = LEGUP_F_KeySchedule_BB_thread_43;
LEGUP_F_KeySchedule_BB_thread_43:
		next_state = LEGUP_F_KeySchedule_BB_thread_44;
LEGUP_F_KeySchedule_BB_thread_44:
		next_state = LEGUP_F_KeySchedule_BB_thread_45;
LEGUP_F_KeySchedule_BB_thread_45:
		next_state = LEGUP_F_KeySchedule_BB_thread_46;
LEGUP_F_KeySchedule_BB_thread_46:
		next_state = LEGUP_F_KeySchedule_BB_thread_47;
LEGUP_F_KeySchedule_BB_thread_47:
		next_state = LEGUP_F_KeySchedule_BB_preheader_48;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %j.09 = phi i32 [ 0, %0 ], [ %9, %.preheader4 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		KeySchedule_preheader4_j09 = 32'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %j.09 = phi i32 [ 0, %0 ], [ %9, %.preheader4 ]*/
	else /* if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader4_exitcond_reg == 1'd0))) */ begin
		KeySchedule_preheader4_j09 = KeySchedule_preheader4_9_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %j.09 = phi i32 [ 0, %0 ], [ %9, %.preheader4 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		KeySchedule_preheader4_j09_reg <= KeySchedule_preheader4_j09;
		if (start == 1'b0 && ^(KeySchedule_preheader4_j09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_j09_reg"); $finish; end
	end
	/* KeySchedule: %.preheader4*/
	/*   %j.09 = phi i32 [ 0, %0 ], [ %9, %.preheader4 ]*/
	if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader4_5) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader4_exitcond_reg == 1'd0))) begin
		KeySchedule_preheader4_j09_reg <= KeySchedule_preheader4_j09;
		if (start == 1'b0 && ^(KeySchedule_preheader4_j09) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_j09_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep13 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.09*/
		KeySchedule_preheader4_scevgep13 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * KeySchedule_preheader4_j09_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep13 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.09*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep13_reg <= KeySchedule_preheader4_scevgep13;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep14 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.09*/
		KeySchedule_preheader4_scevgep14 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * KeySchedule_preheader4_j09_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep14 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.09*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep14_reg <= KeySchedule_preheader4_scevgep14;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep15 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.09*/
		KeySchedule_preheader4_scevgep15 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * KeySchedule_preheader4_j09_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep15 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.09*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep15_reg <= KeySchedule_preheader4_scevgep15;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep16 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.09*/
		KeySchedule_preheader4_scevgep16 = (`TAG_g_word_a | (4 * KeySchedule_preheader4_j09_reg));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep16 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.09*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep16_reg <= KeySchedule_preheader4_scevgep16;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %1 = shl i32 %j.09, 2*/
		KeySchedule_preheader4_1 = (KeySchedule_preheader4_j09_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %1 = shl i32 %j.09, 2*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_1_reg <= KeySchedule_preheader4_1;
		if (start == 1'b0 && ^(KeySchedule_preheader4_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_1_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %2 = or i32 %1, 3*/
		KeySchedule_preheader4_2 = (KeySchedule_preheader4_1 | 32'd3);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %2 = or i32 %1, 3*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_2_reg <= KeySchedule_preheader4_2;
		if (start == 1'b0 && ^(KeySchedule_preheader4_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_2_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep17 = getelementptr [32 x i32]* @key, i32 0, i32 %2*/
		KeySchedule_preheader4_scevgep17 = (`TAG_g_key_a | (4 * KeySchedule_preheader4_2));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep17 = getelementptr [32 x i32]* @key, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep17_reg <= KeySchedule_preheader4_scevgep17;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %3 = or i32 %1, 2*/
		KeySchedule_preheader4_3 = (KeySchedule_preheader4_1 | 32'd2);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %3 = or i32 %1, 2*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_3_reg <= KeySchedule_preheader4_3;
		if (start == 1'b0 && ^(KeySchedule_preheader4_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_3_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep18 = getelementptr [32 x i32]* @key, i32 0, i32 %3*/
		KeySchedule_preheader4_scevgep18 = (`TAG_g_key_a | (4 * KeySchedule_preheader4_3));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep18 = getelementptr [32 x i32]* @key, i32 0, i32 %3*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep18_reg <= KeySchedule_preheader4_scevgep18;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %4 = or i32 %1, 1*/
		KeySchedule_preheader4_4 = (KeySchedule_preheader4_1 | 32'd1);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %4 = or i32 %1, 1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_4_reg <= KeySchedule_preheader4_4;
		if (start == 1'b0 && ^(KeySchedule_preheader4_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_4_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep19 = getelementptr [32 x i32]* @key, i32 0, i32 %4*/
		KeySchedule_preheader4_scevgep19 = (`TAG_g_key_a | (4 * KeySchedule_preheader4_4));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep19 = getelementptr [32 x i32]* @key, i32 0, i32 %4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep19_reg <= KeySchedule_preheader4_scevgep19;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep20 = getelementptr [32 x i32]* @key, i32 0, i32 %1*/
		KeySchedule_preheader4_scevgep20 = (`TAG_g_key_a | (4 * KeySchedule_preheader4_1));
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %scevgep20 = getelementptr [32 x i32]* @key, i32 0, i32 %1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_scevgep20_reg <= KeySchedule_preheader4_scevgep20;
		if (start == 1'b0 && ^(KeySchedule_preheader4_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
		KeySchedule_preheader4_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		KeySchedule_preheader4_5_reg <= KeySchedule_preheader4_5;
		if (start == 1'b0 && ^(KeySchedule_preheader4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
		KeySchedule_preheader4_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		KeySchedule_preheader4_6_reg <= KeySchedule_preheader4_6;
		if (start == 1'b0 && ^(KeySchedule_preheader4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_6_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
		KeySchedule_preheader4_7 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		KeySchedule_preheader4_7_reg <= KeySchedule_preheader4_7;
		if (start == 1'b0 && ^(KeySchedule_preheader4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_7_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
		KeySchedule_preheader4_8 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		KeySchedule_preheader4_8_reg <= KeySchedule_preheader4_8;
		if (start == 1'b0 && ^(KeySchedule_preheader4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_8_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %9 = add nsw i32 %j.09, 1*/
		KeySchedule_preheader4_9 = (KeySchedule_preheader4_j09_reg + 32'd1);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %9 = add nsw i32 %j.09, 1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_9_reg <= KeySchedule_preheader4_9;
		if (start == 1'b0 && ^(KeySchedule_preheader4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_9_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader4*/
	/*   %exitcond = icmp eq i32 %9, 4*/
		KeySchedule_preheader4_exitcond = (KeySchedule_preheader4_9 == 32'd4);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader4*/
	/*   %exitcond = icmp eq i32 %9, 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		KeySchedule_preheader4_exitcond_reg <= KeySchedule_preheader4_exitcond;
		if (start == 1'b0 && ^(KeySchedule_preheader4_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader4_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
		KeySchedule_lrphlrphsplit_crit_edgepreheader_pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8)) begin
		KeySchedule_lrphlrphsplit_crit_edgepreheader_pre_reg <= KeySchedule_lrphlrphsplit_crit_edgepreheader_pre;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edgepreheader_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edgepreheader_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_indvar = 32'd0;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader_54) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader_exitcond2_reg == 1'd0))) */ begin
		KeySchedule_lrphlrphsplit_crit_edge_indvar = KeySchedule_preheader_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_indvar_reg <= KeySchedule_lrphlrphsplit_crit_edge_indvar;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_indvar_reg"); $finish; end
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %indvar = phi i32 [ %indvar.next, %.preheader ], [ 0, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader_54) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader_exitcond2_reg == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_indvar_reg <= KeySchedule_lrphlrphsplit_crit_edge_indvar;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %10 = phi i32 [ %39, %.preheader ], [ %.pre, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_10 = KeySchedule_lrphlrphsplit_crit_edgepreheader_pre;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %10 = phi i32 [ %39, %.preheader ], [ %.pre, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader_54) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader_exitcond2_reg == 1'd0))) */ begin
		KeySchedule_lrphlrphsplit_crit_edge_10 = KeySchedule_preheader_39_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %10 = phi i32 [ %39, %.preheader ], [ %.pre, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_10_reg <= KeySchedule_lrphlrphsplit_crit_edge_10;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_10_reg"); $finish; end
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %10 = phi i32 [ %39, %.preheader ], [ %.pre, %.lr.ph..lr.ph.split_crit_edge.preheader ]*/
	if ((((cur_state == LEGUP_F_KeySchedule_BB_preheader_54) & (memory_controller_waitrequest == 1'd0)) & (KeySchedule_preheader_exitcond2_reg == 1'd0))) begin
		KeySchedule_lrphlrphsplit_crit_edge_10_reg <= KeySchedule_lrphlrphsplit_crit_edge_10;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_10_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %j.17 = add i32 %indvar, 4*/
		KeySchedule_lrphlrphsplit_crit_edge_j17 = (KeySchedule_lrphlrphsplit_crit_edge_indvar_reg + 32'd4);
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %j.17 = add i32 %indvar, 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_j17_reg <= KeySchedule_lrphlrphsplit_crit_edge_j17;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_j17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_j17_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.17*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep = (`TAG_g_word_a | ((480 * 32'd3) + (4 * KeySchedule_lrphlrphsplit_crit_edge_j17_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.17*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep3 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.17*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep3 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * KeySchedule_lrphlrphsplit_crit_edge_j17_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep3 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.17*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep3_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep3;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep4 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.17*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep4 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * KeySchedule_lrphlrphsplit_crit_edge_j17_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep4 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.17*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep4_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep4;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep5 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.17*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep5 = (`TAG_g_word_a | (4 * KeySchedule_lrphlrphsplit_crit_edge_j17_reg));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep5 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.17*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep5_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep5;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %indvar*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep6 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * KeySchedule_lrphlrphsplit_crit_edge_indvar_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %indvar*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep6_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep6;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep7 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %indvar*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep7 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * KeySchedule_lrphlrphsplit_crit_edge_indvar_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep7 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %indvar*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep7_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep7;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep8 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %indvar*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep8 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * KeySchedule_lrphlrphsplit_crit_edge_indvar_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep8 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %indvar*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep8_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep8;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep9 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %indvar*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep9 = (`TAG_g_word_a | (4 * KeySchedule_lrphlrphsplit_crit_edge_indvar_reg));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep9 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %indvar*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep9_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep9;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %11 = add i32 %indvar, 3*/
		KeySchedule_lrphlrphsplit_crit_edge_11 = (KeySchedule_lrphlrphsplit_crit_edge_indvar_reg + 32'd3);
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %11 = add i32 %indvar, 3*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_11_reg <= KeySchedule_lrphlrphsplit_crit_edge_11;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_11_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep10 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %11*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep10 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * KeySchedule_lrphlrphsplit_crit_edge_11_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep10 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %11*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep10_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep10;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep11 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %11*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep11 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * KeySchedule_lrphlrphsplit_crit_edge_11_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep11 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %11*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep11_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep11;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %11*/
		KeySchedule_lrphlrphsplit_crit_edge_scevgep12 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * KeySchedule_lrphlrphsplit_crit_edge_11_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %11*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_10)) begin
		KeySchedule_lrphlrphsplit_crit_edge_scevgep12_reg <= KeySchedule_lrphlrphsplit_crit_edge_scevgep12;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %12 = and i32 %j.17, 3*/
		KeySchedule_lrphlrphsplit_crit_edge_12 = (KeySchedule_lrphlrphsplit_crit_edge_j17 & 32'd3);
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %12 = and i32 %j.17, 3*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_12_reg <= KeySchedule_lrphlrphsplit_crit_edge_12;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_12_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %cond = icmp eq i32 %12, 0*/
		KeySchedule_lrphlrphsplit_crit_edge_cond = (KeySchedule_lrphlrphsplit_crit_edge_12 == 32'd0);
end
always @(posedge clk) begin
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge*/
	/*   %cond = icmp eq i32 %12, 0*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edge_9)) begin
		KeySchedule_lrphlrphsplit_crit_edge_cond_reg <= KeySchedule_lrphlrphsplit_crit_edge_cond;
		if (start == 1'b0 && ^(KeySchedule_lrphlrphsplit_crit_edge_cond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_lrphlrphsplit_crit_edge_cond_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
		KeySchedule_thread_13 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_thread_13_reg <= KeySchedule_thread_13;
		if (start == 1'b0 && ^(KeySchedule_thread_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_13_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_14 = KeySchedule_signed_modulus_32_0;
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %14 = srem i32 %13, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_14_reg <= KeySchedule_thread_14;
		if (start == 1'b0 && ^(KeySchedule_thread_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_14_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %14 = srem i32 %13, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_14_reg <= KeySchedule_thread_14;
		if (start == 1'b0 && ^(KeySchedule_thread_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_14_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %24 = srem i32 %23, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_46)) begin
		KeySchedule_thread_14_reg <= KeySchedule_thread_24;
		if (start == 1'b0 && ^(KeySchedule_thread_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_14_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %28 = srem i32 %27, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_47)) begin
		KeySchedule_thread_14_reg <= KeySchedule_thread_28;
		if (start == 1'b0 && ^(KeySchedule_thread_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_14_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %31 = srem i32 %10, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_43)) begin
		KeySchedule_thread_14_reg <= KeySchedule_thread_31;
		if (start == 1'b0 && ^(KeySchedule_thread_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_14_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_15 = KeySchedule_signed_divide_32_0;
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %15 = sdiv i32 %13, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_15;
		if (start == 1'b0 && ^(KeySchedule_thread_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %15 = sdiv i32 %13, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_15;
		if (start == 1'b0 && ^(KeySchedule_thread_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %18 = sdiv i32 %j.17, 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_43)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_18;
		if (start == 1'b0 && ^(KeySchedule_thread_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %25 = sdiv i32 %23, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_46)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_25;
		if (start == 1'b0 && ^(KeySchedule_thread_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %29 = sdiv i32 %27, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_47)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_29;
		if (start == 1'b0 && ^(KeySchedule_thread_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
	/* KeySchedule: %.thread*/
	/*   %32 = sdiv i32 %10, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_44)) begin
		KeySchedule_thread_15_reg <= KeySchedule_thread_32;
		if (start == 1'b0 && ^(KeySchedule_thread_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_15_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %16 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %15, i32 %14*/
		KeySchedule_thread_16 = (`TAG_g_Sbox_a | ((64 * KeySchedule_thread_15) + (4 * KeySchedule_thread_14)));
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %16 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %15, i32 %14*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_16_reg <= KeySchedule_thread_16;
		if (start == 1'b0 && ^(KeySchedule_thread_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_16_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
		KeySchedule_thread_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_47)) begin
		KeySchedule_thread_17_reg <= KeySchedule_thread_17;
		if (start == 1'b0 && ^(KeySchedule_thread_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_17_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_18 = KeySchedule_signed_divide_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %18 = sdiv i32 %j.17, 4*/
	KeySchedule_thread_18_reg = KeySchedule_thread_15_reg;
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %19 = add nsw i32 %18, -1*/
		KeySchedule_thread_19 = (KeySchedule_thread_18 + -32'd1);
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %19 = add nsw i32 %18, -1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_43)) begin
		KeySchedule_thread_19_reg <= KeySchedule_thread_19;
		if (start == 1'b0 && ^(KeySchedule_thread_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_19_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %20 = getelementptr inbounds [30 x i32]* @Rcon0, i32 0, i32 %19*/
		KeySchedule_thread_20 = (1'd0 | (4 * KeySchedule_thread_19_reg));
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %20 = getelementptr inbounds [30 x i32]* @Rcon0, i32 0, i32 %19*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_44)) begin
		KeySchedule_thread_20_reg <= KeySchedule_thread_20;
		if (start == 1'b0 && ^(KeySchedule_thread_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_20_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
		KeySchedule_thread_21 = Rcon0_out_a;
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		KeySchedule_thread_21_reg <= KeySchedule_thread_21;
		if (start == 1'b0 && ^(KeySchedule_thread_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_21_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %22 = xor i32 %21, %17*/
		KeySchedule_thread_22 = (KeySchedule_thread_21_reg ^ KeySchedule_thread_17);
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %22 = xor i32 %21, %17*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_47)) begin
		KeySchedule_thread_22_reg <= KeySchedule_thread_22;
		if (start == 1'b0 && ^(KeySchedule_thread_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_22_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
		KeySchedule_thread_23 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_thread_23_reg <= KeySchedule_thread_23;
		if (start == 1'b0 && ^(KeySchedule_thread_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_23_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_24 = KeySchedule_signed_modulus_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %24 = srem i32 %23, 16*/
	KeySchedule_thread_24_reg = KeySchedule_thread_14_reg;
end
always @(*) begin
	KeySchedule_thread_25 = KeySchedule_signed_divide_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %25 = sdiv i32 %23, 16*/
	KeySchedule_thread_25_reg = KeySchedule_thread_15_reg;
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %26 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %25, i32 %24*/
		KeySchedule_thread_26 = (`TAG_g_Sbox_a | ((64 * KeySchedule_thread_25) + (4 * KeySchedule_thread_24)));
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %26 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %25, i32 %24*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_46)) begin
		KeySchedule_thread_26_reg <= KeySchedule_thread_26;
		if (start == 1'b0 && ^(KeySchedule_thread_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_26_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
		KeySchedule_thread_27 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_14)) begin
		KeySchedule_thread_27_reg <= KeySchedule_thread_27;
		if (start == 1'b0 && ^(KeySchedule_thread_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_27_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_28 = KeySchedule_signed_modulus_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %28 = srem i32 %27, 16*/
	KeySchedule_thread_28_reg = KeySchedule_thread_14_reg;
end
always @(*) begin
	KeySchedule_thread_29 = KeySchedule_signed_divide_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %29 = sdiv i32 %27, 16*/
	KeySchedule_thread_29_reg = KeySchedule_thread_15_reg;
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %30 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %29, i32 %28*/
		KeySchedule_thread_30 = (`TAG_g_Sbox_a | ((64 * KeySchedule_thread_29) + (4 * KeySchedule_thread_28)));
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %30 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %29, i32 %28*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_47)) begin
		KeySchedule_thread_30_reg <= KeySchedule_thread_30;
		if (start == 1'b0 && ^(KeySchedule_thread_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_30_reg"); $finish; end
	end
end
always @(*) begin
	KeySchedule_thread_31 = KeySchedule_signed_modulus_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %31 = srem i32 %10, 16*/
	KeySchedule_thread_31_reg = KeySchedule_thread_14_reg;
end
always @(*) begin
	KeySchedule_thread_32 = KeySchedule_signed_divide_32_0;
end
always @(*) begin
/* KeySchedule: %.thread*/
/*   %32 = sdiv i32 %10, 16*/
	KeySchedule_thread_32_reg = KeySchedule_thread_15_reg;
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %33 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %32, i32 %31*/
		KeySchedule_thread_33 = (`TAG_g_Sbox_a | ((64 * KeySchedule_thread_32) + (4 * KeySchedule_thread_31_reg)));
end
always @(posedge clk) begin
	/* KeySchedule: %.thread*/
	/*   %33 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %32, i32 %31*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_44)) begin
		KeySchedule_thread_33_reg <= KeySchedule_thread_33;
		if (start == 1'b0 && ^(KeySchedule_thread_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_thread_33_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %.in = phi i32* [ %scevgep10, %46 ], [ %33, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in = KeySchedule_thread_33_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %.in = phi i32* [ %scevgep10, %46 ], [ %33, %.thread ]*/
	else /* if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		KeySchedule_preheader_in = KeySchedule_lrphlrphsplit_crit_edge_scevgep10_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %.in = phi i32* [ %scevgep10, %46 ], [ %33, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in_reg <= KeySchedule_preheader_in;
		if (start == 1'b0 && ^(KeySchedule_preheader_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in_reg"); $finish; end
	end
	/* KeySchedule: %.preheader*/
	/*   %.in = phi i32* [ %scevgep10, %46 ], [ %33, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in_reg <= KeySchedule_preheader_in;
		if (start == 1'b0 && ^(KeySchedule_preheader_in) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %.in11 = phi i32* [ %scevgep11, %46 ], [ %30, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in11 = KeySchedule_thread_30;
	end
	/* KeySchedule: %.preheader*/
	/*   %.in11 = phi i32* [ %scevgep11, %46 ], [ %30, %.thread ]*/
	else /* if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		KeySchedule_preheader_in11 = KeySchedule_lrphlrphsplit_crit_edge_scevgep11_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %.in11 = phi i32* [ %scevgep11, %46 ], [ %30, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in11_reg <= KeySchedule_preheader_in11;
		if (start == 1'b0 && ^(KeySchedule_preheader_in11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in11_reg"); $finish; end
	end
	/* KeySchedule: %.preheader*/
	/*   %.in11 = phi i32* [ %scevgep11, %46 ], [ %30, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in11_reg <= KeySchedule_preheader_in11;
		if (start == 1'b0 && ^(KeySchedule_preheader_in11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in11_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %.in12 = phi i32* [ %scevgep12, %46 ], [ %26, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in12 = KeySchedule_thread_26_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %.in12 = phi i32* [ %scevgep12, %46 ], [ %26, %.thread ]*/
	else /* if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		KeySchedule_preheader_in12 = KeySchedule_lrphlrphsplit_crit_edge_scevgep12_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %.in12 = phi i32* [ %scevgep12, %46 ], [ %26, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in12_reg <= KeySchedule_preheader_in12;
		if (start == 1'b0 && ^(KeySchedule_preheader_in12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in12_reg"); $finish; end
	end
	/* KeySchedule: %.preheader*/
	/*   %.in12 = phi i32* [ %scevgep12, %46 ], [ %26, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_in12_reg <= KeySchedule_preheader_in12;
		if (start == 1'b0 && ^(KeySchedule_preheader_in12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_in12_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %34 = phi i32 [ %10, %46 ], [ %22, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_34 = KeySchedule_thread_22;
	end
	/* KeySchedule: %.preheader*/
	/*   %34 = phi i32 [ %10, %46 ], [ %22, %.thread ]*/
	else /* if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) */ begin
		KeySchedule_preheader_34 = KeySchedule_lrphlrphsplit_crit_edge_10_reg;
	end
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %34 = phi i32 [ %10, %46 ], [ %22, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB_thread_47) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_34_reg <= KeySchedule_preheader_34;
		if (start == 1'b0 && ^(KeySchedule_preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_34_reg"); $finish; end
	end
	/* KeySchedule: %.preheader*/
	/*   %34 = phi i32 [ %10, %46 ], [ %22, %.thread ]*/
	if (((cur_state == LEGUP_F_KeySchedule_BB__46_55) & (memory_controller_waitrequest == 1'd0))) begin
		KeySchedule_preheader_34_reg <= KeySchedule_preheader_34;
		if (start == 1'b0 && ^(KeySchedule_preheader_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_34_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
		KeySchedule_preheader_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		KeySchedule_preheader_35_reg <= KeySchedule_preheader_35;
		if (start == 1'b0 && ^(KeySchedule_preheader_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_35_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
		KeySchedule_preheader_36 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		KeySchedule_preheader_36_reg <= KeySchedule_preheader_36;
		if (start == 1'b0 && ^(KeySchedule_preheader_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_36_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
		KeySchedule_preheader_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		KeySchedule_preheader_37_reg <= KeySchedule_preheader_37;
		if (start == 1'b0 && ^(KeySchedule_preheader_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_37_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
		KeySchedule_preheader_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		KeySchedule_preheader_38_reg <= KeySchedule_preheader_38;
		if (start == 1'b0 && ^(KeySchedule_preheader_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_38_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %39 = xor i32 %34, %38*/
		KeySchedule_preheader_39 = (KeySchedule_preheader_34_reg ^ KeySchedule_preheader_38);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %39 = xor i32 %34, %38*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		KeySchedule_preheader_39_reg <= KeySchedule_preheader_39;
		if (start == 1'b0 && ^(KeySchedule_preheader_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_39_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
		KeySchedule_preheader_40 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		KeySchedule_preheader_40_reg <= KeySchedule_preheader_40;
		if (start == 1'b0 && ^(KeySchedule_preheader_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_40_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %41 = xor i32 %35, %40*/
		KeySchedule_preheader_41 = (KeySchedule_preheader_35_reg ^ KeySchedule_preheader_40);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %41 = xor i32 %35, %40*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		KeySchedule_preheader_41_reg <= KeySchedule_preheader_41;
		if (start == 1'b0 && ^(KeySchedule_preheader_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_41_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
		KeySchedule_preheader_42 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		KeySchedule_preheader_42_reg <= KeySchedule_preheader_42;
		if (start == 1'b0 && ^(KeySchedule_preheader_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_42_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %43 = xor i32 %36, %42*/
		KeySchedule_preheader_43 = (KeySchedule_preheader_36_reg ^ KeySchedule_preheader_42);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %43 = xor i32 %36, %42*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		KeySchedule_preheader_43_reg <= KeySchedule_preheader_43;
		if (start == 1'b0 && ^(KeySchedule_preheader_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_43_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
		KeySchedule_preheader_44 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		KeySchedule_preheader_44_reg <= KeySchedule_preheader_44;
		if (start == 1'b0 && ^(KeySchedule_preheader_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_44_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %45 = xor i32 %37, %44*/
		KeySchedule_preheader_45 = (KeySchedule_preheader_37_reg ^ KeySchedule_preheader_44);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %45 = xor i32 %37, %44*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		KeySchedule_preheader_45_reg <= KeySchedule_preheader_45;
		if (start == 1'b0 && ^(KeySchedule_preheader_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_45_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
		KeySchedule_preheader_indvarnext = (KeySchedule_lrphlrphsplit_crit_edge_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		KeySchedule_preheader_indvarnext_reg <= KeySchedule_preheader_indvarnext;
		if (start == 1'b0 && ^(KeySchedule_preheader_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* KeySchedule: %.preheader*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 40*/
		KeySchedule_preheader_exitcond2 = (KeySchedule_preheader_indvarnext == 32'd40);
end
always @(posedge clk) begin
	/* KeySchedule: %.preheader*/
	/*   %exitcond2 = icmp eq i32 %indvar.next, 40*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		KeySchedule_preheader_exitcond2_reg <= KeySchedule_preheader_exitcond2;
		if (start == 1'b0 && ^(KeySchedule_preheader_exitcond2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_preheader_exitcond2_reg"); $finish; end
	end
end
always @(*) begin
	Rcon0_address_a = 1'd0;
	/* KeySchedule: %.thread*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_44)) begin
		Rcon0_address_a = (KeySchedule_thread_20 >>> 3'd2);
	end
end
always @(*) begin
	Rcon0_write_enable_a = 1'd0;
	/* KeySchedule: %.thread*/
	/*   %21 = load i32* %20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_44)) begin
		Rcon0_write_enable_a = 1'd0;
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %31 = srem i32 %10, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		KeySchedule_signed_modulus_32_0_op0 = KeySchedule_lrphlrphsplit_crit_edge_10_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %14 = srem i32 %13, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_signed_modulus_32_0_op0 = KeySchedule_thread_13;
	end
	/* KeySchedule: %.thread*/
	/*   %24 = srem i32 %23, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_14)) begin
		KeySchedule_signed_modulus_32_0_op0 = KeySchedule_thread_23_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %28 = srem i32 %27, 16*/
	else /* if ((cur_state == LEGUP_F_KeySchedule_BB_thread_15)) */ begin
		KeySchedule_signed_modulus_32_0_op0 = KeySchedule_thread_27_reg;
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %31 = srem i32 %10, 16*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		KeySchedule_signed_modulus_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %14 = srem i32 %13, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_signed_modulus_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %24 = srem i32 %23, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_14)) begin
		KeySchedule_signed_modulus_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %28 = srem i32 %27, 16*/
	else /* if ((cur_state == LEGUP_F_KeySchedule_BB_thread_15)) */ begin
		KeySchedule_signed_modulus_32_0_op1 = 32'd16;
	end
end
always @(*) begin
	lpm_divide_KeySchedule_thread_14_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_14_out = lpm_divide_KeySchedule_thread_14_temp_out;
end
always @(*) begin
	KeySchedule_signed_modulus_32_0 = lpm_divide_KeySchedule_thread_14_out;
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %18 = sdiv i32 %j.17, 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		KeySchedule_signed_divide_32_0_op0 = KeySchedule_lrphlrphsplit_crit_edge_j17_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %32 = sdiv i32 %10, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		KeySchedule_signed_divide_32_0_op0 = KeySchedule_lrphlrphsplit_crit_edge_10_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %15 = sdiv i32 %13, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_signed_divide_32_0_op0 = KeySchedule_thread_13;
	end
	/* KeySchedule: %.thread*/
	/*   %25 = sdiv i32 %23, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_14)) begin
		KeySchedule_signed_divide_32_0_op0 = KeySchedule_thread_23_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %29 = sdiv i32 %27, 16*/
	else /* if ((cur_state == LEGUP_F_KeySchedule_BB_thread_15)) */ begin
		KeySchedule_signed_divide_32_0_op0 = KeySchedule_thread_27_reg;
	end
end
always @(*) begin
	/* KeySchedule: %.thread*/
	/*   %18 = sdiv i32 %j.17, 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		KeySchedule_signed_divide_32_0_op1 = 32'd4;
	end
	/* KeySchedule: %.thread*/
	/*   %32 = sdiv i32 %10, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		KeySchedule_signed_divide_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %15 = sdiv i32 %13, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_13)) begin
		KeySchedule_signed_divide_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %25 = sdiv i32 %23, 16*/
	else if ((cur_state == LEGUP_F_KeySchedule_BB_thread_14)) begin
		KeySchedule_signed_divide_32_0_op1 = 32'd16;
	end
	/* KeySchedule: %.thread*/
	/*   %29 = sdiv i32 %27, 16*/
	else /* if ((cur_state == LEGUP_F_KeySchedule_BB_thread_15)) */ begin
		KeySchedule_signed_divide_32_0_op1 = 32'd16;
	end
end
always @(*) begin
	lpm_divide_KeySchedule_thread_15_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_15_out = lpm_divide_KeySchedule_thread_15_temp_out;
end
always @(*) begin
	KeySchedule_signed_divide_32_0 = lpm_divide_KeySchedule_thread_15_out;
end
always @(*) begin
	lpm_divide_KeySchedule_thread_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_31_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_32_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_KeySchedule_thread_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* KeySchedule: %.loopexit*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_loopexit_56)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %5, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %7, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %39, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %41, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_address_a = KeySchedule_preheader4_scevgep20;
	end
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_address_a = KeySchedule_preheader4_scevgep18_reg;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %5, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_address_a = KeySchedule_preheader4_scevgep16_reg;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %7, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_address_a = KeySchedule_preheader4_scevgep14_reg;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6)) begin
		memory_controller_address_a = (`TAG_g_word_a | (4 * 32'd3));
	end
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_address_a = KeySchedule_lrphlrphsplit_crit_edge_scevgep12_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		memory_controller_address_a = KeySchedule_lrphlrphsplit_crit_edge_scevgep10_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_address_a = KeySchedule_preheader_in12_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_address_a = KeySchedule_preheader_in_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_address_a = KeySchedule_lrphlrphsplit_crit_edge_scevgep8_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %39, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_address_a = KeySchedule_lrphlrphsplit_crit_edge_scevgep5_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %41, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_address_a = KeySchedule_lrphlrphsplit_crit_edge_scevgep4_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %5, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %7, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %39, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %41, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %5, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_in_a = KeySchedule_preheader4_5;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %7, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_in_a = KeySchedule_preheader4_7;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %39, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_in_a = KeySchedule_preheader_39;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %41, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_in_a = KeySchedule_preheader_41;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %5 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   %7 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %5, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %7, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.lr.ph..lr.ph.split_crit_edge.preheader*/
	/*   %.pre = load i32* getelementptr inbounds ([4 x [120 x i32]]* @word, i32 0, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_lrphlrphsplit_crit_edgepreheader_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.thread*/
	/*   %13 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.thread*/
	/*   %27 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %35 = load i32* %.in12, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %37 = load i32* %.in, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %40 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %39, i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %41, i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %6, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %8, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %43, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %45, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_address_b = KeySchedule_preheader4_scevgep19;
	end
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_address_b = KeySchedule_preheader4_scevgep17_reg;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %6, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_address_b = KeySchedule_preheader4_scevgep15_reg;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %8, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_address_b = KeySchedule_preheader4_scevgep13_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep11_reg;
	end
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		memory_controller_address_b = KeySchedule_thread_16;
	end
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_address_b = KeySchedule_preheader_in11_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep9_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep7_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep6_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %43, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep3_reg;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %45, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		memory_controller_address_b = KeySchedule_lrphlrphsplit_crit_edge_scevgep_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %6, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %8, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %43, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %45, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %6, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_in_b = KeySchedule_preheader4_6;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %8, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_in_b = KeySchedule_preheader4_8;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %43, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_in_b = KeySchedule_preheader_43;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %45, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		memory_controller_in_b = KeySchedule_preheader_45;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* KeySchedule: %.preheader4*/
	/*   %6 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   %8 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %6, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader4*/
	/*   store i32 %8, i32* %scevgep13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader4_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.thread*/
	/*   %23 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.thread*/
	/*   %17 = load i32* %16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_thread_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %36 = load i32* %.in11, align 4*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %38 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %42 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   %44 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %43, i32* %scevgep3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* KeySchedule: %.preheader*/
	/*   store i32 %45, i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_KeySchedule_BB_preheader_53)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module ByteSub_ShiftRow
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_2 = 5'd2;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_4 = 5'd4;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_6 = 5'd6;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_8 = 5'd8;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_10 = 5'd10;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_12 = 5'd12;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_14 = 5'd14;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_16 = 5'd16;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_17 = 5'd17;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_18 = 5'd18;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_19 = 5'd19;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_20 = 5'd20;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_21 = 5'd21;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_22 = 5'd22;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_23 = 5'd23;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_24 = 5'd24;
parameter [4:0] LEGUP_F_ByteSub_ShiftRow_BB__0_25 = 5'd25;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] ByteSub_ShiftRow_0_1;
reg [31:0] ByteSub_ShiftRow_0_1_reg;
reg [31:0] ByteSub_ShiftRow_0_2;
reg [31:0] ByteSub_ShiftRow_0_2_reg;
reg [31:0] ByteSub_ShiftRow_0_3;
reg [31:0] ByteSub_ShiftRow_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_4_reg;
reg [31:0] ByteSub_ShiftRow_0_5;
reg [31:0] ByteSub_ShiftRow_0_5_reg;
reg [31:0] ByteSub_ShiftRow_0_6;
reg [31:0] ByteSub_ShiftRow_0_6_reg;
reg [31:0] ByteSub_ShiftRow_0_7;
reg [31:0] ByteSub_ShiftRow_0_7_reg;
reg [31:0] ByteSub_ShiftRow_0_8;
reg [31:0] ByteSub_ShiftRow_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_9_reg;
reg [31:0] ByteSub_ShiftRow_0_10;
reg [31:0] ByteSub_ShiftRow_0_10_reg;
reg [31:0] ByteSub_ShiftRow_0_11;
reg [31:0] ByteSub_ShiftRow_0_11_reg;
reg [31:0] ByteSub_ShiftRow_0_12;
reg [31:0] ByteSub_ShiftRow_0_12_reg;
reg [31:0] ByteSub_ShiftRow_0_13;
reg [31:0] ByteSub_ShiftRow_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_14_reg;
reg [31:0] ByteSub_ShiftRow_0_15;
reg [31:0] ByteSub_ShiftRow_0_15_reg;
reg [31:0] ByteSub_ShiftRow_0_16;
reg [31:0] ByteSub_ShiftRow_0_16_reg;
reg [31:0] ByteSub_ShiftRow_0_17;
reg [31:0] ByteSub_ShiftRow_0_17_reg;
reg [31:0] ByteSub_ShiftRow_0_18;
reg [31:0] ByteSub_ShiftRow_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_19_reg;
reg [31:0] ByteSub_ShiftRow_0_20;
reg [31:0] ByteSub_ShiftRow_0_20_reg;
reg [31:0] ByteSub_ShiftRow_0_21;
reg [31:0] ByteSub_ShiftRow_0_21_reg;
reg [31:0] ByteSub_ShiftRow_0_22;
reg [31:0] ByteSub_ShiftRow_0_22_reg;
reg [31:0] ByteSub_ShiftRow_0_23;
reg [31:0] ByteSub_ShiftRow_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_24_reg;
reg [31:0] ByteSub_ShiftRow_0_25;
reg [31:0] ByteSub_ShiftRow_0_25_reg;
reg [31:0] ByteSub_ShiftRow_0_26;
reg [31:0] ByteSub_ShiftRow_0_26_reg;
reg [31:0] ByteSub_ShiftRow_0_27;
reg [31:0] ByteSub_ShiftRow_0_27_reg;
reg [31:0] ByteSub_ShiftRow_0_28;
reg [31:0] ByteSub_ShiftRow_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_29_reg;
reg [31:0] ByteSub_ShiftRow_0_30;
reg [31:0] ByteSub_ShiftRow_0_30_reg;
reg [31:0] ByteSub_ShiftRow_0_31;
reg [31:0] ByteSub_ShiftRow_0_31_reg;
reg [31:0] ByteSub_ShiftRow_0_32;
reg [31:0] ByteSub_ShiftRow_0_32_reg;
reg [31:0] ByteSub_ShiftRow_0_33;
reg [31:0] ByteSub_ShiftRow_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_34_reg;
reg [31:0] ByteSub_ShiftRow_0_35;
reg [31:0] ByteSub_ShiftRow_0_35_reg;
reg [31:0] ByteSub_ShiftRow_0_36;
reg [31:0] ByteSub_ShiftRow_0_36_reg;
reg [31:0] ByteSub_ShiftRow_0_37;
reg [31:0] ByteSub_ShiftRow_0_37_reg;
reg [31:0] ByteSub_ShiftRow_0_38;
reg [31:0] ByteSub_ShiftRow_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_39_reg;
reg [31:0] ByteSub_ShiftRow_0_40;
reg [31:0] ByteSub_ShiftRow_0_40_reg;
reg [31:0] ByteSub_ShiftRow_0_41;
reg [31:0] ByteSub_ShiftRow_0_41_reg;
reg [31:0] ByteSub_ShiftRow_0_42;
reg [31:0] ByteSub_ShiftRow_0_42_reg;
reg [31:0] ByteSub_ShiftRow_0_43;
reg [31:0] ByteSub_ShiftRow_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_44_reg;
reg [31:0] ByteSub_ShiftRow_0_45;
reg [31:0] ByteSub_ShiftRow_0_45_reg;
reg [31:0] ByteSub_ShiftRow_0_46;
reg [31:0] ByteSub_ShiftRow_0_46_reg;
reg [31:0] ByteSub_ShiftRow_0_47;
reg [31:0] ByteSub_ShiftRow_0_47_reg;
reg [31:0] ByteSub_ShiftRow_0_48;
reg [31:0] ByteSub_ShiftRow_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_49_reg;
reg [31:0] ByteSub_ShiftRow_0_50;
reg [31:0] ByteSub_ShiftRow_0_50_reg;
reg [31:0] ByteSub_ShiftRow_0_51;
reg [31:0] ByteSub_ShiftRow_0_51_reg;
reg [31:0] ByteSub_ShiftRow_0_52;
reg [31:0] ByteSub_ShiftRow_0_52_reg;
reg [31:0] ByteSub_ShiftRow_0_53;
reg [31:0] ByteSub_ShiftRow_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_54_reg;
reg [31:0] ByteSub_ShiftRow_0_55;
reg [31:0] ByteSub_ShiftRow_0_55_reg;
reg [31:0] ByteSub_ShiftRow_0_56;
reg [31:0] ByteSub_ShiftRow_0_56_reg;
reg [31:0] ByteSub_ShiftRow_0_57;
reg [31:0] ByteSub_ShiftRow_0_57_reg;
reg [31:0] ByteSub_ShiftRow_0_58;
reg [31:0] ByteSub_ShiftRow_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_59_reg;
reg [31:0] ByteSub_ShiftRow_0_60;
reg [31:0] ByteSub_ShiftRow_0_60_reg;
reg [31:0] ByteSub_ShiftRow_0_61;
reg [31:0] ByteSub_ShiftRow_0_61_reg;
reg [31:0] ByteSub_ShiftRow_0_62;
reg [31:0] ByteSub_ShiftRow_0_62_reg;
reg [31:0] ByteSub_ShiftRow_0_63;
reg [31:0] ByteSub_ShiftRow_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_64_reg;
reg [31:0] ByteSub_ShiftRow_0_65;
reg [31:0] ByteSub_ShiftRow_0_65_reg;
reg [31:0] ByteSub_ShiftRow_0_66;
reg [31:0] ByteSub_ShiftRow_0_66_reg;
reg [31:0] ByteSub_ShiftRow_0_67;
reg [31:0] ByteSub_ShiftRow_0_67_reg;
reg [31:0] ByteSub_ShiftRow_0_68;
reg [31:0] ByteSub_ShiftRow_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_69_reg;
reg [31:0] ByteSub_ShiftRow_0_70;
reg [31:0] ByteSub_ShiftRow_0_70_reg;
reg [31:0] ByteSub_ShiftRow_0_71;
reg [31:0] ByteSub_ShiftRow_0_71_reg;
reg [31:0] ByteSub_ShiftRow_0_72;
reg [31:0] ByteSub_ShiftRow_0_72_reg;
reg [31:0] ByteSub_ShiftRow_0_73;
reg [31:0] ByteSub_ShiftRow_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_74_reg;
reg [31:0] ByteSub_ShiftRow_0_75;
reg [31:0] ByteSub_ShiftRow_0_75_reg;
reg [31:0] ByteSub_ShiftRow_0_76;
reg [31:0] ByteSub_ShiftRow_0_76_reg;
reg [31:0] ByteSub_ShiftRow_0_77;
reg [31:0] ByteSub_ShiftRow_0_77_reg;
reg [31:0] ByteSub_ShiftRow_0_78;
reg [31:0] ByteSub_ShiftRow_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_0_79_reg;
reg [31:0] ByteSub_ShiftRow_0_80;
reg [31:0] ByteSub_ShiftRow_0_80_reg;
wire [3:0] encryptout_enc_statemt_address_a;
wire  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
wire [3:0] decryptout_dec_statemt_address_a;
wire  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [4:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [4:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [7:0] invSbox_address_a;
wire  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
wire [7:0] invSbox_address_b;
wire  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [4:0] main_0_retii_address_a;
wire  main_0_retii_write_enable_a;
wire [31:0] main_0_retii_in_a;
wire [31:0] main_0_retii_out_a;
wire [4:0] main_0_retii_address_b;
wire  main_0_retii_write_enable_b;
wire [31:0] main_0_retii_in_b;
wire [31:0] main_0_retii_out_b;

// Local Rams


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_1;
LEGUP_F_ByteSub_ShiftRow_BB__0_1:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_2;
LEGUP_F_ByteSub_ShiftRow_BB__0_10:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_11;
LEGUP_F_ByteSub_ShiftRow_BB__0_11:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_12;
LEGUP_F_ByteSub_ShiftRow_BB__0_12:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_13;
LEGUP_F_ByteSub_ShiftRow_BB__0_13:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_14;
LEGUP_F_ByteSub_ShiftRow_BB__0_14:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_15;
LEGUP_F_ByteSub_ShiftRow_BB__0_15:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_16;
LEGUP_F_ByteSub_ShiftRow_BB__0_16:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_17;
LEGUP_F_ByteSub_ShiftRow_BB__0_17:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_18;
LEGUP_F_ByteSub_ShiftRow_BB__0_18:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_19;
LEGUP_F_ByteSub_ShiftRow_BB__0_19:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_20;
LEGUP_F_ByteSub_ShiftRow_BB__0_2:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_3;
LEGUP_F_ByteSub_ShiftRow_BB__0_20:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_21;
LEGUP_F_ByteSub_ShiftRow_BB__0_21:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_22;
LEGUP_F_ByteSub_ShiftRow_BB__0_22:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_23;
LEGUP_F_ByteSub_ShiftRow_BB__0_23:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_24;
LEGUP_F_ByteSub_ShiftRow_BB__0_24:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_25;
LEGUP_F_ByteSub_ShiftRow_BB__0_25:
		next_state = LEGUP_0;
LEGUP_F_ByteSub_ShiftRow_BB__0_3:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_4;
LEGUP_F_ByteSub_ShiftRow_BB__0_4:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_5;
LEGUP_F_ByteSub_ShiftRow_BB__0_5:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_6;
LEGUP_F_ByteSub_ShiftRow_BB__0_6:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_7;
LEGUP_F_ByteSub_ShiftRow_BB__0_7:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_8;
LEGUP_F_ByteSub_ShiftRow_BB__0_8:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_9;
LEGUP_F_ByteSub_ShiftRow_BB__0_9:
		next_state = LEGUP_F_ByteSub_ShiftRow_BB__0_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_1_reg <= ByteSub_ShiftRow_0_1;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %2 = and i32 %1, 15*/
		ByteSub_ShiftRow_0_2 = (ByteSub_ShiftRow_0_1 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %2 = and i32 %1, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_2_reg <= ByteSub_ShiftRow_0_2;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %3 = ashr i32 %1, 4*/
		ByteSub_ShiftRow_0_3 = ($signed(ByteSub_ShiftRow_0_1) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %3 = ashr i32 %1, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_3_reg <= ByteSub_ShiftRow_0_3;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %4 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %3, i32 %2*/
		ByteSub_ShiftRow_0_4 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_3) + (4 * ByteSub_ShiftRow_0_2)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %4 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %3, i32 %2*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_4_reg <= ByteSub_ShiftRow_0_4;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_5 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		ByteSub_ShiftRow_0_5_reg <= ByteSub_ShiftRow_0_5;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_6_reg <= ByteSub_ShiftRow_0_6;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %7 = and i32 %6, 15*/
		ByteSub_ShiftRow_0_7 = (ByteSub_ShiftRow_0_6 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %7 = and i32 %6, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_7_reg <= ByteSub_ShiftRow_0_7;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %8 = ashr i32 %6, 4*/
		ByteSub_ShiftRow_0_8 = ($signed(ByteSub_ShiftRow_0_6) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %8 = ashr i32 %6, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_8_reg <= ByteSub_ShiftRow_0_8;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %9 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %8, i32 %7*/
		ByteSub_ShiftRow_0_9 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_8) + (4 * ByteSub_ShiftRow_0_7)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %9 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %8, i32 %7*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		ByteSub_ShiftRow_0_9_reg <= ByteSub_ShiftRow_0_9;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		ByteSub_ShiftRow_0_10_reg <= ByteSub_ShiftRow_0_10;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_11_reg <= ByteSub_ShiftRow_0_11;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %12 = and i32 %11, 15*/
		ByteSub_ShiftRow_0_12 = (ByteSub_ShiftRow_0_11 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %12 = and i32 %11, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_12_reg <= ByteSub_ShiftRow_0_12;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %13 = ashr i32 %11, 4*/
		ByteSub_ShiftRow_0_13 = ($signed(ByteSub_ShiftRow_0_11) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %13 = ashr i32 %11, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_13_reg <= ByteSub_ShiftRow_0_13;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %14 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %13, i32 %12*/
		ByteSub_ShiftRow_0_14 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_13) + (4 * ByteSub_ShiftRow_0_12)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %14 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %13, i32 %12*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_14_reg <= ByteSub_ShiftRow_0_14;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_15 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		ByteSub_ShiftRow_0_15_reg <= ByteSub_ShiftRow_0_15;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_16 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_16_reg <= ByteSub_ShiftRow_0_16;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %17 = and i32 %16, 15*/
		ByteSub_ShiftRow_0_17 = (ByteSub_ShiftRow_0_16 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %17 = and i32 %16, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_17_reg <= ByteSub_ShiftRow_0_17;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %18 = ashr i32 %16, 4*/
		ByteSub_ShiftRow_0_18 = ($signed(ByteSub_ShiftRow_0_16) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %18 = ashr i32 %16, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_18_reg <= ByteSub_ShiftRow_0_18;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %19 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %18, i32 %17*/
		ByteSub_ShiftRow_0_19 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_18) + (4 * ByteSub_ShiftRow_0_17)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %19 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %18, i32 %17*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		ByteSub_ShiftRow_0_19_reg <= ByteSub_ShiftRow_0_19;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_20 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		ByteSub_ShiftRow_0_20_reg <= ByteSub_ShiftRow_0_20;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_21 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_21_reg <= ByteSub_ShiftRow_0_21;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %22 = and i32 %21, 15*/
		ByteSub_ShiftRow_0_22 = (ByteSub_ShiftRow_0_21 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %22 = and i32 %21, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_22_reg <= ByteSub_ShiftRow_0_22;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %23 = ashr i32 %21, 4*/
		ByteSub_ShiftRow_0_23 = ($signed(ByteSub_ShiftRow_0_21) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %23 = ashr i32 %21, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_23_reg <= ByteSub_ShiftRow_0_23;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_23_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %24 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %23, i32 %22*/
		ByteSub_ShiftRow_0_24 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_23) + (4 * ByteSub_ShiftRow_0_22)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %24 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %23, i32 %22*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_24_reg <= ByteSub_ShiftRow_0_24;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_25 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		ByteSub_ShiftRow_0_25_reg <= ByteSub_ShiftRow_0_25;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_26_reg <= ByteSub_ShiftRow_0_26;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_26_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %27 = and i32 %26, 15*/
		ByteSub_ShiftRow_0_27 = (ByteSub_ShiftRow_0_26 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %27 = and i32 %26, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_27_reg <= ByteSub_ShiftRow_0_27;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %28 = ashr i32 %26, 4*/
		ByteSub_ShiftRow_0_28 = ($signed(ByteSub_ShiftRow_0_26) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %28 = ashr i32 %26, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_28_reg <= ByteSub_ShiftRow_0_28;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %29 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %28, i32 %27*/
		ByteSub_ShiftRow_0_29 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_28) + (4 * ByteSub_ShiftRow_0_27)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %29 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %28, i32 %27*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		ByteSub_ShiftRow_0_29_reg <= ByteSub_ShiftRow_0_29;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_29_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_30 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		ByteSub_ShiftRow_0_30_reg <= ByteSub_ShiftRow_0_30;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_31 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_31_reg <= ByteSub_ShiftRow_0_31;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %32 = and i32 %31, 15*/
		ByteSub_ShiftRow_0_32 = (ByteSub_ShiftRow_0_31 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %32 = and i32 %31, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_32_reg <= ByteSub_ShiftRow_0_32;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_32_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %33 = ashr i32 %31, 4*/
		ByteSub_ShiftRow_0_33 = ($signed(ByteSub_ShiftRow_0_31) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %33 = ashr i32 %31, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_33_reg <= ByteSub_ShiftRow_0_33;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %34 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %33, i32 %32*/
		ByteSub_ShiftRow_0_34 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_33) + (4 * ByteSub_ShiftRow_0_32)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %34 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %33, i32 %32*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_34_reg <= ByteSub_ShiftRow_0_34;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_35 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		ByteSub_ShiftRow_0_35_reg <= ByteSub_ShiftRow_0_35;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_35_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_36 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_36_reg <= ByteSub_ShiftRow_0_36;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %37 = and i32 %36, 15*/
		ByteSub_ShiftRow_0_37 = (ByteSub_ShiftRow_0_36 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %37 = and i32 %36, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_37_reg <= ByteSub_ShiftRow_0_37;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %38 = ashr i32 %36, 4*/
		ByteSub_ShiftRow_0_38 = ($signed(ByteSub_ShiftRow_0_36) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %38 = ashr i32 %36, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_38_reg <= ByteSub_ShiftRow_0_38;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_38_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %39 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %38, i32 %37*/
		ByteSub_ShiftRow_0_39 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_38) + (4 * ByteSub_ShiftRow_0_37)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %39 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %38, i32 %37*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		ByteSub_ShiftRow_0_39_reg <= ByteSub_ShiftRow_0_39;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_40 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		ByteSub_ShiftRow_0_40_reg <= ByteSub_ShiftRow_0_40;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_40_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_41_reg <= ByteSub_ShiftRow_0_41;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_41_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %42 = and i32 %41, 15*/
		ByteSub_ShiftRow_0_42 = (ByteSub_ShiftRow_0_41 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %42 = and i32 %41, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_42_reg <= ByteSub_ShiftRow_0_42;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_42_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %43 = ashr i32 %41, 4*/
		ByteSub_ShiftRow_0_43 = ($signed(ByteSub_ShiftRow_0_41) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %43 = ashr i32 %41, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_43_reg <= ByteSub_ShiftRow_0_43;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_43_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %44 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %43, i32 %42*/
		ByteSub_ShiftRow_0_44 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_43) + (4 * ByteSub_ShiftRow_0_42)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %44 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %43, i32 %42*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_44_reg <= ByteSub_ShiftRow_0_44;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_44_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_45 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		ByteSub_ShiftRow_0_45_reg <= ByteSub_ShiftRow_0_45;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_45_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_46 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_46_reg <= ByteSub_ShiftRow_0_46;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_46_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %47 = and i32 %46, 15*/
		ByteSub_ShiftRow_0_47 = (ByteSub_ShiftRow_0_46 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %47 = and i32 %46, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_47_reg <= ByteSub_ShiftRow_0_47;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_47_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %48 = ashr i32 %46, 4*/
		ByteSub_ShiftRow_0_48 = ($signed(ByteSub_ShiftRow_0_46) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %48 = ashr i32 %46, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_48_reg <= ByteSub_ShiftRow_0_48;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_48_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %49 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %48, i32 %47*/
		ByteSub_ShiftRow_0_49 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_48) + (4 * ByteSub_ShiftRow_0_47)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %49 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %48, i32 %47*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		ByteSub_ShiftRow_0_49_reg <= ByteSub_ShiftRow_0_49;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_49_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		ByteSub_ShiftRow_0_50_reg <= ByteSub_ShiftRow_0_50;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_50_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_51 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_51_reg <= ByteSub_ShiftRow_0_51;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_51_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %52 = and i32 %51, 15*/
		ByteSub_ShiftRow_0_52 = (ByteSub_ShiftRow_0_51 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %52 = and i32 %51, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_52_reg <= ByteSub_ShiftRow_0_52;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_52_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %53 = ashr i32 %51, 4*/
		ByteSub_ShiftRow_0_53 = ($signed(ByteSub_ShiftRow_0_51) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %53 = ashr i32 %51, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_53_reg <= ByteSub_ShiftRow_0_53;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_53_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %54 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %53, i32 %52*/
		ByteSub_ShiftRow_0_54 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_53) + (4 * ByteSub_ShiftRow_0_52)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %54 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %53, i32 %52*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_54_reg <= ByteSub_ShiftRow_0_54;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_54_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_55 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		ByteSub_ShiftRow_0_55_reg <= ByteSub_ShiftRow_0_55;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_55_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_56_reg <= ByteSub_ShiftRow_0_56;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_56_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %57 = and i32 %56, 15*/
		ByteSub_ShiftRow_0_57 = (ByteSub_ShiftRow_0_56 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %57 = and i32 %56, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_57_reg <= ByteSub_ShiftRow_0_57;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_57_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %58 = ashr i32 %56, 4*/
		ByteSub_ShiftRow_0_58 = ($signed(ByteSub_ShiftRow_0_56) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %58 = ashr i32 %56, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_58_reg <= ByteSub_ShiftRow_0_58;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_58_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %59 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %58, i32 %57*/
		ByteSub_ShiftRow_0_59 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_58) + (4 * ByteSub_ShiftRow_0_57)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %59 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %58, i32 %57*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		ByteSub_ShiftRow_0_59_reg <= ByteSub_ShiftRow_0_59;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_59_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_60 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		ByteSub_ShiftRow_0_60_reg <= ByteSub_ShiftRow_0_60;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_60_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_61 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_61_reg <= ByteSub_ShiftRow_0_61;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_61_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %62 = and i32 %61, 15*/
		ByteSub_ShiftRow_0_62 = (ByteSub_ShiftRow_0_61 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %62 = and i32 %61, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_62_reg <= ByteSub_ShiftRow_0_62;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_62_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %63 = ashr i32 %61, 4*/
		ByteSub_ShiftRow_0_63 = ($signed(ByteSub_ShiftRow_0_61) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %63 = ashr i32 %61, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_63_reg <= ByteSub_ShiftRow_0_63;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_63_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %64 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %63, i32 %62*/
		ByteSub_ShiftRow_0_64 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_63) + (4 * ByteSub_ShiftRow_0_62)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %64 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %63, i32 %62*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_64_reg <= ByteSub_ShiftRow_0_64;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_64_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_65 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		ByteSub_ShiftRow_0_65_reg <= ByteSub_ShiftRow_0_65;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_65_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_66 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_66_reg <= ByteSub_ShiftRow_0_66;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_66_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %67 = and i32 %66, 15*/
		ByteSub_ShiftRow_0_67 = (ByteSub_ShiftRow_0_66 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %67 = and i32 %66, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_67_reg <= ByteSub_ShiftRow_0_67;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_67_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %68 = ashr i32 %66, 4*/
		ByteSub_ShiftRow_0_68 = ($signed(ByteSub_ShiftRow_0_66) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %68 = ashr i32 %66, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_68_reg <= ByteSub_ShiftRow_0_68;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_68_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %69 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %68, i32 %67*/
		ByteSub_ShiftRow_0_69 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_68) + (4 * ByteSub_ShiftRow_0_67)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %69 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %68, i32 %67*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		ByteSub_ShiftRow_0_69_reg <= ByteSub_ShiftRow_0_69;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_69_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_70 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		ByteSub_ShiftRow_0_70_reg <= ByteSub_ShiftRow_0_70;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_70_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_71_reg <= ByteSub_ShiftRow_0_71;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_71_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %72 = and i32 %71, 15*/
		ByteSub_ShiftRow_0_72 = (ByteSub_ShiftRow_0_71 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %72 = and i32 %71, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_72_reg <= ByteSub_ShiftRow_0_72;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_72_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %73 = ashr i32 %71, 4*/
		ByteSub_ShiftRow_0_73 = ($signed(ByteSub_ShiftRow_0_71) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %73 = ashr i32 %71, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_73_reg <= ByteSub_ShiftRow_0_73;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_73_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %74 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %73, i32 %72*/
		ByteSub_ShiftRow_0_74 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_73) + (4 * ByteSub_ShiftRow_0_72)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %74 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %73, i32 %72*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_74_reg <= ByteSub_ShiftRow_0_74;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_74_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_75 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		ByteSub_ShiftRow_0_75_reg <= ByteSub_ShiftRow_0_75;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_75_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_76_reg <= ByteSub_ShiftRow_0_76;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_76_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %77 = and i32 %76, 15*/
		ByteSub_ShiftRow_0_77 = (ByteSub_ShiftRow_0_76 & 32'd15);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %77 = and i32 %76, 15*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_77_reg <= ByteSub_ShiftRow_0_77;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_77_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %78 = ashr i32 %76, 4*/
		ByteSub_ShiftRow_0_78 = ($signed(ByteSub_ShiftRow_0_76) >>> 32'd4);
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %78 = ashr i32 %76, 4*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_78_reg <= ByteSub_ShiftRow_0_78;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_78_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %79 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %78, i32 %77*/
		ByteSub_ShiftRow_0_79 = (`TAG_g_Sbox_a | ((64 * ByteSub_ShiftRow_0_78) + (4 * ByteSub_ShiftRow_0_77)));
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %79 = getelementptr inbounds [16 x [16 x i32]]* @Sbox, i32 0, i32 %78, i32 %77*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		ByteSub_ShiftRow_0_79_reg <= ByteSub_ShiftRow_0_79;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_79_reg"); $finish; end
	end
end
always @(*) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
		ByteSub_ShiftRow_0_80 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		ByteSub_ShiftRow_0_80_reg <= ByteSub_ShiftRow_0_80;
		if (start == 1'b0 && ^(ByteSub_ShiftRow_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_0_80_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* ByteSub_ShiftRow: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_25)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_4_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_14_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_24_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_34_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_44_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_54_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_64_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_address_a = ByteSub_ShiftRow_0_74_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_10_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_20_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_30_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_40_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_50_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_60_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_65_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_in_a = ByteSub_ShiftRow_0_75_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_9_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_19_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_29_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_39_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_49_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_59_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_69_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_address_b = ByteSub_ShiftRow_0_79_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_15_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_5_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_25_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_35_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_55_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_45_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_70_reg;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_in_b = ByteSub_ShiftRow_0_80_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* ByteSub_ShiftRow: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_ByteSub_ShiftRow_BB__0_24)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module InversShiftRow_ByteSub
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_2 = 5'd2;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_3 = 5'd3;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_4 = 5'd4;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_5 = 5'd5;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_6 = 5'd6;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_7 = 5'd7;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_8 = 5'd8;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_9 = 5'd9;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_10 = 5'd10;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_11 = 5'd11;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_12 = 5'd12;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_13 = 5'd13;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_14 = 5'd14;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_15 = 5'd15;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_16 = 5'd16;
parameter [4:0] LEGUP_F_InversShiftRow_ByteSub_BB__0_17 = 5'd17;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] InversShiftRow_ByteSub_0_1;
reg [31:0] InversShiftRow_ByteSub_0_1_reg;
reg [31:0] InversShiftRow_ByteSub_0_2;
reg [31:0] InversShiftRow_ByteSub_0_2_reg;
reg [31:0] InversShiftRow_ByteSub_0_3;
reg [31:0] InversShiftRow_ByteSub_0_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_4_reg;
reg [31:0] InversShiftRow_ByteSub_0_5;
reg [31:0] InversShiftRow_ByteSub_0_5_reg;
reg [31:0] InversShiftRow_ByteSub_0_6;
reg [31:0] InversShiftRow_ByteSub_0_6_reg;
reg [31:0] InversShiftRow_ByteSub_0_7;
reg [31:0] InversShiftRow_ByteSub_0_7_reg;
reg [31:0] InversShiftRow_ByteSub_0_8;
reg [31:0] InversShiftRow_ByteSub_0_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_9_reg;
reg [31:0] InversShiftRow_ByteSub_0_10;
reg [31:0] InversShiftRow_ByteSub_0_10_reg;
reg [31:0] InversShiftRow_ByteSub_0_11;
reg [31:0] InversShiftRow_ByteSub_0_11_reg;
reg [31:0] InversShiftRow_ByteSub_0_12;
reg [31:0] InversShiftRow_ByteSub_0_12_reg;
reg [31:0] InversShiftRow_ByteSub_0_13;
reg [31:0] InversShiftRow_ByteSub_0_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_14_reg;
reg [31:0] InversShiftRow_ByteSub_0_15;
reg [31:0] InversShiftRow_ByteSub_0_15_reg;
reg [31:0] InversShiftRow_ByteSub_0_16;
reg [31:0] InversShiftRow_ByteSub_0_16_reg;
reg [31:0] InversShiftRow_ByteSub_0_17;
reg [31:0] InversShiftRow_ByteSub_0_17_reg;
reg [31:0] InversShiftRow_ByteSub_0_18;
reg [31:0] InversShiftRow_ByteSub_0_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_19_reg;
reg [31:0] InversShiftRow_ByteSub_0_20;
reg [31:0] InversShiftRow_ByteSub_0_20_reg;
reg [31:0] InversShiftRow_ByteSub_0_21;
reg [31:0] InversShiftRow_ByteSub_0_21_reg;
reg [31:0] InversShiftRow_ByteSub_0_22;
reg [31:0] InversShiftRow_ByteSub_0_22_reg;
reg [31:0] InversShiftRow_ByteSub_0_23;
reg [31:0] InversShiftRow_ByteSub_0_23_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_24_reg;
reg [31:0] InversShiftRow_ByteSub_0_25;
reg [31:0] InversShiftRow_ByteSub_0_25_reg;
reg [31:0] InversShiftRow_ByteSub_0_26;
reg [31:0] InversShiftRow_ByteSub_0_26_reg;
reg [31:0] InversShiftRow_ByteSub_0_27;
reg [31:0] InversShiftRow_ByteSub_0_27_reg;
reg [31:0] InversShiftRow_ByteSub_0_28;
reg [31:0] InversShiftRow_ByteSub_0_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_29_reg;
reg [31:0] InversShiftRow_ByteSub_0_30;
reg [31:0] InversShiftRow_ByteSub_0_30_reg;
reg [31:0] InversShiftRow_ByteSub_0_31;
reg [31:0] InversShiftRow_ByteSub_0_31_reg;
reg [31:0] InversShiftRow_ByteSub_0_32;
reg [31:0] InversShiftRow_ByteSub_0_32_reg;
reg [31:0] InversShiftRow_ByteSub_0_33;
reg [31:0] InversShiftRow_ByteSub_0_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_34_reg;
reg [31:0] InversShiftRow_ByteSub_0_35;
reg [31:0] InversShiftRow_ByteSub_0_35_reg;
reg [31:0] InversShiftRow_ByteSub_0_36;
reg [31:0] InversShiftRow_ByteSub_0_36_reg;
reg [31:0] InversShiftRow_ByteSub_0_37;
reg [31:0] InversShiftRow_ByteSub_0_37_reg;
reg [31:0] InversShiftRow_ByteSub_0_38;
reg [31:0] InversShiftRow_ByteSub_0_38_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_39;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_39_reg;
reg [31:0] InversShiftRow_ByteSub_0_40;
reg [31:0] InversShiftRow_ByteSub_0_40_reg;
reg [31:0] InversShiftRow_ByteSub_0_41;
reg [31:0] InversShiftRow_ByteSub_0_41_reg;
reg [31:0] InversShiftRow_ByteSub_0_42;
reg [31:0] InversShiftRow_ByteSub_0_42_reg;
reg [31:0] InversShiftRow_ByteSub_0_43;
reg [31:0] InversShiftRow_ByteSub_0_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_44_reg;
reg [31:0] InversShiftRow_ByteSub_0_45;
reg [31:0] InversShiftRow_ByteSub_0_45_reg;
reg [31:0] InversShiftRow_ByteSub_0_46;
reg [31:0] InversShiftRow_ByteSub_0_46_reg;
reg [31:0] InversShiftRow_ByteSub_0_47;
reg [31:0] InversShiftRow_ByteSub_0_47_reg;
reg [31:0] InversShiftRow_ByteSub_0_48;
reg [31:0] InversShiftRow_ByteSub_0_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_49_reg;
reg [31:0] InversShiftRow_ByteSub_0_50;
reg [31:0] InversShiftRow_ByteSub_0_50_reg;
reg [31:0] InversShiftRow_ByteSub_0_51;
reg [31:0] InversShiftRow_ByteSub_0_51_reg;
reg [31:0] InversShiftRow_ByteSub_0_52;
reg [31:0] InversShiftRow_ByteSub_0_52_reg;
reg [31:0] InversShiftRow_ByteSub_0_53;
reg [31:0] InversShiftRow_ByteSub_0_53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_54_reg;
reg [31:0] InversShiftRow_ByteSub_0_55;
reg [31:0] InversShiftRow_ByteSub_0_55_reg;
reg [31:0] InversShiftRow_ByteSub_0_56;
reg [31:0] InversShiftRow_ByteSub_0_56_reg;
reg [31:0] InversShiftRow_ByteSub_0_57;
reg [31:0] InversShiftRow_ByteSub_0_57_reg;
reg [31:0] InversShiftRow_ByteSub_0_58;
reg [31:0] InversShiftRow_ByteSub_0_58_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_59_reg;
reg [31:0] InversShiftRow_ByteSub_0_60;
reg [31:0] InversShiftRow_ByteSub_0_60_reg;
reg [31:0] InversShiftRow_ByteSub_0_61;
reg [31:0] InversShiftRow_ByteSub_0_61_reg;
reg [31:0] InversShiftRow_ByteSub_0_62;
reg [31:0] InversShiftRow_ByteSub_0_62_reg;
reg [31:0] InversShiftRow_ByteSub_0_63;
reg [31:0] InversShiftRow_ByteSub_0_63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_64_reg;
reg [31:0] InversShiftRow_ByteSub_0_65;
reg [31:0] InversShiftRow_ByteSub_0_65_reg;
reg [31:0] InversShiftRow_ByteSub_0_66;
reg [31:0] InversShiftRow_ByteSub_0_66_reg;
reg [31:0] InversShiftRow_ByteSub_0_67;
reg [31:0] InversShiftRow_ByteSub_0_67_reg;
reg [31:0] InversShiftRow_ByteSub_0_68;
reg [31:0] InversShiftRow_ByteSub_0_68_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_69_reg;
reg [31:0] InversShiftRow_ByteSub_0_70;
reg [31:0] InversShiftRow_ByteSub_0_70_reg;
reg [31:0] InversShiftRow_ByteSub_0_71;
reg [31:0] InversShiftRow_ByteSub_0_71_reg;
reg [31:0] InversShiftRow_ByteSub_0_72;
reg [31:0] InversShiftRow_ByteSub_0_72_reg;
reg [31:0] InversShiftRow_ByteSub_0_73;
reg [31:0] InversShiftRow_ByteSub_0_73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_74_reg;
reg [31:0] InversShiftRow_ByteSub_0_75;
reg [31:0] InversShiftRow_ByteSub_0_75_reg;
reg [31:0] InversShiftRow_ByteSub_0_76;
reg [31:0] InversShiftRow_ByteSub_0_76_reg;
reg [31:0] InversShiftRow_ByteSub_0_77;
reg [31:0] InversShiftRow_ByteSub_0_77_reg;
reg [31:0] InversShiftRow_ByteSub_0_78;
reg [31:0] InversShiftRow_ByteSub_0_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_0_79_reg;
reg [31:0] InversShiftRow_ByteSub_0_80;
reg [31:0] InversShiftRow_ByteSub_0_80_reg;
wire [3:0] encryptout_enc_statemt_address_a;
wire  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
wire [3:0] decryptout_dec_statemt_address_a;
wire  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [4:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [4:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
reg [7:0] invSbox_address_a;
reg  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
reg [7:0] invSbox_address_b;
reg  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
wire [4:0] main_0_retii_address_a;
wire  main_0_retii_write_enable_a;
wire [31:0] main_0_retii_in_a;
wire [31:0] main_0_retii_out_a;
wire [4:0] main_0_retii_address_b;
wire  main_0_retii_write_enable_b;
wire [31:0] main_0_retii_in_b;
wire [31:0] main_0_retii_out_b;

// Local Rams


// @invSbox = internal unnamed_addr constant [16 x [16 x i32]] [[16 x i32] [i32 82, i32 9, i32 106, i32 213, i32 48, i32 54, i32 165, i32 56, i32 191, i32 64, i32 163, i32 158, i32 129, i32 243, i32 215,...
rom_dual_port invSbox (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( invSbox_address_a ),
	.address_b( invSbox_address_b ),
	.q_a( invSbox_out_a ),
	.q_b( invSbox_out_b)
);
defparam invSbox.width_a = 32;
defparam invSbox.width_b = 32;
defparam invSbox.widthad_a = 8;
defparam invSbox.widthad_b = 8;
defparam invSbox.numwords_a = 256;
defparam invSbox.numwords_b = 256;
defparam invSbox.latency = 1;
defparam invSbox.init_file = "invSbox.mif";


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_1;
LEGUP_F_InversShiftRow_ByteSub_BB__0_1:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_2;
LEGUP_F_InversShiftRow_ByteSub_BB__0_10:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_11;
LEGUP_F_InversShiftRow_ByteSub_BB__0_11:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_12;
LEGUP_F_InversShiftRow_ByteSub_BB__0_12:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_13;
LEGUP_F_InversShiftRow_ByteSub_BB__0_13:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_14;
LEGUP_F_InversShiftRow_ByteSub_BB__0_14:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_15;
LEGUP_F_InversShiftRow_ByteSub_BB__0_15:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_16;
LEGUP_F_InversShiftRow_ByteSub_BB__0_16:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_17;
LEGUP_F_InversShiftRow_ByteSub_BB__0_17:
		next_state = LEGUP_0;
LEGUP_F_InversShiftRow_ByteSub_BB__0_2:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_3;
LEGUP_F_InversShiftRow_ByteSub_BB__0_3:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_4;
LEGUP_F_InversShiftRow_ByteSub_BB__0_4:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_5;
LEGUP_F_InversShiftRow_ByteSub_BB__0_5:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_6;
LEGUP_F_InversShiftRow_ByteSub_BB__0_6:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_7;
LEGUP_F_InversShiftRow_ByteSub_BB__0_7:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_8;
LEGUP_F_InversShiftRow_ByteSub_BB__0_8:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_9;
LEGUP_F_InversShiftRow_ByteSub_BB__0_9:
		next_state = LEGUP_F_InversShiftRow_ByteSub_BB__0_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_1 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_1_reg <= InversShiftRow_ByteSub_0_1;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_1_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %2 = and i32 %1, 15*/
		InversShiftRow_ByteSub_0_2 = (InversShiftRow_ByteSub_0_1 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %2 = and i32 %1, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_2_reg <= InversShiftRow_ByteSub_0_2;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_2_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %3 = ashr i32 %1, 4*/
		InversShiftRow_ByteSub_0_3 = ($signed(InversShiftRow_ByteSub_0_1) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %3 = ashr i32 %1, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_3_reg <= InversShiftRow_ByteSub_0_3;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_3_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %4 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %3, i32 %2*/
		InversShiftRow_ByteSub_0_4 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_3) + (4 * InversShiftRow_ByteSub_0_2)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %4 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %3, i32 %2*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_4_reg <= InversShiftRow_ByteSub_0_4;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_4_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_5 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_5_reg <= InversShiftRow_ByteSub_0_5;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_5_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_6_reg <= InversShiftRow_ByteSub_0_6;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_6_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %7 = and i32 %6, 15*/
		InversShiftRow_ByteSub_0_7 = (InversShiftRow_ByteSub_0_6 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %7 = and i32 %6, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_7_reg <= InversShiftRow_ByteSub_0_7;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_7_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %8 = ashr i32 %6, 4*/
		InversShiftRow_ByteSub_0_8 = ($signed(InversShiftRow_ByteSub_0_6) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %8 = ashr i32 %6, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_8_reg <= InversShiftRow_ByteSub_0_8;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_8_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %9 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %8, i32 %7*/
		InversShiftRow_ByteSub_0_9 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_8) + (4 * InversShiftRow_ByteSub_0_7)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %9 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %8, i32 %7*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		InversShiftRow_ByteSub_0_9_reg <= InversShiftRow_ByteSub_0_9;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_9_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_10 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_10_reg <= InversShiftRow_ByteSub_0_10;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_10_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_11_reg <= InversShiftRow_ByteSub_0_11;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_11_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %12 = and i32 %11, 15*/
		InversShiftRow_ByteSub_0_12 = (InversShiftRow_ByteSub_0_11 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %12 = and i32 %11, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_12_reg <= InversShiftRow_ByteSub_0_12;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_12_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %13 = ashr i32 %11, 4*/
		InversShiftRow_ByteSub_0_13 = ($signed(InversShiftRow_ByteSub_0_11) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %13 = ashr i32 %11, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_13_reg <= InversShiftRow_ByteSub_0_13;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_13_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %14 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %13, i32 %12*/
		InversShiftRow_ByteSub_0_14 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_13) + (4 * InversShiftRow_ByteSub_0_12)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %14 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %13, i32 %12*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_14_reg <= InversShiftRow_ByteSub_0_14;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_14_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_15 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_15_reg <= InversShiftRow_ByteSub_0_15;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_15_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_16 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_16_reg <= InversShiftRow_ByteSub_0_16;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_16_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %17 = and i32 %16, 15*/
		InversShiftRow_ByteSub_0_17 = (InversShiftRow_ByteSub_0_16 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %17 = and i32 %16, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_17_reg <= InversShiftRow_ByteSub_0_17;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_17_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %18 = ashr i32 %16, 4*/
		InversShiftRow_ByteSub_0_18 = ($signed(InversShiftRow_ByteSub_0_16) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %18 = ashr i32 %16, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_18_reg <= InversShiftRow_ByteSub_0_18;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_18_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %19 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %18, i32 %17*/
		InversShiftRow_ByteSub_0_19 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_18) + (4 * InversShiftRow_ByteSub_0_17)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %19 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %18, i32 %17*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		InversShiftRow_ByteSub_0_19_reg <= InversShiftRow_ByteSub_0_19;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_19_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_20 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_20_reg <= InversShiftRow_ByteSub_0_20;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_20_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_21 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_21_reg <= InversShiftRow_ByteSub_0_21;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_21_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %22 = and i32 %21, 15*/
		InversShiftRow_ByteSub_0_22 = (InversShiftRow_ByteSub_0_21 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %22 = and i32 %21, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_22_reg <= InversShiftRow_ByteSub_0_22;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_22_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %23 = ashr i32 %21, 4*/
		InversShiftRow_ByteSub_0_23 = ($signed(InversShiftRow_ByteSub_0_21) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %23 = ashr i32 %21, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_23_reg <= InversShiftRow_ByteSub_0_23;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_23_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %24 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %23, i32 %22*/
		InversShiftRow_ByteSub_0_24 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_23) + (4 * InversShiftRow_ByteSub_0_22)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %24 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %23, i32 %22*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_24_reg <= InversShiftRow_ByteSub_0_24;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_24_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_25 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_25_reg <= InversShiftRow_ByteSub_0_25;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_25_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_26_reg <= InversShiftRow_ByteSub_0_26;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_26_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %27 = and i32 %26, 15*/
		InversShiftRow_ByteSub_0_27 = (InversShiftRow_ByteSub_0_26 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %27 = and i32 %26, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_27_reg <= InversShiftRow_ByteSub_0_27;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_27_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %28 = ashr i32 %26, 4*/
		InversShiftRow_ByteSub_0_28 = ($signed(InversShiftRow_ByteSub_0_26) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %28 = ashr i32 %26, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_28_reg <= InversShiftRow_ByteSub_0_28;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_28_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %29 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %28, i32 %27*/
		InversShiftRow_ByteSub_0_29 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_28) + (4 * InversShiftRow_ByteSub_0_27)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %29 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %28, i32 %27*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		InversShiftRow_ByteSub_0_29_reg <= InversShiftRow_ByteSub_0_29;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_29_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_30 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_30_reg <= InversShiftRow_ByteSub_0_30;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_30_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_31 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_31_reg <= InversShiftRow_ByteSub_0_31;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_31_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %32 = and i32 %31, 15*/
		InversShiftRow_ByteSub_0_32 = (InversShiftRow_ByteSub_0_31 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %32 = and i32 %31, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_32_reg <= InversShiftRow_ByteSub_0_32;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_32_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %33 = ashr i32 %31, 4*/
		InversShiftRow_ByteSub_0_33 = ($signed(InversShiftRow_ByteSub_0_31) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %33 = ashr i32 %31, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_33_reg <= InversShiftRow_ByteSub_0_33;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_33_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %34 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %33, i32 %32*/
		InversShiftRow_ByteSub_0_34 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_33) + (4 * InversShiftRow_ByteSub_0_32)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %34 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %33, i32 %32*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_34_reg <= InversShiftRow_ByteSub_0_34;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_34_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_35 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_35_reg <= InversShiftRow_ByteSub_0_35;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_35_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_36 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_36_reg <= InversShiftRow_ByteSub_0_36;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_36_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %37 = and i32 %36, 15*/
		InversShiftRow_ByteSub_0_37 = (InversShiftRow_ByteSub_0_36 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %37 = and i32 %36, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_37_reg <= InversShiftRow_ByteSub_0_37;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_37_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %38 = ashr i32 %36, 4*/
		InversShiftRow_ByteSub_0_38 = ($signed(InversShiftRow_ByteSub_0_36) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %38 = ashr i32 %36, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_38_reg <= InversShiftRow_ByteSub_0_38;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_38_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %39 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %38, i32 %37*/
		InversShiftRow_ByteSub_0_39 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_38) + (4 * InversShiftRow_ByteSub_0_37)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %39 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %38, i32 %37*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		InversShiftRow_ByteSub_0_39_reg <= InversShiftRow_ByteSub_0_39;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_39_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_40 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_40_reg <= InversShiftRow_ByteSub_0_40;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_40_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_41 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_41_reg <= InversShiftRow_ByteSub_0_41;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_41_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %42 = and i32 %41, 15*/
		InversShiftRow_ByteSub_0_42 = (InversShiftRow_ByteSub_0_41 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %42 = and i32 %41, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_42_reg <= InversShiftRow_ByteSub_0_42;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_42_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %43 = ashr i32 %41, 4*/
		InversShiftRow_ByteSub_0_43 = ($signed(InversShiftRow_ByteSub_0_41) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %43 = ashr i32 %41, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_43_reg <= InversShiftRow_ByteSub_0_43;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_43_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %44 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %43, i32 %42*/
		InversShiftRow_ByteSub_0_44 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_43) + (4 * InversShiftRow_ByteSub_0_42)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %44 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %43, i32 %42*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_44_reg <= InversShiftRow_ByteSub_0_44;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_44_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_45 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_45_reg <= InversShiftRow_ByteSub_0_45;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_45_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_46 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_46_reg <= InversShiftRow_ByteSub_0_46;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_46_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %47 = and i32 %46, 15*/
		InversShiftRow_ByteSub_0_47 = (InversShiftRow_ByteSub_0_46 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %47 = and i32 %46, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_47_reg <= InversShiftRow_ByteSub_0_47;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_47_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %48 = ashr i32 %46, 4*/
		InversShiftRow_ByteSub_0_48 = ($signed(InversShiftRow_ByteSub_0_46) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %48 = ashr i32 %46, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_48_reg <= InversShiftRow_ByteSub_0_48;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_48_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %49 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %48, i32 %47*/
		InversShiftRow_ByteSub_0_49 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_48) + (4 * InversShiftRow_ByteSub_0_47)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %49 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %48, i32 %47*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		InversShiftRow_ByteSub_0_49_reg <= InversShiftRow_ByteSub_0_49;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_49_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_50 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_50_reg <= InversShiftRow_ByteSub_0_50;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_50_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_51 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_51_reg <= InversShiftRow_ByteSub_0_51;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_51_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %52 = and i32 %51, 15*/
		InversShiftRow_ByteSub_0_52 = (InversShiftRow_ByteSub_0_51 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %52 = and i32 %51, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_52_reg <= InversShiftRow_ByteSub_0_52;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_52_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %53 = ashr i32 %51, 4*/
		InversShiftRow_ByteSub_0_53 = ($signed(InversShiftRow_ByteSub_0_51) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %53 = ashr i32 %51, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_53_reg <= InversShiftRow_ByteSub_0_53;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_53_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %54 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %53, i32 %52*/
		InversShiftRow_ByteSub_0_54 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_53) + (4 * InversShiftRow_ByteSub_0_52)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %54 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %53, i32 %52*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_54_reg <= InversShiftRow_ByteSub_0_54;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_54_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_55 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_55_reg <= InversShiftRow_ByteSub_0_55;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_55_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_56 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_56_reg <= InversShiftRow_ByteSub_0_56;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_56_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %57 = and i32 %56, 15*/
		InversShiftRow_ByteSub_0_57 = (InversShiftRow_ByteSub_0_56 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %57 = and i32 %56, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_57_reg <= InversShiftRow_ByteSub_0_57;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_57_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %58 = ashr i32 %56, 4*/
		InversShiftRow_ByteSub_0_58 = ($signed(InversShiftRow_ByteSub_0_56) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %58 = ashr i32 %56, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_58_reg <= InversShiftRow_ByteSub_0_58;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_58_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %59 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %58, i32 %57*/
		InversShiftRow_ByteSub_0_59 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_58) + (4 * InversShiftRow_ByteSub_0_57)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %59 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %58, i32 %57*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		InversShiftRow_ByteSub_0_59_reg <= InversShiftRow_ByteSub_0_59;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_59_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_60 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_60_reg <= InversShiftRow_ByteSub_0_60;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_60_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_61 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_61_reg <= InversShiftRow_ByteSub_0_61;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_61_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %62 = and i32 %61, 15*/
		InversShiftRow_ByteSub_0_62 = (InversShiftRow_ByteSub_0_61 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %62 = and i32 %61, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_62_reg <= InversShiftRow_ByteSub_0_62;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_62_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %63 = ashr i32 %61, 4*/
		InversShiftRow_ByteSub_0_63 = ($signed(InversShiftRow_ByteSub_0_61) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %63 = ashr i32 %61, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_63_reg <= InversShiftRow_ByteSub_0_63;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_63_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %64 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %63, i32 %62*/
		InversShiftRow_ByteSub_0_64 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_63) + (4 * InversShiftRow_ByteSub_0_62)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %64 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %63, i32 %62*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_64_reg <= InversShiftRow_ByteSub_0_64;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_64_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_65 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_65_reg <= InversShiftRow_ByteSub_0_65;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_65_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_66 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_66_reg <= InversShiftRow_ByteSub_0_66;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_66_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %67 = and i32 %66, 15*/
		InversShiftRow_ByteSub_0_67 = (InversShiftRow_ByteSub_0_66 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %67 = and i32 %66, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_67_reg <= InversShiftRow_ByteSub_0_67;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_67_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %68 = ashr i32 %66, 4*/
		InversShiftRow_ByteSub_0_68 = ($signed(InversShiftRow_ByteSub_0_66) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %68 = ashr i32 %66, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_68_reg <= InversShiftRow_ByteSub_0_68;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_68_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %69 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %68, i32 %67*/
		InversShiftRow_ByteSub_0_69 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_68) + (4 * InversShiftRow_ByteSub_0_67)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %69 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %68, i32 %67*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		InversShiftRow_ByteSub_0_69_reg <= InversShiftRow_ByteSub_0_69;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_69_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_70 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_70_reg <= InversShiftRow_ByteSub_0_70;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_70_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_71 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_71_reg <= InversShiftRow_ByteSub_0_71;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_71_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %72 = and i32 %71, 15*/
		InversShiftRow_ByteSub_0_72 = (InversShiftRow_ByteSub_0_71 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %72 = and i32 %71, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_72_reg <= InversShiftRow_ByteSub_0_72;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_72_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %73 = ashr i32 %71, 4*/
		InversShiftRow_ByteSub_0_73 = ($signed(InversShiftRow_ByteSub_0_71) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %73 = ashr i32 %71, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_73_reg <= InversShiftRow_ByteSub_0_73;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_73_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %74 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %73, i32 %72*/
		InversShiftRow_ByteSub_0_74 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_73) + (4 * InversShiftRow_ByteSub_0_72)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %74 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %73, i32 %72*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_74_reg <= InversShiftRow_ByteSub_0_74;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_74_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_75 = invSbox_out_a;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		InversShiftRow_ByteSub_0_75_reg <= InversShiftRow_ByteSub_0_75;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_75_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_76 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_76_reg <= InversShiftRow_ByteSub_0_76;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_76_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %77 = and i32 %76, 15*/
		InversShiftRow_ByteSub_0_77 = (InversShiftRow_ByteSub_0_76 & 32'd15);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %77 = and i32 %76, 15*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_77_reg <= InversShiftRow_ByteSub_0_77;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_77_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %78 = ashr i32 %76, 4*/
		InversShiftRow_ByteSub_0_78 = ($signed(InversShiftRow_ByteSub_0_76) >>> 32'd4);
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %78 = ashr i32 %76, 4*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_78_reg <= InversShiftRow_ByteSub_0_78;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_78_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %79 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %78, i32 %77*/
		InversShiftRow_ByteSub_0_79 = (1'd0 | ((64 * InversShiftRow_ByteSub_0_78) + (4 * InversShiftRow_ByteSub_0_77)));
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %79 = getelementptr inbounds [16 x [16 x i32]]* @invSbox, i32 0, i32 %78, i32 %77*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		InversShiftRow_ByteSub_0_79_reg <= InversShiftRow_ByteSub_0_79;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_79_reg"); $finish; end
	end
end
always @(*) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
		InversShiftRow_ByteSub_0_80 = invSbox_out_b;
end
always @(posedge clk) begin
	/* InversShiftRow_ByteSub: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		InversShiftRow_ByteSub_0_80_reg <= InversShiftRow_ByteSub_0_80;
		if (start == 1'b0 && ^(InversShiftRow_ByteSub_0_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_0_80_reg"); $finish; end
	end
end
always @(*) begin
	invSbox_address_a = 1'd0;
	/* InversShiftRow_ByteSub: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_4 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_14 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_24 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_34 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_44 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_54 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_64 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		invSbox_address_a = (InversShiftRow_ByteSub_0_74 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_a = 1'd0;
	/* InversShiftRow_ByteSub: %0*/
	/*   %5 = load i32* %4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %15 = load i32* %14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %25 = load i32* %24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %35 = load i32* %34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %45 = load i32* %44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %55 = load i32* %54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %65 = load i32* %64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		invSbox_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %75 = load i32* %74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		invSbox_write_enable_a = 1'd0;
	end
end
always @(*) begin
	invSbox_address_b = 1'd0;
	/* InversShiftRow_ByteSub: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_9 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_19 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_29 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_39 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_49 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_59 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_69 >>> 3'd2);
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		invSbox_address_b = (InversShiftRow_ByteSub_0_79 >>> 3'd2);
	end
end
always @(*) begin
	invSbox_write_enable_b = 1'd0;
	/* InversShiftRow_ByteSub: %0*/
	/*   %10 = load i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %20 = load i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %30 = load i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %40 = load i32* %39, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %50 = load i32* %49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %60 = load i32* %59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %70 = load i32* %69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		invSbox_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %80 = load i32* %79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		invSbox_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_17)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_10_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_20_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_30_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_40_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_50_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_60_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_65_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_in_a = InversShiftRow_ByteSub_0_75_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %1 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %11 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %21 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %31 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %41 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %51 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %61 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %71 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %10, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %20, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %30, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %40, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %60, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %65, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %75, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd12));
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_15_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_5_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_25_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_35_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_55_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_45_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_70_reg;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_in_b = InversShiftRow_ByteSub_0_80_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %6 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %16 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %26 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %36 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %46 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %56 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %66 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   %76 = load i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %15, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %5, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %25, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %35, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %45, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %70, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* InversShiftRow_ByteSub: %0*/
	/*   store i32 %80, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_InversShiftRow_ByteSub_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__0_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__0_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__0_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__0_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__0_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__0_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__0_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__0_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__0_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__0_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__0_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__0_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__0_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__0_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__0_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__0_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__0_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__1_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__1_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__1_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__1_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__1_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__1_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__1_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexitipreheader_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB_lrph24ii_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__21_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__21_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__21_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__21_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__21_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__21_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__21_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB_lrphiipreheader_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB_lrphii_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB_lrphii_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB_lrphii_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB_lrphii_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB_lrphipreheader_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB_lrphi_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_lrphi_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_lrphi_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB__106_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__106_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__106_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__108_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB_preheaderipreheader_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB_preheaderi_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB_preheaderi_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB_preheaderi_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB_encryptexit_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB_encryptexit_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__119_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__119_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__119_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__119_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__119_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__119_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__119_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__119_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB_lrph10ipreheader_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB_lrph10ipreheader_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB_lrph24ii8_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB_lrph24ii8_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__140_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__140_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__140_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__140_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__140_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__140_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__140_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__140_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB_preheader17iipreheader_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB_preheader17ii_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__160_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__160_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__160_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__160_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__160_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__160_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__160_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__160_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__160_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__160_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__160_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__160_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__160_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__160_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__160_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__160_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__160_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__160_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__160_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__160_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__160_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__160_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__160_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__160_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__160_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__160_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__160_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__160_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__160_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__160_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__160_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__160_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__160_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__160_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__160_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__160_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__160_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__160_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__160_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__225_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB_lrphii26preheader_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB_lrphii26_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB_lrphii26_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB_lrphii26_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB_lrphii26_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__crit_edgeipreheader_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__crit_edgei_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB_AddRoundKeyexit3i30_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_lrphi35_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_lrphi35_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_lrphi35_152 = 8'd152;
parameter [7:0] LEGUP_F_main_BB__256_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__256_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB__256_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB__258_156 = 8'd156;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti32preheader_157 = 8'd157;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti32_158 = 8'd158;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti32_159 = 8'd159;
parameter [7:0] LEGUP_F_main_BB_preheaderloopexiti32_160 = 8'd160;
parameter [7:0] LEGUP_F_main_BB_decryptexit_161 = 8'd161;
parameter [7:0] LEGUP_F_main_BB__271_162 = 8'd162;
parameter [7:0] LEGUP_F_main_BB__273_163 = 8'd163;
parameter [7:0] LEGUP_F_main_BB__275_164 = 8'd164;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [7:0] LEGUP_function_call_18 = 8'd18;
parameter [7:0] LEGUP_function_call_28 = 8'd28;
parameter [7:0] LEGUP_function_call_44 = 8'd44;
parameter [7:0] LEGUP_function_call_68 = 8'd68;
parameter [7:0] LEGUP_function_call_79 = 8'd79;
parameter [7:0] LEGUP_function_call_139 = 8'd139;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_j01ii;
reg [31:0] main_1_j01ii_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep96;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep97;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep97_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep98;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep98_reg;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep99;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep99_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep100;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep100_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep101_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep102_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep103;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep103_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_15_reg;
reg [31:0] main_1_16;
reg [31:0] main_1_16_reg;
reg [31:0] main_1_17;
reg [31:0] main_1_17_reg;
reg [31:0] main_1_18;
reg [31:0] main_1_18_reg;
reg  main_1_exitcond95;
reg  main_1_exitcond95_reg;
reg [31:0] main_lrph24ii_indvar67;
reg [31:0] main_lrph24ii_indvar67_reg;
reg [31:0] main_lrph24ii_19;
reg [31:0] main_lrph24ii_19_reg;
reg [31:0] main_lrph24ii_20;
reg [31:0] main_lrph24ii_20_reg;
reg [31:0] main_21_j022ii;
reg [31:0] main_21_j022ii_reg;
reg [31:0] main_21_22;
reg [31:0] main_21_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep72;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep71_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep70_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep69;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep69_reg;
reg [31:0] main_21_23;
reg [31:0] main_21_23_reg;
reg [31:0] main_21_24;
reg [31:0] main_21_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep73_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep74_reg;
reg [31:0] main_21_25;
reg [31:0] main_21_25_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep75_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep76_reg;
reg [31:0] main_21_26;
reg [31:0] main_21_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep77;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep80;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_21_scevgep80_reg;
reg [31:0] main_21_27;
reg [31:0] main_21_27_reg;
reg [31:0] main_21_28;
reg [31:0] main_21_28_reg;
reg [31:0] main_21_maskii;
reg [31:0] main_21_maskii_reg;
reg  main_21_29;
reg  main_21_29_reg;
reg [31:0] main_21_30;
reg [31:0] main_21_30_reg;
reg [31:0] main_21_ii;
reg [31:0] main_21_ii_reg;
reg [31:0] main_21_31;
reg [31:0] main_21_31_reg;
reg [31:0] main_21_32;
reg [31:0] main_21_32_reg;
reg [31:0] main_21_33;
reg [31:0] main_21_33_reg;
reg [31:0] main_21_mask1ii;
reg [31:0] main_21_mask1ii_reg;
reg  main_21_34;
reg  main_21_34_reg;
reg [31:0] main_21_35;
reg [31:0] main_21_35_reg;
reg [31:0] main_21_sinkii;
reg [31:0] main_21_sinkii_reg;
reg [31:0] main_21_36;
reg [31:0] main_21_36_reg;
reg [31:0] main_21_37;
reg [31:0] main_21_37_reg;
reg [31:0] main_21_38;
reg [31:0] main_21_38_reg;
reg [31:0] main_21_39;
reg [31:0] main_21_39_reg;
reg [31:0] main_21_40;
reg [31:0] main_21_40_reg;
reg [31:0] main_21_41;
reg [31:0] main_21_41_reg;
reg [31:0] main_21_42;
reg [31:0] main_21_42_reg;
reg [31:0] main_21_mask2ii;
reg [31:0] main_21_mask2ii_reg;
reg  main_21_43;
reg  main_21_43_reg;
reg [31:0] main_21_44;
reg [31:0] main_21_44_reg;
reg [31:0] main_21_15ii;
reg [31:0] main_21_15ii_reg;
reg [31:0] main_21_45;
reg [31:0] main_21_45_reg;
reg [31:0] main_21_46;
reg [31:0] main_21_46_reg;
reg [31:0] main_21_mask3ii;
reg [31:0] main_21_mask3ii_reg;
reg  main_21_47;
reg  main_21_47_reg;
reg [31:0] main_21_48;
reg [31:0] main_21_48_reg;
reg [31:0] main_21_sink18ii;
reg [31:0] main_21_sink18ii_reg;
reg [31:0] main_21_49;
reg [31:0] main_21_49_reg;
reg [31:0] main_21_50;
reg [31:0] main_21_50_reg;
reg [31:0] main_21_51;
reg [31:0] main_21_51_reg;
reg [31:0] main_21_52;
reg [31:0] main_21_52_reg;
reg [31:0] main_21_53;
reg [31:0] main_21_53_reg;
reg [31:0] main_21_mask5ii;
reg [31:0] main_21_mask5ii_reg;
reg  main_21_54;
reg  main_21_54_reg;
reg [31:0] main_21_55;
reg [31:0] main_21_55_reg;
reg [31:0] main_21_16ii;
reg [31:0] main_21_16ii_reg;
reg [31:0] main_21_56;
reg [31:0] main_21_56_reg;
reg [31:0] main_21_57;
reg [31:0] main_21_57_reg;
reg [31:0] main_21_mask6ii;
reg [31:0] main_21_mask6ii_reg;
reg  main_21_58;
reg  main_21_58_reg;
reg [31:0] main_21_59;
reg [31:0] main_21_59_reg;
reg [31:0] main_21_sink19ii;
reg [31:0] main_21_sink19ii_reg;
reg [31:0] main_21_60;
reg [31:0] main_21_60_reg;
reg [31:0] main_21_61;
reg [31:0] main_21_61_reg;
reg [31:0] main_21_62;
reg [31:0] main_21_62_reg;
reg [31:0] main_21_63;
reg [31:0] main_21_63_reg;
reg [31:0] main_21_64;
reg [31:0] main_21_64_reg;
reg [31:0] main_21_mask8ii;
reg [31:0] main_21_mask8ii_reg;
reg  main_21_65;
reg  main_21_65_reg;
reg [31:0] main_21_66;
reg [31:0] main_21_66_reg;
reg [31:0] main_21_17ii;
reg [31:0] main_21_17ii_reg;
reg [31:0] main_21_67;
reg [31:0] main_21_67_reg;
reg [31:0] main_21_mask9ii;
reg [31:0] main_21_mask9ii_reg;
reg  main_21_68;
reg  main_21_68_reg;
reg [31:0] main_21_69;
reg [31:0] main_21_69_reg;
reg [31:0] main_21_sink20ii;
reg [31:0] main_21_sink20ii_reg;
reg [31:0] main_21_70;
reg [31:0] main_21_70_reg;
reg [31:0] main_21_71;
reg [31:0] main_21_71_reg;
reg [31:0] main_21_72;
reg [31:0] main_21_72_reg;
reg [31:0] main_21_73;
reg [31:0] main_21_73_reg;
reg [31:0] main_21_74;
reg [31:0] main_21_74_reg;
reg [31:0] main_21_75;
reg [31:0] main_21_75_reg;
reg  main_21_exitcond66;
reg  main_21_exitcond66_reg;
reg [31:0] main_lrphii_j121ii;
reg [31:0] main_lrphii_j121ii_reg;
reg [31:0] main_lrphii_76;
reg [31:0] main_lrphii_76_reg;
reg [31:0] main_lrphii_77;
reg [31:0] main_lrphii_77_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep82_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep83_reg;
reg [31:0] main_lrphii_78;
reg [31:0] main_lrphii_78_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep84_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep85_reg;
reg [31:0] main_lrphii_79;
reg [31:0] main_lrphii_79_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii_scevgep89_reg;
reg [31:0] main_lrphii_80;
reg [31:0] main_lrphii_80_reg;
reg [31:0] main_lrphii_81;
reg [31:0] main_lrphii_81_reg;
reg [31:0] main_lrphii_82;
reg [31:0] main_lrphii_82_reg;
reg [31:0] main_lrphii_83;
reg [31:0] main_lrphii_83_reg;
reg [31:0] main_lrphii_84;
reg [31:0] main_lrphii_84_reg;
reg  main_lrphii_exitcond81;
reg  main_lrphii_exitcond81_reg;
reg [31:0] main_MixColumn_AddRoundKeyexiti_indvarnext68;
reg [31:0] main_MixColumn_AddRoundKeyexiti_indvarnext68_reg;
reg  main_MixColumn_AddRoundKeyexiti_exitcond90;
reg  main_MixColumn_AddRoundKeyexiti_exitcond90_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j01i2i;
reg [31:0] main_AddRoundKeyexit_crit_edgei_j01i2i_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_85;
reg [31:0] main_AddRoundKeyexit_crit_edgei_85_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_86;
reg [31:0] main_AddRoundKeyexit_crit_edgei_86_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep58;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_87;
reg [31:0] main_AddRoundKeyexit_crit_edgei_87_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep59;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep59_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_88;
reg [31:0] main_AddRoundKeyexit_crit_edgei_88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep60_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep61;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep61_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_89;
reg [31:0] main_AddRoundKeyexit_crit_edgei_89_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep62;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep62_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep63_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep64;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep64_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep65;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_AddRoundKeyexit_crit_edgei_scevgep65_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_90;
reg [31:0] main_AddRoundKeyexit_crit_edgei_90_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_91;
reg [31:0] main_AddRoundKeyexit_crit_edgei_91_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_92;
reg [31:0] main_AddRoundKeyexit_crit_edgei_92_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_93;
reg [31:0] main_AddRoundKeyexit_crit_edgei_93_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_94;
reg [31:0] main_AddRoundKeyexit_crit_edgei_94_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_95;
reg [31:0] main_AddRoundKeyexit_crit_edgei_95_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_96;
reg [31:0] main_AddRoundKeyexit_crit_edgei_96_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_97;
reg [31:0] main_AddRoundKeyexit_crit_edgei_97_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_98;
reg [31:0] main_AddRoundKeyexit_crit_edgei_98_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_99;
reg [31:0] main_AddRoundKeyexit_crit_edgei_99_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_100;
reg [31:0] main_AddRoundKeyexit_crit_edgei_100_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_101;
reg [31:0] main_AddRoundKeyexit_crit_edgei_101_reg;
reg [31:0] main_AddRoundKeyexit_crit_edgei_102;
reg [31:0] main_AddRoundKeyexit_crit_edgei_102_reg;
reg  main_AddRoundKeyexit_crit_edgei_exitcond57;
reg  main_AddRoundKeyexit_crit_edgei_exitcond57_reg;
reg [31:0] main_lrphi_i17i;
reg [31:0] main_lrphi_i17i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi_scevgep56_reg;
reg [31:0] main_lrphi_104;
reg [31:0] main_lrphi_104_reg;
reg  main_lrphi_105;
reg  main_lrphi_105_reg;
reg [31:0] main_106_prei;
reg [31:0] main_106_prei_reg;
reg [31:0] main_108_109;
reg [31:0] main_108_109_reg;
reg [31:0] main_108_111;
reg [31:0] main_108_111_reg;
reg  main_108_exitcond55;
reg  main_108_exitcond55_reg;
reg [31:0] main_preheaderi_112;
reg [31:0] main_preheaderi_112_reg;
reg [31:0] main_preheaderi_i26i;
reg [31:0] main_preheaderi_i26i_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep53;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep53_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep54;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderi_scevgep54_reg;
reg [31:0] main_preheaderi_113;
reg [31:0] main_preheaderi_113_reg;
reg [31:0] main_preheaderi_114;
reg [31:0] main_preheaderi_114_reg;
reg  main_preheaderi_115;
reg  main_preheaderi_115_reg;
reg [31:0] main_preheaderi_116;
reg [31:0] main_preheaderi_116_reg;
reg [31:0] main_preheaderi_117;
reg [31:0] main_preheaderi_117_reg;
reg [31:0] main_preheaderi_118;
reg [31:0] main_preheaderi_118_reg;
reg  main_preheaderi_exitcond52;
reg  main_preheaderi_exitcond52_reg;
reg [31:0] main_119_j01ii2;
reg [31:0] main_119_j01ii2_reg;
reg [31:0] main_119_120;
reg [31:0] main_119_120_reg;
reg [31:0] main_119_121;
reg [31:0] main_119_121_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep43;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep43_reg;
reg [31:0] main_119_122;
reg [31:0] main_119_122_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep44_reg;
reg [31:0] main_119_123;
reg [31:0] main_119_123_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep45;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep45_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep46_reg;
reg [31:0] main_119_124;
reg [31:0] main_119_124_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep47;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep47_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep48;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep49;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep49_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep50;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_119_scevgep50_reg;
reg [31:0] main_119_125;
reg [31:0] main_119_125_reg;
reg [31:0] main_119_126;
reg [31:0] main_119_126_reg;
reg [31:0] main_119_127;
reg [31:0] main_119_127_reg;
reg [31:0] main_119_128;
reg [31:0] main_119_128_reg;
reg [31:0] main_119_129;
reg [31:0] main_119_129_reg;
reg [31:0] main_119_130;
reg [31:0] main_119_130_reg;
reg [31:0] main_119_131;
reg [31:0] main_119_131_reg;
reg [31:0] main_119_132;
reg [31:0] main_119_132_reg;
reg [31:0] main_119_133;
reg [31:0] main_119_133_reg;
reg [31:0] main_119_134;
reg [31:0] main_119_134_reg;
reg [31:0] main_119_135;
reg [31:0] main_119_135_reg;
reg [31:0] main_119_136;
reg [31:0] main_119_136_reg;
reg [31:0] main_119_137;
reg [31:0] main_119_137_reg;
reg  main_119_exitcond42;
reg  main_119_exitcond42_reg;
reg [31:0] main_lrph24ii8_indvar;
reg [31:0] main_lrph24ii8_indvar_reg;
reg [31:0] main_lrph24ii8_138;
reg [31:0] main_lrph24ii8_138_reg;
reg [31:0] main_lrph24ii8_139;
reg [31:0] main_lrph24ii8_139_reg;
reg [31:0] main_140_j022ii9;
reg [31:0] main_140_j022ii9_reg;
reg [31:0] main_140_141;
reg [31:0] main_140_141_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep18_reg;
reg [31:0] main_140_142;
reg [31:0] main_140_142_reg;
reg [31:0] main_140_143;
reg [31:0] main_140_143_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep14_reg;
reg [31:0] main_140_144;
reg [31:0] main_140_144_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep15_reg;
reg [31:0] main_140_145;
reg [31:0] main_140_145_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_140_scevgep17_reg;
reg [31:0] main_140_146;
reg [31:0] main_140_146_reg;
reg [31:0] main_140_147;
reg [31:0] main_140_147_reg;
reg [31:0] main_140_148;
reg [31:0] main_140_148_reg;
reg [31:0] main_140_149;
reg [31:0] main_140_149_reg;
reg [31:0] main_140_150;
reg [31:0] main_140_150_reg;
reg [31:0] main_140_151;
reg [31:0] main_140_151_reg;
reg [31:0] main_140_152;
reg [31:0] main_140_152_reg;
reg [31:0] main_140_153;
reg [31:0] main_140_153_reg;
reg [31:0] main_140_154;
reg [31:0] main_140_154_reg;
reg [31:0] main_140_155;
reg [31:0] main_140_155_reg;
reg [31:0] main_140_156;
reg [31:0] main_140_156_reg;
reg [31:0] main_140_157;
reg [31:0] main_140_157_reg;
reg [31:0] main_140_158;
reg [31:0] main_140_158_reg;
reg  main_140_exitcond13;
reg  main_140_exitcond13_reg;
reg [31:0] main_preheader17ii_j121ii10;
reg [31:0] main_preheader17ii_j121ii10_reg;
reg [31:0] main_preheader17ii_159;
reg [31:0] main_preheader17ii_159_reg;
reg [31:0] main_160_i020ii;
reg [31:0] main_160_i020ii_reg;
reg [31:0] main_160_161;
reg [31:0] main_160_161_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_scevgep24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_scevgep23_reg;
reg [31:0] main_160_162;
reg [31:0] main_160_162_reg;
reg [31:0] main_160_163;
reg [31:0] main_160_163_reg;
reg [31:0] main_160_164;
reg [31:0] main_160_164_reg;
reg [31:0] main_160_165;
reg [31:0] main_160_165_reg;
reg [31:0] main_160_166;
reg [31:0] main_160_166_reg;
reg [31:0] main_160_maskii13;
reg [31:0] main_160_maskii13_reg;
reg  main_160_167;
reg  main_160_167_reg;
reg [31:0] main_160_168;
reg [31:0] main_160_168_reg;
reg [31:0] main_160_ii14;
reg [31:0] main_160_ii14_reg;
reg [31:0] main_160_169;
reg [31:0] main_160_169_reg;
reg [31:0] main_160_170;
reg [31:0] main_160_170_reg;
reg [31:0] main_160_mask1ii15;
reg [31:0] main_160_mask1ii15_reg;
reg  main_160_171;
reg  main_160_171_reg;
reg [31:0] main_160_172;
reg [31:0] main_160_172_reg;
reg [31:0] main_160_x1ii;
reg [31:0] main_160_x1ii_reg;
reg [31:0] main_160_173;
reg [31:0] main_160_173_reg;
reg [31:0] main_160_174;
reg [31:0] main_160_174_reg;
reg [31:0] main_160_mask2ii16;
reg [31:0] main_160_mask2ii16_reg;
reg  main_160_175;
reg  main_160_175_reg;
reg [31:0] main_160_176;
reg [31:0] main_160_176_reg;
reg [31:0] main_160_12ii;
reg [31:0] main_160_12ii_reg;
reg [31:0] main_160_177;
reg [31:0] main_160_177_reg;
reg  main_160_178;
reg  main_160_178_reg;
reg [31:0] main_160_tmpii;
reg [31:0] main_160_tmpii_reg;
reg [31:0] main_160_179;
reg [31:0] main_160_179_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_180;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_180_reg;
reg [31:0] main_160_181;
reg [31:0] main_160_181_reg;
reg [31:0] main_160_182;
reg [31:0] main_160_182_reg;
reg [31:0] main_160_mask3ii17;
reg [31:0] main_160_mask3ii17_reg;
reg  main_160_183;
reg  main_160_183_reg;
reg [31:0] main_160_184;
reg [31:0] main_160_184_reg;
reg [31:0] main_160_x3ii;
reg [31:0] main_160_x3ii_reg;
reg [31:0] main_160_185;
reg [31:0] main_160_185_reg;
reg [31:0] main_160_mask4ii;
reg [31:0] main_160_mask4ii_reg;
reg  main_160_186;
reg  main_160_186_reg;
reg [31:0] main_160_187;
reg [31:0] main_160_187_reg;
reg [31:0] main_160_13ii;
reg [31:0] main_160_13ii_reg;
reg [31:0] main_160_188;
reg [31:0] main_160_188_reg;
reg [31:0] main_160_189;
reg [31:0] main_160_189_reg;
reg [31:0] main_160_mask5ii18;
reg [31:0] main_160_mask5ii18_reg;
reg  main_160_190;
reg  main_160_190_reg;
reg [31:0] main_160_191;
reg [31:0] main_160_191_reg;
reg [31:0] main_160_x5ii;
reg [31:0] main_160_x5ii_reg;
reg [31:0] main_160_192;
reg [31:0] main_160_192_reg;
reg [31:0] main_160_193;
reg [31:0] main_160_193_reg;
reg [31:0] main_160_194;
reg [31:0] main_160_194_reg;
reg [31:0] main_160_195;
reg [31:0] main_160_195_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_196;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_196_reg;
reg [31:0] main_160_197;
reg [31:0] main_160_197_reg;
reg [31:0] main_160_198;
reg [31:0] main_160_198_reg;
reg [31:0] main_160_mask6ii19;
reg [31:0] main_160_mask6ii19_reg;
reg  main_160_199;
reg  main_160_199_reg;
reg [31:0] main_160_200;
reg [31:0] main_160_200_reg;
reg [31:0] main_160_14ii;
reg [31:0] main_160_14ii_reg;
reg [31:0] main_160_201;
reg [31:0] main_160_201_reg;
reg [31:0] main_160_202;
reg [31:0] main_160_202_reg;
reg [31:0] main_160_mask7ii;
reg [31:0] main_160_mask7ii_reg;
reg  main_160_203;
reg  main_160_203_reg;
reg [31:0] main_160_204;
reg [31:0] main_160_204_reg;
reg [31:0] main_160_x7ii;
reg [31:0] main_160_x7ii_reg;
reg [31:0] main_160_205;
reg [31:0] main_160_205_reg;
reg [31:0] main_160_mask8ii20;
reg [31:0] main_160_mask8ii20_reg;
reg  main_160_206;
reg  main_160_206_reg;
reg [31:0] main_160_207;
reg [31:0] main_160_207_reg;
reg [31:0] main_160_15ii21;
reg [31:0] main_160_15ii21_reg;
reg [31:0] main_160_208;
reg [31:0] main_160_208_reg;
reg [31:0] main_160_209;
reg [31:0] main_160_209_reg;
reg [31:0] main_160_210;
reg [31:0] main_160_210_reg;
reg [31:0] main_160_211;
reg [31:0] main_160_211_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_212;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_160_212_reg;
reg [31:0] main_160_213;
reg [31:0] main_160_213_reg;
reg [31:0] main_160_214;
reg [31:0] main_160_214_reg;
reg [31:0] main_160_mask9ii22;
reg [31:0] main_160_mask9ii22_reg;
reg  main_160_215;
reg  main_160_215_reg;
reg [31:0] main_160_216;
reg [31:0] main_160_216_reg;
reg [31:0] main_160_x9ii;
reg [31:0] main_160_x9ii_reg;
reg [31:0] main_160_217;
reg [31:0] main_160_217_reg;
reg [31:0] main_160_mask10ii;
reg [31:0] main_160_mask10ii_reg;
reg  main_160_218;
reg  main_160_218_reg;
reg [31:0] main_160_219;
reg [31:0] main_160_219_reg;
reg [31:0] main_160_16ii23;
reg [31:0] main_160_16ii23_reg;
reg [31:0] main_160_220;
reg [31:0] main_160_220_reg;
reg [31:0] main_160_mask11ii;
reg [31:0] main_160_mask11ii_reg;
reg  main_160_221;
reg  main_160_221_reg;
reg [31:0] main_160_222;
reg [31:0] main_160_222_reg;
reg [31:0] main_160_x11ii;
reg [31:0] main_160_x11ii_reg;
reg [31:0] main_160_223;
reg [31:0] main_160_223_reg;
reg [31:0] main_160_224;
reg [31:0] main_160_224_reg;
reg  main_160_exitcond22;
reg  main_160_exitcond22_reg;
reg [31:0] main_225_226;
reg [31:0] main_225_226_reg;
reg  main_225_exitcond25;
reg  main_225_exitcond25_reg;
reg [31:0] main_lrphii26_i119ii;
reg [31:0] main_lrphii26_i119ii_reg;
reg [31:0] main_lrphii26_227;
reg [31:0] main_lrphii26_227_reg;
reg [31:0] main_lrphii26_228;
reg [31:0] main_lrphii26_228_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep30;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep30_reg;
reg [31:0] main_lrphii26_229;
reg [31:0] main_lrphii26_229_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep32_reg;
reg [31:0] main_lrphii26_230;
reg [31:0] main_lrphii26_230_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep33;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep34;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep36;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphii26_scevgep36_reg;
reg [31:0] main_lrphii26_231;
reg [31:0] main_lrphii26_231_reg;
reg [31:0] main_lrphii26_232;
reg [31:0] main_lrphii26_232_reg;
reg [31:0] main_lrphii26_233;
reg [31:0] main_lrphii26_233_reg;
reg [31:0] main_lrphii26_234;
reg [31:0] main_lrphii26_234_reg;
reg [31:0] main_lrphii26_235;
reg [31:0] main_lrphii26_235_reg;
reg  main_lrphii26_exitcond28;
reg  main_lrphii26_exitcond28_reg;
reg [31:0] main_AddRoundKey_InversMixColumnexiti_indvarnext;
reg [31:0] main_AddRoundKey_InversMixColumnexiti_indvarnext_reg;
reg  main_AddRoundKey_InversMixColumnexiti_exitcond37;
reg  main_AddRoundKey_InversMixColumnexiti_exitcond37_reg;
reg [31:0] main__crit_edgei_j01i2i29;
reg [31:0] main__crit_edgei_j01i2i29_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep7_reg;
reg [31:0] main__crit_edgei_236;
reg [31:0] main__crit_edgei_236_reg;
reg [31:0] main__crit_edgei_237;
reg [31:0] main__crit_edgei_237_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep8_reg;
reg [31:0] main__crit_edgei_238;
reg [31:0] main__crit_edgei_238_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep9_reg;
reg [31:0] main__crit_edgei_239;
reg [31:0] main__crit_edgei_239_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main__crit_edgei_scevgep12_reg;
reg [31:0] main__crit_edgei_240;
reg [31:0] main__crit_edgei_240_reg;
reg [31:0] main__crit_edgei_241;
reg [31:0] main__crit_edgei_241_reg;
reg [31:0] main__crit_edgei_242;
reg [31:0] main__crit_edgei_242_reg;
reg [31:0] main__crit_edgei_243;
reg [31:0] main__crit_edgei_243_reg;
reg [31:0] main__crit_edgei_244;
reg [31:0] main__crit_edgei_244_reg;
reg [31:0] main__crit_edgei_245;
reg [31:0] main__crit_edgei_245_reg;
reg [31:0] main__crit_edgei_246;
reg [31:0] main__crit_edgei_246_reg;
reg [31:0] main__crit_edgei_247;
reg [31:0] main__crit_edgei_247_reg;
reg [31:0] main__crit_edgei_248;
reg [31:0] main__crit_edgei_248_reg;
reg [31:0] main__crit_edgei_249;
reg [31:0] main__crit_edgei_249_reg;
reg [31:0] main__crit_edgei_250;
reg [31:0] main__crit_edgei_250_reg;
reg [31:0] main__crit_edgei_251;
reg [31:0] main__crit_edgei_251_reg;
reg [31:0] main__crit_edgei_252;
reg [31:0] main__crit_edgei_252_reg;
reg  main__crit_edgei_exitcond;
reg  main__crit_edgei_exitcond_reg;
reg [31:0] main_lrphi35_i17i34;
reg [31:0] main_lrphi35_i17i34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi35_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi35_scevgep4_reg;
reg [31:0] main_lrphi35_254;
reg [31:0] main_lrphi35_254_reg;
reg  main_lrphi35_255;
reg  main_lrphi35_255_reg;
reg [31:0] main_256_pre12i;
reg [31:0] main_256_pre12i_reg;
reg [31:0] main_258_259;
reg [31:0] main_258_259_reg;
reg [31:0] main_258_261;
reg [31:0] main_258_261_reg;
reg  main_258_exitcond3;
reg  main_258_exitcond3_reg;
reg [31:0] main_preheaderloopexiti32_262;
reg [31:0] main_preheaderloopexiti32_262_reg;
reg [31:0] main_preheaderloopexiti32_i26i36;
reg [31:0] main_preheaderloopexiti32_i26i36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti32_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti32_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti32_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheaderloopexiti32_scevgep2_reg;
reg [31:0] main_preheaderloopexiti32_263;
reg [31:0] main_preheaderloopexiti32_263_reg;
reg [31:0] main_preheaderloopexiti32_264;
reg [31:0] main_preheaderloopexiti32_264_reg;
reg  main_preheaderloopexiti32_265;
reg  main_preheaderloopexiti32_265_reg;
reg [31:0] main_preheaderloopexiti32_266;
reg [31:0] main_preheaderloopexiti32_266_reg;
reg [31:0] main_preheaderloopexiti32_267;
reg [31:0] main_preheaderloopexiti32_267_reg;
reg [31:0] main_preheaderloopexiti32_268;
reg [31:0] main_preheaderloopexiti32_268_reg;
reg  main_preheaderloopexiti32_exitcond1;
reg  main_preheaderloopexiti32_exitcond1_reg;
reg  main_decryptexit_270;
reg  main_decryptexit_270_reg;
reg [3:0] encryptout_enc_statemt_address_a;
reg  encryptout_enc_statemt_write_enable_a;
wire [31:0] encryptout_enc_statemt_in_a;
wire [31:0] encryptout_enc_statemt_out_a;
wire [3:0] encryptout_enc_statemt_address_b;
wire  encryptout_enc_statemt_write_enable_b;
wire [31:0] encryptout_enc_statemt_in_b;
wire [31:0] encryptout_enc_statemt_out_b;
reg [3:0] decryptout_dec_statemt_address_a;
reg  decryptout_dec_statemt_write_enable_a;
wire [31:0] decryptout_dec_statemt_in_a;
wire [31:0] decryptout_dec_statemt_out_a;
wire [3:0] decryptout_dec_statemt_address_b;
wire  decryptout_dec_statemt_write_enable_b;
wire [31:0] decryptout_dec_statemt_in_b;
wire [31:0] decryptout_dec_statemt_out_b;
wire [4:0] Rcon0_address_a;
wire  Rcon0_write_enable_a;
wire [31:0] Rcon0_in_a;
wire [31:0] Rcon0_out_a;
wire [4:0] Rcon0_address_b;
wire  Rcon0_write_enable_b;
wire [31:0] Rcon0_in_b;
wire [31:0] Rcon0_out_b;
wire [4:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [4:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [7:0] rom_32_address_a;
wire  rom_32_write_enable_a;
wire [31:0] rom_32_in_a;
wire [31:0] rom_32_out_a;
wire [7:0] rom_32_address_b;
wire  rom_32_write_enable_b;
wire [31:0] rom_32_in_b;
wire [31:0] rom_32_out_b;
wire [7:0] invSbox_address_a;
wire  invSbox_write_enable_a;
wire [31:0] invSbox_in_a;
wire [31:0] invSbox_out_a;
wire [7:0] invSbox_address_b;
wire  invSbox_write_enable_b;
wire [31:0] invSbox_in_b;
wire [31:0] invSbox_out_b;
reg [4:0] main_0_retii_address_a;
reg  main_0_retii_write_enable_a;
reg [31:0] main_0_retii_in_a;
wire [31:0] main_0_retii_out_a;
reg [4:0] main_0_retii_address_b;
reg  main_0_retii_write_enable_b;
reg [31:0] main_0_retii_in_b;
wire [31:0] main_0_retii_out_b;
reg  KeySchedule_start;
wire  KeySchedule_memory_controller_enable_a;
wire  KeySchedule_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] KeySchedule_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] KeySchedule_memory_controller_out_a;
wire [1:0] KeySchedule_memory_controller_size_a;
wire  KeySchedule_memory_controller_enable_b;
wire  KeySchedule_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] KeySchedule_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] KeySchedule_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] KeySchedule_memory_controller_out_b;
wire [1:0] KeySchedule_memory_controller_size_b;
reg  KeySchedule_memory_controller_waitrequest;
reg  KeySchedule_finish_final;
reg  KeySchedule_finish_reg;
wire  KeySchedule_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;
reg  ByteSub_ShiftRow_start;
wire  ByteSub_ShiftRow_memory_controller_enable_a;
wire  ByteSub_ShiftRow_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ByteSub_ShiftRow_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ByteSub_ShiftRow_memory_controller_out_a;
wire [1:0] ByteSub_ShiftRow_memory_controller_size_a;
wire  ByteSub_ShiftRow_memory_controller_enable_b;
wire  ByteSub_ShiftRow_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] ByteSub_ShiftRow_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ByteSub_ShiftRow_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] ByteSub_ShiftRow_memory_controller_out_b;
wire [1:0] ByteSub_ShiftRow_memory_controller_size_b;
reg  ByteSub_ShiftRow_memory_controller_waitrequest;
reg  ByteSub_ShiftRow_finish_final;
reg  ByteSub_ShiftRow_finish_reg;
wire  ByteSub_ShiftRow_finish;
reg  InversShiftRow_ByteSub_start;
wire  InversShiftRow_ByteSub_memory_controller_enable_a;
wire  InversShiftRow_ByteSub_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_out_a;
wire [1:0] InversShiftRow_ByteSub_memory_controller_size_a;
wire  InversShiftRow_ByteSub_memory_controller_enable_b;
wire  InversShiftRow_ByteSub_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] InversShiftRow_ByteSub_memory_controller_out_b;
wire [1:0] InversShiftRow_ByteSub_memory_controller_size_b;
reg  InversShiftRow_ByteSub_memory_controller_waitrequest;
reg  InversShiftRow_ByteSub_finish_final;
reg  InversShiftRow_ByteSub_finish_reg;
wire  InversShiftRow_ByteSub_finish;
reg [31:0] main_signed_modulus_32_0_op0;
reg [31:0] main_signed_modulus_32_0_op1;
wire [31:0] lpm_divide_main_160_194_temp_out;
wire [31:0] main_160_194_unused;
reg  lpm_divide_main_160_194_en;
reg [31:0] lpm_divide_main_160_194_out;
reg [31:0] main_signed_modulus_32_0;
reg  lpm_mult_main_lrph24ii8_138_en;
reg [31:0] main_lrph24ii8_138_stage0_reg;
reg  lpm_divide_main_160_210_en;

/*   %194 = srem i32 %163, 4*/
lpm_divide lpm_divide_main_160_194 (
	.quotient (main_160_194_unused),
	.remain (lpm_divide_main_160_194_temp_out),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_160_194_en),
	.numer (main_signed_modulus_32_0_op0),
	.denom (main_signed_modulus_32_0_op1)
);

defparam
	lpm_divide_main_160_194.lpm_pipeline = 32,
	lpm_divide_main_160_194.lpm_widthn = 32,
	lpm_divide_main_160_194.lpm_widthd = 32,
	lpm_divide_main_160_194.lpm_drepresentation = "SIGNED",
	lpm_divide_main_160_194.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_160_194.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


KeySchedule KeySchedule (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (KeySchedule_memory_controller_enable_a),
	.memory_controller_address_a (KeySchedule_memory_controller_address_a),
	.memory_controller_write_enable_a (KeySchedule_memory_controller_write_enable_a),
	.memory_controller_in_a (KeySchedule_memory_controller_in_a),
	.memory_controller_size_a (KeySchedule_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (KeySchedule_memory_controller_enable_b),
	.memory_controller_address_b (KeySchedule_memory_controller_address_b),
	.memory_controller_write_enable_b (KeySchedule_memory_controller_write_enable_b),
	.memory_controller_in_b (KeySchedule_memory_controller_in_b),
	.memory_controller_size_b (KeySchedule_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (KeySchedule_start),
	.finish (KeySchedule_finish)
);

defparam
	KeySchedule.tag_offset = tag_offset;


ByteSub_ShiftRow ByteSub_ShiftRow (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (ByteSub_ShiftRow_memory_controller_enable_a),
	.memory_controller_address_a (ByteSub_ShiftRow_memory_controller_address_a),
	.memory_controller_write_enable_a (ByteSub_ShiftRow_memory_controller_write_enable_a),
	.memory_controller_in_a (ByteSub_ShiftRow_memory_controller_in_a),
	.memory_controller_size_a (ByteSub_ShiftRow_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (ByteSub_ShiftRow_memory_controller_enable_b),
	.memory_controller_address_b (ByteSub_ShiftRow_memory_controller_address_b),
	.memory_controller_write_enable_b (ByteSub_ShiftRow_memory_controller_write_enable_b),
	.memory_controller_in_b (ByteSub_ShiftRow_memory_controller_in_b),
	.memory_controller_size_b (ByteSub_ShiftRow_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (ByteSub_ShiftRow_start),
	.finish (ByteSub_ShiftRow_finish)
);

defparam
	ByteSub_ShiftRow.tag_offset = tag_offset;


InversShiftRow_ByteSub InversShiftRow_ByteSub (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (InversShiftRow_ByteSub_memory_controller_enable_a),
	.memory_controller_address_a (InversShiftRow_ByteSub_memory_controller_address_a),
	.memory_controller_write_enable_a (InversShiftRow_ByteSub_memory_controller_write_enable_a),
	.memory_controller_in_a (InversShiftRow_ByteSub_memory_controller_in_a),
	.memory_controller_size_a (InversShiftRow_ByteSub_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (InversShiftRow_ByteSub_memory_controller_enable_b),
	.memory_controller_address_b (InversShiftRow_ByteSub_memory_controller_address_b),
	.memory_controller_write_enable_b (InversShiftRow_ByteSub_memory_controller_write_enable_b),
	.memory_controller_in_b (InversShiftRow_ByteSub_memory_controller_in_b),
	.memory_controller_size_b (InversShiftRow_ByteSub_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (InversShiftRow_ByteSub_start),
	.finish (InversShiftRow_ByteSub_finish)
);

defparam
	InversShiftRow_ByteSub.tag_offset = tag_offset;

// Local Rams


// @encrypt.out_enc_statemt = internal unnamed_addr constant [16 x i32] [i32 57, i32 37, i32 132, i32 29, i32 2, i32 220, i32 9, i32 251, i32 220, i32 17, i32 133, i32 151, i32 25, i32 106, i32 11, i32 5...
rom_dual_port encryptout_enc_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( encryptout_enc_statemt_address_a ),
	.address_b( encryptout_enc_statemt_address_b ),
	.q_a( encryptout_enc_statemt_out_a ),
	.q_b( encryptout_enc_statemt_out_b)
);
defparam encryptout_enc_statemt.width_a = 32;
defparam encryptout_enc_statemt.width_b = 32;
defparam encryptout_enc_statemt.widthad_a = 4;
defparam encryptout_enc_statemt.widthad_b = 4;
defparam encryptout_enc_statemt.numwords_a = 16;
defparam encryptout_enc_statemt.numwords_b = 16;
defparam encryptout_enc_statemt.latency = 1;
defparam encryptout_enc_statemt.init_file = "encryptout_enc_statemt.mif";


// @decrypt.out_dec_statemt = internal unnamed_addr constant [16 x i32] [i32 50, i32 67, i32 246, i32 168, i32 136, i32 90, i32 48, i32 141, i32 49, i32 49, i32 152, i32 162, i32 224, i32 55, i32 7, i32 ...
rom_dual_port decryptout_dec_statemt (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decryptout_dec_statemt_address_a ),
	.address_b( decryptout_dec_statemt_address_b ),
	.q_a( decryptout_dec_statemt_out_a ),
	.q_b( decryptout_dec_statemt_out_b)
);
defparam decryptout_dec_statemt.width_a = 32;
defparam decryptout_dec_statemt.width_b = 32;
defparam decryptout_dec_statemt.widthad_a = 4;
defparam decryptout_dec_statemt.widthad_b = 4;
defparam decryptout_dec_statemt.numwords_a = 16;
defparam decryptout_dec_statemt.numwords_b = 16;
defparam decryptout_dec_statemt.latency = 1;
defparam decryptout_dec_statemt.init_file = "decryptout_dec_statemt.mif";


//   %ret.i.i = alloca [32 x i32], align 4
ram_dual_port main_0_retii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_retii_address_a ),
	.address_b( main_0_retii_address_b ),
	.wren_a( main_0_retii_write_enable_a ),
	.wren_b( main_0_retii_write_enable_b ),
	.data_a( main_0_retii_in_a ),
	.data_b( main_0_retii_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_retii_out_a ),
	.q_b( main_0_retii_out_b)
);
defparam main_0_retii.width_a = 32;
defparam main_0_retii.width_b = 32;
defparam main_0_retii.widthad_a = 5;
defparam main_0_retii.widthad_b = 5;
defparam main_0_retii.width_be_a = 1;
defparam main_0_retii.width_be_b = 1;
defparam main_0_retii.numwords_a = 32;
defparam main_0_retii.numwords_b = 32;
defparam main_0_retii.latency = 1;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %.lr.ph.i.preheader*/
	/*   %103 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @.str, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_lrphipreheader_55)) begin
		$write("encrypted message 	");
	end
	/* main: %106*/
	/*   %107 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__106_59)) begin
		$write("0");
	end
	/* main: %108*/
	/*   %110 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %109) #1*/
	if ((cur_state == LEGUP_F_main_BB__108_62)) begin
		$write("%0x", $signed(main_108_109_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_108_109_reg) === 1'bX) finish <= 0;
	end
	/* main: %AddRoundKey.exit3.i30*/
	/*   %253 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i30_149)) begin
		$write("\ndecrypto message	");
	end
	/* main: %256*/
	/*   %257 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__256_153)) begin
		$write("0");
	end
	/* main: %258*/
	/*   %260 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([3 x i8]* @.str2, i32 0, i32 0), i32 %259) #1*/
	if ((cur_state == LEGUP_F_main_BB__258_156)) begin
		$write("%0x", $signed(main_258_259_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_258_259_reg) === 1'bX) finish <= 0;
	end
	/* main: %decrypt.exit*/
	/*   %269 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str4, i32 0, i32 0), i32 %267) #1*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_161)) begin
		$write("\nResult: %d\n", $signed(main_preheaderloopexiti32_267_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheaderloopexiti32_267_reg) === 1'bX) finish <= 0;
	end
	/* main: %271*/
	/*   %272 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__271_162)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %273*/
	/*   %274 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str6, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__273_163)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138:
		next_state = LEGUP_function_call_139;
LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_140:
	if ((main_AddRoundKey_InversMixColumnexiti_exitcond37_reg == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edgeipreheader_141;
	else if ((main_AddRoundKey_InversMixColumnexiti_exitcond37_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph24ii8_81;
LEGUP_F_main_BB_AddRoundKeyexit3i30_149:
		next_state = LEGUP_F_main_BB_lrphi35_150;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_54;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_54:
	if ((main_AddRoundKeyexit_crit_edgei_exitcond57_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphipreheader_55;
	else if ((main_AddRoundKeyexit_crit_edgei_exitcond57_reg == 1'd0))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47;
LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_46:
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_27:
		next_state = LEGUP_function_call_28;
LEGUP_F_main_BB_AddRoundKeyexitipreheader_29:
		next_state = LEGUP_F_main_BB_lrph24ii_30;
LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43:
		next_state = LEGUP_function_call_44;
LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_45:
	if ((main_MixColumn_AddRoundKeyexiti_exitcond90_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_46;
	else if ((main_MixColumn_AddRoundKeyexiti_exitcond90_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrph24ii_30;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__0_2;
LEGUP_F_main_BB__0_10:
		next_state = LEGUP_F_main_BB__0_11;
LEGUP_F_main_BB__0_11:
		next_state = LEGUP_F_main_BB__0_12;
LEGUP_F_main_BB__0_12:
		next_state = LEGUP_F_main_BB__0_13;
LEGUP_F_main_BB__0_13:
		next_state = LEGUP_F_main_BB__0_14;
LEGUP_F_main_BB__0_14:
		next_state = LEGUP_F_main_BB__0_15;
LEGUP_F_main_BB__0_15:
		next_state = LEGUP_F_main_BB__0_16;
LEGUP_F_main_BB__0_16:
		next_state = LEGUP_F_main_BB__0_17;
LEGUP_F_main_BB__0_17:
		next_state = LEGUP_function_call_18;
LEGUP_F_main_BB__0_19:
		next_state = LEGUP_F_main_BB__1_20;
LEGUP_F_main_BB__0_2:
		next_state = LEGUP_F_main_BB__0_3;
LEGUP_F_main_BB__0_3:
		next_state = LEGUP_F_main_BB__0_4;
LEGUP_F_main_BB__0_4:
		next_state = LEGUP_F_main_BB__0_5;
LEGUP_F_main_BB__0_5:
		next_state = LEGUP_F_main_BB__0_6;
LEGUP_F_main_BB__0_6:
		next_state = LEGUP_F_main_BB__0_7;
LEGUP_F_main_BB__0_7:
		next_state = LEGUP_F_main_BB__0_8;
LEGUP_F_main_BB__0_8:
		next_state = LEGUP_F_main_BB__0_9;
LEGUP_F_main_BB__0_9:
		next_state = LEGUP_F_main_BB__0_10;
LEGUP_F_main_BB__106_59:
		next_state = LEGUP_F_main_BB__106_60;
LEGUP_F_main_BB__106_60:
		next_state = LEGUP_F_main_BB__106_61;
LEGUP_F_main_BB__106_61:
		next_state = LEGUP_F_main_BB__108_62;
LEGUP_F_main_BB__108_62:
	if ((main_108_exitcond55 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderipreheader_63;
	else if ((main_108_exitcond55 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi_56;
LEGUP_F_main_BB__119_70:
		next_state = LEGUP_F_main_BB__119_71;
LEGUP_F_main_BB__119_71:
		next_state = LEGUP_F_main_BB__119_72;
LEGUP_F_main_BB__119_72:
		next_state = LEGUP_F_main_BB__119_73;
LEGUP_F_main_BB__119_73:
		next_state = LEGUP_F_main_BB__119_74;
LEGUP_F_main_BB__119_74:
		next_state = LEGUP_F_main_BB__119_75;
LEGUP_F_main_BB__119_75:
		next_state = LEGUP_F_main_BB__119_76;
LEGUP_F_main_BB__119_76:
		next_state = LEGUP_F_main_BB__119_77;
LEGUP_F_main_BB__119_77:
	if ((main_119_exitcond42_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrph10ipreheader_78;
	else if ((main_119_exitcond42_reg == 1'd0))
		next_state = LEGUP_F_main_BB__119_70;
LEGUP_F_main_BB__140_83:
		next_state = LEGUP_F_main_BB__140_84;
LEGUP_F_main_BB__140_84:
		next_state = LEGUP_F_main_BB__140_85;
LEGUP_F_main_BB__140_85:
		next_state = LEGUP_F_main_BB__140_86;
LEGUP_F_main_BB__140_86:
		next_state = LEGUP_F_main_BB__140_87;
LEGUP_F_main_BB__140_87:
		next_state = LEGUP_F_main_BB__140_88;
LEGUP_F_main_BB__140_88:
		next_state = LEGUP_F_main_BB__140_89;
LEGUP_F_main_BB__140_89:
		next_state = LEGUP_F_main_BB__140_90;
LEGUP_F_main_BB__140_90:
	if ((main_140_exitcond13_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader17iipreheader_91;
	else if ((main_140_exitcond13_reg == 1'd0))
		next_state = LEGUP_F_main_BB__140_83;
LEGUP_F_main_BB__160_100:
		next_state = LEGUP_F_main_BB__160_101;
LEGUP_F_main_BB__160_101:
		next_state = LEGUP_F_main_BB__160_102;
LEGUP_F_main_BB__160_102:
		next_state = LEGUP_F_main_BB__160_103;
LEGUP_F_main_BB__160_103:
		next_state = LEGUP_F_main_BB__160_104;
LEGUP_F_main_BB__160_104:
		next_state = LEGUP_F_main_BB__160_105;
LEGUP_F_main_BB__160_105:
		next_state = LEGUP_F_main_BB__160_106;
LEGUP_F_main_BB__160_106:
		next_state = LEGUP_F_main_BB__160_107;
LEGUP_F_main_BB__160_107:
		next_state = LEGUP_F_main_BB__160_108;
LEGUP_F_main_BB__160_108:
		next_state = LEGUP_F_main_BB__160_109;
LEGUP_F_main_BB__160_109:
		next_state = LEGUP_F_main_BB__160_110;
LEGUP_F_main_BB__160_110:
		next_state = LEGUP_F_main_BB__160_111;
LEGUP_F_main_BB__160_111:
		next_state = LEGUP_F_main_BB__160_112;
LEGUP_F_main_BB__160_112:
		next_state = LEGUP_F_main_BB__160_113;
LEGUP_F_main_BB__160_113:
		next_state = LEGUP_F_main_BB__160_114;
LEGUP_F_main_BB__160_114:
		next_state = LEGUP_F_main_BB__160_115;
LEGUP_F_main_BB__160_115:
		next_state = LEGUP_F_main_BB__160_116;
LEGUP_F_main_BB__160_116:
		next_state = LEGUP_F_main_BB__160_117;
LEGUP_F_main_BB__160_117:
		next_state = LEGUP_F_main_BB__160_118;
LEGUP_F_main_BB__160_118:
		next_state = LEGUP_F_main_BB__160_119;
LEGUP_F_main_BB__160_119:
		next_state = LEGUP_F_main_BB__160_120;
LEGUP_F_main_BB__160_120:
		next_state = LEGUP_F_main_BB__160_121;
LEGUP_F_main_BB__160_121:
		next_state = LEGUP_F_main_BB__160_122;
LEGUP_F_main_BB__160_122:
		next_state = LEGUP_F_main_BB__160_123;
LEGUP_F_main_BB__160_123:
		next_state = LEGUP_F_main_BB__160_124;
LEGUP_F_main_BB__160_124:
		next_state = LEGUP_F_main_BB__160_125;
LEGUP_F_main_BB__160_125:
		next_state = LEGUP_F_main_BB__160_126;
LEGUP_F_main_BB__160_126:
		next_state = LEGUP_F_main_BB__160_127;
LEGUP_F_main_BB__160_127:
		next_state = LEGUP_F_main_BB__160_128;
LEGUP_F_main_BB__160_128:
		next_state = LEGUP_F_main_BB__160_129;
LEGUP_F_main_BB__160_129:
		next_state = LEGUP_F_main_BB__160_130;
LEGUP_F_main_BB__160_130:
		next_state = LEGUP_F_main_BB__160_131;
LEGUP_F_main_BB__160_131:
	if ((main_160_exitcond22_reg == 1'd1))
		next_state = LEGUP_F_main_BB__225_132;
	else if ((main_160_exitcond22_reg == 1'd0))
		next_state = LEGUP_F_main_BB__160_93;
LEGUP_F_main_BB__160_93:
		next_state = LEGUP_F_main_BB__160_94;
LEGUP_F_main_BB__160_94:
		next_state = LEGUP_F_main_BB__160_95;
LEGUP_F_main_BB__160_95:
		next_state = LEGUP_F_main_BB__160_96;
LEGUP_F_main_BB__160_96:
		next_state = LEGUP_F_main_BB__160_97;
LEGUP_F_main_BB__160_97:
		next_state = LEGUP_F_main_BB__160_98;
LEGUP_F_main_BB__160_98:
		next_state = LEGUP_F_main_BB__160_99;
LEGUP_F_main_BB__160_99:
		next_state = LEGUP_F_main_BB__160_100;
LEGUP_F_main_BB__1_20:
		next_state = LEGUP_F_main_BB__1_21;
LEGUP_F_main_BB__1_21:
		next_state = LEGUP_F_main_BB__1_22;
LEGUP_F_main_BB__1_22:
		next_state = LEGUP_F_main_BB__1_23;
LEGUP_F_main_BB__1_23:
		next_state = LEGUP_F_main_BB__1_24;
LEGUP_F_main_BB__1_24:
		next_state = LEGUP_F_main_BB__1_25;
LEGUP_F_main_BB__1_25:
		next_state = LEGUP_F_main_BB__1_26;
LEGUP_F_main_BB__1_26:
	if ((main_1_exitcond95_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_27;
	else if ((main_1_exitcond95_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_20;
LEGUP_F_main_BB__21_31:
		next_state = LEGUP_F_main_BB__21_32;
LEGUP_F_main_BB__21_32:
		next_state = LEGUP_F_main_BB__21_33;
LEGUP_F_main_BB__21_33:
		next_state = LEGUP_F_main_BB__21_34;
LEGUP_F_main_BB__21_34:
		next_state = LEGUP_F_main_BB__21_35;
LEGUP_F_main_BB__21_35:
		next_state = LEGUP_F_main_BB__21_36;
LEGUP_F_main_BB__21_36:
		next_state = LEGUP_F_main_BB__21_37;
LEGUP_F_main_BB__21_37:
	if ((main_21_exitcond66_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphiipreheader_38;
	else if ((main_21_exitcond66_reg == 1'd0))
		next_state = LEGUP_F_main_BB__21_31;
LEGUP_F_main_BB__225_132:
	if ((main_225_exitcond25 == 1'd1))
		next_state = LEGUP_F_main_BB_lrphii26preheader_133;
	else if ((main_225_exitcond25 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader17ii_92;
LEGUP_F_main_BB__256_153:
		next_state = LEGUP_F_main_BB__256_154;
LEGUP_F_main_BB__256_154:
		next_state = LEGUP_F_main_BB__256_155;
LEGUP_F_main_BB__256_155:
		next_state = LEGUP_F_main_BB__258_156;
LEGUP_F_main_BB__258_156:
	if ((main_258_exitcond3 == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderloopexiti32preheader_157;
	else if ((main_258_exitcond3 == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi35_150;
LEGUP_F_main_BB__271_162:
		next_state = LEGUP_F_main_BB__275_164;
LEGUP_F_main_BB__273_163:
		next_state = LEGUP_F_main_BB__275_164;
LEGUP_F_main_BB__275_164:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edgei_142:
		next_state = LEGUP_F_main_BB__crit_edgei_143;
LEGUP_F_main_BB__crit_edgei_143:
		next_state = LEGUP_F_main_BB__crit_edgei_144;
LEGUP_F_main_BB__crit_edgei_144:
		next_state = LEGUP_F_main_BB__crit_edgei_145;
LEGUP_F_main_BB__crit_edgei_145:
		next_state = LEGUP_F_main_BB__crit_edgei_146;
LEGUP_F_main_BB__crit_edgei_146:
		next_state = LEGUP_F_main_BB__crit_edgei_147;
LEGUP_F_main_BB__crit_edgei_147:
		next_state = LEGUP_F_main_BB__crit_edgei_148;
LEGUP_F_main_BB__crit_edgei_148:
	if ((main__crit_edgei_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexit3i30_149;
	else if ((main__crit_edgei_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB__crit_edgei_142;
LEGUP_F_main_BB__crit_edgeipreheader_141:
		next_state = LEGUP_F_main_BB__crit_edgei_142;
LEGUP_F_main_BB_decryptexit_161:
	if ((main_decryptexit_270 == 1'd1))
		next_state = LEGUP_F_main_BB__271_162;
	else if ((main_decryptexit_270 == 1'd0))
		next_state = LEGUP_F_main_BB__273_163;
LEGUP_F_main_BB_encryptexit_67:
		next_state = LEGUP_function_call_68;
LEGUP_F_main_BB_encryptexit_69:
		next_state = LEGUP_F_main_BB__119_70;
LEGUP_F_main_BB_lrph10ipreheader_78:
		next_state = LEGUP_function_call_79;
LEGUP_F_main_BB_lrph10ipreheader_80:
		next_state = LEGUP_F_main_BB_lrph24ii8_81;
LEGUP_F_main_BB_lrph24ii8_81:
		next_state = LEGUP_F_main_BB_lrph24ii8_82;
LEGUP_F_main_BB_lrph24ii8_82:
		next_state = LEGUP_F_main_BB__140_83;
LEGUP_F_main_BB_lrph24ii_30:
		next_state = LEGUP_F_main_BB__21_31;
LEGUP_F_main_BB_lrphi35_150:
		next_state = LEGUP_F_main_BB_lrphi35_151;
LEGUP_F_main_BB_lrphi35_151:
		next_state = LEGUP_F_main_BB_lrphi35_152;
LEGUP_F_main_BB_lrphi35_152:
	if ((main_lrphi35_255 == 1'd1))
		next_state = LEGUP_F_main_BB__256_153;
	else if ((main_lrphi35_255 == 1'd0))
		next_state = LEGUP_F_main_BB__258_156;
LEGUP_F_main_BB_lrphi_56:
		next_state = LEGUP_F_main_BB_lrphi_57;
LEGUP_F_main_BB_lrphi_57:
		next_state = LEGUP_F_main_BB_lrphi_58;
LEGUP_F_main_BB_lrphi_58:
	if ((main_lrphi_105 == 1'd1))
		next_state = LEGUP_F_main_BB__106_59;
	else if ((main_lrphi_105 == 1'd0))
		next_state = LEGUP_F_main_BB__108_62;
LEGUP_F_main_BB_lrphii26_134:
		next_state = LEGUP_F_main_BB_lrphii26_135;
LEGUP_F_main_BB_lrphii26_135:
		next_state = LEGUP_F_main_BB_lrphii26_136;
LEGUP_F_main_BB_lrphii26_136:
		next_state = LEGUP_F_main_BB_lrphii26_137;
LEGUP_F_main_BB_lrphii26_137:
	if ((main_lrphii26_exitcond28_reg == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138;
	else if ((main_lrphii26_exitcond28_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphii26_134;
LEGUP_F_main_BB_lrphii26preheader_133:
		next_state = LEGUP_F_main_BB_lrphii26_134;
LEGUP_F_main_BB_lrphii_39:
		next_state = LEGUP_F_main_BB_lrphii_40;
LEGUP_F_main_BB_lrphii_40:
		next_state = LEGUP_F_main_BB_lrphii_41;
LEGUP_F_main_BB_lrphii_41:
		next_state = LEGUP_F_main_BB_lrphii_42;
LEGUP_F_main_BB_lrphii_42:
	if ((main_lrphii_exitcond81_reg == 1'd1))
		next_state = LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43;
	else if ((main_lrphii_exitcond81_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphii_39;
LEGUP_F_main_BB_lrphiipreheader_38:
		next_state = LEGUP_F_main_BB_lrphii_39;
LEGUP_F_main_BB_lrphipreheader_55:
		next_state = LEGUP_F_main_BB_lrphi_56;
LEGUP_F_main_BB_preheader17ii_92:
		next_state = LEGUP_F_main_BB__160_93;
LEGUP_F_main_BB_preheader17iipreheader_91:
		next_state = LEGUP_F_main_BB_preheader17ii_92;
LEGUP_F_main_BB_preheaderi_64:
		next_state = LEGUP_F_main_BB_preheaderi_65;
LEGUP_F_main_BB_preheaderi_65:
		next_state = LEGUP_F_main_BB_preheaderi_66;
LEGUP_F_main_BB_preheaderi_66:
	if ((main_preheaderi_exitcond52_reg == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_67;
	else if ((main_preheaderi_exitcond52_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_64;
LEGUP_F_main_BB_preheaderipreheader_63:
		next_state = LEGUP_F_main_BB_preheaderi_64;
LEGUP_F_main_BB_preheaderloopexiti32_158:
		next_state = LEGUP_F_main_BB_preheaderloopexiti32_159;
LEGUP_F_main_BB_preheaderloopexiti32_159:
		next_state = LEGUP_F_main_BB_preheaderloopexiti32_160;
LEGUP_F_main_BB_preheaderloopexiti32_160:
	if ((main_preheaderloopexiti32_exitcond1_reg == 1'd1))
		next_state = LEGUP_F_main_BB_decryptexit_161;
	else if ((main_preheaderloopexiti32_exitcond1_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderloopexiti32_158;
LEGUP_F_main_BB_preheaderloopexiti32preheader_157:
		next_state = LEGUP_F_main_BB_preheaderloopexiti32_158;
LEGUP_function_call_139:
	if ((InversShiftRow_ByteSub_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_140;
LEGUP_function_call_18:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB__0_19;
LEGUP_function_call_28:
	if ((ByteSub_ShiftRow_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_AddRoundKeyexitipreheader_29;
LEGUP_function_call_44:
	if ((ByteSub_ShiftRow_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_45;
LEGUP_function_call_68:
	if ((KeySchedule_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_encryptexit_69;
LEGUP_function_call_79:
	if ((InversShiftRow_ByteSub_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_lrph10ipreheader_80;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_j01ii = 32'd0;
	end
	/* main: %1*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__1_26) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond95_reg == 1'd0))) */ begin
		main_1_j01ii = main_1_18_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_19) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_j01ii_reg <= main_1_j01ii;
		if (start == 1'b0 && ^(main_1_j01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_j01ii_reg"); $finish; end
	end
	/* main: %1*/
	/*   %j.01.i.i = phi i32 [ 0, %0 ], [ %18, %1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__1_26) & (memory_controller_waitrequest == 1'd0)) & (main_1_exitcond95_reg == 1'd0))) begin
		main_1_j01ii_reg <= main_1_j01ii;
		if (start == 1'b0 && ^(main_1_j01ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_j01ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep96 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.01.i.i*/
		main_1_scevgep96 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_1_j01ii_reg)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep96 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.01.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep96_reg <= main_1_scevgep96;
		if (start == 1'b0 && ^(main_1_scevgep96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep97 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.01.i.i*/
		main_1_scevgep97 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_1_j01ii_reg)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep97 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.01.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep97_reg <= main_1_scevgep97;
		if (start == 1'b0 && ^(main_1_scevgep97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep98 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.01.i.i*/
		main_1_scevgep98 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_1_j01ii_reg)));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep98 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.01.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep98_reg <= main_1_scevgep98;
		if (start == 1'b0 && ^(main_1_scevgep98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %2 = shl i32 %j.01.i.i, 2*/
		main_1_2 = (main_1_j01ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = shl i32 %j.01.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = or i32 %2, 3*/
		main_1_3 = (main_1_2 | 32'd3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = or i32 %2, 3*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep99 = getelementptr [32 x i32]* @statemt, i32 0, i32 %3*/
		main_1_scevgep99 = (`TAG_g_statemt_a | (4 * main_1_3));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep99 = getelementptr [32 x i32]* @statemt, i32 0, i32 %3*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep99_reg <= main_1_scevgep99;
		if (start == 1'b0 && ^(main_1_scevgep99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = or i32 %2, 2*/
		main_1_4 = (main_1_2 | 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = or i32 %2, 2*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep100 = getelementptr [32 x i32]* @statemt, i32 0, i32 %4*/
		main_1_scevgep100 = (`TAG_g_statemt_a | (4 * main_1_4));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep100 = getelementptr [32 x i32]* @statemt, i32 0, i32 %4*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep100_reg <= main_1_scevgep100;
		if (start == 1'b0 && ^(main_1_scevgep100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = or i32 %2, 1*/
		main_1_5 = (main_1_2 | 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = or i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep101 = getelementptr [32 x i32]* @statemt, i32 0, i32 %5*/
		main_1_scevgep101 = (`TAG_g_statemt_a | (4 * main_1_5));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep101 = getelementptr [32 x i32]* @statemt, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep101_reg <= main_1_scevgep101;
		if (start == 1'b0 && ^(main_1_scevgep101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep102 = getelementptr [32 x i32]* @statemt, i32 0, i32 %2*/
		main_1_scevgep102 = (`TAG_g_statemt_a | (4 * main_1_2));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep102 = getelementptr [32 x i32]* @statemt, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep102_reg <= main_1_scevgep102;
		if (start == 1'b0 && ^(main_1_scevgep102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep103 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.01.i.i*/
		main_1_scevgep103 = (`TAG_g_word_a | (4 * main_1_j01ii_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep103 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.01.i.i*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_scevgep103_reg <= main_1_scevgep103;
		if (start == 1'b0 && ^(main_1_scevgep103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
		main_1_6 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
		main_1_7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = xor i32 %7, %6*/
		main_1_8 = (main_1_7 ^ main_1_6);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = xor i32 %7, %6*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
		main_1_9 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
		main_1_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = xor i32 %10, %9*/
		main_1_11 = (main_1_10 ^ main_1_9);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = xor i32 %10, %9*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
		main_1_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
		main_1_13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = xor i32 %13, %12*/
		main_1_14 = (main_1_13 ^ main_1_12);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = xor i32 %13, %12*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
		main_1_15 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		main_1_15_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
		main_1_16 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		main_1_16_reg <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %17 = xor i32 %16, %15*/
		main_1_17 = (main_1_16 ^ main_1_15);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %17 = xor i32 %16, %15*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		main_1_17_reg <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %18 = add nsw i32 %j.01.i.i, 1*/
		main_1_18 = (main_1_j01ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %18 = add nsw i32 %j.01.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_18_reg <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond95 = icmp eq i32 %18, 4*/
		main_1_exitcond95 = (main_1_18 == 32'd4);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %exitcond95 = icmp eq i32 %18, 4*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		main_1_exitcond95_reg <= main_1_exitcond95;
		if (start == 1'b0 && ^(main_1_exitcond95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph24.i.i*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %MixColumn_AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph24ii_indvar67 = 32'd0;
	end
	/* main: %.lr.ph24.i.i*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %MixColumn_AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_45) & (memory_controller_waitrequest == 1'd0)) & (main_MixColumn_AddRoundKeyexiti_exitcond90_reg == 1'd0))) */ begin
		main_lrph24ii_indvar67 = main_MixColumn_AddRoundKeyexiti_indvarnext68_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %MixColumn_AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph24ii_indvar67_reg <= main_lrph24ii_indvar67;
		if (start == 1'b0 && ^(main_lrph24ii_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii_indvar67_reg"); $finish; end
	end
	/* main: %.lr.ph24.i.i*/
	/*   %indvar67 = phi i32 [ %indvar.next68, %MixColumn_AddRoundKey.exit.i ], [ 0, %AddRoundKey.exit.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_45) & (memory_controller_waitrequest == 1'd0)) & (main_MixColumn_AddRoundKeyexiti_exitcond90_reg == 1'd0))) begin
		main_lrph24ii_indvar67_reg <= main_lrph24ii_indvar67;
		if (start == 1'b0 && ^(main_lrph24ii_indvar67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii_indvar67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph24.i.i*/
	/*   %19 = shl i32 %indvar67, 2*/
		main_lrph24ii_19 = (main_lrph24ii_indvar67_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i*/
	/*   %19 = shl i32 %indvar67, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrph24ii_30)) begin
		main_lrph24ii_19_reg <= main_lrph24ii_19;
		if (start == 1'b0 && ^(main_lrph24ii_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph24.i.i*/
	/*   %20 = add i32 %19, 4*/
		main_lrph24ii_20 = (main_lrph24ii_19 + 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i*/
	/*   %20 = add i32 %19, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrph24ii_30)) begin
		main_lrph24ii_20_reg <= main_lrph24ii_20;
		if (start == 1'b0 && ^(main_lrph24ii_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %j.022.i.i = phi i32 [ 0, %.lr.ph24.i.i ], [ %75, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph24ii_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_j022ii = 32'd0;
	end
	/* main: %21*/
	/*   %j.022.i.i = phi i32 [ 0, %.lr.ph24.i.i ], [ %75, %21 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__21_37) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond66_reg == 1'd0))) */ begin
		main_21_j022ii = main_21_75_reg;
	end
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %j.022.i.i = phi i32 [ 0, %.lr.ph24.i.i ], [ %75, %21 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph24ii_30) & (memory_controller_waitrequest == 1'd0))) begin
		main_21_j022ii_reg <= main_21_j022ii;
		if (start == 1'b0 && ^(main_21_j022ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_j022ii_reg"); $finish; end
	end
	/* main: %21*/
	/*   %j.022.i.i = phi i32 [ 0, %.lr.ph24.i.i ], [ %75, %21 ]*/
	if ((((cur_state == LEGUP_F_main_BB__21_37) & (memory_controller_waitrequest == 1'd0)) & (main_21_exitcond66_reg == 1'd0))) begin
		main_21_j022ii_reg <= main_21_j022ii;
		if (start == 1'b0 && ^(main_21_j022ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_j022ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %22 = add i32 %20, %j.022.i.i*/
		main_21_22 = (main_lrph24ii_20_reg + main_21_j022ii_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %22 = add i32 %20, %j.022.i.i*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_22_reg <= main_21_22;
		if (start == 1'b0 && ^(main_21_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep72 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %22*/
		main_21_scevgep72 = (`TAG_g_word_a | (4 * main_21_22_reg));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep72 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		main_21_scevgep72_reg <= main_21_scevgep72;
		if (start == 1'b0 && ^(main_21_scevgep72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep71 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %22*/
		main_21_scevgep71 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_21_22_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep71 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		main_21_scevgep71_reg <= main_21_scevgep71;
		if (start == 1'b0 && ^(main_21_scevgep71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep70 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %22*/
		main_21_scevgep70 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_21_22_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep70 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		main_21_scevgep70_reg <= main_21_scevgep70;
		if (start == 1'b0 && ^(main_21_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep69 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %22*/
		main_21_scevgep69 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_21_22_reg)));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep69 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %22*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		main_21_scevgep69_reg <= main_21_scevgep69;
		if (start == 1'b0 && ^(main_21_scevgep69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %23 = shl i32 %j.022.i.i, 2*/
		main_21_23 = (main_21_j022ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %23 = shl i32 %j.022.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_23_reg <= main_21_23;
		if (start == 1'b0 && ^(main_21_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %24 = or i32 %23, 3*/
		main_21_24 = (main_21_23 | 32'd3);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %24 = or i32 %23, 3*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_24_reg <= main_21_24;
		if (start == 1'b0 && ^(main_21_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep73 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %24*/
		main_21_scevgep73 = (1'd0 | (4 * main_21_24));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep73 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %24*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep73_reg <= main_21_scevgep73;
		if (start == 1'b0 && ^(main_21_scevgep73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep74 = getelementptr [32 x i32]* @statemt, i32 0, i32 %24*/
		main_21_scevgep74 = (`TAG_g_statemt_a | (4 * main_21_24));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep74 = getelementptr [32 x i32]* @statemt, i32 0, i32 %24*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep74_reg <= main_21_scevgep74;
		if (start == 1'b0 && ^(main_21_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %25 = or i32 %23, 2*/
		main_21_25 = (main_21_23 | 32'd2);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %25 = or i32 %23, 2*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_25_reg <= main_21_25;
		if (start == 1'b0 && ^(main_21_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep75 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %25*/
		main_21_scevgep75 = (1'd0 | (4 * main_21_25));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep75 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %25*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep75_reg <= main_21_scevgep75;
		if (start == 1'b0 && ^(main_21_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep76 = getelementptr [32 x i32]* @statemt, i32 0, i32 %25*/
		main_21_scevgep76 = (`TAG_g_statemt_a | (4 * main_21_25));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep76 = getelementptr [32 x i32]* @statemt, i32 0, i32 %25*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep76_reg <= main_21_scevgep76;
		if (start == 1'b0 && ^(main_21_scevgep76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %26 = or i32 %23, 1*/
		main_21_26 = (main_21_23 | 32'd1);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %26 = or i32 %23, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_26_reg <= main_21_26;
		if (start == 1'b0 && ^(main_21_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep77 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %26*/
		main_21_scevgep77 = (1'd0 | (4 * main_21_26));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep77 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep77_reg <= main_21_scevgep77;
		if (start == 1'b0 && ^(main_21_scevgep77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep78 = getelementptr [32 x i32]* @statemt, i32 0, i32 %26*/
		main_21_scevgep78 = (`TAG_g_statemt_a | (4 * main_21_26));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep78 = getelementptr [32 x i32]* @statemt, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep78_reg <= main_21_scevgep78;
		if (start == 1'b0 && ^(main_21_scevgep78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep79 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %23*/
		main_21_scevgep79 = (1'd0 | (4 * main_21_23));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep79 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %23*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep79_reg <= main_21_scevgep79;
		if (start == 1'b0 && ^(main_21_scevgep79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %scevgep80 = getelementptr [32 x i32]* @statemt, i32 0, i32 %23*/
		main_21_scevgep80 = (`TAG_g_statemt_a | (4 * main_21_23));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %scevgep80 = getelementptr [32 x i32]* @statemt, i32 0, i32 %23*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_scevgep80_reg <= main_21_scevgep80;
		if (start == 1'b0 && ^(main_21_scevgep80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_scevgep80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
		main_21_27 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_27_reg <= main_21_27;
		if (start == 1'b0 && ^(main_21_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %28 = shl i32 %27, 1*/
		main_21_28 = (main_21_27 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %28 = shl i32 %27, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_28_reg <= main_21_28;
		if (start == 1'b0 && ^(main_21_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask.i.i = and i32 %28, -256*/
		main_21_maskii = (main_21_28 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask.i.i = and i32 %28, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_maskii_reg <= main_21_maskii;
		if (start == 1'b0 && ^(main_21_maskii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_maskii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %29 = icmp eq i32 %.mask.i.i, 256*/
		main_21_29 = (main_21_maskii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %29 = icmp eq i32 %.mask.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_29_reg <= main_21_29;
		if (start == 1'b0 && ^(main_21_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %30 = xor i32 %28, 283*/
		main_21_30 = (main_21_28 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %30 = xor i32 %28, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_30_reg <= main_21_30;
		if (start == 1'b0 && ^(main_21_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %..i.i = select i1 %29, i32 %30, i32 %28*/
		main_21_ii = (main_21_29 ? main_21_30 : main_21_28);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %..i.i = select i1 %29, i32 %30, i32 %28*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_ii_reg <= main_21_ii;
		if (start == 1'b0 && ^(main_21_ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
		main_21_31 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_31_reg <= main_21_31;
		if (start == 1'b0 && ^(main_21_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %32 = shl i32 %31, 1*/
		main_21_32 = (main_21_31 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %32 = shl i32 %31, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_32_reg <= main_21_32;
		if (start == 1'b0 && ^(main_21_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %33 = xor i32 %32, %31*/
		main_21_33 = (main_21_32 ^ main_21_31);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %33 = xor i32 %32, %31*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_33_reg <= main_21_33;
		if (start == 1'b0 && ^(main_21_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask1.i.i = and i32 %33, -256*/
		main_21_mask1ii = (main_21_33 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask1.i.i = and i32 %33, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_mask1ii_reg <= main_21_mask1ii;
		if (start == 1'b0 && ^(main_21_mask1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %34 = icmp eq i32 %.mask1.i.i, 256*/
		main_21_34 = (main_21_mask1ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %34 = icmp eq i32 %.mask1.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_34_reg <= main_21_34;
		if (start == 1'b0 && ^(main_21_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %35 = xor i32 %33, 283*/
		main_21_35 = (main_21_33 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %35 = xor i32 %33, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_35_reg <= main_21_35;
		if (start == 1'b0 && ^(main_21_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.sink.i.i = select i1 %34, i32 %35, i32 %33*/
		main_21_sinkii = (main_21_34 ? main_21_35 : main_21_33);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.sink.i.i = select i1 %34, i32 %35, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_sinkii_reg <= main_21_sinkii;
		if (start == 1'b0 && ^(main_21_sinkii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_sinkii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %36 = xor i32 %.sink.i.i, %..i.i*/
		main_21_36 = (main_21_sinkii ^ main_21_ii);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %36 = xor i32 %.sink.i.i, %..i.i*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_36_reg <= main_21_36;
		if (start == 1'b0 && ^(main_21_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
		main_21_37 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_37_reg <= main_21_37;
		if (start == 1'b0 && ^(main_21_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
		main_21_38 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_38_reg <= main_21_38;
		if (start == 1'b0 && ^(main_21_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %39 = xor i32 %38, %37*/
		main_21_39 = (main_21_38 ^ main_21_37);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %39 = xor i32 %38, %37*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_39_reg <= main_21_39;
		if (start == 1'b0 && ^(main_21_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
		main_21_40 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_40_reg <= main_21_40;
		if (start == 1'b0 && ^(main_21_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %41 = xor i32 %39, %40*/
		main_21_41 = (main_21_39_reg ^ main_21_40);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %41 = xor i32 %39, %40*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_41_reg <= main_21_41;
		if (start == 1'b0 && ^(main_21_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %42 = xor i32 %41, %36*/
		main_21_42 = (main_21_41 ^ main_21_36_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %42 = xor i32 %41, %36*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_42_reg <= main_21_42;
		if (start == 1'b0 && ^(main_21_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask2.i.i = and i32 %32, -256*/
		main_21_mask2ii = (main_21_32 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask2.i.i = and i32 %32, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_mask2ii_reg <= main_21_mask2ii;
		if (start == 1'b0 && ^(main_21_mask2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %43 = icmp eq i32 %.mask2.i.i, 256*/
		main_21_43 = (main_21_mask2ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %43 = icmp eq i32 %.mask2.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_43_reg <= main_21_43;
		if (start == 1'b0 && ^(main_21_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %44 = xor i32 %32, 283*/
		main_21_44 = (main_21_32 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %44 = xor i32 %32, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_44_reg <= main_21_44;
		if (start == 1'b0 && ^(main_21_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.15.i.i = select i1 %43, i32 %44, i32 %32*/
		main_21_15ii = (main_21_43 ? main_21_44 : main_21_32);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.15.i.i = select i1 %43, i32 %44, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_15ii_reg <= main_21_15ii;
		if (start == 1'b0 && ^(main_21_15ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_15ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %45 = shl i32 %37, 1*/
		main_21_45 = (main_21_37 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %45 = shl i32 %37, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_45_reg <= main_21_45;
		if (start == 1'b0 && ^(main_21_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %46 = xor i32 %45, %37*/
		main_21_46 = (main_21_45 ^ main_21_37);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %46 = xor i32 %45, %37*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_46_reg <= main_21_46;
		if (start == 1'b0 && ^(main_21_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask3.i.i = and i32 %46, -256*/
		main_21_mask3ii = (main_21_46 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask3.i.i = and i32 %46, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_mask3ii_reg <= main_21_mask3ii;
		if (start == 1'b0 && ^(main_21_mask3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %47 = icmp eq i32 %.mask3.i.i, 256*/
		main_21_47 = (main_21_mask3ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %47 = icmp eq i32 %.mask3.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_47_reg <= main_21_47;
		if (start == 1'b0 && ^(main_21_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %48 = xor i32 %46, 283*/
		main_21_48 = (main_21_46 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %48 = xor i32 %46, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_48_reg <= main_21_48;
		if (start == 1'b0 && ^(main_21_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.sink18.i.i = select i1 %47, i32 %48, i32 %46*/
		main_21_sink18ii = (main_21_47 ? main_21_48 : main_21_46);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.sink18.i.i = select i1 %47, i32 %48, i32 %46*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_sink18ii_reg <= main_21_sink18ii;
		if (start == 1'b0 && ^(main_21_sink18ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_sink18ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %49 = xor i32 %.sink18.i.i, %.15.i.i*/
		main_21_49 = (main_21_sink18ii ^ main_21_15ii_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %49 = xor i32 %.sink18.i.i, %.15.i.i*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_49_reg <= main_21_49;
		if (start == 1'b0 && ^(main_21_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %50 = xor i32 %27, %38*/
		main_21_50 = (main_21_27_reg ^ main_21_38);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %50 = xor i32 %27, %38*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_50_reg <= main_21_50;
		if (start == 1'b0 && ^(main_21_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
		main_21_51 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_51_reg <= main_21_51;
		if (start == 1'b0 && ^(main_21_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %52 = xor i32 %50, %51*/
		main_21_52 = (main_21_50_reg ^ main_21_51);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %52 = xor i32 %50, %51*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_52_reg <= main_21_52;
		if (start == 1'b0 && ^(main_21_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %53 = xor i32 %52, %49*/
		main_21_53 = (main_21_52 ^ main_21_49_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %53 = xor i32 %52, %49*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_21_53_reg <= main_21_53;
		if (start == 1'b0 && ^(main_21_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask5.i.i = and i32 %45, -256*/
		main_21_mask5ii = (main_21_45 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask5.i.i = and i32 %45, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_mask5ii_reg <= main_21_mask5ii;
		if (start == 1'b0 && ^(main_21_mask5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %54 = icmp eq i32 %.mask5.i.i, 256*/
		main_21_54 = (main_21_mask5ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %54 = icmp eq i32 %.mask5.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_54_reg <= main_21_54;
		if (start == 1'b0 && ^(main_21_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %55 = xor i32 %45, 283*/
		main_21_55 = (main_21_45 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %55 = xor i32 %45, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_55_reg <= main_21_55;
		if (start == 1'b0 && ^(main_21_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.16.i.i = select i1 %54, i32 %55, i32 %45*/
		main_21_16ii = (main_21_54 ? main_21_55 : main_21_45);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.16.i.i = select i1 %54, i32 %55, i32 %45*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_16ii_reg <= main_21_16ii;
		if (start == 1'b0 && ^(main_21_16ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_16ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %56 = shl i32 %38, 1*/
		main_21_56 = (main_21_38 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %56 = shl i32 %38, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_56_reg <= main_21_56;
		if (start == 1'b0 && ^(main_21_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %57 = xor i32 %56, %38*/
		main_21_57 = (main_21_56 ^ main_21_38);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %57 = xor i32 %56, %38*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_57_reg <= main_21_57;
		if (start == 1'b0 && ^(main_21_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask6.i.i = and i32 %57, -256*/
		main_21_mask6ii = (main_21_57 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask6.i.i = and i32 %57, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_mask6ii_reg <= main_21_mask6ii;
		if (start == 1'b0 && ^(main_21_mask6ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask6ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %58 = icmp eq i32 %.mask6.i.i, 256*/
		main_21_58 = (main_21_mask6ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %58 = icmp eq i32 %.mask6.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_58_reg <= main_21_58;
		if (start == 1'b0 && ^(main_21_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %59 = xor i32 %57, 283*/
		main_21_59 = (main_21_57 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %59 = xor i32 %57, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_59_reg <= main_21_59;
		if (start == 1'b0 && ^(main_21_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.sink19.i.i = select i1 %58, i32 %59, i32 %57*/
		main_21_sink19ii = (main_21_58 ? main_21_59 : main_21_57);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.sink19.i.i = select i1 %58, i32 %59, i32 %57*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_sink19ii_reg <= main_21_sink19ii;
		if (start == 1'b0 && ^(main_21_sink19ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_sink19ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %60 = xor i32 %.sink19.i.i, %.16.i.i*/
		main_21_60 = (main_21_sink19ii ^ main_21_16ii);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %60 = xor i32 %.sink19.i.i, %.16.i.i*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_60_reg <= main_21_60;
		if (start == 1'b0 && ^(main_21_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %61 = xor i32 %31, %27*/
		main_21_61 = (main_21_31 ^ main_21_27);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %61 = xor i32 %31, %27*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_61_reg <= main_21_61;
		if (start == 1'b0 && ^(main_21_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
		main_21_62 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_62_reg <= main_21_62;
		if (start == 1'b0 && ^(main_21_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %63 = xor i32 %61, %62*/
		main_21_63 = (main_21_61_reg ^ main_21_62);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %63 = xor i32 %61, %62*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_63_reg <= main_21_63;
		if (start == 1'b0 && ^(main_21_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %64 = xor i32 %63, %60*/
		main_21_64 = (main_21_63 ^ main_21_60_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %64 = xor i32 %63, %60*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_64_reg <= main_21_64;
		if (start == 1'b0 && ^(main_21_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask8.i.i = and i32 %56, -256*/
		main_21_mask8ii = (main_21_56 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask8.i.i = and i32 %56, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_mask8ii_reg <= main_21_mask8ii;
		if (start == 1'b0 && ^(main_21_mask8ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask8ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %65 = icmp eq i32 %.mask8.i.i, 256*/
		main_21_65 = (main_21_mask8ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %65 = icmp eq i32 %.mask8.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_65_reg <= main_21_65;
		if (start == 1'b0 && ^(main_21_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %66 = xor i32 %56, 283*/
		main_21_66 = (main_21_56 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %66 = xor i32 %56, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_66_reg <= main_21_66;
		if (start == 1'b0 && ^(main_21_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.17.i.i = select i1 %65, i32 %66, i32 %56*/
		main_21_17ii = (main_21_65 ? main_21_66 : main_21_56);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.17.i.i = select i1 %65, i32 %66, i32 %56*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_17ii_reg <= main_21_17ii;
		if (start == 1'b0 && ^(main_21_17ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_17ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %67 = xor i32 %28, %27*/
		main_21_67 = (main_21_28 ^ main_21_27);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %67 = xor i32 %28, %27*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_67_reg <= main_21_67;
		if (start == 1'b0 && ^(main_21_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.mask9.i.i = and i32 %67, -256*/
		main_21_mask9ii = (main_21_67 & -32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.mask9.i.i = and i32 %67, -256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_mask9ii_reg <= main_21_mask9ii;
		if (start == 1'b0 && ^(main_21_mask9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_mask9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %68 = icmp eq i32 %.mask9.i.i, 256*/
		main_21_68 = (main_21_mask9ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %68 = icmp eq i32 %.mask9.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_68_reg <= main_21_68;
		if (start == 1'b0 && ^(main_21_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %69 = xor i32 %67, 283*/
		main_21_69 = (main_21_67 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %69 = xor i32 %67, 283*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_69_reg <= main_21_69;
		if (start == 1'b0 && ^(main_21_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %.sink20.i.i = select i1 %68, i32 %69, i32 %67*/
		main_21_sink20ii = (main_21_68 ? main_21_69 : main_21_67);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %.sink20.i.i = select i1 %68, i32 %69, i32 %67*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		main_21_sink20ii_reg <= main_21_sink20ii;
		if (start == 1'b0 && ^(main_21_sink20ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_sink20ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %70 = xor i32 %.sink20.i.i, %.17.i.i*/
		main_21_70 = (main_21_sink20ii_reg ^ main_21_17ii);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %70 = xor i32 %.sink20.i.i, %.17.i.i*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_70_reg <= main_21_70;
		if (start == 1'b0 && ^(main_21_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %71 = xor i32 %37, %31*/
		main_21_71 = (main_21_37 ^ main_21_31_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %71 = xor i32 %37, %31*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		main_21_71_reg <= main_21_71;
		if (start == 1'b0 && ^(main_21_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
		main_21_72 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_72_reg <= main_21_72;
		if (start == 1'b0 && ^(main_21_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %73 = xor i32 %71, %72*/
		main_21_73 = (main_21_71_reg ^ main_21_72);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %73 = xor i32 %71, %72*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_73_reg <= main_21_73;
		if (start == 1'b0 && ^(main_21_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %74 = xor i32 %73, %70*/
		main_21_74 = (main_21_73 ^ main_21_70_reg);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %74 = xor i32 %73, %70*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_21_74_reg <= main_21_74;
		if (start == 1'b0 && ^(main_21_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %75 = add nsw i32 %j.022.i.i, 1*/
		main_21_75 = (main_21_j022ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %75 = add nsw i32 %j.022.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_75_reg <= main_21_75;
		if (start == 1'b0 && ^(main_21_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %21*/
	/*   %exitcond66 = icmp eq i32 %75, 4*/
		main_21_exitcond66 = (main_21_75 == 32'd4);
end
always @(posedge clk) begin
	/* main: %21*/
	/*   %exitcond66 = icmp eq i32 %75, 4*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		main_21_exitcond66_reg <= main_21_exitcond66;
		if (start == 1'b0 && ^(main_21_exitcond66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_21_exitcond66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %j.121.i.i = phi i32 [ %84, %.lr.ph.i.i ], [ 0, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_j121ii = 32'd0;
	end
	/* main: %.lr.ph.i.i*/
	/*   %j.121.i.i = phi i32 [ %84, %.lr.ph.i.i ], [ 0, %.lr.ph.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphii_42) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_exitcond81_reg == 1'd0))) */ begin
		main_lrphii_j121ii = main_lrphii_84_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %j.121.i.i = phi i32 [ %84, %.lr.ph.i.i ], [ 0, %.lr.ph.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphiipreheader_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii_j121ii_reg <= main_lrphii_j121ii;
		if (start == 1'b0 && ^(main_lrphii_j121ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_j121ii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i*/
	/*   %j.121.i.i = phi i32 [ %84, %.lr.ph.i.i ], [ 0, %.lr.ph.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphii_42) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii_exitcond81_reg == 1'd0))) begin
		main_lrphii_j121ii_reg <= main_lrphii_j121ii;
		if (start == 1'b0 && ^(main_lrphii_j121ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_j121ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %76 = shl i32 %j.121.i.i, 2*/
		main_lrphii_76 = (main_lrphii_j121ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %76 = shl i32 %j.121.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_76_reg <= main_lrphii_76;
		if (start == 1'b0 && ^(main_lrphii_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %77 = or i32 %76, 3*/
		main_lrphii_77 = (main_lrphii_76 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %77 = or i32 %76, 3*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_77_reg <= main_lrphii_77;
		if (start == 1'b0 && ^(main_lrphii_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep82 = getelementptr [32 x i32]* @statemt, i32 0, i32 %77*/
		main_lrphii_scevgep82 = (`TAG_g_statemt_a | (4 * main_lrphii_77));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep82 = getelementptr [32 x i32]* @statemt, i32 0, i32 %77*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep82_reg <= main_lrphii_scevgep82;
		if (start == 1'b0 && ^(main_lrphii_scevgep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep83 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %77*/
		main_lrphii_scevgep83 = (1'd0 | (4 * main_lrphii_77));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep83 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %77*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep83_reg <= main_lrphii_scevgep83;
		if (start == 1'b0 && ^(main_lrphii_scevgep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %78 = or i32 %76, 2*/
		main_lrphii_78 = (main_lrphii_76 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %78 = or i32 %76, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_78_reg <= main_lrphii_78;
		if (start == 1'b0 && ^(main_lrphii_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep84 = getelementptr [32 x i32]* @statemt, i32 0, i32 %78*/
		main_lrphii_scevgep84 = (`TAG_g_statemt_a | (4 * main_lrphii_78));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep84 = getelementptr [32 x i32]* @statemt, i32 0, i32 %78*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep84_reg <= main_lrphii_scevgep84;
		if (start == 1'b0 && ^(main_lrphii_scevgep84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep85 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %78*/
		main_lrphii_scevgep85 = (1'd0 | (4 * main_lrphii_78));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep85 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %78*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep85_reg <= main_lrphii_scevgep85;
		if (start == 1'b0 && ^(main_lrphii_scevgep85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %79 = or i32 %76, 1*/
		main_lrphii_79 = (main_lrphii_76 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %79 = or i32 %76, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_79_reg <= main_lrphii_79;
		if (start == 1'b0 && ^(main_lrphii_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep86 = getelementptr [32 x i32]* @statemt, i32 0, i32 %79*/
		main_lrphii_scevgep86 = (`TAG_g_statemt_a | (4 * main_lrphii_79));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep86 = getelementptr [32 x i32]* @statemt, i32 0, i32 %79*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep86_reg <= main_lrphii_scevgep86;
		if (start == 1'b0 && ^(main_lrphii_scevgep86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep87 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %79*/
		main_lrphii_scevgep87 = (1'd0 | (4 * main_lrphii_79));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep87 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %79*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep87_reg <= main_lrphii_scevgep87;
		if (start == 1'b0 && ^(main_lrphii_scevgep87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep88 = getelementptr [32 x i32]* @statemt, i32 0, i32 %76*/
		main_lrphii_scevgep88 = (`TAG_g_statemt_a | (4 * main_lrphii_76));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep88 = getelementptr [32 x i32]* @statemt, i32 0, i32 %76*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep88_reg <= main_lrphii_scevgep88;
		if (start == 1'b0 && ^(main_lrphii_scevgep88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep89 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %76*/
		main_lrphii_scevgep89 = (1'd0 | (4 * main_lrphii_76));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %scevgep89 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %76*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_scevgep89_reg <= main_lrphii_scevgep89;
		if (start == 1'b0 && ^(main_lrphii_scevgep89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_scevgep89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %80 = load i32* %scevgep89, align 4, !tbaa !1*/
		main_lrphii_80 = main_0_retii_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %80 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_lrphii_80_reg <= main_lrphii_80;
		if (start == 1'b0 && ^(main_lrphii_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %81 = load i32* %scevgep87, align 4, !tbaa !1*/
		main_lrphii_81 = main_0_retii_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %81 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_lrphii_81_reg <= main_lrphii_81;
		if (start == 1'b0 && ^(main_lrphii_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %82 = load i32* %scevgep85, align 4, !tbaa !1*/
		main_lrphii_82 = main_0_retii_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %82 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		main_lrphii_82_reg <= main_lrphii_82;
		if (start == 1'b0 && ^(main_lrphii_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %83 = load i32* %scevgep83, align 4, !tbaa !1*/
		main_lrphii_83 = main_0_retii_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %83 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		main_lrphii_83_reg <= main_lrphii_83;
		if (start == 1'b0 && ^(main_lrphii_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %84 = add nsw i32 %j.121.i.i, 1*/
		main_lrphii_84 = (main_lrphii_j121ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %84 = add nsw i32 %j.121.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_84_reg <= main_lrphii_84;
		if (start == 1'b0 && ^(main_lrphii_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i*/
	/*   %exitcond81 = icmp eq i32 %84, 4*/
		main_lrphii_exitcond81 = (main_lrphii_84 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i*/
	/*   %exitcond81 = icmp eq i32 %84, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_lrphii_exitcond81_reg <= main_lrphii_exitcond81;
		if (start == 1'b0 && ^(main_lrphii_exitcond81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii_exitcond81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   %indvar.next68 = add i32 %indvar67, 1*/
		main_MixColumn_AddRoundKeyexiti_indvarnext68 = (main_lrph24ii_indvar67_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   %indvar.next68 = add i32 %indvar67, 1*/
	if ((cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43)) begin
		main_MixColumn_AddRoundKeyexiti_indvarnext68_reg <= main_MixColumn_AddRoundKeyexiti_indvarnext68;
		if (start == 1'b0 && ^(main_MixColumn_AddRoundKeyexiti_indvarnext68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_MixColumn_AddRoundKeyexiti_indvarnext68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   %exitcond90 = icmp eq i32 %indvar.next68, 9*/
		main_MixColumn_AddRoundKeyexiti_exitcond90 = (main_MixColumn_AddRoundKeyexiti_indvarnext68 == 32'd9);
end
always @(posedge clk) begin
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   %exitcond90 = icmp eq i32 %indvar.next68, 9*/
	if ((cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43)) begin
		main_MixColumn_AddRoundKeyexiti_exitcond90_reg <= main_MixColumn_AddRoundKeyexiti_exitcond90;
		if (start == 1'b0 && ^(main_MixColumn_AddRoundKeyexiti_exitcond90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_MixColumn_AddRoundKeyexiti_exitcond90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %102, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i = 32'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %102, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_54) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond57_reg == 1'd0))) */ begin
		main_AddRoundKeyexit_crit_edgei_j01i2i = main_AddRoundKeyexit_crit_edgei_102_reg;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %102, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgeipreheader_46) & (memory_controller_waitrequest == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i_reg <= main_AddRoundKeyexit_crit_edgei_j01i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j01i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j01i2i_reg"); $finish; end
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %j.01.i2.i = phi i32 [ %102, %AddRoundKey.exit._crit_edge.i ], [ 0, %AddRoundKey.exit._crit_edge.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_54) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKeyexit_crit_edgei_exitcond57_reg == 1'd0))) begin
		main_AddRoundKeyexit_crit_edgei_j01i2i_reg <= main_AddRoundKeyexit_crit_edgei_j01i2i;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_j01i2i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_j01i2i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %85 = shl i32 %j.01.i2.i, 2*/
		main_AddRoundKeyexit_crit_edgei_85 = (main_AddRoundKeyexit_crit_edgei_j01i2i_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %85 = shl i32 %j.01.i2.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_85_reg <= main_AddRoundKeyexit_crit_edgei_85;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %86 = or i32 %85, 3*/
		main_AddRoundKeyexit_crit_edgei_86 = (main_AddRoundKeyexit_crit_edgei_85 | 32'd3);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %86 = or i32 %85, 3*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_86_reg <= main_AddRoundKeyexit_crit_edgei_86;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep58 = getelementptr [32 x i32]* @statemt, i32 0, i32 %86*/
		main_AddRoundKeyexit_crit_edgei_scevgep58 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_86));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep58 = getelementptr [32 x i32]* @statemt, i32 0, i32 %86*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep58_reg <= main_AddRoundKeyexit_crit_edgei_scevgep58;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %87 = or i32 %85, 2*/
		main_AddRoundKeyexit_crit_edgei_87 = (main_AddRoundKeyexit_crit_edgei_85 | 32'd2);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %87 = or i32 %85, 2*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_87_reg <= main_AddRoundKeyexit_crit_edgei_87;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep59 = getelementptr [32 x i32]* @statemt, i32 0, i32 %87*/
		main_AddRoundKeyexit_crit_edgei_scevgep59 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_87));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep59 = getelementptr [32 x i32]* @statemt, i32 0, i32 %87*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep59_reg <= main_AddRoundKeyexit_crit_edgei_scevgep59;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %88 = or i32 %85, 1*/
		main_AddRoundKeyexit_crit_edgei_88 = (main_AddRoundKeyexit_crit_edgei_85 | 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %88 = or i32 %85, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_88_reg <= main_AddRoundKeyexit_crit_edgei_88;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep60 = getelementptr [32 x i32]* @statemt, i32 0, i32 %88*/
		main_AddRoundKeyexit_crit_edgei_scevgep60 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_88));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep60 = getelementptr [32 x i32]* @statemt, i32 0, i32 %88*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep60_reg <= main_AddRoundKeyexit_crit_edgei_scevgep60;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep61 = getelementptr [32 x i32]* @statemt, i32 0, i32 %85*/
		main_AddRoundKeyexit_crit_edgei_scevgep61 = (`TAG_g_statemt_a | (4 * main_AddRoundKeyexit_crit_edgei_85));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep61 = getelementptr [32 x i32]* @statemt, i32 0, i32 %85*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep61_reg <= main_AddRoundKeyexit_crit_edgei_scevgep61;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %89 = add i32 %j.01.i2.i, 40*/
		main_AddRoundKeyexit_crit_edgei_89 = (main_AddRoundKeyexit_crit_edgei_j01i2i_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %89 = add i32 %j.01.i2.i, 40*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_89_reg <= main_AddRoundKeyexit_crit_edgei_89;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep62 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %89*/
		main_AddRoundKeyexit_crit_edgei_scevgep62 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_AddRoundKeyexit_crit_edgei_89_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep62 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %89*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep62_reg <= main_AddRoundKeyexit_crit_edgei_scevgep62;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep63 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %89*/
		main_AddRoundKeyexit_crit_edgei_scevgep63 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_AddRoundKeyexit_crit_edgei_89_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep63 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %89*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep63_reg <= main_AddRoundKeyexit_crit_edgei_scevgep63;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep64 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %89*/
		main_AddRoundKeyexit_crit_edgei_scevgep64 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_AddRoundKeyexit_crit_edgei_89_reg)));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep64 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %89*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep64_reg <= main_AddRoundKeyexit_crit_edgei_scevgep64;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep65 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %89*/
		main_AddRoundKeyexit_crit_edgei_scevgep65 = (`TAG_g_word_a | (4 * main_AddRoundKeyexit_crit_edgei_89_reg));
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %scevgep65 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %89*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		main_AddRoundKeyexit_crit_edgei_scevgep65_reg <= main_AddRoundKeyexit_crit_edgei_scevgep65;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_scevgep65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_scevgep65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_90 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		main_AddRoundKeyexit_crit_edgei_90_reg <= main_AddRoundKeyexit_crit_edgei_90;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_91 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		main_AddRoundKeyexit_crit_edgei_91_reg <= main_AddRoundKeyexit_crit_edgei_91;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %92 = xor i32 %91, %90*/
		main_AddRoundKeyexit_crit_edgei_92 = (main_AddRoundKeyexit_crit_edgei_91_reg ^ main_AddRoundKeyexit_crit_edgei_90);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %92 = xor i32 %91, %90*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		main_AddRoundKeyexit_crit_edgei_92_reg <= main_AddRoundKeyexit_crit_edgei_92;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_93 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		main_AddRoundKeyexit_crit_edgei_93_reg <= main_AddRoundKeyexit_crit_edgei_93;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_94 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		main_AddRoundKeyexit_crit_edgei_94_reg <= main_AddRoundKeyexit_crit_edgei_94;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %95 = xor i32 %94, %93*/
		main_AddRoundKeyexit_crit_edgei_95 = (main_AddRoundKeyexit_crit_edgei_94_reg ^ main_AddRoundKeyexit_crit_edgei_93);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %95 = xor i32 %94, %93*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		main_AddRoundKeyexit_crit_edgei_95_reg <= main_AddRoundKeyexit_crit_edgei_95;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_96 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		main_AddRoundKeyexit_crit_edgei_96_reg <= main_AddRoundKeyexit_crit_edgei_96;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_97 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		main_AddRoundKeyexit_crit_edgei_97_reg <= main_AddRoundKeyexit_crit_edgei_97;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %98 = xor i32 %97, %96*/
		main_AddRoundKeyexit_crit_edgei_98 = (main_AddRoundKeyexit_crit_edgei_97_reg ^ main_AddRoundKeyexit_crit_edgei_96);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %98 = xor i32 %97, %96*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		main_AddRoundKeyexit_crit_edgei_98_reg <= main_AddRoundKeyexit_crit_edgei_98;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_99 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		main_AddRoundKeyexit_crit_edgei_99_reg <= main_AddRoundKeyexit_crit_edgei_99;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
		main_AddRoundKeyexit_crit_edgei_100 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		main_AddRoundKeyexit_crit_edgei_100_reg <= main_AddRoundKeyexit_crit_edgei_100;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %101 = xor i32 %100, %99*/
		main_AddRoundKeyexit_crit_edgei_101 = (main_AddRoundKeyexit_crit_edgei_100_reg ^ main_AddRoundKeyexit_crit_edgei_99);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %101 = xor i32 %100, %99*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		main_AddRoundKeyexit_crit_edgei_101_reg <= main_AddRoundKeyexit_crit_edgei_101;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %102 = add nsw i32 %j.01.i2.i, 1*/
		main_AddRoundKeyexit_crit_edgei_102 = (main_AddRoundKeyexit_crit_edgei_j01i2i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %102 = add nsw i32 %j.01.i2.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_102_reg <= main_AddRoundKeyexit_crit_edgei_102;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond57 = icmp eq i32 %102, 4*/
		main_AddRoundKeyexit_crit_edgei_exitcond57 = (main_AddRoundKeyexit_crit_edgei_102 == 32'd4);
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %exitcond57 = icmp eq i32 %102, 4*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		main_AddRoundKeyexit_crit_edgei_exitcond57_reg <= main_AddRoundKeyexit_crit_edgei_exitcond57;
		if (start == 1'b0 && ^(main_AddRoundKeyexit_crit_edgei_exitcond57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKeyexit_crit_edgei_exitcond57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %111, %108 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i17i = 32'd0;
	end
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %111, %108 ], [ 0, %.lr.ph.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__108_62) & (memory_controller_waitrequest == 1'd0)) & (main_108_exitcond55 == 1'd0))) */ begin
		main_lrphi_i17i = main_108_111;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %111, %108 ], [ 0, %.lr.ph.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphipreheader_55) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi_i17i_reg <= main_lrphi_i17i;
		if (start == 1'b0 && ^(main_lrphi_i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i17i_reg"); $finish; end
	end
	/* main: %.lr.ph.i*/
	/*   %i.17.i = phi i32 [ %111, %108 ], [ 0, %.lr.ph.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__108_62) & (memory_controller_waitrequest == 1'd0)) & (main_108_exitcond55 == 1'd0))) begin
		main_lrphi_i17i_reg <= main_lrphi_i17i;
		if (start == 1'b0 && ^(main_lrphi_i17i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_i17i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep56 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.17.i*/
		main_lrphi_scevgep56 = (`TAG_g_statemt_a | (4 * main_lrphi_i17i_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %scevgep56 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.17.i*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_56)) begin
		main_lrphi_scevgep56_reg <= main_lrphi_scevgep56;
		if (start == 1'b0 && ^(main_lrphi_scevgep56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_scevgep56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
		main_lrphi_104 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_58)) begin
		main_lrphi_104_reg <= main_lrphi_104;
		if (start == 1'b0 && ^(main_lrphi_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i*/
	/*   %105 = icmp slt i32 %104, 16*/
		main_lrphi_105 = ($signed(main_lrphi_104) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i*/
	/*   %105 = icmp slt i32 %104, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_58)) begin
		main_lrphi_105_reg <= main_lrphi_105;
		if (start == 1'b0 && ^(main_lrphi_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
		main_106_prei = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__106_61)) begin
		main_106_prei_reg <= main_106_prei;
		if (start == 1'b0 && ^(main_106_prei) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_106_prei_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %108*/
	/*   %109 = phi i32 [ %.pre.i, %106 ], [ %104, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_58) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_105 == 1'd0))) begin
		main_108_109 = main_lrphi_104;
	end
	/* main: %108*/
	/*   %109 = phi i32 [ %.pre.i, %106 ], [ %104, %.lr.ph.i ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__106_61) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_108_109 = main_106_prei;
	end
end
always @(posedge clk) begin
	/* main: %108*/
	/*   %109 = phi i32 [ %.pre.i, %106 ], [ %104, %.lr.ph.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi_58) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi_105 == 1'd0))) begin
		main_108_109_reg <= main_108_109;
		if (start == 1'b0 && ^(main_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_109_reg"); $finish; end
	end
	/* main: %108*/
	/*   %109 = phi i32 [ %.pre.i, %106 ], [ %104, %.lr.ph.i ]*/
	if (((cur_state == LEGUP_F_main_BB__106_61) & (memory_controller_waitrequest == 1'd0))) begin
		main_108_109_reg <= main_108_109;
		if (start == 1'b0 && ^(main_108_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %108*/
	/*   %111 = add nsw i32 %i.17.i, 1*/
		main_108_111 = (main_lrphi_i17i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %108*/
	/*   %111 = add nsw i32 %i.17.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__108_62)) begin
		main_108_111_reg <= main_108_111;
		if (start == 1'b0 && ^(main_108_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %108*/
	/*   %exitcond55 = icmp eq i32 %111, 16*/
		main_108_exitcond55 = (main_108_111 == 32'd16);
end
always @(posedge clk) begin
	/* main: %108*/
	/*   %exitcond55 = icmp eq i32 %111, 16*/
	if ((cur_state == LEGUP_F_main_BB__108_62)) begin
		main_108_exitcond55_reg <= main_108_exitcond55;
		if (start == 1'b0 && ^(main_108_exitcond55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_108_exitcond55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %112 = phi i32 [ %117, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_112 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %112 = phi i32 [ %117, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_66) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond52_reg == 1'd0))) */ begin
		main_preheaderi_112 = main_preheaderi_117;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %112 = phi i32 [ %117, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_112_reg <= main_preheaderi_112;
		if (start == 1'b0 && ^(main_preheaderi_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_112_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %112 = phi i32 [ %117, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_66) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond52_reg == 1'd0))) begin
		main_preheaderi_112_reg <= main_preheaderi_112;
		if (start == 1'b0 && ^(main_preheaderi_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %118, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i26i = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %118, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderi_66) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond52_reg == 1'd0))) */ begin
		main_preheaderi_i26i = main_preheaderi_118_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %118, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderipreheader_63) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_i26i_reg <= main_preheaderi_i26i;
		if (start == 1'b0 && ^(main_preheaderi_i26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i26i_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %i.26.i = phi i32 [ %118, %.preheader.i ], [ 0, %.preheader.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderi_66) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderi_exitcond52_reg == 1'd0))) begin
		main_preheaderi_i26i_reg <= main_preheaderi_i26i;
		if (start == 1'b0 && ^(main_preheaderi_i26i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_i26i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep53 = getelementptr [16 x i32]* @encrypt.out_enc_statemt, i32 0, i32 %i.26.i*/
		main_preheaderi_scevgep53 = (1'd0 | (4 * main_preheaderi_i26i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep53 = getelementptr [16 x i32]* @encrypt.out_enc_statemt, i32 0, i32 %i.26.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		main_preheaderi_scevgep53_reg <= main_preheaderi_scevgep53;
		if (start == 1'b0 && ^(main_preheaderi_scevgep53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %scevgep54 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.26.i*/
		main_preheaderi_scevgep54 = (`TAG_g_statemt_a | (4 * main_preheaderi_i26i_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %scevgep54 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.26.i*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		main_preheaderi_scevgep54_reg <= main_preheaderi_scevgep54;
		if (start == 1'b0 && ^(main_preheaderi_scevgep54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_scevgep54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
		main_preheaderi_113 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		main_preheaderi_113_reg <= main_preheaderi_113;
		if (start == 1'b0 && ^(main_preheaderi_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %114 = load i32* %scevgep53, align 4, !tbaa !1*/
		main_preheaderi_114 = encryptout_enc_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %114 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_65)) begin
		main_preheaderi_114_reg <= main_preheaderi_114;
		if (start == 1'b0 && ^(main_preheaderi_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %115 = icmp eq i32 %113, %114*/
		main_preheaderi_115 = (main_preheaderi_113 == main_preheaderi_114_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %115 = icmp eq i32 %113, %114*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		main_preheaderi_115_reg <= main_preheaderi_115;
		if (start == 1'b0 && ^(main_preheaderi_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %116 = zext i1 %115 to i32*/
		main_preheaderi_116 = main_preheaderi_115;
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %116 = zext i1 %115 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		main_preheaderi_116_reg <= main_preheaderi_116;
		if (start == 1'b0 && ^(main_preheaderi_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %117 = add nsw i32 %116, %112*/
		main_preheaderi_117 = (main_preheaderi_116 + main_preheaderi_112_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %117 = add nsw i32 %116, %112*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_66)) begin
		main_preheaderi_117_reg <= main_preheaderi_117;
		if (start == 1'b0 && ^(main_preheaderi_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %118 = add nsw i32 %i.26.i, 1*/
		main_preheaderi_118 = (main_preheaderi_i26i_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %118 = add nsw i32 %i.26.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		main_preheaderi_118_reg <= main_preheaderi_118;
		if (start == 1'b0 && ^(main_preheaderi_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %exitcond52 = icmp eq i32 %118, 16*/
		main_preheaderi_exitcond52 = (main_preheaderi_118 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %exitcond52 = icmp eq i32 %118, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		main_preheaderi_exitcond52_reg <= main_preheaderi_exitcond52;
		if (start == 1'b0 && ^(main_preheaderi_exitcond52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_exitcond52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %j.01.i.i2 = phi i32 [ 0, %encrypt.exit ], [ %137, %119 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_j01ii2 = 32'd0;
	end
	/* main: %119*/
	/*   %j.01.i.i2 = phi i32 [ 0, %encrypt.exit ], [ %137, %119 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__119_77) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond42_reg == 1'd0))) */ begin
		main_119_j01ii2 = main_119_137_reg;
	end
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %j.01.i.i2 = phi i32 [ 0, %encrypt.exit ], [ %137, %119 ]*/
	if (((cur_state == LEGUP_F_main_BB_encryptexit_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_119_j01ii2_reg <= main_119_j01ii2;
		if (start == 1'b0 && ^(main_119_j01ii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_j01ii2_reg"); $finish; end
	end
	/* main: %119*/
	/*   %j.01.i.i2 = phi i32 [ 0, %encrypt.exit ], [ %137, %119 ]*/
	if ((((cur_state == LEGUP_F_main_BB__119_77) & (memory_controller_waitrequest == 1'd0)) & (main_119_exitcond42_reg == 1'd0))) begin
		main_119_j01ii2_reg <= main_119_j01ii2;
		if (start == 1'b0 && ^(main_119_j01ii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_j01ii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %120 = shl i32 %j.01.i.i2, 2*/
		main_119_120 = (main_119_j01ii2_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %120 = shl i32 %j.01.i.i2, 2*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_120_reg <= main_119_120;
		if (start == 1'b0 && ^(main_119_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %121 = or i32 %120, 3*/
		main_119_121 = (main_119_120 | 32'd3);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %121 = or i32 %120, 3*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_121_reg <= main_119_121;
		if (start == 1'b0 && ^(main_119_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep43 = getelementptr [32 x i32]* @statemt, i32 0, i32 %121*/
		main_119_scevgep43 = (`TAG_g_statemt_a | (4 * main_119_121));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep43 = getelementptr [32 x i32]* @statemt, i32 0, i32 %121*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_scevgep43_reg <= main_119_scevgep43;
		if (start == 1'b0 && ^(main_119_scevgep43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %122 = or i32 %120, 2*/
		main_119_122 = (main_119_120 | 32'd2);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %122 = or i32 %120, 2*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_122_reg <= main_119_122;
		if (start == 1'b0 && ^(main_119_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep44 = getelementptr [32 x i32]* @statemt, i32 0, i32 %122*/
		main_119_scevgep44 = (`TAG_g_statemt_a | (4 * main_119_122));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep44 = getelementptr [32 x i32]* @statemt, i32 0, i32 %122*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_scevgep44_reg <= main_119_scevgep44;
		if (start == 1'b0 && ^(main_119_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %123 = or i32 %120, 1*/
		main_119_123 = (main_119_120 | 32'd1);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %123 = or i32 %120, 1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_123_reg <= main_119_123;
		if (start == 1'b0 && ^(main_119_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep45 = getelementptr [32 x i32]* @statemt, i32 0, i32 %123*/
		main_119_scevgep45 = (`TAG_g_statemt_a | (4 * main_119_123));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep45 = getelementptr [32 x i32]* @statemt, i32 0, i32 %123*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_scevgep45_reg <= main_119_scevgep45;
		if (start == 1'b0 && ^(main_119_scevgep45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep46 = getelementptr [32 x i32]* @statemt, i32 0, i32 %120*/
		main_119_scevgep46 = (`TAG_g_statemt_a | (4 * main_119_120));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep46 = getelementptr [32 x i32]* @statemt, i32 0, i32 %120*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_scevgep46_reg <= main_119_scevgep46;
		if (start == 1'b0 && ^(main_119_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %124 = add i32 %j.01.i.i2, 40*/
		main_119_124 = (main_119_j01ii2_reg + 32'd40);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %124 = add i32 %j.01.i.i2, 40*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_124_reg <= main_119_124;
		if (start == 1'b0 && ^(main_119_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep47 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %124*/
		main_119_scevgep47 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_119_124_reg)));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep47 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_scevgep47_reg <= main_119_scevgep47;
		if (start == 1'b0 && ^(main_119_scevgep47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep48 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %124*/
		main_119_scevgep48 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_119_124_reg)));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep48 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_scevgep48_reg <= main_119_scevgep48;
		if (start == 1'b0 && ^(main_119_scevgep48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep49 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %124*/
		main_119_scevgep49 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_119_124_reg)));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep49 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_scevgep49_reg <= main_119_scevgep49;
		if (start == 1'b0 && ^(main_119_scevgep49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %scevgep50 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %124*/
		main_119_scevgep50 = (`TAG_g_word_a | (4 * main_119_124_reg));
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %scevgep50 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %124*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		main_119_scevgep50_reg <= main_119_scevgep50;
		if (start == 1'b0 && ^(main_119_scevgep50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_scevgep50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
		main_119_125 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		main_119_125_reg <= main_119_125;
		if (start == 1'b0 && ^(main_119_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
		main_119_126 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		main_119_126_reg <= main_119_126;
		if (start == 1'b0 && ^(main_119_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %127 = xor i32 %126, %125*/
		main_119_127 = (main_119_126_reg ^ main_119_125);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %127 = xor i32 %126, %125*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		main_119_127_reg <= main_119_127;
		if (start == 1'b0 && ^(main_119_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
		main_119_128 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		main_119_128_reg <= main_119_128;
		if (start == 1'b0 && ^(main_119_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
		main_119_129 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		main_119_129_reg <= main_119_129;
		if (start == 1'b0 && ^(main_119_129) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_129_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %130 = xor i32 %129, %128*/
		main_119_130 = (main_119_129_reg ^ main_119_128);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %130 = xor i32 %129, %128*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		main_119_130_reg <= main_119_130;
		if (start == 1'b0 && ^(main_119_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
		main_119_131 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		main_119_131_reg <= main_119_131;
		if (start == 1'b0 && ^(main_119_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
		main_119_132 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		main_119_132_reg <= main_119_132;
		if (start == 1'b0 && ^(main_119_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_132_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %133 = xor i32 %132, %131*/
		main_119_133 = (main_119_132_reg ^ main_119_131);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %133 = xor i32 %132, %131*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		main_119_133_reg <= main_119_133;
		if (start == 1'b0 && ^(main_119_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
		main_119_134 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		main_119_134_reg <= main_119_134;
		if (start == 1'b0 && ^(main_119_134) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_134_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
		main_119_135 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		main_119_135_reg <= main_119_135;
		if (start == 1'b0 && ^(main_119_135) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_135_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %136 = xor i32 %135, %134*/
		main_119_136 = (main_119_135_reg ^ main_119_134);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %136 = xor i32 %135, %134*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		main_119_136_reg <= main_119_136;
		if (start == 1'b0 && ^(main_119_136) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_136_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %137 = add nsw i32 %j.01.i.i2, 1*/
		main_119_137 = (main_119_j01ii2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %137 = add nsw i32 %j.01.i.i2, 1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_137_reg <= main_119_137;
		if (start == 1'b0 && ^(main_119_137) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_137_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %119*/
	/*   %exitcond42 = icmp eq i32 %137, 4*/
		main_119_exitcond42 = (main_119_137 == 32'd4);
end
always @(posedge clk) begin
	/* main: %119*/
	/*   %exitcond42 = icmp eq i32 %137, 4*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		main_119_exitcond42_reg <= main_119_exitcond42;
		if (start == 1'b0 && ^(main_119_exitcond42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_119_exitcond42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %indvar = phi i32 [ %indvar.next, %AddRoundKey_InversMixColumn.exit.i ], [ 0, %.lr.ph10.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph10ipreheader_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph24ii8_indvar = 32'd0;
	end
	/* main: %.lr.ph24.i.i8*/
	/*   %indvar = phi i32 [ %indvar.next, %AddRoundKey_InversMixColumn.exit.i ], [ 0, %.lr.ph10.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_140) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKey_InversMixColumnexiti_exitcond37_reg == 1'd0))) */ begin
		main_lrph24ii8_indvar = main_AddRoundKey_InversMixColumnexiti_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %indvar = phi i32 [ %indvar.next, %AddRoundKey_InversMixColumn.exit.i ], [ 0, %.lr.ph10.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph10ipreheader_80) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrph24ii8_indvar_reg <= main_lrph24ii8_indvar;
		if (start == 1'b0 && ^(main_lrph24ii8_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii8_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph24.i.i8*/
	/*   %indvar = phi i32 [ %indvar.next, %AddRoundKey_InversMixColumn.exit.i ], [ 0, %.lr.ph10.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_140) & (memory_controller_waitrequest == 1'd0)) & (main_AddRoundKey_InversMixColumnexiti_exitcond37_reg == 1'd0))) begin
		main_lrph24ii8_indvar_reg <= main_lrph24ii8_indvar;
		if (start == 1'b0 && ^(main_lrph24ii8_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii8_indvar_reg"); $finish; end
	end
end
always @(*) begin
	main_lrph24ii8_138 = main_lrph24ii8_138_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %138 = mul i32 %indvar, -4*/
	if ((cur_state == LEGUP_F_main_BB_lrph24ii8_82)) begin
		main_lrph24ii8_138_reg <= main_lrph24ii8_138;
		if (start == 1'b0 && ^(main_lrph24ii8_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii8_138_reg"); $finish; end
	end
	/* main: %.lr.ph24.i.i8*/
	/*   %138 = mul i32 %indvar, -4*/
	if ((cur_state == LEGUP_F_main_BB_lrph24ii8_82)) begin
		main_lrph24ii8_138_reg <= main_lrph24ii8_138;
		if (start == 1'b0 && ^(main_lrph24ii8_138) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii8_138_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %139 = add i32 %138, 36*/
		main_lrph24ii8_139 = (main_lrph24ii8_138 + 32'd36);
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %139 = add i32 %138, 36*/
	if ((cur_state == LEGUP_F_main_BB_lrph24ii8_82)) begin
		main_lrph24ii8_139_reg <= main_lrph24ii8_139;
		if (start == 1'b0 && ^(main_lrph24ii8_139) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrph24ii8_139_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %j.022.i.i9 = phi i32 [ 0, %.lr.ph24.i.i8 ], [ %158, %140 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph24ii8_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_140_j022ii9 = 32'd0;
	end
	/* main: %140*/
	/*   %j.022.i.i9 = phi i32 [ 0, %.lr.ph24.i.i8 ], [ %158, %140 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__140_90) & (memory_controller_waitrequest == 1'd0)) & (main_140_exitcond13_reg == 1'd0))) */ begin
		main_140_j022ii9 = main_140_158_reg;
	end
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %j.022.i.i9 = phi i32 [ 0, %.lr.ph24.i.i8 ], [ %158, %140 ]*/
	if (((cur_state == LEGUP_F_main_BB_lrph24ii8_82) & (memory_controller_waitrequest == 1'd0))) begin
		main_140_j022ii9_reg <= main_140_j022ii9;
		if (start == 1'b0 && ^(main_140_j022ii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_j022ii9_reg"); $finish; end
	end
	/* main: %140*/
	/*   %j.022.i.i9 = phi i32 [ 0, %.lr.ph24.i.i8 ], [ %158, %140 ]*/
	if ((((cur_state == LEGUP_F_main_BB__140_90) & (memory_controller_waitrequest == 1'd0)) & (main_140_exitcond13_reg == 1'd0))) begin
		main_140_j022ii9_reg <= main_140_j022ii9;
		if (start == 1'b0 && ^(main_140_j022ii9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_j022ii9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %141 = add i32 %139, %j.022.i.i9*/
		main_140_141 = (main_lrph24ii8_139_reg + main_140_j022ii9_reg);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %141 = add i32 %139, %j.022.i.i9*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_141_reg <= main_140_141;
		if (start == 1'b0 && ^(main_140_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep21 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %141*/
		main_140_scevgep21 = (`TAG_g_word_a | (4 * main_140_141_reg));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep21 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %141*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		main_140_scevgep21_reg <= main_140_scevgep21;
		if (start == 1'b0 && ^(main_140_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep20 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %141*/
		main_140_scevgep20 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main_140_141_reg)));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep20 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %141*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		main_140_scevgep20_reg <= main_140_scevgep20;
		if (start == 1'b0 && ^(main_140_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep19 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %141*/
		main_140_scevgep19 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main_140_141_reg)));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep19 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %141*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		main_140_scevgep19_reg <= main_140_scevgep19;
		if (start == 1'b0 && ^(main_140_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep18 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %141*/
		main_140_scevgep18 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main_140_141_reg)));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep18 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %141*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		main_140_scevgep18_reg <= main_140_scevgep18;
		if (start == 1'b0 && ^(main_140_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %142 = shl i32 %j.022.i.i9, 2*/
		main_140_142 = (main_140_j022ii9_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %142 = shl i32 %j.022.i.i9, 2*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_142_reg <= main_140_142;
		if (start == 1'b0 && ^(main_140_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %143 = or i32 %142, 3*/
		main_140_143 = (main_140_142 | 32'd3);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %143 = or i32 %142, 3*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_143_reg <= main_140_143;
		if (start == 1'b0 && ^(main_140_143) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_143_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep14 = getelementptr [32 x i32]* @statemt, i32 0, i32 %143*/
		main_140_scevgep14 = (`TAG_g_statemt_a | (4 * main_140_143));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep14 = getelementptr [32 x i32]* @statemt, i32 0, i32 %143*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_scevgep14_reg <= main_140_scevgep14;
		if (start == 1'b0 && ^(main_140_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %144 = or i32 %142, 2*/
		main_140_144 = (main_140_142 | 32'd2);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %144 = or i32 %142, 2*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_144_reg <= main_140_144;
		if (start == 1'b0 && ^(main_140_144) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_144_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep15 = getelementptr [32 x i32]* @statemt, i32 0, i32 %144*/
		main_140_scevgep15 = (`TAG_g_statemt_a | (4 * main_140_144));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep15 = getelementptr [32 x i32]* @statemt, i32 0, i32 %144*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_scevgep15_reg <= main_140_scevgep15;
		if (start == 1'b0 && ^(main_140_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %145 = or i32 %142, 1*/
		main_140_145 = (main_140_142 | 32'd1);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %145 = or i32 %142, 1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_145_reg <= main_140_145;
		if (start == 1'b0 && ^(main_140_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_145_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep16 = getelementptr [32 x i32]* @statemt, i32 0, i32 %145*/
		main_140_scevgep16 = (`TAG_g_statemt_a | (4 * main_140_145));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep16 = getelementptr [32 x i32]* @statemt, i32 0, i32 %145*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_scevgep16_reg <= main_140_scevgep16;
		if (start == 1'b0 && ^(main_140_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %scevgep17 = getelementptr [32 x i32]* @statemt, i32 0, i32 %142*/
		main_140_scevgep17 = (`TAG_g_statemt_a | (4 * main_140_142));
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %scevgep17 = getelementptr [32 x i32]* @statemt, i32 0, i32 %142*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_scevgep17_reg <= main_140_scevgep17;
		if (start == 1'b0 && ^(main_140_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
		main_140_146 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		main_140_146_reg <= main_140_146;
		if (start == 1'b0 && ^(main_140_146) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_146_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
		main_140_147 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		main_140_147_reg <= main_140_147;
		if (start == 1'b0 && ^(main_140_147) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_147_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %148 = xor i32 %147, %146*/
		main_140_148 = (main_140_147_reg ^ main_140_146);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %148 = xor i32 %147, %146*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		main_140_148_reg <= main_140_148;
		if (start == 1'b0 && ^(main_140_148) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_148_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
		main_140_149 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		main_140_149_reg <= main_140_149;
		if (start == 1'b0 && ^(main_140_149) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_149_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
		main_140_150 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		main_140_150_reg <= main_140_150;
		if (start == 1'b0 && ^(main_140_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %151 = xor i32 %150, %149*/
		main_140_151 = (main_140_150_reg ^ main_140_149);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %151 = xor i32 %150, %149*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		main_140_151_reg <= main_140_151;
		if (start == 1'b0 && ^(main_140_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
		main_140_152 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		main_140_152_reg <= main_140_152;
		if (start == 1'b0 && ^(main_140_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
		main_140_153 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		main_140_153_reg <= main_140_153;
		if (start == 1'b0 && ^(main_140_153) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_153_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %154 = xor i32 %153, %152*/
		main_140_154 = (main_140_153_reg ^ main_140_152);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %154 = xor i32 %153, %152*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		main_140_154_reg <= main_140_154;
		if (start == 1'b0 && ^(main_140_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_154_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
		main_140_155 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		main_140_155_reg <= main_140_155;
		if (start == 1'b0 && ^(main_140_155) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_155_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
		main_140_156 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		main_140_156_reg <= main_140_156;
		if (start == 1'b0 && ^(main_140_156) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_156_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %157 = xor i32 %156, %155*/
		main_140_157 = (main_140_156_reg ^ main_140_155);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %157 = xor i32 %156, %155*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		main_140_157_reg <= main_140_157;
		if (start == 1'b0 && ^(main_140_157) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_157_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %158 = add nsw i32 %j.022.i.i9, 1*/
		main_140_158 = (main_140_j022ii9_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %158 = add nsw i32 %j.022.i.i9, 1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_158_reg <= main_140_158;
		if (start == 1'b0 && ^(main_140_158) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_158_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %140*/
	/*   %exitcond13 = icmp eq i32 %158, 4*/
		main_140_exitcond13 = (main_140_158 == 32'd4);
end
always @(posedge clk) begin
	/* main: %140*/
	/*   %exitcond13 = icmp eq i32 %158, 4*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		main_140_exitcond13_reg <= main_140_exitcond13;
		if (start == 1'b0 && ^(main_140_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_140_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader17.i.i*/
	/*   %j.121.i.i10 = phi i32 [ %226, %225 ], [ 0, %.preheader17.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader17iipreheader_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader17ii_j121ii10 = 32'd0;
	end
	/* main: %.preheader17.i.i*/
	/*   %j.121.i.i10 = phi i32 [ %226, %225 ], [ 0, %.preheader17.i.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__225_132) & (memory_controller_waitrequest == 1'd0)) & (main_225_exitcond25 == 1'd0))) */ begin
		main_preheader17ii_j121ii10 = main_225_226;
	end
end
always @(posedge clk) begin
	/* main: %.preheader17.i.i*/
	/*   %j.121.i.i10 = phi i32 [ %226, %225 ], [ 0, %.preheader17.i.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader17iipreheader_91) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader17ii_j121ii10_reg <= main_preheader17ii_j121ii10;
		if (start == 1'b0 && ^(main_preheader17ii_j121ii10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader17ii_j121ii10_reg"); $finish; end
	end
	/* main: %.preheader17.i.i*/
	/*   %j.121.i.i10 = phi i32 [ %226, %225 ], [ 0, %.preheader17.i.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__225_132) & (memory_controller_waitrequest == 1'd0)) & (main_225_exitcond25 == 1'd0))) begin
		main_preheader17ii_j121ii10_reg <= main_preheader17ii_j121ii10;
		if (start == 1'b0 && ^(main_preheader17ii_j121ii10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader17ii_j121ii10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader17.i.i*/
	/*   %159 = shl i32 %j.121.i.i10, 2*/
		main_preheader17ii_159 = (main_preheader17ii_j121ii10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader17.i.i*/
	/*   %159 = shl i32 %j.121.i.i10, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader17ii_92)) begin
		main_preheader17ii_159_reg <= main_preheader17ii_159;
		if (start == 1'b0 && ^(main_preheader17ii_159) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader17ii_159_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %i.020.i.i = phi i32 [ 0, %.preheader17.i.i ], [ %177, %160 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader17ii_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_160_i020ii = 32'd0;
	end
	/* main: %160*/
	/*   %i.020.i.i = phi i32 [ 0, %.preheader17.i.i ], [ %177, %160 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__160_131) & (memory_controller_waitrequest == 1'd0)) & (main_160_exitcond22_reg == 1'd0))) */ begin
		main_160_i020ii = main_160_177_reg;
	end
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %i.020.i.i = phi i32 [ 0, %.preheader17.i.i ], [ %177, %160 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader17ii_92) & (memory_controller_waitrequest == 1'd0))) begin
		main_160_i020ii_reg <= main_160_i020ii;
		if (start == 1'b0 && ^(main_160_i020ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_i020ii_reg"); $finish; end
	end
	/* main: %160*/
	/*   %i.020.i.i = phi i32 [ 0, %.preheader17.i.i ], [ %177, %160 ]*/
	if ((((cur_state == LEGUP_F_main_BB__160_131) & (memory_controller_waitrequest == 1'd0)) & (main_160_exitcond22_reg == 1'd0))) begin
		main_160_i020ii_reg <= main_160_i020ii;
		if (start == 1'b0 && ^(main_160_i020ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_i020ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %161 = add i32 %159, %i.020.i.i*/
		main_160_161 = (main_preheader17ii_159_reg + main_160_i020ii_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %161 = add i32 %159, %i.020.i.i*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_161_reg <= main_160_161;
		if (start == 1'b0 && ^(main_160_161) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_161_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %scevgep24 = getelementptr [32 x i32]* @statemt, i32 0, i32 %161*/
		main_160_scevgep24 = (`TAG_g_statemt_a | (4 * main_160_161_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %scevgep24 = getelementptr [32 x i32]* @statemt, i32 0, i32 %161*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		main_160_scevgep24_reg <= main_160_scevgep24;
		if (start == 1'b0 && ^(main_160_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %scevgep23 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %161*/
		main_160_scevgep23 = (1'd0 | (4 * main_160_161_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %scevgep23 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %161*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		main_160_scevgep23_reg <= main_160_scevgep23;
		if (start == 1'b0 && ^(main_160_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %162 = add i32 %i.020.i.i, 3*/
		main_160_162 = (main_160_i020ii_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %162 = add i32 %i.020.i.i, 3*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_162_reg <= main_160_162;
		if (start == 1'b0 && ^(main_160_162) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_162_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %163 = add i32 %i.020.i.i, 2*/
		main_160_163 = (main_160_i020ii_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %163 = add i32 %i.020.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_163_reg <= main_160_163;
		if (start == 1'b0 && ^(main_160_163) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_163_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %164 = add i32 %i.020.i.i, 1*/
		main_160_164 = (main_160_i020ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %164 = add i32 %i.020.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_164_reg <= main_160_164;
		if (start == 1'b0 && ^(main_160_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
		main_160_165 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_165_reg <= main_160_165;
		if (start == 1'b0 && ^(main_160_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %166 = shl i32 %165, 1*/
		main_160_166 = (main_160_165 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %166 = shl i32 %165, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_166_reg <= main_160_166;
		if (start == 1'b0 && ^(main_160_166) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_166_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask.i.i13 = and i32 %166, -256*/
		main_160_maskii13 = (main_160_166 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask.i.i13 = and i32 %166, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_maskii13_reg <= main_160_maskii13;
		if (start == 1'b0 && ^(main_160_maskii13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_maskii13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %167 = icmp eq i32 %.mask.i.i13, 256*/
		main_160_167 = (main_160_maskii13 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %167 = icmp eq i32 %.mask.i.i13, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_167_reg <= main_160_167;
		if (start == 1'b0 && ^(main_160_167) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_167_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %168 = xor i32 %166, 283*/
		main_160_168 = (main_160_166 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %168 = xor i32 %166, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_168_reg <= main_160_168;
		if (start == 1'b0 && ^(main_160_168) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_168_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %..i.i14 = select i1 %167, i32 %168, i32 %166*/
		main_160_ii14 = (main_160_167 ? main_160_168 : main_160_166);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %..i.i14 = select i1 %167, i32 %168, i32 %166*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_ii14_reg <= main_160_ii14;
		if (start == 1'b0 && ^(main_160_ii14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_ii14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %169 = xor i32 %..i.i14, %165*/
		main_160_169 = (main_160_ii14 ^ main_160_165);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %169 = xor i32 %..i.i14, %165*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_169_reg <= main_160_169;
		if (start == 1'b0 && ^(main_160_169) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_169_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %170 = shl i32 %169, 1*/
		main_160_170 = (main_160_169 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %170 = shl i32 %169, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_170_reg <= main_160_170;
		if (start == 1'b0 && ^(main_160_170) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_170_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask1.i.i15 = and i32 %170, -256*/
		main_160_mask1ii15 = (main_160_170 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask1.i.i15 = and i32 %170, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_mask1ii15_reg <= main_160_mask1ii15;
		if (start == 1'b0 && ^(main_160_mask1ii15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask1ii15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %171 = icmp eq i32 %.mask1.i.i15, 256*/
		main_160_171 = (main_160_mask1ii15 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %171 = icmp eq i32 %.mask1.i.i15, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_171_reg <= main_160_171;
		if (start == 1'b0 && ^(main_160_171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_171_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %172 = xor i32 %170, 283*/
		main_160_172 = (main_160_170 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %172 = xor i32 %170, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_172_reg <= main_160_172;
		if (start == 1'b0 && ^(main_160_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.1.i.i = select i1 %171, i32 %172, i32 %170*/
		main_160_x1ii = (main_160_171 ? main_160_172 : main_160_170);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.1.i.i = select i1 %171, i32 %172, i32 %170*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_x1ii_reg <= main_160_x1ii;
		if (start == 1'b0 && ^(main_160_x1ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x1ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %173 = xor i32 %x.1.i.i, %165*/
		main_160_173 = (main_160_x1ii ^ main_160_165);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %173 = xor i32 %x.1.i.i, %165*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_173_reg <= main_160_173;
		if (start == 1'b0 && ^(main_160_173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_173_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %174 = shl i32 %173, 1*/
		main_160_174 = (main_160_173 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %174 = shl i32 %173, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_174_reg <= main_160_174;
		if (start == 1'b0 && ^(main_160_174) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_174_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask2.i.i16 = and i32 %174, -256*/
		main_160_mask2ii16 = (main_160_174 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask2.i.i16 = and i32 %174, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_mask2ii16_reg <= main_160_mask2ii16;
		if (start == 1'b0 && ^(main_160_mask2ii16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask2ii16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %175 = icmp eq i32 %.mask2.i.i16, 256*/
		main_160_175 = (main_160_mask2ii16 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %175 = icmp eq i32 %.mask2.i.i16, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_175_reg <= main_160_175;
		if (start == 1'b0 && ^(main_160_175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_175_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %176 = xor i32 %174, 283*/
		main_160_176 = (main_160_174 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %176 = xor i32 %174, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_176_reg <= main_160_176;
		if (start == 1'b0 && ^(main_160_176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_176_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.12.i.i = select i1 %175, i32 %176, i32 %174*/
		main_160_12ii = (main_160_175_reg ? main_160_176_reg : main_160_174_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.12.i.i = select i1 %175, i32 %176, i32 %174*/
	if ((cur_state == LEGUP_F_main_BB__160_97)) begin
		main_160_12ii_reg <= main_160_12ii;
		if (start == 1'b0 && ^(main_160_12ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_12ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %177 = add nsw i32 %i.020.i.i, 1*/
		main_160_177 = (main_160_i020ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %177 = add nsw i32 %i.020.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_177_reg <= main_160_177;
		if (start == 1'b0 && ^(main_160_177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_177_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %178 = icmp eq i32 %164, 4*/
		main_160_178 = (main_160_164 == 32'd4);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %178 = icmp eq i32 %164, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_178_reg <= main_160_178;
		if (start == 1'b0 && ^(main_160_178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_178_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %tmp.i.i = select i1 %178, i32 0, i32 %164*/
		main_160_tmpii = (main_160_178 ? 32'd0 : main_160_164);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %tmp.i.i = select i1 %178, i32 0, i32 %164*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_tmpii_reg <= main_160_tmpii;
		if (start == 1'b0 && ^(main_160_tmpii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_tmpii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %179 = add i32 %159, %tmp.i.i*/
		main_160_179 = (main_preheader17ii_159_reg + main_160_tmpii);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %179 = add i32 %159, %tmp.i.i*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_179_reg <= main_160_179;
		if (start == 1'b0 && ^(main_160_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %180 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %179*/
		main_160_180 = (`TAG_g_statemt_a | (4 * main_160_179_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %180 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %179*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		main_160_180_reg <= main_160_180;
		if (start == 1'b0 && ^(main_160_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
		main_160_181 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_181_reg <= main_160_181;
		if (start == 1'b0 && ^(main_160_181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_181_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %182 = shl i32 %181, 1*/
		main_160_182 = (main_160_181 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %182 = shl i32 %181, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_182_reg <= main_160_182;
		if (start == 1'b0 && ^(main_160_182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_182_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask3.i.i17 = and i32 %182, -256*/
		main_160_mask3ii17 = (main_160_182 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask3.i.i17 = and i32 %182, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_mask3ii17_reg <= main_160_mask3ii17;
		if (start == 1'b0 && ^(main_160_mask3ii17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask3ii17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %183 = icmp eq i32 %.mask3.i.i17, 256*/
		main_160_183 = (main_160_mask3ii17 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %183 = icmp eq i32 %.mask3.i.i17, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_183_reg <= main_160_183;
		if (start == 1'b0 && ^(main_160_183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_183_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %184 = xor i32 %182, 283*/
		main_160_184 = (main_160_182 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %184 = xor i32 %182, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_184_reg <= main_160_184;
		if (start == 1'b0 && ^(main_160_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_184_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.3.i.i = select i1 %183, i32 %184, i32 %182*/
		main_160_x3ii = (main_160_183 ? main_160_184 : main_160_182);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.3.i.i = select i1 %183, i32 %184, i32 %182*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_x3ii_reg <= main_160_x3ii;
		if (start == 1'b0 && ^(main_160_x3ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x3ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %185 = shl i32 %x.3.i.i, 1*/
		main_160_185 = (main_160_x3ii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %185 = shl i32 %x.3.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_185_reg <= main_160_185;
		if (start == 1'b0 && ^(main_160_185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_185_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask4.i.i = and i32 %185, -256*/
		main_160_mask4ii = (main_160_185 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask4.i.i = and i32 %185, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_mask4ii_reg <= main_160_mask4ii;
		if (start == 1'b0 && ^(main_160_mask4ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask4ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %186 = icmp eq i32 %.mask4.i.i, 256*/
		main_160_186 = (main_160_mask4ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %186 = icmp eq i32 %.mask4.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_186_reg <= main_160_186;
		if (start == 1'b0 && ^(main_160_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %187 = xor i32 %185, 283*/
		main_160_187 = (main_160_185 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %187 = xor i32 %185, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_187_reg <= main_160_187;
		if (start == 1'b0 && ^(main_160_187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_187_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.13.i.i = select i1 %186, i32 %187, i32 %185*/
		main_160_13ii = (main_160_186 ? main_160_187 : main_160_185);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.13.i.i = select i1 %186, i32 %187, i32 %185*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_13ii_reg <= main_160_13ii;
		if (start == 1'b0 && ^(main_160_13ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_13ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %188 = xor i32 %.13.i.i, %181*/
		main_160_188 = (main_160_13ii ^ main_160_181);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %188 = xor i32 %.13.i.i, %181*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_188_reg <= main_160_188;
		if (start == 1'b0 && ^(main_160_188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_188_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %189 = shl i32 %188, 1*/
		main_160_189 = (main_160_188 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %189 = shl i32 %188, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_189_reg <= main_160_189;
		if (start == 1'b0 && ^(main_160_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask5.i.i18 = and i32 %189, -256*/
		main_160_mask5ii18 = (main_160_189 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask5.i.i18 = and i32 %189, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_mask5ii18_reg <= main_160_mask5ii18;
		if (start == 1'b0 && ^(main_160_mask5ii18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask5ii18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %190 = icmp eq i32 %.mask5.i.i18, 256*/
		main_160_190 = (main_160_mask5ii18 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %190 = icmp eq i32 %.mask5.i.i18, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_190_reg <= main_160_190;
		if (start == 1'b0 && ^(main_160_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %191 = xor i32 %189, 283*/
		main_160_191 = (main_160_189 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %191 = xor i32 %189, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_96)) begin
		main_160_191_reg <= main_160_191;
		if (start == 1'b0 && ^(main_160_191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_191_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.5.i.i = select i1 %190, i32 %191, i32 %189*/
		main_160_x5ii = (main_160_190_reg ? main_160_191_reg : main_160_189_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.5.i.i = select i1 %190, i32 %191, i32 %189*/
	if ((cur_state == LEGUP_F_main_BB__160_97)) begin
		main_160_x5ii_reg <= main_160_x5ii;
		if (start == 1'b0 && ^(main_160_x5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %192 = xor i32 %.12.i.i, %181*/
		main_160_192 = (main_160_12ii ^ main_160_181_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %192 = xor i32 %.12.i.i, %181*/
	if ((cur_state == LEGUP_F_main_BB__160_97)) begin
		main_160_192_reg <= main_160_192;
		if (start == 1'b0 && ^(main_160_192) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_192_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %193 = xor i32 %192, %x.5.i.i*/
		main_160_193 = (main_160_192 ^ main_160_x5ii);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %193 = xor i32 %192, %x.5.i.i*/
	if ((cur_state == LEGUP_F_main_BB__160_97)) begin
		main_160_193_reg <= main_160_193;
		if (start == 1'b0 && ^(main_160_193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_193_reg"); $finish; end
	end
end
always @(*) begin
	main_160_194 = main_signed_modulus_32_0;
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %194 = srem i32 %163, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_125)) begin
		main_160_194_reg <= main_160_194;
		if (start == 1'b0 && ^(main_160_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_194_reg"); $finish; end
	end
	/* main: %160*/
	/*   %194 = srem i32 %163, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_125)) begin
		main_160_194_reg <= main_160_194;
		if (start == 1'b0 && ^(main_160_194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_194_reg"); $finish; end
	end
	/* main: %160*/
	/*   %210 = srem i32 %162, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		main_160_194_reg <= main_160_210;
		if (start == 1'b0 && ^(main_160_210) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_194_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %195 = add i32 %159, %194*/
		main_160_195 = (main_preheader17ii_159_reg + main_160_194);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %195 = add i32 %159, %194*/
	if ((cur_state == LEGUP_F_main_BB__160_125)) begin
		main_160_195_reg <= main_160_195;
		if (start == 1'b0 && ^(main_160_195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_195_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %196 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %195*/
		main_160_196 = (`TAG_g_statemt_a | (4 * main_160_195_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %196 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %195*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		main_160_196_reg <= main_160_196;
		if (start == 1'b0 && ^(main_160_196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_196_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
		main_160_197 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_197_reg <= main_160_197;
		if (start == 1'b0 && ^(main_160_197) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_197_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %198 = shl i32 %197, 1*/
		main_160_198 = (main_160_197 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %198 = shl i32 %197, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_198_reg <= main_160_198;
		if (start == 1'b0 && ^(main_160_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask6.i.i19 = and i32 %198, -256*/
		main_160_mask6ii19 = (main_160_198 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask6.i.i19 = and i32 %198, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_mask6ii19_reg <= main_160_mask6ii19;
		if (start == 1'b0 && ^(main_160_mask6ii19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask6ii19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %199 = icmp eq i32 %.mask6.i.i19, 256*/
		main_160_199 = (main_160_mask6ii19 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %199 = icmp eq i32 %.mask6.i.i19, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_199_reg <= main_160_199;
		if (start == 1'b0 && ^(main_160_199) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_199_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %200 = xor i32 %198, 283*/
		main_160_200 = (main_160_198 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %200 = xor i32 %198, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_200_reg <= main_160_200;
		if (start == 1'b0 && ^(main_160_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.14.i.i = select i1 %199, i32 %200, i32 %198*/
		main_160_14ii = (main_160_199 ? main_160_200 : main_160_198);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.14.i.i = select i1 %199, i32 %200, i32 %198*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_14ii_reg <= main_160_14ii;
		if (start == 1'b0 && ^(main_160_14ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_14ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %201 = xor i32 %.14.i.i, %197*/
		main_160_201 = (main_160_14ii ^ main_160_197);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %201 = xor i32 %.14.i.i, %197*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_201_reg <= main_160_201;
		if (start == 1'b0 && ^(main_160_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %202 = shl i32 %201, 1*/
		main_160_202 = (main_160_201 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %202 = shl i32 %201, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_202_reg <= main_160_202;
		if (start == 1'b0 && ^(main_160_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask7.i.i = and i32 %202, -256*/
		main_160_mask7ii = (main_160_202 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask7.i.i = and i32 %202, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_mask7ii_reg <= main_160_mask7ii;
		if (start == 1'b0 && ^(main_160_mask7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %203 = icmp eq i32 %.mask7.i.i, 256*/
		main_160_203 = (main_160_mask7ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %203 = icmp eq i32 %.mask7.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_203_reg <= main_160_203;
		if (start == 1'b0 && ^(main_160_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %204 = xor i32 %202, 283*/
		main_160_204 = (main_160_202 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %204 = xor i32 %202, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_204_reg <= main_160_204;
		if (start == 1'b0 && ^(main_160_204) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_204_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.7.i.i = select i1 %203, i32 %204, i32 %202*/
		main_160_x7ii = (main_160_203 ? main_160_204 : main_160_202);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.7.i.i = select i1 %203, i32 %204, i32 %202*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_x7ii_reg <= main_160_x7ii;
		if (start == 1'b0 && ^(main_160_x7ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x7ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %205 = shl i32 %x.7.i.i, 1*/
		main_160_205 = (main_160_x7ii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %205 = shl i32 %x.7.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_205_reg <= main_160_205;
		if (start == 1'b0 && ^(main_160_205) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_205_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask8.i.i20 = and i32 %205, -256*/
		main_160_mask8ii20 = (main_160_205 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask8.i.i20 = and i32 %205, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_mask8ii20_reg <= main_160_mask8ii20;
		if (start == 1'b0 && ^(main_160_mask8ii20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask8ii20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %206 = icmp eq i32 %.mask8.i.i20, 256*/
		main_160_206 = (main_160_mask8ii20 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %206 = icmp eq i32 %.mask8.i.i20, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_206_reg <= main_160_206;
		if (start == 1'b0 && ^(main_160_206) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_206_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %207 = xor i32 %205, 283*/
		main_160_207 = (main_160_205 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %207 = xor i32 %205, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_207_reg <= main_160_207;
		if (start == 1'b0 && ^(main_160_207) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_207_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.15.i.i21 = select i1 %206, i32 %207, i32 %205*/
		main_160_15ii21 = (main_160_206_reg ? main_160_207_reg : main_160_205_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.15.i.i21 = select i1 %206, i32 %207, i32 %205*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_15ii21_reg <= main_160_15ii21;
		if (start == 1'b0 && ^(main_160_15ii21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_15ii21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %208 = xor i32 %193, %197*/
		main_160_208 = (main_160_193_reg ^ main_160_197);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %208 = xor i32 %193, %197*/
	if ((cur_state == LEGUP_F_main_BB__160_128)) begin
		main_160_208_reg <= main_160_208;
		if (start == 1'b0 && ^(main_160_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %209 = xor i32 %208, %.15.i.i21*/
		main_160_209 = (main_160_208_reg ^ main_160_15ii21);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %209 = xor i32 %208, %.15.i.i21*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_209_reg <= main_160_209;
		if (start == 1'b0 && ^(main_160_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_209_reg"); $finish; end
	end
end
always @(*) begin
	main_160_210 = main_signed_modulus_32_0;
end
always @(*) begin
/* main: %160*/
/*   %210 = srem i32 %162, 4*/
	main_160_210_reg = main_160_194_reg;
end
always @(*) begin
	/* main: %160*/
	/*   %211 = add i32 %159, %210*/
		main_160_211 = (main_preheader17ii_159_reg + main_160_210);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %211 = add i32 %159, %210*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		main_160_211_reg <= main_160_211;
		if (start == 1'b0 && ^(main_160_211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_211_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %212 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %211*/
		main_160_212 = (`TAG_g_statemt_a | (4 * main_160_211_reg));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %212 = getelementptr inbounds [32 x i32]* @statemt, i32 0, i32 %211*/
	if ((cur_state == LEGUP_F_main_BB__160_127)) begin
		main_160_212_reg <= main_160_212;
		if (start == 1'b0 && ^(main_160_212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_212_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
		main_160_213 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_213_reg <= main_160_213;
		if (start == 1'b0 && ^(main_160_213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_213_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %214 = shl i32 %213, 1*/
		main_160_214 = (main_160_213 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %214 = shl i32 %213, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_214_reg <= main_160_214;
		if (start == 1'b0 && ^(main_160_214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_214_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask9.i.i22 = and i32 %214, -256*/
		main_160_mask9ii22 = (main_160_214 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask9.i.i22 = and i32 %214, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_mask9ii22_reg <= main_160_mask9ii22;
		if (start == 1'b0 && ^(main_160_mask9ii22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask9ii22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %215 = icmp eq i32 %.mask9.i.i22, 256*/
		main_160_215 = (main_160_mask9ii22 == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %215 = icmp eq i32 %.mask9.i.i22, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_215_reg <= main_160_215;
		if (start == 1'b0 && ^(main_160_215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_215_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %216 = xor i32 %214, 283*/
		main_160_216 = (main_160_214 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %216 = xor i32 %214, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_216_reg <= main_160_216;
		if (start == 1'b0 && ^(main_160_216) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_216_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.9.i.i = select i1 %215, i32 %216, i32 %214*/
		main_160_x9ii = (main_160_215 ? main_160_216 : main_160_214);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.9.i.i = select i1 %215, i32 %216, i32 %214*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_x9ii_reg <= main_160_x9ii;
		if (start == 1'b0 && ^(main_160_x9ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x9ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %217 = shl i32 %x.9.i.i, 1*/
		main_160_217 = (main_160_x9ii <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %217 = shl i32 %x.9.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_217_reg <= main_160_217;
		if (start == 1'b0 && ^(main_160_217) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_217_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask10.i.i = and i32 %217, -256*/
		main_160_mask10ii = (main_160_217 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask10.i.i = and i32 %217, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_mask10ii_reg <= main_160_mask10ii;
		if (start == 1'b0 && ^(main_160_mask10ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask10ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %218 = icmp eq i32 %.mask10.i.i, 256*/
		main_160_218 = (main_160_mask10ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %218 = icmp eq i32 %.mask10.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_218_reg <= main_160_218;
		if (start == 1'b0 && ^(main_160_218) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_218_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %219 = xor i32 %217, 283*/
		main_160_219 = (main_160_217 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %219 = xor i32 %217, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_219_reg <= main_160_219;
		if (start == 1'b0 && ^(main_160_219) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_219_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.16.i.i23 = select i1 %218, i32 %219, i32 %217*/
		main_160_16ii23 = (main_160_218 ? main_160_219 : main_160_217);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.16.i.i23 = select i1 %218, i32 %219, i32 %217*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_16ii23_reg <= main_160_16ii23;
		if (start == 1'b0 && ^(main_160_16ii23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_16ii23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %220 = shl i32 %.16.i.i23, 1*/
		main_160_220 = (main_160_16ii23 <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %220 = shl i32 %.16.i.i23, 1*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_220_reg <= main_160_220;
		if (start == 1'b0 && ^(main_160_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %.mask11.i.i = and i32 %220, -256*/
		main_160_mask11ii = (main_160_220 & -32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %.mask11.i.i = and i32 %220, -256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_mask11ii_reg <= main_160_mask11ii;
		if (start == 1'b0 && ^(main_160_mask11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_mask11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %221 = icmp eq i32 %.mask11.i.i, 256*/
		main_160_221 = (main_160_mask11ii == 32'd256);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %221 = icmp eq i32 %.mask11.i.i, 256*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_221_reg <= main_160_221;
		if (start == 1'b0 && ^(main_160_221) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_221_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %222 = xor i32 %220, 283*/
		main_160_222 = (main_160_220 ^ 32'd283);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %222 = xor i32 %220, 283*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_222_reg <= main_160_222;
		if (start == 1'b0 && ^(main_160_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %x.11.i.i = select i1 %221, i32 %222, i32 %220*/
		main_160_x11ii = (main_160_221 ? main_160_222 : main_160_220);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %x.11.i.i = select i1 %221, i32 %222, i32 %220*/
	if ((cur_state == LEGUP_F_main_BB__160_129)) begin
		main_160_x11ii_reg <= main_160_x11ii;
		if (start == 1'b0 && ^(main_160_x11ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_x11ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %223 = xor i32 %x.11.i.i, %213*/
		main_160_223 = (main_160_x11ii_reg ^ main_160_213_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %223 = xor i32 %x.11.i.i, %213*/
	if ((cur_state == LEGUP_F_main_BB__160_130)) begin
		main_160_223_reg <= main_160_223;
		if (start == 1'b0 && ^(main_160_223) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_223_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %224 = xor i32 %223, %209*/
		main_160_224 = (main_160_223 ^ main_160_209_reg);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %224 = xor i32 %223, %209*/
	if ((cur_state == LEGUP_F_main_BB__160_130)) begin
		main_160_224_reg <= main_160_224;
		if (start == 1'b0 && ^(main_160_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_224_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %exitcond22 = icmp eq i32 %177, 4*/
		main_160_exitcond22 = (main_160_177 == 32'd4);
end
always @(posedge clk) begin
	/* main: %160*/
	/*   %exitcond22 = icmp eq i32 %177, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_160_exitcond22_reg <= main_160_exitcond22;
		if (start == 1'b0 && ^(main_160_exitcond22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_160_exitcond22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %226 = add nsw i32 %j.121.i.i10, 1*/
		main_225_226 = (main_preheader17ii_j121ii10_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %226 = add nsw i32 %j.121.i.i10, 1*/
	if ((cur_state == LEGUP_F_main_BB__225_132)) begin
		main_225_226_reg <= main_225_226;
		if (start == 1'b0 && ^(main_225_226) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_226_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %225*/
	/*   %exitcond25 = icmp eq i32 %226, 4*/
		main_225_exitcond25 = (main_225_226 == 32'd4);
end
always @(posedge clk) begin
	/* main: %225*/
	/*   %exitcond25 = icmp eq i32 %226, 4*/
	if ((cur_state == LEGUP_F_main_BB__225_132)) begin
		main_225_exitcond25_reg <= main_225_exitcond25;
		if (start == 1'b0 && ^(main_225_exitcond25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_225_exitcond25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %i.119.i.i = phi i32 [ %235, %.lr.ph.i.i26 ], [ 0, %.lr.ph.i.i26.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii26preheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii26_i119ii = 32'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   %i.119.i.i = phi i32 [ %235, %.lr.ph.i.i26 ], [ 0, %.lr.ph.i.i26.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphii26_137) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii26_exitcond28_reg == 1'd0))) */ begin
		main_lrphii26_i119ii = main_lrphii26_235_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %i.119.i.i = phi i32 [ %235, %.lr.ph.i.i26 ], [ 0, %.lr.ph.i.i26.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphii26preheader_133) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphii26_i119ii_reg <= main_lrphii26_i119ii;
		if (start == 1'b0 && ^(main_lrphii26_i119ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_i119ii_reg"); $finish; end
	end
	/* main: %.lr.ph.i.i26*/
	/*   %i.119.i.i = phi i32 [ %235, %.lr.ph.i.i26 ], [ 0, %.lr.ph.i.i26.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphii26_137) & (memory_controller_waitrequest == 1'd0)) & (main_lrphii26_exitcond28_reg == 1'd0))) begin
		main_lrphii26_i119ii_reg <= main_lrphii26_i119ii;
		if (start == 1'b0 && ^(main_lrphii26_i119ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_i119ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %227 = shl i32 %i.119.i.i, 2*/
		main_lrphii26_227 = (main_lrphii26_i119ii_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %227 = shl i32 %i.119.i.i, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_227_reg <= main_lrphii26_227;
		if (start == 1'b0 && ^(main_lrphii26_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %228 = or i32 %227, 3*/
		main_lrphii26_228 = (main_lrphii26_227 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %228 = or i32 %227, 3*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_228_reg <= main_lrphii26_228;
		if (start == 1'b0 && ^(main_lrphii26_228) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_228_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep29 = getelementptr [32 x i32]* @statemt, i32 0, i32 %228*/
		main_lrphii26_scevgep29 = (`TAG_g_statemt_a | (4 * main_lrphii26_228));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep29 = getelementptr [32 x i32]* @statemt, i32 0, i32 %228*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep29_reg <= main_lrphii26_scevgep29;
		if (start == 1'b0 && ^(main_lrphii26_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep30 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %228*/
		main_lrphii26_scevgep30 = (1'd0 | (4 * main_lrphii26_228));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep30 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %228*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep30_reg <= main_lrphii26_scevgep30;
		if (start == 1'b0 && ^(main_lrphii26_scevgep30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %229 = or i32 %227, 2*/
		main_lrphii26_229 = (main_lrphii26_227 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %229 = or i32 %227, 2*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_229_reg <= main_lrphii26_229;
		if (start == 1'b0 && ^(main_lrphii26_229) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_229_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep31 = getelementptr [32 x i32]* @statemt, i32 0, i32 %229*/
		main_lrphii26_scevgep31 = (`TAG_g_statemt_a | (4 * main_lrphii26_229));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep31 = getelementptr [32 x i32]* @statemt, i32 0, i32 %229*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep31_reg <= main_lrphii26_scevgep31;
		if (start == 1'b0 && ^(main_lrphii26_scevgep31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep32 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %229*/
		main_lrphii26_scevgep32 = (1'd0 | (4 * main_lrphii26_229));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep32 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %229*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep32_reg <= main_lrphii26_scevgep32;
		if (start == 1'b0 && ^(main_lrphii26_scevgep32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %230 = or i32 %227, 1*/
		main_lrphii26_230 = (main_lrphii26_227 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %230 = or i32 %227, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_230_reg <= main_lrphii26_230;
		if (start == 1'b0 && ^(main_lrphii26_230) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_230_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep33 = getelementptr [32 x i32]* @statemt, i32 0, i32 %230*/
		main_lrphii26_scevgep33 = (`TAG_g_statemt_a | (4 * main_lrphii26_230));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep33 = getelementptr [32 x i32]* @statemt, i32 0, i32 %230*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep33_reg <= main_lrphii26_scevgep33;
		if (start == 1'b0 && ^(main_lrphii26_scevgep33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep34 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %230*/
		main_lrphii26_scevgep34 = (1'd0 | (4 * main_lrphii26_230));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep34 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %230*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep34_reg <= main_lrphii26_scevgep34;
		if (start == 1'b0 && ^(main_lrphii26_scevgep34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep35 = getelementptr [32 x i32]* @statemt, i32 0, i32 %227*/
		main_lrphii26_scevgep35 = (`TAG_g_statemt_a | (4 * main_lrphii26_227));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep35 = getelementptr [32 x i32]* @statemt, i32 0, i32 %227*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep35_reg <= main_lrphii26_scevgep35;
		if (start == 1'b0 && ^(main_lrphii26_scevgep35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep36 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %227*/
		main_lrphii26_scevgep36 = (1'd0 | (4 * main_lrphii26_227));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %scevgep36 = getelementptr [32 x i32]* %ret.i.i, i32 0, i32 %227*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_scevgep36_reg <= main_lrphii26_scevgep36;
		if (start == 1'b0 && ^(main_lrphii26_scevgep36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_scevgep36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %231 = load i32* %scevgep36, align 4, !tbaa !1*/
		main_lrphii26_231 = main_0_retii_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %231 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_lrphii26_231_reg <= main_lrphii26_231;
		if (start == 1'b0 && ^(main_lrphii26_231) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_231_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %232 = load i32* %scevgep34, align 4, !tbaa !1*/
		main_lrphii26_232 = main_0_retii_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %232 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_lrphii26_232_reg <= main_lrphii26_232;
		if (start == 1'b0 && ^(main_lrphii26_232) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_232_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %233 = load i32* %scevgep32, align 4, !tbaa !1*/
		main_lrphii26_233 = main_0_retii_out_a;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %233 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		main_lrphii26_233_reg <= main_lrphii26_233;
		if (start == 1'b0 && ^(main_lrphii26_233) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_233_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %234 = load i32* %scevgep30, align 4, !tbaa !1*/
		main_lrphii26_234 = main_0_retii_out_b;
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %234 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		main_lrphii26_234_reg <= main_lrphii26_234;
		if (start == 1'b0 && ^(main_lrphii26_234) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_234_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %235 = add nsw i32 %i.119.i.i, 1*/
		main_lrphii26_235 = (main_lrphii26_i119ii_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %235 = add nsw i32 %i.119.i.i, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_235_reg <= main_lrphii26_235;
		if (start == 1'b0 && ^(main_lrphii26_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i.i26*/
	/*   %exitcond28 = icmp eq i32 %235, 4*/
		main_lrphii26_exitcond28 = (main_lrphii26_235 == 32'd4);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i.i26*/
	/*   %exitcond28 = icmp eq i32 %235, 4*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_lrphii26_exitcond28_reg <= main_lrphii26_exitcond28;
		if (start == 1'b0 && ^(main_lrphii26_exitcond28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphii26_exitcond28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_AddRoundKey_InversMixColumnexiti_indvarnext = (main_lrph24ii8_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138)) begin
		main_AddRoundKey_InversMixColumnexiti_indvarnext_reg <= main_AddRoundKey_InversMixColumnexiti_indvarnext;
		if (start == 1'b0 && ^(main_AddRoundKey_InversMixColumnexiti_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKey_InversMixColumnexiti_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   %exitcond37 = icmp eq i32 %indvar.next, 9*/
		main_AddRoundKey_InversMixColumnexiti_exitcond37 = (main_AddRoundKey_InversMixColumnexiti_indvarnext == 32'd9);
end
always @(posedge clk) begin
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   %exitcond37 = icmp eq i32 %indvar.next, 9*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138)) begin
		main_AddRoundKey_InversMixColumnexiti_exitcond37_reg <= main_AddRoundKey_InversMixColumnexiti_exitcond37;
		if (start == 1'b0 && ^(main_AddRoundKey_InversMixColumnexiti_exitcond37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_AddRoundKey_InversMixColumnexiti_exitcond37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i29 = phi i32 [ %252, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeipreheader_141) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_j01i2i29 = 32'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i29 = phi i32 [ %252, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__crit_edgei_148) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond_reg == 1'd0))) */ begin
		main__crit_edgei_j01i2i29 = main__crit_edgei_252_reg;
	end
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i29 = phi i32 [ %252, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edgeipreheader_141) & (memory_controller_waitrequest == 1'd0))) begin
		main__crit_edgei_j01i2i29_reg <= main__crit_edgei_j01i2i29;
		if (start == 1'b0 && ^(main__crit_edgei_j01i2i29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j01i2i29_reg"); $finish; end
	end
	/* main: %._crit_edge.i*/
	/*   %j.01.i2.i29 = phi i32 [ %252, %._crit_edge.i ], [ 0, %._crit_edge.i.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__crit_edgei_148) & (memory_controller_waitrequest == 1'd0)) & (main__crit_edgei_exitcond_reg == 1'd0))) begin
		main__crit_edgei_j01i2i29_reg <= main__crit_edgei_j01i2i29;
		if (start == 1'b0 && ^(main__crit_edgei_j01i2i29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_j01i2i29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep5 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.01.i2.i29*/
		main__crit_edgei_scevgep5 = (`TAG_g_word_a | ((480 * 32'd3) + (4 * main__crit_edgei_j01i2i29_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep5 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 3, i32 %j.01.i2.i29*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep5_reg <= main__crit_edgei_scevgep5;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.01.i2.i29*/
		main__crit_edgei_scevgep6 = (`TAG_g_word_a | ((480 * 32'd2) + (4 * main__crit_edgei_j01i2i29_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep6 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 2, i32 %j.01.i2.i29*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep6_reg <= main__crit_edgei_scevgep6;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep7 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.01.i2.i29*/
		main__crit_edgei_scevgep7 = (`TAG_g_word_a | ((480 * 32'd1) + (4 * main__crit_edgei_j01i2i29_reg)));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep7 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 1, i32 %j.01.i2.i29*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep7_reg <= main__crit_edgei_scevgep7;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %236 = shl i32 %j.01.i2.i29, 2*/
		main__crit_edgei_236 = (main__crit_edgei_j01i2i29_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %236 = shl i32 %j.01.i2.i29, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_236_reg <= main__crit_edgei_236;
		if (start == 1'b0 && ^(main__crit_edgei_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %237 = or i32 %236, 3*/
		main__crit_edgei_237 = (main__crit_edgei_236 | 32'd3);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %237 = or i32 %236, 3*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_237_reg <= main__crit_edgei_237;
		if (start == 1'b0 && ^(main__crit_edgei_237) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_237_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep8 = getelementptr [32 x i32]* @statemt, i32 0, i32 %237*/
		main__crit_edgei_scevgep8 = (`TAG_g_statemt_a | (4 * main__crit_edgei_237));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep8 = getelementptr [32 x i32]* @statemt, i32 0, i32 %237*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep8_reg <= main__crit_edgei_scevgep8;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %238 = or i32 %236, 2*/
		main__crit_edgei_238 = (main__crit_edgei_236 | 32'd2);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %238 = or i32 %236, 2*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_238_reg <= main__crit_edgei_238;
		if (start == 1'b0 && ^(main__crit_edgei_238) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_238_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep9 = getelementptr [32 x i32]* @statemt, i32 0, i32 %238*/
		main__crit_edgei_scevgep9 = (`TAG_g_statemt_a | (4 * main__crit_edgei_238));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep9 = getelementptr [32 x i32]* @statemt, i32 0, i32 %238*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep9_reg <= main__crit_edgei_scevgep9;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %239 = or i32 %236, 1*/
		main__crit_edgei_239 = (main__crit_edgei_236 | 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %239 = or i32 %236, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_239_reg <= main__crit_edgei_239;
		if (start == 1'b0 && ^(main__crit_edgei_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_239_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep10 = getelementptr [32 x i32]* @statemt, i32 0, i32 %239*/
		main__crit_edgei_scevgep10 = (`TAG_g_statemt_a | (4 * main__crit_edgei_239));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep10 = getelementptr [32 x i32]* @statemt, i32 0, i32 %239*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep10_reg <= main__crit_edgei_scevgep10;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep11 = getelementptr [32 x i32]* @statemt, i32 0, i32 %236*/
		main__crit_edgei_scevgep11 = (`TAG_g_statemt_a | (4 * main__crit_edgei_236));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep11 = getelementptr [32 x i32]* @statemt, i32 0, i32 %236*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep11_reg <= main__crit_edgei_scevgep11;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.01.i2.i29*/
		main__crit_edgei_scevgep12 = (`TAG_g_word_a | (4 * main__crit_edgei_j01i2i29_reg));
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %scevgep12 = getelementptr [4 x [120 x i32]]* @word, i32 0, i32 0, i32 %j.01.i2.i29*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_scevgep12_reg <= main__crit_edgei_scevgep12;
		if (start == 1'b0 && ^(main__crit_edgei_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
		main__crit_edgei_240 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		main__crit_edgei_240_reg <= main__crit_edgei_240;
		if (start == 1'b0 && ^(main__crit_edgei_240) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_240_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
		main__crit_edgei_241 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		main__crit_edgei_241_reg <= main__crit_edgei_241;
		if (start == 1'b0 && ^(main__crit_edgei_241) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_241_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %242 = xor i32 %241, %240*/
		main__crit_edgei_242 = (main__crit_edgei_241 ^ main__crit_edgei_240);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %242 = xor i32 %241, %240*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		main__crit_edgei_242_reg <= main__crit_edgei_242;
		if (start == 1'b0 && ^(main__crit_edgei_242) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_242_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
		main__crit_edgei_243 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		main__crit_edgei_243_reg <= main__crit_edgei_243;
		if (start == 1'b0 && ^(main__crit_edgei_243) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_243_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
		main__crit_edgei_244 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		main__crit_edgei_244_reg <= main__crit_edgei_244;
		if (start == 1'b0 && ^(main__crit_edgei_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %245 = xor i32 %244, %243*/
		main__crit_edgei_245 = (main__crit_edgei_244 ^ main__crit_edgei_243);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %245 = xor i32 %244, %243*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		main__crit_edgei_245_reg <= main__crit_edgei_245;
		if (start == 1'b0 && ^(main__crit_edgei_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
		main__crit_edgei_246 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		main__crit_edgei_246_reg <= main__crit_edgei_246;
		if (start == 1'b0 && ^(main__crit_edgei_246) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_246_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
		main__crit_edgei_247 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		main__crit_edgei_247_reg <= main__crit_edgei_247;
		if (start == 1'b0 && ^(main__crit_edgei_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %248 = xor i32 %247, %246*/
		main__crit_edgei_248 = (main__crit_edgei_247 ^ main__crit_edgei_246);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %248 = xor i32 %247, %246*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		main__crit_edgei_248_reg <= main__crit_edgei_248;
		if (start == 1'b0 && ^(main__crit_edgei_248) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_248_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
		main__crit_edgei_249 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		main__crit_edgei_249_reg <= main__crit_edgei_249;
		if (start == 1'b0 && ^(main__crit_edgei_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
		main__crit_edgei_250 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		main__crit_edgei_250_reg <= main__crit_edgei_250;
		if (start == 1'b0 && ^(main__crit_edgei_250) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_250_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %251 = xor i32 %250, %249*/
		main__crit_edgei_251 = (main__crit_edgei_250 ^ main__crit_edgei_249);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %251 = xor i32 %250, %249*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		main__crit_edgei_251_reg <= main__crit_edgei_251;
		if (start == 1'b0 && ^(main__crit_edgei_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_251_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %252 = add nsw i32 %j.01.i2.i29, 1*/
		main__crit_edgei_252 = (main__crit_edgei_j01i2i29_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %252 = add nsw i32 %j.01.i2.i29, 1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_252_reg <= main__crit_edgei_252;
		if (start == 1'b0 && ^(main__crit_edgei_252) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_252_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond = icmp eq i32 %252, 4*/
		main__crit_edgei_exitcond = (main__crit_edgei_252 == 32'd4);
end
always @(posedge clk) begin
	/* main: %._crit_edge.i*/
	/*   %exitcond = icmp eq i32 %252, 4*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		main__crit_edgei_exitcond_reg <= main__crit_edgei_exitcond;
		if (start == 1'b0 && ^(main__crit_edgei_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main__crit_edgei_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i35*/
	/*   %i.17.i34 = phi i32 [ %261, %258 ], [ 0, %AddRoundKey.exit3.i30 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i30_149) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi35_i17i34 = 32'd0;
	end
	/* main: %.lr.ph.i35*/
	/*   %i.17.i34 = phi i32 [ %261, %258 ], [ 0, %AddRoundKey.exit3.i30 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__258_156) & (memory_controller_waitrequest == 1'd0)) & (main_258_exitcond3 == 1'd0))) */ begin
		main_lrphi35_i17i34 = main_258_261;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i35*/
	/*   %i.17.i34 = phi i32 [ %261, %258 ], [ 0, %AddRoundKey.exit3.i30 ]*/
	if (((cur_state == LEGUP_F_main_BB_AddRoundKeyexit3i30_149) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi35_i17i34_reg <= main_lrphi35_i17i34;
		if (start == 1'b0 && ^(main_lrphi35_i17i34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi35_i17i34_reg"); $finish; end
	end
	/* main: %.lr.ph.i35*/
	/*   %i.17.i34 = phi i32 [ %261, %258 ], [ 0, %AddRoundKey.exit3.i30 ]*/
	if ((((cur_state == LEGUP_F_main_BB__258_156) & (memory_controller_waitrequest == 1'd0)) & (main_258_exitcond3 == 1'd0))) begin
		main_lrphi35_i17i34_reg <= main_lrphi35_i17i34;
		if (start == 1'b0 && ^(main_lrphi35_i17i34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi35_i17i34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i35*/
	/*   %scevgep4 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.17.i34*/
		main_lrphi35_scevgep4 = (`TAG_g_statemt_a | (4 * main_lrphi35_i17i34_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i35*/
	/*   %scevgep4 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.17.i34*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_150)) begin
		main_lrphi35_scevgep4_reg <= main_lrphi35_scevgep4;
		if (start == 1'b0 && ^(main_lrphi35_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi35_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
		main_lrphi35_254 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_152)) begin
		main_lrphi35_254_reg <= main_lrphi35_254;
		if (start == 1'b0 && ^(main_lrphi35_254) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi35_254_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i35*/
	/*   %255 = icmp slt i32 %254, 16*/
		main_lrphi35_255 = ($signed(main_lrphi35_254) < $signed(32'd16));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i35*/
	/*   %255 = icmp slt i32 %254, 16*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_152)) begin
		main_lrphi35_255_reg <= main_lrphi35_255;
		if (start == 1'b0 && ^(main_lrphi35_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi35_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
		main_256_pre12i = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__256_155)) begin
		main_256_pre12i_reg <= main_256_pre12i;
		if (start == 1'b0 && ^(main_256_pre12i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_pre12i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %259 = phi i32 [ %.pre12.i, %256 ], [ %254, %.lr.ph.i35 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi35_152) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi35_255 == 1'd0))) begin
		main_258_259 = main_lrphi35_254;
	end
	/* main: %258*/
	/*   %259 = phi i32 [ %.pre12.i, %256 ], [ %254, %.lr.ph.i35 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__256_155) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_258_259 = main_256_pre12i;
	end
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %259 = phi i32 [ %.pre12.i, %256 ], [ %254, %.lr.ph.i35 ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi35_152) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi35_255 == 1'd0))) begin
		main_258_259_reg <= main_258_259;
		if (start == 1'b0 && ^(main_258_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_259_reg"); $finish; end
	end
	/* main: %258*/
	/*   %259 = phi i32 [ %.pre12.i, %256 ], [ %254, %.lr.ph.i35 ]*/
	if (((cur_state == LEGUP_F_main_BB__256_155) & (memory_controller_waitrequest == 1'd0))) begin
		main_258_259_reg <= main_258_259;
		if (start == 1'b0 && ^(main_258_259) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_259_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %261 = add nsw i32 %i.17.i34, 1*/
		main_258_261 = (main_lrphi35_i17i34_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %261 = add nsw i32 %i.17.i34, 1*/
	if ((cur_state == LEGUP_F_main_BB__258_156)) begin
		main_258_261_reg <= main_258_261;
		if (start == 1'b0 && ^(main_258_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %exitcond3 = icmp eq i32 %261, 16*/
		main_258_exitcond3 = (main_258_261 == 32'd16);
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %exitcond3 = icmp eq i32 %261, 16*/
	if ((cur_state == LEGUP_F_main_BB__258_156)) begin
		main_258_exitcond3_reg <= main_258_exitcond3;
		if (start == 1'b0 && ^(main_258_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %262 = phi i32 [ %267, %.preheader.loopexit.i32 ], [ %117, %.preheader.loopexit.i32.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti32preheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti32_262 = main_preheaderi_117_reg;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %262 = phi i32 [ %267, %.preheader.loopexit.i32 ], [ %117, %.preheader.loopexit.i32.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti32_exitcond1_reg == 1'd0))) */ begin
		main_preheaderloopexiti32_262 = main_preheaderloopexiti32_267;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %262 = phi i32 [ %267, %.preheader.loopexit.i32 ], [ %117, %.preheader.loopexit.i32.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti32preheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti32_262_reg <= main_preheaderloopexiti32_262;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_262_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %262 = phi i32 [ %267, %.preheader.loopexit.i32 ], [ %117, %.preheader.loopexit.i32.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti32_exitcond1_reg == 1'd0))) begin
		main_preheaderloopexiti32_262_reg <= main_preheaderloopexiti32_262;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_262) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_262_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %i.26.i36 = phi i32 [ %268, %.preheader.loopexit.i32 ], [ 0, %.preheader.loopexit.i32.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti32preheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti32_i26i36 = 32'd0;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %i.26.i36 = phi i32 [ %268, %.preheader.loopexit.i32 ], [ 0, %.preheader.loopexit.i32.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti32_exitcond1_reg == 1'd0))) */ begin
		main_preheaderloopexiti32_i26i36 = main_preheaderloopexiti32_268_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %i.26.i36 = phi i32 [ %268, %.preheader.loopexit.i32 ], [ 0, %.preheader.loopexit.i32.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderloopexiti32preheader_157) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderloopexiti32_i26i36_reg <= main_preheaderloopexiti32_i26i36;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_i26i36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_i26i36_reg"); $finish; end
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %i.26.i36 = phi i32 [ %268, %.preheader.loopexit.i32 ], [ 0, %.preheader.loopexit.i32.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160) & (memory_controller_waitrequest == 1'd0)) & (main_preheaderloopexiti32_exitcond1_reg == 1'd0))) begin
		main_preheaderloopexiti32_i26i36_reg <= main_preheaderloopexiti32_i26i36;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_i26i36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_i26i36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %scevgep = getelementptr [16 x i32]* @decrypt.out_dec_statemt, i32 0, i32 %i.26.i36*/
		main_preheaderloopexiti32_scevgep = (1'd0 | (4 * main_preheaderloopexiti32_i26i36_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %scevgep = getelementptr [16 x i32]* @decrypt.out_dec_statemt, i32 0, i32 %i.26.i36*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		main_preheaderloopexiti32_scevgep_reg <= main_preheaderloopexiti32_scevgep;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %scevgep2 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.26.i36*/
		main_preheaderloopexiti32_scevgep2 = (`TAG_g_statemt_a | (4 * main_preheaderloopexiti32_i26i36_reg));
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %scevgep2 = getelementptr [32 x i32]* @statemt, i32 0, i32 %i.26.i36*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		main_preheaderloopexiti32_scevgep2_reg <= main_preheaderloopexiti32_scevgep2;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
		main_preheaderloopexiti32_263 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160)) begin
		main_preheaderloopexiti32_263_reg <= main_preheaderloopexiti32_263;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_263_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %264 = load i32* %scevgep, align 4, !tbaa !1*/
		main_preheaderloopexiti32_264 = decryptout_dec_statemt_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %264 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_159)) begin
		main_preheaderloopexiti32_264_reg <= main_preheaderloopexiti32_264;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %265 = icmp eq i32 %263, %264*/
		main_preheaderloopexiti32_265 = (main_preheaderloopexiti32_263 == main_preheaderloopexiti32_264_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %265 = icmp eq i32 %263, %264*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160)) begin
		main_preheaderloopexiti32_265_reg <= main_preheaderloopexiti32_265;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_265) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_265_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %266 = zext i1 %265 to i32*/
		main_preheaderloopexiti32_266 = main_preheaderloopexiti32_265;
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %266 = zext i1 %265 to i32*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160)) begin
		main_preheaderloopexiti32_266_reg <= main_preheaderloopexiti32_266;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_266) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_266_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %267 = add nsw i32 %266, %262*/
		main_preheaderloopexiti32_267 = (main_preheaderloopexiti32_266 + main_preheaderloopexiti32_262_reg);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %267 = add nsw i32 %266, %262*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_160)) begin
		main_preheaderloopexiti32_267_reg <= main_preheaderloopexiti32_267;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_267) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_267_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %268 = add nsw i32 %i.26.i36, 1*/
		main_preheaderloopexiti32_268 = (main_preheaderloopexiti32_i26i36_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %268 = add nsw i32 %i.26.i36, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		main_preheaderloopexiti32_268_reg <= main_preheaderloopexiti32_268;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_268) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_268_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %exitcond1 = icmp eq i32 %268, 16*/
		main_preheaderloopexiti32_exitcond1 = (main_preheaderloopexiti32_268 == 32'd16);
end
always @(posedge clk) begin
	/* main: %.preheader.loopexit.i32*/
	/*   %exitcond1 = icmp eq i32 %268, 16*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		main_preheaderloopexiti32_exitcond1_reg <= main_preheaderloopexiti32_exitcond1;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_exitcond1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderloopexiti32_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decrypt.exit*/
	/*   %270 = icmp eq i32 %267, 32*/
		main_decryptexit_270 = (main_preheaderloopexiti32_267_reg == 32'd32);
end
always @(posedge clk) begin
	/* main: %decrypt.exit*/
	/*   %270 = icmp eq i32 %267, 32*/
	if ((cur_state == LEGUP_F_main_BB_decryptexit_161)) begin
		main_decryptexit_270_reg <= main_decryptexit_270;
		if (start == 1'b0 && ^(main_decryptexit_270) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decryptexit_270_reg"); $finish; end
	end
end
always @(*) begin
	encryptout_enc_statemt_address_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %114 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		encryptout_enc_statemt_address_a = (main_preheaderi_scevgep53 >>> 3'd2);
	end
end
always @(*) begin
	encryptout_enc_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.i*/
	/*   %114 = load i32* %scevgep53, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		encryptout_enc_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	decryptout_dec_statemt_address_a = 1'd0;
	/* main: %.preheader.loopexit.i32*/
	/*   %264 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		decryptout_dec_statemt_address_a = (main_preheaderloopexiti32_scevgep >>> 3'd2);
	end
end
always @(*) begin
	decryptout_dec_statemt_write_enable_a = 1'd0;
	/* main: %.preheader.loopexit.i32*/
	/*   %264 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		decryptout_dec_statemt_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_retii_address_a = 1'd0;
	/* main: %21*/
	/*   store i32 %42, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_address_a = (main_21_scevgep79_reg >>> 3'd2);
	end
	/* main: %21*/
	/*   store i32 %64, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_address_a = (main_21_scevgep75_reg >>> 3'd2);
	end
	/* main: %.lr.ph.i.i*/
	/*   %80 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_0_retii_address_a = (main_lrphii_scevgep89 >>> 3'd2);
	end
	/* main: %.lr.ph.i.i*/
	/*   %82 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_0_retii_address_a = (main_lrphii_scevgep85_reg >>> 3'd2);
	end
	/* main: %160*/
	/*   store i32 %224, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_130)) begin
		main_0_retii_address_a = (main_160_scevgep23_reg >>> 3'd2);
	end
	/* main: %.lr.ph.i.i26*/
	/*   %231 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_0_retii_address_a = (main_lrphii26_scevgep36 >>> 3'd2);
	end
	/* main: %.lr.ph.i.i26*/
	/*   %233 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_0_retii_address_a = (main_lrphii26_scevgep32_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_retii_write_enable_a = 1'd0;
	/* main: %21*/
	/*   store i32 %42, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_write_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   store i32 %64, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   %80 = load i32* %scevgep89, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_0_retii_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i*/
	/*   %82 = load i32* %scevgep85, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_0_retii_write_enable_a = 1'd0;
	end
	/* main: %160*/
	/*   store i32 %224, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_130)) begin
		main_0_retii_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   %231 = load i32* %scevgep36, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_0_retii_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   %233 = load i32* %scevgep32, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_0_retii_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_retii_in_a = 1'd0;
	/* main: %21*/
	/*   store i32 %42, i32* %scevgep79, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_in_a = main_21_42;
	end
	/* main: %21*/
	/*   store i32 %64, i32* %scevgep75, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_in_a = main_21_64;
	end
	/* main: %160*/
	/*   store i32 %224, i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_130)) begin
		main_0_retii_in_a = main_160_224;
	end
end
always @(*) begin
	main_0_retii_address_b = 1'd0;
	/* main: %21*/
	/*   store i32 %53, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_address_b = (main_21_scevgep77_reg >>> 3'd2);
	end
	/* main: %21*/
	/*   store i32 %74, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_address_b = (main_21_scevgep73_reg >>> 3'd2);
	end
	/* main: %.lr.ph.i.i*/
	/*   %81 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_0_retii_address_b = (main_lrphii_scevgep87 >>> 3'd2);
	end
	/* main: %.lr.ph.i.i*/
	/*   %83 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_0_retii_address_b = (main_lrphii_scevgep83_reg >>> 3'd2);
	end
	/* main: %.lr.ph.i.i26*/
	/*   %232 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_0_retii_address_b = (main_lrphii26_scevgep34 >>> 3'd2);
	end
	/* main: %.lr.ph.i.i26*/
	/*   %234 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_0_retii_address_b = (main_lrphii26_scevgep30_reg >>> 3'd2);
	end
end
always @(*) begin
	main_0_retii_write_enable_b = 1'd0;
	/* main: %21*/
	/*   store i32 %53, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_write_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   store i32 %74, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   %81 = load i32* %scevgep87, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_39)) begin
		main_0_retii_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i*/
	/*   %83 = load i32* %scevgep83, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		main_0_retii_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   %232 = load i32* %scevgep34, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_134)) begin
		main_0_retii_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   %234 = load i32* %scevgep30, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		main_0_retii_write_enable_b = 1'd0;
	end
end
always @(*) begin
	main_0_retii_in_b = 1'd0;
	/* main: %21*/
	/*   store i32 %53, i32* %scevgep77, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_35)) begin
		main_0_retii_in_b = main_21_53;
	end
	/* main: %21*/
	/*   store i32 %74, i32* %scevgep73, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_36)) begin
		main_0_retii_in_b = main_21_74;
	end
end
always @(posedge clk) begin
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_F_main_BB__0_17)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_F_main_BB_encryptexit_67)) begin
		KeySchedule_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		KeySchedule_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_start"); $finish; end
	end
end
always @(*) begin
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	else /* if ((cur_state == LEGUP_function_call_68)) */ begin
		KeySchedule_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		KeySchedule_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	else /* if ((cur_state == LEGUP_function_call_68)) */ begin
		KeySchedule_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	KeySchedule_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	KeySchedule_finish_final = KeySchedule_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB__0_17))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_encryptexit_67))) begin
		KeySchedule_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
	if (KeySchedule_finish) begin
		KeySchedule_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to KeySchedule_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		legup_function_call = 1'd1;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		legup_function_call = 1'd1;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		legup_function_call = 1'd1;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		legup_function_call = 1'd1;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		legup_function_call = 1'd1;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_27)) begin
		ByteSub_ShiftRow_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		ByteSub_ShiftRow_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_start"); $finish; end
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43)) begin
		ByteSub_ShiftRow_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		ByteSub_ShiftRow_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_start"); $finish; end
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		ByteSub_ShiftRow_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	else /* if ((cur_state == LEGUP_function_call_44)) */ begin
		ByteSub_ShiftRow_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		ByteSub_ShiftRow_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	else /* if ((cur_state == LEGUP_function_call_44)) */ begin
		ByteSub_ShiftRow_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	ByteSub_ShiftRow_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	ByteSub_ShiftRow_finish_final = ByteSub_ShiftRow_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKeyexitipreheader_27))) begin
		ByteSub_ShiftRow_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_finish_reg"); $finish; end
	end
	if (ByteSub_ShiftRow_finish) begin
		ByteSub_ShiftRow_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_MixColumn_AddRoundKeyexiti_43))) begin
		ByteSub_ShiftRow_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_finish_reg"); $finish; end
	end
	if (ByteSub_ShiftRow_finish) begin
		ByteSub_ShiftRow_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to ByteSub_ShiftRow_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_F_main_BB_lrph10ipreheader_78)) begin
		InversShiftRow_ByteSub_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_79)) begin
		InversShiftRow_ByteSub_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_start"); $finish; end
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138)) begin
		InversShiftRow_ByteSub_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_139)) begin
		InversShiftRow_ByteSub_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_start"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		InversShiftRow_ByteSub_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	else /* if ((cur_state == LEGUP_function_call_139)) */ begin
		InversShiftRow_ByteSub_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		InversShiftRow_ByteSub_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	else /* if ((cur_state == LEGUP_function_call_139)) */ begin
		InversShiftRow_ByteSub_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	InversShiftRow_ByteSub_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	InversShiftRow_ByteSub_finish_final = InversShiftRow_ByteSub_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_lrph10ipreheader_78))) begin
		InversShiftRow_ByteSub_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_finish_reg"); $finish; end
	end
	if (InversShiftRow_ByteSub_finish) begin
		InversShiftRow_ByteSub_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_AddRoundKey_InversMixColumnexiti_138))) begin
		InversShiftRow_ByteSub_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_finish_reg"); $finish; end
	end
	if (InversShiftRow_ByteSub_finish) begin
		InversShiftRow_ByteSub_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to InversShiftRow_ByteSub_finish_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %160*/
	/*   %194 = srem i32 %163, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_signed_modulus_32_0_op0 = main_160_163;
	end
	/* main: %160*/
	/*   %210 = srem i32 %162, 4*/
	else /* if ((cur_state == LEGUP_F_main_BB__160_94)) */ begin
		main_signed_modulus_32_0_op0 = main_160_162_reg;
	end
end
always @(*) begin
	/* main: %160*/
	/*   %194 = srem i32 %163, 4*/
	if ((cur_state == LEGUP_F_main_BB__160_93)) begin
		main_signed_modulus_32_0_op1 = 32'd4;
	end
	/* main: %160*/
	/*   %210 = srem i32 %162, 4*/
	else /* if ((cur_state == LEGUP_F_main_BB__160_94)) */ begin
		main_signed_modulus_32_0_op1 = 32'd4;
	end
end
always @(*) begin
	lpm_divide_main_160_194_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(*) begin
	lpm_divide_main_160_194_out = lpm_divide_main_160_194_temp_out;
end
always @(*) begin
	main_signed_modulus_32_0 = lpm_divide_main_160_194_out;
end
always @(*) begin
	lpm_mult_main_lrph24ii8_138_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	/* main: %.lr.ph24.i.i8*/
	/*   %138 = mul i32 %indvar, -4*/
	if ((lpm_mult_main_lrph24ii8_138_en == 1'd1)) begin
		main_lrph24ii8_138_stage0_reg <= (main_lrph24ii8_indvar_reg * -32'd4);
	end
end
always @(*) begin
	lpm_divide_main_160_210_en = ((memory_controller_waitrequest == 1'd0) & (legup_function_call == 1'd0));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %275*/
	/*   ret i32 %267*/
	if ((cur_state == LEGUP_F_main_BB__275_164)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_a = KeySchedule_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_a = KeySchedule_memory_controller_enable_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = ByteSub_ShiftRow_memory_controller_enable_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_a = ByteSub_ShiftRow_memory_controller_enable_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_a = ByteSub_ShiftRow_memory_controller_enable_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_a = ByteSub_ShiftRow_memory_controller_enable_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_a = KeySchedule_memory_controller_enable_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_a = KeySchedule_memory_controller_enable_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_enable_a = InversShiftRow_ByteSub_memory_controller_enable_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_enable_a = InversShiftRow_ByteSub_memory_controller_enable_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_enable_a = InversShiftRow_ByteSub_memory_controller_enable_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_enable_a = InversShiftRow_ByteSub_memory_controller_enable_a;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %8, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %14, i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %80, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %82, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %98, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %133, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %148, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %154, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %231, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %233, i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %242, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %248, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_a;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_a;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_a = `TAG_g_statemt_a;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_a = (`TAG_g_statemt_a | (4 * 32'd14));
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_a = `TAG_g_key_a;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd2));
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd4));
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd6));
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd8));
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd10));
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd12));
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_a = (`TAG_g_key_a | (4 * 32'd14));
	end
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_address_a = main_1_scevgep103;
	end
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_address_a = main_1_scevgep98_reg;
	end
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_address_a = main_1_scevgep97_reg;
	end
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_address_a = main_1_scevgep96_reg;
	end
	/* main: %1*/
	/*   store i32 %8, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_address_a = main_1_scevgep102_reg;
	end
	/* main: %1*/
	/*   store i32 %14, i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_address_a = main_1_scevgep100_reg;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_address_a = main_21_scevgep80;
	end
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_address_a = main_21_scevgep76_reg;
	end
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_address_a = main_21_scevgep72_reg;
	end
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_address_a = main_21_scevgep70_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %80, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_address_a = main_lrphii_scevgep88_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %82, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_address_a = main_lrphii_scevgep84_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep65;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep64_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep63_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep62_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %98, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_address_a = main_AddRoundKeyexit_crit_edgei_scevgep59_reg;
	end
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		memory_controller_address_a = main_preheaderi_scevgep54;
	end
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_address_a = main_119_scevgep50;
	end
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_address_a = main_119_scevgep49_reg;
	end
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_address_a = main_119_scevgep48_reg;
	end
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_address_a = main_119_scevgep47_reg;
	end
	/* main: %119*/
	/*   store i32 %133, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_address_a = main_119_scevgep44_reg;
	end
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		memory_controller_address_a = main_140_scevgep17;
	end
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_address_a = main_140_scevgep21;
	end
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_address_a = main_140_scevgep20_reg;
	end
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_address_a = main_140_scevgep19_reg;
	end
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_address_a = main_140_scevgep18_reg;
	end
	/* main: %140*/
	/*   store i32 %148, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		memory_controller_address_a = main_140_scevgep17_reg;
	end
	/* main: %140*/
	/*   store i32 %154, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_address_a = main_140_scevgep15_reg;
	end
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_address_a = main_160_scevgep24;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %231, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_address_a = main_lrphii26_scevgep35_reg;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %233, i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_address_a = main_lrphii26_scevgep31_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_address_a = main__crit_edgei_scevgep12;
	end
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_address_a = main__crit_edgei_scevgep7_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_address_a = main__crit_edgei_scevgep6_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_address_a = main__crit_edgei_scevgep5_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %242, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_address_a = main__crit_edgei_scevgep11_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %248, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_address_a = main__crit_edgei_scevgep9_reg;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_a = KeySchedule_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_a = KeySchedule_memory_controller_write_enable_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = ByteSub_ShiftRow_memory_controller_write_enable_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_a = ByteSub_ShiftRow_memory_controller_write_enable_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_a = ByteSub_ShiftRow_memory_controller_write_enable_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_a = ByteSub_ShiftRow_memory_controller_write_enable_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_a = KeySchedule_memory_controller_write_enable_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_a = KeySchedule_memory_controller_write_enable_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_write_enable_a = InversShiftRow_ByteSub_memory_controller_write_enable_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_write_enable_a = InversShiftRow_ByteSub_memory_controller_write_enable_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_write_enable_a = InversShiftRow_ByteSub_memory_controller_write_enable_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_write_enable_a = InversShiftRow_ByteSub_memory_controller_write_enable_a;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store i32 %8, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %14, i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %80, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %82, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %98, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %119*/
	/*   store i32 %133, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %140*/
	/*   store i32 %148, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %154, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %231, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %233, i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %242, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %248, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_a;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_a;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_a = 32'd50;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_a = 32'd246;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_a = 32'd136;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_a = 32'd48;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_a = 32'd49;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_a = 32'd152;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_a = 32'd224;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_a = 32'd7;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_a = 32'd43;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_a = 32'd40;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_a = 32'd210;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_a = 32'd171;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_a = 32'd21;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_a = 32'd9;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_a = 32'd79;
	end
	/* main: %1*/
	/*   store i32 %8, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_in_a = main_1_8_reg;
	end
	/* main: %1*/
	/*   store i32 %14, i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_in_a = main_1_14_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %80, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_in_a = main_lrphii_80;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %82, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_in_a = main_lrphii_82;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %98, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_in_a = main_AddRoundKeyexit_crit_edgei_98_reg;
	end
	/* main: %119*/
	/*   store i32 %133, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_in_a = main_119_133_reg;
	end
	/* main: %140*/
	/*   store i32 %148, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		memory_controller_in_a = main_140_148_reg;
	end
	/* main: %140*/
	/*   store i32 %154, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_in_a = main_140_154_reg;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %231, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_in_a = main_lrphii26_231;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %233, i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_in_a = main_lrphii26_233;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %242, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_in_a = main__crit_edgei_242_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %248, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_in_a = main__crit_edgei_248_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_a[1:0] = KeySchedule_memory_controller_size_a;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_a[1:0] = KeySchedule_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = ByteSub_ShiftRow_memory_controller_size_a;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_a[1:0] = ByteSub_ShiftRow_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_a[1:0] = ByteSub_ShiftRow_memory_controller_size_a;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_a[1:0] = ByteSub_ShiftRow_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_a[1:0] = KeySchedule_memory_controller_size_a;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_a[1:0] = KeySchedule_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_size_a[1:0] = InversShiftRow_ByteSub_memory_controller_size_a;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_size_a[1:0] = InversShiftRow_ByteSub_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_size_a[1:0] = InversShiftRow_ByteSub_memory_controller_size_a;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_size_a[1:0] = InversShiftRow_ByteSub_memory_controller_size_a;
	end
	/* main: %0*/
	/*   store i32 50, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 246, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 48, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 152, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 224, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 7, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 43, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 40, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 210, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 171, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 21, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 9, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %0*/
	/*   store i32 79, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %6 = load i32* %scevgep103, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %9 = load i32* %scevgep98, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %12 = load i32* %scevgep97, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %15 = load i32* %scevgep96, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store i32 %8, i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store i32 %14, i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %27 = load i32* %scevgep80, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %37 = load i32* %scevgep76, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %40 = load i32* %scevgep72, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %21*/
	/*   %62 = load i32* %scevgep70, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %80, i32* %scevgep88, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %82, i32* %scevgep84, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %90 = load i32* %scevgep65, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %93 = load i32* %scevgep64, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %96 = load i32* %scevgep63, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %99 = load i32* %scevgep62, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %98, i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader.i*/
	/*   %113 = load i32* %scevgep54, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_64)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %119*/
	/*   %125 = load i32* %scevgep50, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %119*/
	/*   %128 = load i32* %scevgep49, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %119*/
	/*   %131 = load i32* %scevgep48, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %119*/
	/*   %134 = load i32* %scevgep47, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %119*/
	/*   store i32 %133, i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   %147 = load i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_83)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   %146 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   %149 = load i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   %152 = load i32* %scevgep19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   %155 = load i32* %scevgep18, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   store i32 %148, i32* %scevgep17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_88)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %140*/
	/*   store i32 %154, i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %160*/
	/*   %165 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %231, i32* %scevgep35, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %233, i32* %scevgep31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %240 = load i32* %scevgep12, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %243 = load i32* %scevgep7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %246 = load i32* %scevgep6, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %249 = load i32* %scevgep5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %242, i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %248, i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_b = KeySchedule_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_enable_b = KeySchedule_memory_controller_enable_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = ByteSub_ShiftRow_memory_controller_enable_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_enable_b = ByteSub_ShiftRow_memory_controller_enable_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_b = ByteSub_ShiftRow_memory_controller_enable_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_enable_b = ByteSub_ShiftRow_memory_controller_enable_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_b = KeySchedule_memory_controller_enable_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_enable_b = KeySchedule_memory_controller_enable_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_enable_b = InversShiftRow_ByteSub_memory_controller_enable_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_enable_b = InversShiftRow_ByteSub_memory_controller_enable_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_enable_b = InversShiftRow_ByteSub_memory_controller_enable_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_enable_b = InversShiftRow_ByteSub_memory_controller_enable_b;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %11, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %17, i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %81, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %83, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %95, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %92, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %101, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_56)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__106_59)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %130, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %127, i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %136, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %151, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %157, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %232, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %234, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %245, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %251, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_150)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__256_153)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_b;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_address_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = KeySchedule_memory_controller_address_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_address_b;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_address_b = (`TAG_g_statemt_a | (4 * 32'd15));
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd1));
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd3));
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd5));
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd7));
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd9));
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd11));
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd13));
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_address_b = (`TAG_g_key_a | (4 * 32'd15));
	end
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_address_b = main_1_scevgep102;
	end
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_address_b = main_1_scevgep101_reg;
	end
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_address_b = main_1_scevgep100_reg;
	end
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_address_b = main_1_scevgep99_reg;
	end
	/* main: %1*/
	/*   store i32 %11, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_address_b = main_1_scevgep101_reg;
	end
	/* main: %1*/
	/*   store i32 %17, i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_address_b = main_1_scevgep99_reg;
	end
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_address_b = main_21_scevgep78;
	end
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_address_b = main_21_scevgep74_reg;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_address_b = main_21_scevgep71_reg;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_address_b = main_21_scevgep69_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %81, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_address_b = main_lrphii_scevgep86_reg;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %83, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_address_b = main_lrphii_scevgep82_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep61;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep60_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep59_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %95, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep60_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %92, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep61_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %101, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_address_b = main_AddRoundKeyexit_crit_edgei_scevgep58_reg;
	end
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_56)) begin
		memory_controller_address_b = main_lrphi_scevgep56;
	end
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__106_59)) begin
		memory_controller_address_b = main_lrphi_scevgep56_reg;
	end
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		memory_controller_address_b = main_119_scevgep46;
	end
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_address_b = main_119_scevgep45_reg;
	end
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_address_b = main_119_scevgep44_reg;
	end
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_address_b = main_119_scevgep43_reg;
	end
	/* main: %119*/
	/*   store i32 %130, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_address_b = main_119_scevgep45_reg;
	end
	/* main: %119*/
	/*   store i32 %127, i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		memory_controller_address_b = main_119_scevgep46_reg;
	end
	/* main: %119*/
	/*   store i32 %136, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_address_b = main_119_scevgep43_reg;
	end
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_address_b = main_140_scevgep16_reg;
	end
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_address_b = main_140_scevgep15_reg;
	end
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_address_b = main_140_scevgep14_reg;
	end
	/* main: %140*/
	/*   store i32 %151, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_address_b = main_140_scevgep16_reg;
	end
	/* main: %140*/
	/*   store i32 %157, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_address_b = main_140_scevgep14_reg;
	end
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_address_b = main_160_180;
	end
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		memory_controller_address_b = main_160_196;
	end
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_127)) begin
		memory_controller_address_b = main_160_212;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %232, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_address_b = main_lrphii26_scevgep33_reg;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %234, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_address_b = main_lrphii26_scevgep29_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_address_b = main__crit_edgei_scevgep11;
	end
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_address_b = main__crit_edgei_scevgep10_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_address_b = main__crit_edgei_scevgep9_reg;
	end
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_address_b = main__crit_edgei_scevgep8_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %245, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_address_b = main__crit_edgei_scevgep10_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %251, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_address_b = main__crit_edgei_scevgep8_reg;
	end
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_150)) begin
		memory_controller_address_b = main_lrphi35_scevgep4;
	end
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__256_153)) begin
		memory_controller_address_b = main_lrphi35_scevgep4_reg;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		memory_controller_address_b = main_preheaderloopexiti32_scevgep2;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_b = KeySchedule_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_write_enable_b = KeySchedule_memory_controller_write_enable_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = ByteSub_ShiftRow_memory_controller_write_enable_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_write_enable_b = ByteSub_ShiftRow_memory_controller_write_enable_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_b = ByteSub_ShiftRow_memory_controller_write_enable_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_write_enable_b = ByteSub_ShiftRow_memory_controller_write_enable_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_b = KeySchedule_memory_controller_write_enable_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_write_enable_b = KeySchedule_memory_controller_write_enable_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_write_enable_b = InversShiftRow_ByteSub_memory_controller_write_enable_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_write_enable_b = InversShiftRow_ByteSub_memory_controller_write_enable_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_write_enable_b = InversShiftRow_ByteSub_memory_controller_write_enable_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_write_enable_b = InversShiftRow_ByteSub_memory_controller_write_enable_b;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store i32 %11, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store i32 %17, i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %81, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %83, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %95, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %92, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %101, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_56)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__106_59)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %119*/
	/*   store i32 %130, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %127, i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %119*/
	/*   store i32 %136, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %140*/
	/*   store i32 %151, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %140*/
	/*   store i32 %157, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_127)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %232, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %234, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %245, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %251, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_150)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__256_153)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_b;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = ByteSub_ShiftRow_memory_controller_in_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = KeySchedule_memory_controller_in_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = InversShiftRow_ByteSub_memory_controller_in_b;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_in_b = 32'd67;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_in_b = 32'd168;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_in_b = 32'd90;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_in_b = 32'd141;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_in_b = 32'd49;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_in_b = 32'd162;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_in_b = 32'd55;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_in_b = 32'd52;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_in_b = 32'd126;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_in_b = 32'd22;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_in_b = 32'd174;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_in_b = 32'd166;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_in_b = 32'd247;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_in_b = 32'd136;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_in_b = 32'd207;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_in_b = 32'd60;
	end
	/* main: %1*/
	/*   store i32 %11, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_in_b = main_1_11_reg;
	end
	/* main: %1*/
	/*   store i32 %17, i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_in_b = main_1_17;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %81, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_in_b = main_lrphii_81;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %83, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_in_b = main_lrphii_83;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %95, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_95;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %92, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_92_reg;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %101, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_in_b = main_AddRoundKeyexit_crit_edgei_101;
	end
	/* main: %119*/
	/*   store i32 %130, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_in_b = main_119_130;
	end
	/* main: %119*/
	/*   store i32 %127, i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		memory_controller_in_b = main_119_127_reg;
	end
	/* main: %119*/
	/*   store i32 %136, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_in_b = main_119_136;
	end
	/* main: %140*/
	/*   store i32 %151, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_in_b = main_140_151;
	end
	/* main: %140*/
	/*   store i32 %157, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_in_b = main_140_157;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %232, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_in_b = main_lrphii26_232;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %234, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_in_b = main_lrphii26_234;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %245, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_in_b = main__crit_edgei_245_reg;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %251, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_in_b = main__crit_edgei_251;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_b[1:0] = KeySchedule_memory_controller_size_b;
	end
	/* main: %0*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_18)) begin
		memory_controller_size_b[1:0] = KeySchedule_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = ByteSub_ShiftRow_memory_controller_size_b;
	end
	/* main: %AddRoundKey.exit.i.preheader*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_28)) begin
		memory_controller_size_b[1:0] = ByteSub_ShiftRow_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_b[1:0] = ByteSub_ShiftRow_memory_controller_size_b;
	end
	/* main: %MixColumn_AddRoundKey.exit.i*/
	/*   tail call fastcc void @ByteSub_ShiftRow() #1*/
	if ((cur_state == LEGUP_function_call_44)) begin
		memory_controller_size_b[1:0] = ByteSub_ShiftRow_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_b[1:0] = KeySchedule_memory_controller_size_b;
	end
	/* main: %encrypt.exit*/
	/*   tail call fastcc void @KeySchedule() #1*/
	if ((cur_state == LEGUP_function_call_68)) begin
		memory_controller_size_b[1:0] = KeySchedule_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_size_b[1:0] = InversShiftRow_ByteSub_memory_controller_size_b;
	end
	/* main: %.lr.ph10.i.preheader*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_79)) begin
		memory_controller_size_b[1:0] = InversShiftRow_ByteSub_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_size_b[1:0] = InversShiftRow_ByteSub_memory_controller_size_b;
	end
	/* main: %AddRoundKey_InversMixColumn.exit.i*/
	/*   tail call fastcc void @InversShiftRow_ByteSub() #1*/
	if ((cur_state == LEGUP_function_call_139)) begin
		memory_controller_size_b[1:0] = InversShiftRow_ByteSub_memory_controller_size_b;
	end
	/* main: %0*/
	/*   store i32 67, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 168, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 90, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 141, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 49, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 162, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 55, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 52, i32* getelementptr inbounds ([32 x i32]* @statemt, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 126, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 22, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 174, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 166, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 247, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 136, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 207, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %0*/
	/*   store i32 60, i32* getelementptr inbounds ([32 x i32]* @key, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__0_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %7 = load i32* %scevgep102, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %10 = load i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %13 = load i32* %scevgep100, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_22)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %16 = load i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_23)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store i32 %11, i32* %scevgep101, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_24)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store i32 %17, i32* %scevgep99, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__1_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %31 = load i32* %scevgep78, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %38 = load i32* %scevgep74, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %51 = load i32* %scevgep71, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %21*/
	/*   %72 = load i32* %scevgep69, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__21_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %81, i32* %scevgep86, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i*/
	/*   store i32 %83, i32* %scevgep82, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii_41)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %91 = load i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_47)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %94 = load i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_48)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %97 = load i32* %scevgep59, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_49)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   %100 = load i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %95, i32* %scevgep60, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_51)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %92, i32* %scevgep61, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %AddRoundKey.exit._crit_edge.i*/
	/*   store i32 %101, i32* %scevgep58, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_AddRoundKeyexit_crit_edgei_53)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i*/
	/*   %104 = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi_56)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %106*/
	/*   %.pre.i = load i32* %scevgep56, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__106_59)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   %126 = load i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_70)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   %129 = load i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   %132 = load i32* %scevgep44, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_72)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   %135 = load i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_73)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   store i32 %130, i32* %scevgep45, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   store i32 %127, i32* %scevgep46, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_75)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %119*/
	/*   store i32 %136, i32* %scevgep43, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__119_76)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %140*/
	/*   %150 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_84)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %140*/
	/*   %153 = load i32* %scevgep15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %140*/
	/*   %156 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %140*/
	/*   store i32 %151, i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %140*/
	/*   store i32 %157, i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__140_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %160*/
	/*   %181 = load i32* %180, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_94)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %160*/
	/*   %197 = load i32* %196, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_126)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %160*/
	/*   %213 = load i32* %212, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__160_127)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %232, i32* %scevgep33, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_135)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i.i26*/
	/*   store i32 %234, i32* %scevgep29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphii26_136)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %241 = load i32* %scevgep11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_142)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %244 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_143)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %247 = load i32* %scevgep9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_144)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   %250 = load i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_145)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %245, i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_146)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge.i*/
	/*   store i32 %251, i32* %scevgep8, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edgei_147)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.lr.ph.i35*/
	/*   %254 = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi35_150)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %256*/
	/*   %.pre12.i = load i32* %scevgep4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__256_153)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader.loopexit.i32*/
	/*   %263 = load i32* %scevgep2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderloopexiti32_158)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %275*/
	/*   ret i32 %267*/
	if ((cur_state == LEGUP_F_main_BB__275_164)) begin
		return_val <= main_preheaderloopexiti32_267_reg;
		if (start == 1'b0 && ^(main_preheaderloopexiti32_267_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
