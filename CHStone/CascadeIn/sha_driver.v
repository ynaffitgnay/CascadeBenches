//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Jul 26 12:56:54 2015
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Apr  8 21:25:53 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
`define TAG_g_sha_info_data `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_data_a {`TAG_g_sha_info_data, 23'd0}
// @sha_info_digest.0 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest0 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest0_a {`TAG_g_sha_info_digest0, 23'd64}
// @sha_info_digest.1 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest1_a {`TAG_g_sha_info_digest1, 23'd68}
// @sha_info_digest.2 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest2 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest2_a {`TAG_g_sha_info_digest2, 23'd72}
// @sha_info_digest.3 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest3 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest3_a {`TAG_g_sha_info_digest3, 23'd76}
// @sha_info_digest.4 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest4 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_sha_info_digest4_a {`TAG_g_sha_info_digest4, 23'd80}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [4:0] ram_32_address_a;
reg [4:0] ram_32_address_b;
reg ram_32_write_enable_a;
reg ram_32_write_enable_b;
reg [31:0] ram_32_in_a;
reg [31:0] ram_32_in_b;
wire [31:0] ram_32_out_a;
wire [31:0] ram_32_out_b;

// @sha_info_digest.0 = internal unnamed_addr global i32 0
ram_dual_port ram_32 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ram_32_address_a ),
	.address_b( ram_32_address_b ),
	.wren_a( ram_32_write_enable_a ),
	.wren_b( ram_32_write_enable_b ),
	.data_a( ram_32_in_a ),
	.data_b( ram_32_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ram_32_out_a ),
	.q_b( ram_32_out_b)
);
defparam ram_32.width_a = 32;
defparam ram_32.width_b = 32;
defparam ram_32.widthad_a = 5;
defparam ram_32.widthad_b = 5;
defparam ram_32.width_be_a = 1;
defparam ram_32.width_be_b = 1;
defparam ram_32.numwords_a = 21;
defparam ram_32.numwords_b = 21;
defparam ram_32.latency = ram_latency;
defparam ram_32.init_file = "ram_32.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_a & (tag_a == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
always @(*)
if (memory_controller_enable_b & (tag_b == 0))
begin
   $display("Error: Null pointer exception! Are you trying to read from a local ram? Use: 'set_memory_global <ram_name>' To debug this error try: 'set_parameter PRINT_STATES 1'");
   $finish;
end
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_ram_32_a;
assign select_ram_32_a = (tag_a == 2);
reg [ram_latency:0] select_ram_32_reg_a;
wire [31:0] memory_controller_ram_32_out_a;
assign memory_controller_ram_32_out_a = {32{ select_ram_32_reg_a[ram_latency]}} & ram_32_out_a;

always @(*)
begin
	ram_32_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ram_32_a}};
	ram_32_write_enable_a = memory_controller_write_enable_a & select_ram_32_a;
	ram_32_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_ram_32_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_ram_32_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
select_ram_32_reg_a[j+1] <= select_ram_32_reg_a[j];
end
always @(*)
begin
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
select_ram_32_reg_a[0] <= select_ram_32_a;
end

reg [2:0] select_not_struct_b;

wire select_ram_32_b;
assign select_ram_32_b = (tag_b == 2);
reg [ram_latency:0] select_ram_32_reg_b;
wire [31:0] memory_controller_ram_32_out_b;
assign memory_controller_ram_32_out_b = {32{ select_ram_32_reg_b[ram_latency]}} & ram_32_out_b;

always @(*)
begin
	ram_32_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ram_32_b}};
	ram_32_write_enable_b = memory_controller_write_enable_b & select_ram_32_b;
	ram_32_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_ram_32_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_ram_32_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
select_ram_32_reg_b[j+1] <= select_ram_32_reg_b[j];
end
always @(*)
begin
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
select_ram_32_reg_b[0] <= select_ram_32_b;
end

endmodule 

`timescale 1 ns / 1 ns
module sha_transform
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_1 = 6'd1;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_2 = 6'd2;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_3 = 6'd3;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_4 = 6'd4;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_5 = 6'd5;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_6 = 6'd6;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_7 = 6'd7;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_8 = 6'd8;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_9 = 6'd9;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_10 = 6'd10;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader342_11 = 6'd11;
parameter [5:0] LEGUP_F_sha_transform_BB__crit_edge_12 = 6'd12;
parameter [5:0] LEGUP_F_sha_transform_BB__crit_edge_13 = 6'd13;
parameter [5:0] LEGUP_F_sha_transform_BB__crit_edge_14 = 6'd14;
parameter [5:0] LEGUP_F_sha_transform_BB__crit_edge_15 = 6'd15;
parameter [5:0] LEGUP_F_sha_transform_BB__crit_edge_16 = 6'd16;
parameter [5:0] LEGUP_F_sha_transform_BB__43_17 = 6'd17;
parameter [5:0] LEGUP_F_sha_transform_BB__43_18 = 6'd18;
parameter [5:0] LEGUP_F_sha_transform_BB__43_19 = 6'd19;
parameter [5:0] LEGUP_F_sha_transform_BB__43_20 = 6'd20;
parameter [5:0] LEGUP_F_sha_transform_BB__43_21 = 6'd21;
parameter [5:0] LEGUP_F_sha_transform_BB__49_22 = 6'd22;
parameter [5:0] LEGUP_F_sha_transform_BB__49_23 = 6'd23;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2preheader_24 = 6'd24;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_25 = 6'd25;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_26 = 6'd26;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader2_27 = 6'd27;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1preheader_28 = 6'd28;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_29 = 6'd29;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_30 = 6'd30;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader1_31 = 6'd31;
parameter [5:0] LEGUP_F_sha_transform_BB_preheaderpreheader_32 = 6'd32;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_33 = 6'd33;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_34 = 6'd34;
parameter [5:0] LEGUP_F_sha_transform_BB_preheader_35 = 6'd35;
parameter [5:0] LEGUP_F_sha_transform_BB__110_36 = 6'd36;
parameter [5:0] LEGUP_F_sha_transform_BB__110_37 = 6'd37;
parameter [5:0] LEGUP_F_sha_transform_BB__110_38 = 6'd38;
parameter [5:0] LEGUP_F_sha_transform_BB__110_39 = 6'd39;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] sha_transform_preheader342_0;
reg [31:0] sha_transform_preheader342_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_1_reg;
reg [31:0] sha_transform_preheader342_2;
reg [31:0] sha_transform_preheader342_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_3_reg;
reg [31:0] sha_transform_preheader342_4;
reg [31:0] sha_transform_preheader342_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_5_reg;
reg [31:0] sha_transform_preheader342_6;
reg [31:0] sha_transform_preheader342_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_7_reg;
reg [31:0] sha_transform_preheader342_8;
reg [31:0] sha_transform_preheader342_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_9_reg;
reg [31:0] sha_transform_preheader342_10;
reg [31:0] sha_transform_preheader342_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_11_reg;
reg [31:0] sha_transform_preheader342_12;
reg [31:0] sha_transform_preheader342_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_13_reg;
reg [31:0] sha_transform_preheader342_14;
reg [31:0] sha_transform_preheader342_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_15_reg;
reg [31:0] sha_transform_preheader342_16;
reg [31:0] sha_transform_preheader342_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_17_reg;
reg [31:0] sha_transform_preheader342_18;
reg [31:0] sha_transform_preheader342_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_19_reg;
reg [31:0] sha_transform_preheader342_20;
reg [31:0] sha_transform_preheader342_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_21_reg;
reg [31:0] sha_transform_preheader342_22;
reg [31:0] sha_transform_preheader342_22_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_23_reg;
reg [31:0] sha_transform_preheader342_24;
reg [31:0] sha_transform_preheader342_24_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_25;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_25_reg;
reg [31:0] sha_transform_preheader342_26;
reg [31:0] sha_transform_preheader342_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_27_reg;
reg [31:0] sha_transform_preheader342_28;
reg [31:0] sha_transform_preheader342_28_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_29_reg;
reg [31:0] sha_transform_preheader342_30;
reg [31:0] sha_transform_preheader342_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_31;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader342_31_reg;
reg [31:0] sha_transform__crit_edge_indvar17;
reg [31:0] sha_transform__crit_edge_indvar17_reg;
reg [31:0] sha_transform__crit_edge_32;
reg [31:0] sha_transform__crit_edge_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep21_reg;
reg [31:0] sha_transform__crit_edge_33;
reg [31:0] sha_transform__crit_edge_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep22_reg;
reg [31:0] sha_transform__crit_edge_34;
reg [31:0] sha_transform__crit_edge_34_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep23_reg;
reg [31:0] sha_transform__crit_edge_35;
reg [31:0] sha_transform__crit_edge_35_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform__crit_edge_scevgep24_reg;
reg [31:0] sha_transform__crit_edge_36;
reg [31:0] sha_transform__crit_edge_36_reg;
reg [31:0] sha_transform__crit_edge_37;
reg [31:0] sha_transform__crit_edge_37_reg;
reg [31:0] sha_transform__crit_edge_38;
reg [31:0] sha_transform__crit_edge_38_reg;
reg [31:0] sha_transform__crit_edge_39;
reg [31:0] sha_transform__crit_edge_39_reg;
reg [31:0] sha_transform__crit_edge_40;
reg [31:0] sha_transform__crit_edge_40_reg;
reg [31:0] sha_transform__crit_edge_41;
reg [31:0] sha_transform__crit_edge_41_reg;
reg [31:0] sha_transform__crit_edge_42;
reg [31:0] sha_transform__crit_edge_42_reg;
reg [31:0] sha_transform__crit_edge_indvarnext18;
reg [31:0] sha_transform__crit_edge_indvarnext18_reg;
reg  sha_transform__crit_edge_exitcond19;
reg  sha_transform__crit_edge_exitcond19_reg;
reg [31:0] sha_transform_43_44;
reg [31:0] sha_transform_43_44_reg;
reg [31:0] sha_transform_43_45;
reg [31:0] sha_transform_43_45_reg;
reg [31:0] sha_transform_43_46;
reg [31:0] sha_transform_43_46_reg;
reg [31:0] sha_transform_43_47;
reg [31:0] sha_transform_43_47_reg;
reg [31:0] sha_transform_43_48;
reg [31:0] sha_transform_43_48_reg;
reg [31:0] sha_transform_49_E027;
reg [31:0] sha_transform_49_E027_reg;
reg [31:0] sha_transform_49_D026;
reg [31:0] sha_transform_49_D026_reg;
reg [31:0] sha_transform_49_C025;
reg [31:0] sha_transform_49_C025_reg;
reg [31:0] sha_transform_49_B024;
reg [31:0] sha_transform_49_B024_reg;
reg [31:0] sha_transform_49_A023;
reg [31:0] sha_transform_49_A023_reg;
reg [31:0] sha_transform_49_i222;
reg [31:0] sha_transform_49_i222_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_49_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_49_scevgep16_reg;
reg [31:0] sha_transform_49_50;
reg [31:0] sha_transform_49_50_reg;
reg [31:0] sha_transform_49_51;
reg [31:0] sha_transform_49_51_reg;
reg [31:0] sha_transform_49_52;
reg [31:0] sha_transform_49_52_reg;
reg [31:0] sha_transform_49_53;
reg [31:0] sha_transform_49_53_reg;
reg [31:0] sha_transform_49_54;
reg [31:0] sha_transform_49_54_reg;
reg [31:0] sha_transform_49_55;
reg [31:0] sha_transform_49_55_reg;
reg [31:0] sha_transform_49_56;
reg [31:0] sha_transform_49_56_reg;
reg [31:0] sha_transform_49_57;
reg [31:0] sha_transform_49_57_reg;
reg [31:0] sha_transform_49_58;
reg [31:0] sha_transform_49_58_reg;
reg [31:0] sha_transform_49_59;
reg [31:0] sha_transform_49_59_reg;
reg [31:0] sha_transform_49_60;
reg [31:0] sha_transform_49_60_reg;
reg [31:0] sha_transform_49_61;
reg [31:0] sha_transform_49_61_reg;
reg [31:0] sha_transform_49_62;
reg [31:0] sha_transform_49_62_reg;
reg [31:0] sha_transform_49_63;
reg [31:0] sha_transform_49_63_reg;
reg [31:0] sha_transform_49_64;
reg [31:0] sha_transform_49_64_reg;
reg [31:0] sha_transform_49_65;
reg [31:0] sha_transform_49_65_reg;
reg  sha_transform_49_exitcond15;
reg  sha_transform_49_exitcond15_reg;
reg [31:0] sha_transform_preheader2_indvar11;
reg [31:0] sha_transform_preheader2_indvar11_reg;
reg [31:0] sha_transform_preheader2_E121;
reg [31:0] sha_transform_preheader2_E121_reg;
reg [31:0] sha_transform_preheader2_D120;
reg [31:0] sha_transform_preheader2_D120_reg;
reg [31:0] sha_transform_preheader2_C119;
reg [31:0] sha_transform_preheader2_C119_reg;
reg [31:0] sha_transform_preheader2_B118;
reg [31:0] sha_transform_preheader2_B118_reg;
reg [31:0] sha_transform_preheader2_A117;
reg [31:0] sha_transform_preheader2_A117_reg;
reg [31:0] sha_transform_preheader2_66;
reg [31:0] sha_transform_preheader2_66_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader2_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader2_scevgep14_reg;
reg [31:0] sha_transform_preheader2_67;
reg [31:0] sha_transform_preheader2_67_reg;
reg [31:0] sha_transform_preheader2_68;
reg [31:0] sha_transform_preheader2_68_reg;
reg [31:0] sha_transform_preheader2_69;
reg [31:0] sha_transform_preheader2_69_reg;
reg [31:0] sha_transform_preheader2_70;
reg [31:0] sha_transform_preheader2_70_reg;
reg [31:0] sha_transform_preheader2_71;
reg [31:0] sha_transform_preheader2_71_reg;
reg [31:0] sha_transform_preheader2_72;
reg [31:0] sha_transform_preheader2_72_reg;
reg [31:0] sha_transform_preheader2_73;
reg [31:0] sha_transform_preheader2_73_reg;
reg [31:0] sha_transform_preheader2_74;
reg [31:0] sha_transform_preheader2_74_reg;
reg [31:0] sha_transform_preheader2_75;
reg [31:0] sha_transform_preheader2_75_reg;
reg [31:0] sha_transform_preheader2_76;
reg [31:0] sha_transform_preheader2_76_reg;
reg [31:0] sha_transform_preheader2_77;
reg [31:0] sha_transform_preheader2_77_reg;
reg [31:0] sha_transform_preheader2_78;
reg [31:0] sha_transform_preheader2_78_reg;
reg [31:0] sha_transform_preheader2_79;
reg [31:0] sha_transform_preheader2_79_reg;
reg [31:0] sha_transform_preheader2_indvarnext12;
reg [31:0] sha_transform_preheader2_indvarnext12_reg;
reg  sha_transform_preheader2_exitcond13;
reg  sha_transform_preheader2_exitcond13_reg;
reg [31:0] sha_transform_preheader1_indvar8;
reg [31:0] sha_transform_preheader1_indvar8_reg;
reg [31:0] sha_transform_preheader1_E215;
reg [31:0] sha_transform_preheader1_E215_reg;
reg [31:0] sha_transform_preheader1_D214;
reg [31:0] sha_transform_preheader1_D214_reg;
reg [31:0] sha_transform_preheader1_C213;
reg [31:0] sha_transform_preheader1_C213_reg;
reg [31:0] sha_transform_preheader1_B212;
reg [31:0] sha_transform_preheader1_B212_reg;
reg [31:0] sha_transform_preheader1_A211;
reg [31:0] sha_transform_preheader1_A211_reg;
reg [31:0] sha_transform_preheader1_80;
reg [31:0] sha_transform_preheader1_80_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader1_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader1_scevgep10_reg;
reg [31:0] sha_transform_preheader1_81;
reg [31:0] sha_transform_preheader1_81_reg;
reg [31:0] sha_transform_preheader1_82;
reg [31:0] sha_transform_preheader1_82_reg;
reg [31:0] sha_transform_preheader1_83;
reg [31:0] sha_transform_preheader1_83_reg;
reg [31:0] sha_transform_preheader1_84;
reg [31:0] sha_transform_preheader1_84_reg;
reg [31:0] sha_transform_preheader1_85;
reg [31:0] sha_transform_preheader1_85_reg;
reg [31:0] sha_transform_preheader1_86;
reg [31:0] sha_transform_preheader1_86_reg;
reg [31:0] sha_transform_preheader1_87;
reg [31:0] sha_transform_preheader1_87_reg;
reg [31:0] sha_transform_preheader1_88;
reg [31:0] sha_transform_preheader1_88_reg;
reg [31:0] sha_transform_preheader1_89;
reg [31:0] sha_transform_preheader1_89_reg;
reg [31:0] sha_transform_preheader1_90;
reg [31:0] sha_transform_preheader1_90_reg;
reg [31:0] sha_transform_preheader1_91;
reg [31:0] sha_transform_preheader1_91_reg;
reg [31:0] sha_transform_preheader1_92;
reg [31:0] sha_transform_preheader1_92_reg;
reg [31:0] sha_transform_preheader1_93;
reg [31:0] sha_transform_preheader1_93_reg;
reg [31:0] sha_transform_preheader1_94;
reg [31:0] sha_transform_preheader1_94_reg;
reg [31:0] sha_transform_preheader1_95;
reg [31:0] sha_transform_preheader1_95_reg;
reg [31:0] sha_transform_preheader1_indvarnext9;
reg [31:0] sha_transform_preheader1_indvarnext9_reg;
reg  sha_transform_preheader1_exitcond;
reg  sha_transform_preheader1_exitcond_reg;
reg [31:0] sha_transform_preheader_indvar;
reg [31:0] sha_transform_preheader_indvar_reg;
reg [31:0] sha_transform_preheader_E39;
reg [31:0] sha_transform_preheader_E39_reg;
reg [31:0] sha_transform_preheader_D38;
reg [31:0] sha_transform_preheader_D38_reg;
reg [31:0] sha_transform_preheader_C37;
reg [31:0] sha_transform_preheader_C37_reg;
reg [31:0] sha_transform_preheader_B36;
reg [31:0] sha_transform_preheader_B36_reg;
reg [31:0] sha_transform_preheader_A35;
reg [31:0] sha_transform_preheader_A35_reg;
reg [31:0] sha_transform_preheader_96;
reg [31:0] sha_transform_preheader_96_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_preheader_scevgep_reg;
reg [31:0] sha_transform_preheader_97;
reg [31:0] sha_transform_preheader_97_reg;
reg [31:0] sha_transform_preheader_98;
reg [31:0] sha_transform_preheader_98_reg;
reg [31:0] sha_transform_preheader_99;
reg [31:0] sha_transform_preheader_99_reg;
reg [31:0] sha_transform_preheader_100;
reg [31:0] sha_transform_preheader_100_reg;
reg [31:0] sha_transform_preheader_101;
reg [31:0] sha_transform_preheader_101_reg;
reg [31:0] sha_transform_preheader_102;
reg [31:0] sha_transform_preheader_102_reg;
reg [31:0] sha_transform_preheader_103;
reg [31:0] sha_transform_preheader_103_reg;
reg [31:0] sha_transform_preheader_104;
reg [31:0] sha_transform_preheader_104_reg;
reg [31:0] sha_transform_preheader_105;
reg [31:0] sha_transform_preheader_105_reg;
reg [31:0] sha_transform_preheader_106;
reg [31:0] sha_transform_preheader_106_reg;
reg [31:0] sha_transform_preheader_107;
reg [31:0] sha_transform_preheader_107_reg;
reg [31:0] sha_transform_preheader_108;
reg [31:0] sha_transform_preheader_108_reg;
reg [31:0] sha_transform_preheader_109;
reg [31:0] sha_transform_preheader_109_reg;
reg [31:0] sha_transform_preheader_indvarnext;
reg [31:0] sha_transform_preheader_indvarnext_reg;
reg  sha_transform_preheader_exitcond7;
reg  sha_transform_preheader_exitcond7_reg;
reg [31:0] sha_transform_110_111;
reg [31:0] sha_transform_110_111_reg;
reg [31:0] sha_transform_110_112;
reg [31:0] sha_transform_110_112_reg;
reg [31:0] sha_transform_110_113;
reg [31:0] sha_transform_110_113_reg;
reg [31:0] sha_transform_110_114;
reg [31:0] sha_transform_110_114_reg;
reg [31:0] sha_transform_110_115;
reg [31:0] sha_transform_110_115_reg;
wire [13:0] indata_address_a;
wire  indata_write_enable_a;
wire [7:0] indata_in_a;
wire [7:0] indata_out_a;
wire [13:0] indata_address_b;
wire  indata_write_enable_b;
wire [7:0] indata_in_b;
wire [7:0] indata_out_b;
wire [3:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [3:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
reg [6:0] sha_transform_preheader342_W_address_a;
reg  sha_transform_preheader342_W_write_enable_a;
reg [31:0] sha_transform_preheader342_W_in_a;
wire [31:0] sha_transform_preheader342_W_out_a;
reg [6:0] sha_transform_preheader342_W_address_b;
reg  sha_transform_preheader342_W_write_enable_b;
reg [31:0] sha_transform_preheader342_W_in_b;
wire [31:0] sha_transform_preheader342_W_out_b;

// Local Rams


//   %W = alloca [80 x i32], align 4
ram_dual_port sha_transform_preheader342_W (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_transform_preheader342_W_address_a ),
	.address_b( sha_transform_preheader342_W_address_b ),
	.wren_a( sha_transform_preheader342_W_write_enable_a ),
	.wren_b( sha_transform_preheader342_W_write_enable_b ),
	.data_a( sha_transform_preheader342_W_in_a ),
	.data_b( sha_transform_preheader342_W_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_transform_preheader342_W_out_a ),
	.q_b( sha_transform_preheader342_W_out_b)
);
defparam sha_transform_preheader342_W.width_a = 32;
defparam sha_transform_preheader342_W.width_b = 32;
defparam sha_transform_preheader342_W.widthad_a = 7;
defparam sha_transform_preheader342_W.widthad_b = 7;
defparam sha_transform_preheader342_W.width_be_a = 1;
defparam sha_transform_preheader342_W.width_be_b = 1;
defparam sha_transform_preheader342_W.numwords_a = 80;
defparam sha_transform_preheader342_W.numwords_b = 80;
defparam sha_transform_preheader342_W.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader342_1;
LEGUP_F_sha_transform_BB__110_36:
		next_state = LEGUP_F_sha_transform_BB__110_37;
LEGUP_F_sha_transform_BB__110_37:
		next_state = LEGUP_F_sha_transform_BB__110_38;
LEGUP_F_sha_transform_BB__110_38:
		next_state = LEGUP_F_sha_transform_BB__110_39;
LEGUP_F_sha_transform_BB__110_39:
		next_state = LEGUP_0;
LEGUP_F_sha_transform_BB__43_17:
		next_state = LEGUP_F_sha_transform_BB__43_18;
LEGUP_F_sha_transform_BB__43_18:
		next_state = LEGUP_F_sha_transform_BB__43_19;
LEGUP_F_sha_transform_BB__43_19:
		next_state = LEGUP_F_sha_transform_BB__43_20;
LEGUP_F_sha_transform_BB__43_20:
		next_state = LEGUP_F_sha_transform_BB__43_21;
LEGUP_F_sha_transform_BB__43_21:
		next_state = LEGUP_F_sha_transform_BB__49_22;
LEGUP_F_sha_transform_BB__49_22:
		next_state = LEGUP_F_sha_transform_BB__49_23;
LEGUP_F_sha_transform_BB__49_23:
	if ((sha_transform_49_exitcond15_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader2preheader_24;
	else if ((sha_transform_49_exitcond15_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB__49_22;
LEGUP_F_sha_transform_BB__crit_edge_12:
		next_state = LEGUP_F_sha_transform_BB__crit_edge_13;
LEGUP_F_sha_transform_BB__crit_edge_13:
		next_state = LEGUP_F_sha_transform_BB__crit_edge_14;
LEGUP_F_sha_transform_BB__crit_edge_14:
		next_state = LEGUP_F_sha_transform_BB__crit_edge_15;
LEGUP_F_sha_transform_BB__crit_edge_15:
		next_state = LEGUP_F_sha_transform_BB__crit_edge_16;
LEGUP_F_sha_transform_BB__crit_edge_16:
	if ((sha_transform__crit_edge_exitcond19_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB__43_17;
	else if ((sha_transform__crit_edge_exitcond19_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB__crit_edge_12;
LEGUP_F_sha_transform_BB_preheader1_29:
		next_state = LEGUP_F_sha_transform_BB_preheader1_30;
LEGUP_F_sha_transform_BB_preheader1_30:
		next_state = LEGUP_F_sha_transform_BB_preheader1_31;
LEGUP_F_sha_transform_BB_preheader1_31:
	if ((sha_transform_preheader1_exitcond_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheaderpreheader_32;
	else if ((sha_transform_preheader1_exitcond_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader1_29;
LEGUP_F_sha_transform_BB_preheader1preheader_28:
		next_state = LEGUP_F_sha_transform_BB_preheader1_29;
LEGUP_F_sha_transform_BB_preheader2_25:
		next_state = LEGUP_F_sha_transform_BB_preheader2_26;
LEGUP_F_sha_transform_BB_preheader2_26:
		next_state = LEGUP_F_sha_transform_BB_preheader2_27;
LEGUP_F_sha_transform_BB_preheader2_27:
	if ((sha_transform_preheader2_exitcond13_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_preheader1preheader_28;
	else if ((sha_transform_preheader2_exitcond13_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader2_25;
LEGUP_F_sha_transform_BB_preheader2preheader_24:
		next_state = LEGUP_F_sha_transform_BB_preheader2_25;
LEGUP_F_sha_transform_BB_preheader342_1:
		next_state = LEGUP_F_sha_transform_BB_preheader342_2;
LEGUP_F_sha_transform_BB_preheader342_10:
		next_state = LEGUP_F_sha_transform_BB_preheader342_11;
LEGUP_F_sha_transform_BB_preheader342_11:
		next_state = LEGUP_F_sha_transform_BB__crit_edge_12;
LEGUP_F_sha_transform_BB_preheader342_2:
		next_state = LEGUP_F_sha_transform_BB_preheader342_3;
LEGUP_F_sha_transform_BB_preheader342_3:
		next_state = LEGUP_F_sha_transform_BB_preheader342_4;
LEGUP_F_sha_transform_BB_preheader342_4:
		next_state = LEGUP_F_sha_transform_BB_preheader342_5;
LEGUP_F_sha_transform_BB_preheader342_5:
		next_state = LEGUP_F_sha_transform_BB_preheader342_6;
LEGUP_F_sha_transform_BB_preheader342_6:
		next_state = LEGUP_F_sha_transform_BB_preheader342_7;
LEGUP_F_sha_transform_BB_preheader342_7:
		next_state = LEGUP_F_sha_transform_BB_preheader342_8;
LEGUP_F_sha_transform_BB_preheader342_8:
		next_state = LEGUP_F_sha_transform_BB_preheader342_9;
LEGUP_F_sha_transform_BB_preheader342_9:
		next_state = LEGUP_F_sha_transform_BB_preheader342_10;
LEGUP_F_sha_transform_BB_preheader_33:
		next_state = LEGUP_F_sha_transform_BB_preheader_34;
LEGUP_F_sha_transform_BB_preheader_34:
		next_state = LEGUP_F_sha_transform_BB_preheader_35;
LEGUP_F_sha_transform_BB_preheader_35:
	if ((sha_transform_preheader_exitcond7_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB__110_36;
	else if ((sha_transform_preheader_exitcond7_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_preheader_33;
LEGUP_F_sha_transform_BB_preheaderpreheader_32:
		next_state = LEGUP_F_sha_transform_BB_preheader_33;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
		sha_transform_preheader342_0 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_0_reg <= sha_transform_preheader342_0;
		if (start == 1'b0 && ^(sha_transform_preheader342_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_0_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 0*/
if (reset) begin sha_transform_preheader342_1 = 0; end
		sha_transform_preheader342_1 = 1'd0;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_1_reg <= sha_transform_preheader342_1;
		if (start == 1'b0 && ^(sha_transform_preheader342_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_1_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
		sha_transform_preheader342_2 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_2_reg <= sha_transform_preheader342_2;
		if (start == 1'b0 && ^(sha_transform_preheader342_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_2_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %3 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 1*/
if (reset) begin sha_transform_preheader342_3 = 0; end
		sha_transform_preheader342_3 = (1'd0 | (4 * 32'd1));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %3 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_3_reg <= sha_transform_preheader342_3;
		if (start == 1'b0 && ^(sha_transform_preheader342_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_3_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
		sha_transform_preheader342_4 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_4_reg <= sha_transform_preheader342_4;
		if (start == 1'b0 && ^(sha_transform_preheader342_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_4_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 2*/
if (reset) begin sha_transform_preheader342_5 = 0; end
		sha_transform_preheader342_5 = (1'd0 | (4 * 32'd2));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_5_reg <= sha_transform_preheader342_5;
		if (start == 1'b0 && ^(sha_transform_preheader342_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_5_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
		sha_transform_preheader342_6 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_6_reg <= sha_transform_preheader342_6;
		if (start == 1'b0 && ^(sha_transform_preheader342_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_6_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 3*/
if (reset) begin sha_transform_preheader342_7 = 0; end
		sha_transform_preheader342_7 = (1'd0 | (4 * 32'd3));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_7_reg <= sha_transform_preheader342_7;
		if (start == 1'b0 && ^(sha_transform_preheader342_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_7_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
		sha_transform_preheader342_8 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_8_reg <= sha_transform_preheader342_8;
		if (start == 1'b0 && ^(sha_transform_preheader342_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 4*/
if (reset) begin sha_transform_preheader342_9 = 0; end
		sha_transform_preheader342_9 = (1'd0 | (4 * 32'd4));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_9_reg <= sha_transform_preheader342_9;
		if (start == 1'b0 && ^(sha_transform_preheader342_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
		sha_transform_preheader342_10 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_10_reg <= sha_transform_preheader342_10;
		if (start == 1'b0 && ^(sha_transform_preheader342_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %11 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 5*/
if (reset) begin sha_transform_preheader342_11 = 0; end
		sha_transform_preheader342_11 = (1'd0 | (4 * 32'd5));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %11 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_11_reg <= sha_transform_preheader342_11;
		if (start == 1'b0 && ^(sha_transform_preheader342_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
		sha_transform_preheader342_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_12_reg <= sha_transform_preheader342_12;
		if (start == 1'b0 && ^(sha_transform_preheader342_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %13 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 6*/
if (reset) begin sha_transform_preheader342_13 = 0; end
		sha_transform_preheader342_13 = (1'd0 | (4 * 32'd6));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %13 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_13_reg <= sha_transform_preheader342_13;
		if (start == 1'b0 && ^(sha_transform_preheader342_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
		sha_transform_preheader342_14 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_14_reg <= sha_transform_preheader342_14;
		if (start == 1'b0 && ^(sha_transform_preheader342_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %15 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 7*/
if (reset) begin sha_transform_preheader342_15 = 0; end
		sha_transform_preheader342_15 = (1'd0 | (4 * 32'd7));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %15 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_15_reg <= sha_transform_preheader342_15;
		if (start == 1'b0 && ^(sha_transform_preheader342_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_15_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
		sha_transform_preheader342_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_16_reg <= sha_transform_preheader342_16;
		if (start == 1'b0 && ^(sha_transform_preheader342_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %17 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 8*/
if (reset) begin sha_transform_preheader342_17 = 0; end
		sha_transform_preheader342_17 = (1'd0 | (4 * 32'd8));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %17 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_17_reg <= sha_transform_preheader342_17;
		if (start == 1'b0 && ^(sha_transform_preheader342_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
		sha_transform_preheader342_18 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_18_reg <= sha_transform_preheader342_18;
		if (start == 1'b0 && ^(sha_transform_preheader342_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %19 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 9*/
if (reset) begin sha_transform_preheader342_19 = 0; end
		sha_transform_preheader342_19 = (1'd0 | (4 * 32'd9));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %19 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_19_reg <= sha_transform_preheader342_19;
		if (start == 1'b0 && ^(sha_transform_preheader342_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_19_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
		sha_transform_preheader342_20 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_20_reg <= sha_transform_preheader342_20;
		if (start == 1'b0 && ^(sha_transform_preheader342_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_20_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %21 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 10*/
if (reset) begin sha_transform_preheader342_21 = 0; end
		sha_transform_preheader342_21 = (1'd0 | (4 * 32'd10));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %21 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_21_reg <= sha_transform_preheader342_21;
		if (start == 1'b0 && ^(sha_transform_preheader342_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_21_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
		sha_transform_preheader342_22 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_22_reg <= sha_transform_preheader342_22;
		if (start == 1'b0 && ^(sha_transform_preheader342_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_22_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %23 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 11*/
if (reset) begin sha_transform_preheader342_23 = 0; end
		sha_transform_preheader342_23 = (1'd0 | (4 * 32'd11));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %23 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_23_reg <= sha_transform_preheader342_23;
		if (start == 1'b0 && ^(sha_transform_preheader342_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_23_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
		sha_transform_preheader342_24 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_24_reg <= sha_transform_preheader342_24;
		if (start == 1'b0 && ^(sha_transform_preheader342_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_24_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %25 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 12*/
if (reset) begin sha_transform_preheader342_25 = 0; end
		sha_transform_preheader342_25 = (1'd0 | (4 * 32'd12));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %25 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_25_reg <= sha_transform_preheader342_25;
		if (start == 1'b0 && ^(sha_transform_preheader342_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_25_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
		sha_transform_preheader342_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_26_reg <= sha_transform_preheader342_26;
		if (start == 1'b0 && ^(sha_transform_preheader342_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_26_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %27 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 13*/
if (reset) begin sha_transform_preheader342_27 = 0; end
		sha_transform_preheader342_27 = (1'd0 | (4 * 32'd13));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %27 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_27_reg <= sha_transform_preheader342_27;
		if (start == 1'b0 && ^(sha_transform_preheader342_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_27_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
		sha_transform_preheader342_28 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_28_reg <= sha_transform_preheader342_28;
		if (start == 1'b0 && ^(sha_transform_preheader342_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_28_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %29 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 14*/
if (reset) begin sha_transform_preheader342_29 = 0; end
		sha_transform_preheader342_29 = (1'd0 | (4 * 32'd14));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %29 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_29_reg <= sha_transform_preheader342_29;
		if (start == 1'b0 && ^(sha_transform_preheader342_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_29_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
		sha_transform_preheader342_30 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_30_reg <= sha_transform_preheader342_30;
		if (start == 1'b0 && ^(sha_transform_preheader342_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_30_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader342*/
	/*   %31 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 15*/
if (reset) begin sha_transform_preheader342_31 = 0; end
		sha_transform_preheader342_31 = (1'd0 | (4 * 32'd15));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader342*/
	/*   %31 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		sha_transform_preheader342_31_reg <= sha_transform_preheader342_31;
		if (start == 1'b0 && ^(sha_transform_preheader342_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader342_31_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %._crit_edge ], [ 0, %.preheader342 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader342_11) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform__crit_edge_indvar17 = 32'd0;
	end
	/* sha_transform: %._crit_edge*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %._crit_edge ], [ 0, %.preheader342 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__crit_edge_16) & (memory_controller_waitrequest == 1'd0)) & (sha_transform__crit_edge_exitcond19_reg == 1'd0))) */ begin
		sha_transform__crit_edge_indvar17 = sha_transform__crit_edge_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %._crit_edge ], [ 0, %.preheader342 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader342_11) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform__crit_edge_indvar17_reg <= sha_transform__crit_edge_indvar17;
		if (start == 1'b0 && ^(sha_transform__crit_edge_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_indvar17_reg"); $finish; end
	end
	/* sha_transform: %._crit_edge*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %._crit_edge ], [ 0, %.preheader342 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__crit_edge_16) & (memory_controller_waitrequest == 1'd0)) & (sha_transform__crit_edge_exitcond19_reg == 1'd0))) begin
		sha_transform__crit_edge_indvar17_reg <= sha_transform__crit_edge_indvar17;
		if (start == 1'b0 && ^(sha_transform__crit_edge_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %32 = add i32 %indvar17, 16*/
		sha_transform__crit_edge_32 = (sha_transform__crit_edge_indvar17_reg + 32'd16);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %32 = add i32 %indvar17, 16*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_32_reg <= sha_transform__crit_edge_32;
		if (start == 1'b0 && ^(sha_transform__crit_edge_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_32_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep20 = getelementptr [80 x i32]* %W, i32 0, i32 %32*/
		sha_transform__crit_edge_scevgep20 = (1'd0 | (4 * sha_transform__crit_edge_32_reg));
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep20 = getelementptr [80 x i32]* %W, i32 0, i32 %32*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform__crit_edge_scevgep20_reg <= sha_transform__crit_edge_scevgep20;
		if (start == 1'b0 && ^(sha_transform__crit_edge_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep21 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar17*/
		sha_transform__crit_edge_scevgep21 = (1'd0 | (4 * sha_transform__crit_edge_indvar17_reg));
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep21 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar17*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_scevgep21_reg <= sha_transform__crit_edge_scevgep21;
		if (start == 1'b0 && ^(sha_transform__crit_edge_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %33 = add i32 %indvar17, 2*/
		sha_transform__crit_edge_33 = (sha_transform__crit_edge_indvar17_reg + 32'd2);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %33 = add i32 %indvar17, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_33_reg <= sha_transform__crit_edge_33;
		if (start == 1'b0 && ^(sha_transform__crit_edge_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_33_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep22 = getelementptr [80 x i32]* %W, i32 0, i32 %33*/
		sha_transform__crit_edge_scevgep22 = (1'd0 | (4 * sha_transform__crit_edge_33_reg));
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep22 = getelementptr [80 x i32]* %W, i32 0, i32 %33*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform__crit_edge_scevgep22_reg <= sha_transform__crit_edge_scevgep22;
		if (start == 1'b0 && ^(sha_transform__crit_edge_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %34 = add i32 %indvar17, 8*/
		sha_transform__crit_edge_34 = (sha_transform__crit_edge_indvar17_reg + 32'd8);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %34 = add i32 %indvar17, 8*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_34_reg <= sha_transform__crit_edge_34;
		if (start == 1'b0 && ^(sha_transform__crit_edge_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_34_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep23 = getelementptr [80 x i32]* %W, i32 0, i32 %34*/
		sha_transform__crit_edge_scevgep23 = (1'd0 | (4 * sha_transform__crit_edge_34_reg));
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep23 = getelementptr [80 x i32]* %W, i32 0, i32 %34*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform__crit_edge_scevgep23_reg <= sha_transform__crit_edge_scevgep23;
		if (start == 1'b0 && ^(sha_transform__crit_edge_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %35 = add i32 %indvar17, 13*/
		sha_transform__crit_edge_35 = (sha_transform__crit_edge_indvar17_reg + 32'd13);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %35 = add i32 %indvar17, 13*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_35_reg <= sha_transform__crit_edge_35;
		if (start == 1'b0 && ^(sha_transform__crit_edge_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_35_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep24 = getelementptr [80 x i32]* %W, i32 0, i32 %35*/
		sha_transform__crit_edge_scevgep24 = (1'd0 | (4 * sha_transform__crit_edge_35_reg));
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %scevgep24 = getelementptr [80 x i32]* %W, i32 0, i32 %35*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform__crit_edge_scevgep24_reg <= sha_transform__crit_edge_scevgep24;
		if (start == 1'b0 && ^(sha_transform__crit_edge_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %36 = load i32* %scevgep24, align 4, !tbaa !1*/
		sha_transform__crit_edge_36 = sha_transform_preheader342_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %36 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform__crit_edge_36_reg <= sha_transform__crit_edge_36;
		if (start == 1'b0 && ^(sha_transform__crit_edge_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_36_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %37 = load i32* %scevgep23, align 4, !tbaa !1*/
		sha_transform__crit_edge_37 = sha_transform_preheader342_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %37 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform__crit_edge_37_reg <= sha_transform__crit_edge_37;
		if (start == 1'b0 && ^(sha_transform__crit_edge_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_37_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %38 = xor i32 %37, %36*/
		sha_transform__crit_edge_38 = (sha_transform__crit_edge_37 ^ sha_transform__crit_edge_36);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %38 = xor i32 %37, %36*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform__crit_edge_38_reg <= sha_transform__crit_edge_38;
		if (start == 1'b0 && ^(sha_transform__crit_edge_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_38_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %39 = load i32* %scevgep22, align 4, !tbaa !1*/
		sha_transform__crit_edge_39 = sha_transform_preheader342_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %39 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform__crit_edge_39_reg <= sha_transform__crit_edge_39;
		if (start == 1'b0 && ^(sha_transform__crit_edge_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_39_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %40 = xor i32 %38, %39*/
		sha_transform__crit_edge_40 = (sha_transform__crit_edge_38_reg ^ sha_transform__crit_edge_39);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %40 = xor i32 %38, %39*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform__crit_edge_40_reg <= sha_transform__crit_edge_40;
		if (start == 1'b0 && ^(sha_transform__crit_edge_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_40_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %41 = load i32* %scevgep21, align 4, !tbaa !1*/
		sha_transform__crit_edge_41 = sha_transform_preheader342_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %41 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform__crit_edge_41_reg <= sha_transform__crit_edge_41;
		if (start == 1'b0 && ^(sha_transform__crit_edge_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_41_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %42 = xor i32 %40, %41*/
		sha_transform__crit_edge_42 = (sha_transform__crit_edge_40 ^ sha_transform__crit_edge_41);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %42 = xor i32 %40, %41*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform__crit_edge_42_reg <= sha_transform__crit_edge_42;
		if (start == 1'b0 && ^(sha_transform__crit_edge_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_42_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		sha_transform__crit_edge_indvarnext18 = (sha_transform__crit_edge_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_indvarnext18_reg <= sha_transform__crit_edge_indvarnext18;
		if (start == 1'b0 && ^(sha_transform__crit_edge_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %._crit_edge*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 64*/
		sha_transform__crit_edge_exitcond19 = (sha_transform__crit_edge_indvarnext18 == 32'd64);
end
always @(posedge clk) begin
	/* sha_transform: %._crit_edge*/
	/*   %exitcond19 = icmp eq i32 %indvar.next18, 64*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_12)) begin
		sha_transform__crit_edge_exitcond19_reg <= sha_transform__crit_edge_exitcond19;
		if (start == 1'b0 && ^(sha_transform__crit_edge_exitcond19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform__crit_edge_exitcond19_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
		sha_transform_43_44 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		sha_transform_43_44_reg <= sha_transform_43_44;
		if (start == 1'b0 && ^(sha_transform_43_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_43_44_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
		sha_transform_43_45 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		sha_transform_43_45_reg <= sha_transform_43_45;
		if (start == 1'b0 && ^(sha_transform_43_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_43_45_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
		sha_transform_43_46 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_20)) begin
		sha_transform_43_46_reg <= sha_transform_43_46;
		if (start == 1'b0 && ^(sha_transform_43_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_43_46_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
		sha_transform_43_47 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_20)) begin
		sha_transform_43_47_reg <= sha_transform_43_47;
		if (start == 1'b0 && ^(sha_transform_43_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_43_47_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
		sha_transform_43_48 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_21)) begin
		sha_transform_43_48_reg <= sha_transform_43_48;
		if (start == 1'b0 && ^(sha_transform_43_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_43_48_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %E.027 = phi i32 [ %48, %43 ], [ %D.026, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_E027 = sha_transform_43_48;
	end
	/* sha_transform: %49*/
	/*   %E.027 = phi i32 [ %48, %43 ], [ %D.026, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_E027 = sha_transform_49_D026_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %E.027 = phi i32 [ %48, %43 ], [ %D.026, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_E027_reg <= sha_transform_49_E027;
		if (start == 1'b0 && ^(sha_transform_49_E027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_E027_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %E.027 = phi i32 [ %48, %43 ], [ %D.026, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_E027_reg <= sha_transform_49_E027;
		if (start == 1'b0 && ^(sha_transform_49_E027) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_E027_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %D.026 = phi i32 [ %47, %43 ], [ %C.025, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_D026 = sha_transform_43_47_reg;
	end
	/* sha_transform: %49*/
	/*   %D.026 = phi i32 [ %47, %43 ], [ %C.025, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_D026 = sha_transform_49_C025_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %D.026 = phi i32 [ %47, %43 ], [ %C.025, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_D026_reg <= sha_transform_49_D026;
		if (start == 1'b0 && ^(sha_transform_49_D026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_D026_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %D.026 = phi i32 [ %47, %43 ], [ %C.025, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_D026_reg <= sha_transform_49_D026;
		if (start == 1'b0 && ^(sha_transform_49_D026) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_D026_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %C.025 = phi i32 [ %46, %43 ], [ %64, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_C025 = sha_transform_43_46_reg;
	end
	/* sha_transform: %49*/
	/*   %C.025 = phi i32 [ %46, %43 ], [ %64, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_C025 = sha_transform_49_64_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %C.025 = phi i32 [ %46, %43 ], [ %64, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_C025_reg <= sha_transform_49_C025;
		if (start == 1'b0 && ^(sha_transform_49_C025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_C025_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %C.025 = phi i32 [ %46, %43 ], [ %64, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_C025_reg <= sha_transform_49_C025;
		if (start == 1'b0 && ^(sha_transform_49_C025) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_C025_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %B.024 = phi i32 [ %45, %43 ], [ %A.023, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_B024 = sha_transform_43_45_reg;
	end
	/* sha_transform: %49*/
	/*   %B.024 = phi i32 [ %45, %43 ], [ %A.023, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_B024 = sha_transform_49_A023_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %B.024 = phi i32 [ %45, %43 ], [ %A.023, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_B024_reg <= sha_transform_49_B024;
		if (start == 1'b0 && ^(sha_transform_49_B024) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_B024_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %B.024 = phi i32 [ %45, %43 ], [ %A.023, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_B024_reg <= sha_transform_49_B024;
		if (start == 1'b0 && ^(sha_transform_49_B024) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_B024_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %A.023 = phi i32 [ %44, %43 ], [ %61, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_A023 = sha_transform_43_44_reg;
	end
	/* sha_transform: %49*/
	/*   %A.023 = phi i32 [ %44, %43 ], [ %61, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_A023 = sha_transform_49_61;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %A.023 = phi i32 [ %44, %43 ], [ %61, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_A023_reg <= sha_transform_49_A023;
		if (start == 1'b0 && ^(sha_transform_49_A023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_A023_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %A.023 = phi i32 [ %44, %43 ], [ %61, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_A023_reg <= sha_transform_49_A023;
		if (start == 1'b0 && ^(sha_transform_49_A023) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_A023_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %i.222 = phi i32 [ 0, %43 ], [ %65, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_i222 = 32'd0;
	end
	/* sha_transform: %49*/
	/*   %i.222 = phi i32 [ 0, %43 ], [ %65, %49 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) */ begin
		sha_transform_49_i222 = sha_transform_49_65_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %i.222 = phi i32 [ 0, %43 ], [ %65, %49 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB__43_21) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_49_i222_reg <= sha_transform_49_i222;
		if (start == 1'b0 && ^(sha_transform_49_i222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_i222_reg"); $finish; end
	end
	/* sha_transform: %49*/
	/*   %i.222 = phi i32 [ 0, %43 ], [ %65, %49 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB__49_23) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_49_exitcond15_reg == 1'd0))) begin
		sha_transform_49_i222_reg <= sha_transform_49_i222;
		if (start == 1'b0 && ^(sha_transform_49_i222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_i222_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %scevgep16 = getelementptr [80 x i32]* %W, i32 0, i32 %i.222*/
		sha_transform_49_scevgep16 = (1'd0 | (4 * sha_transform_49_i222_reg));
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %scevgep16 = getelementptr [80 x i32]* %W, i32 0, i32 %i.222*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_scevgep16_reg <= sha_transform_49_scevgep16;
		if (start == 1'b0 && ^(sha_transform_49_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %50 = shl i32 %A.023, 5*/
		sha_transform_49_50 = (sha_transform_49_A023_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %50 = shl i32 %A.023, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_50_reg <= sha_transform_49_50;
		if (start == 1'b0 && ^(sha_transform_49_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_50_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %51 = lshr i32 %A.023, 27*/
		sha_transform_49_51 = (sha_transform_49_A023_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %51 = lshr i32 %A.023, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_51_reg <= sha_transform_49_51;
		if (start == 1'b0 && ^(sha_transform_49_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_51_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %52 = or i32 %50, %51*/
		sha_transform_49_52 = (sha_transform_49_50 | sha_transform_49_51);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %52 = or i32 %50, %51*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_52_reg <= sha_transform_49_52;
		if (start == 1'b0 && ^(sha_transform_49_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_52_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %53 = and i32 %C.025, %B.024*/
		sha_transform_49_53 = (sha_transform_49_C025_reg & sha_transform_49_B024_reg);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %53 = and i32 %C.025, %B.024*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_53_reg <= sha_transform_49_53;
		if (start == 1'b0 && ^(sha_transform_49_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_53_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %54 = xor i32 %B.024, -1*/
		sha_transform_49_54 = (sha_transform_49_B024_reg ^ -32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %54 = xor i32 %B.024, -1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_54_reg <= sha_transform_49_54;
		if (start == 1'b0 && ^(sha_transform_49_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_54_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %55 = and i32 %D.026, %54*/
		sha_transform_49_55 = (sha_transform_49_D026_reg & sha_transform_49_54);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %55 = and i32 %D.026, %54*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_55_reg <= sha_transform_49_55;
		if (start == 1'b0 && ^(sha_transform_49_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_55_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %56 = or i32 %55, %53*/
		sha_transform_49_56 = (sha_transform_49_55 | sha_transform_49_53);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %56 = or i32 %55, %53*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_56_reg <= sha_transform_49_56;
		if (start == 1'b0 && ^(sha_transform_49_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_56_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %57 = load i32* %scevgep16, align 4, !tbaa !1*/
		sha_transform_49_57 = sha_transform_preheader342_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %57 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_23)) begin
		sha_transform_49_57_reg <= sha_transform_49_57;
		if (start == 1'b0 && ^(sha_transform_49_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_57_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %58 = add i32 %52, 1518500249*/
		sha_transform_49_58 = (sha_transform_49_52 + 32'd1518500249);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %58 = add i32 %52, 1518500249*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_58_reg <= sha_transform_49_58;
		if (start == 1'b0 && ^(sha_transform_49_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_58_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %59 = add i32 %58, %E.027*/
		sha_transform_49_59 = (sha_transform_49_58 + sha_transform_49_E027_reg);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %59 = add i32 %58, %E.027*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_59_reg <= sha_transform_49_59;
		if (start == 1'b0 && ^(sha_transform_49_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_59_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %60 = add i32 %59, %56*/
		sha_transform_49_60 = (sha_transform_49_59 + sha_transform_49_56);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %60 = add i32 %59, %56*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_60_reg <= sha_transform_49_60;
		if (start == 1'b0 && ^(sha_transform_49_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_60_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %61 = add i32 %60, %57*/
		sha_transform_49_61 = (sha_transform_49_60_reg + sha_transform_49_57);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %61 = add i32 %60, %57*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_23)) begin
		sha_transform_49_61_reg <= sha_transform_49_61;
		if (start == 1'b0 && ^(sha_transform_49_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_61_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %62 = shl i32 %B.024, 30*/
		sha_transform_49_62 = (sha_transform_49_B024_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %62 = shl i32 %B.024, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_62_reg <= sha_transform_49_62;
		if (start == 1'b0 && ^(sha_transform_49_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_62_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %63 = lshr i32 %B.024, 2*/
		sha_transform_49_63 = (sha_transform_49_B024_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %63 = lshr i32 %B.024, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_63_reg <= sha_transform_49_63;
		if (start == 1'b0 && ^(sha_transform_49_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_63_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %64 = or i32 %62, %63*/
		sha_transform_49_64 = (sha_transform_49_62 | sha_transform_49_63);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %64 = or i32 %62, %63*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_64_reg <= sha_transform_49_64;
		if (start == 1'b0 && ^(sha_transform_49_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_64_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %65 = add nsw i32 %i.222, 1*/
		sha_transform_49_65 = (sha_transform_49_i222_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %65 = add nsw i32 %i.222, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_65_reg <= sha_transform_49_65;
		if (start == 1'b0 && ^(sha_transform_49_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_65_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %49*/
	/*   %exitcond15 = icmp eq i32 %65, 20*/
		sha_transform_49_exitcond15 = (sha_transform_49_65 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %49*/
	/*   %exitcond15 = icmp eq i32 %65, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_49_exitcond15_reg <= sha_transform_49_exitcond15;
		if (start == 1'b0 && ^(sha_transform_49_exitcond15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_49_exitcond15_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_indvar11 = 32'd0;
	end
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_indvar11 = sha_transform_preheader2_indvarnext12_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_indvar11_reg <= sha_transform_preheader2_indvar11;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvar11_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %indvar11 = phi i32 [ 0, %.preheader2.preheader ], [ %indvar.next12, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_indvar11_reg <= sha_transform_preheader2_indvar11;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvar11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvar11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_E121 = sha_transform_49_D026_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_E121 = sha_transform_preheader2_D120_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_E121_reg <= sha_transform_preheader2_E121;
		if (start == 1'b0 && ^(sha_transform_preheader2_E121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_E121_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %E.121 = phi i32 [ %D.026, %.preheader2.preheader ], [ %D.120, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_E121_reg <= sha_transform_preheader2_E121;
		if (start == 1'b0 && ^(sha_transform_preheader2_E121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_E121_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_D120 = sha_transform_49_C025_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_D120 = sha_transform_preheader2_C119_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_D120_reg <= sha_transform_preheader2_D120;
		if (start == 1'b0 && ^(sha_transform_preheader2_D120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_D120_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %D.120 = phi i32 [ %C.025, %.preheader2.preheader ], [ %C.119, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_D120_reg <= sha_transform_preheader2_D120;
		if (start == 1'b0 && ^(sha_transform_preheader2_D120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_D120_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %64, %.preheader2.preheader ], [ %79, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_C119 = sha_transform_49_64_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %64, %.preheader2.preheader ], [ %79, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_C119 = sha_transform_preheader2_79_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %64, %.preheader2.preheader ], [ %79, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_C119_reg <= sha_transform_preheader2_C119;
		if (start == 1'b0 && ^(sha_transform_preheader2_C119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_C119_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %C.119 = phi i32 [ %64, %.preheader2.preheader ], [ %79, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_C119_reg <= sha_transform_preheader2_C119;
		if (start == 1'b0 && ^(sha_transform_preheader2_C119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_C119_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_B118 = sha_transform_49_A023_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_B118 = sha_transform_preheader2_A117_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_B118_reg <= sha_transform_preheader2_B118;
		if (start == 1'b0 && ^(sha_transform_preheader2_B118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_B118_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %B.118 = phi i32 [ %A.023, %.preheader2.preheader ], [ %A.117, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_B118_reg <= sha_transform_preheader2_B118;
		if (start == 1'b0 && ^(sha_transform_preheader2_B118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_B118_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %61, %.preheader2.preheader ], [ %76, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_A117 = sha_transform_49_61_reg;
	end
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %61, %.preheader2.preheader ], [ %76, %.preheader2 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) */ begin
		sha_transform_preheader2_A117 = sha_transform_preheader2_76;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %61, %.preheader2.preheader ], [ %76, %.preheader2 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader2preheader_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader2_A117_reg <= sha_transform_preheader2_A117;
		if (start == 1'b0 && ^(sha_transform_preheader2_A117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_A117_reg"); $finish; end
	end
	/* sha_transform: %.preheader2*/
	/*   %A.117 = phi i32 [ %61, %.preheader2.preheader ], [ %76, %.preheader2 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader2_27) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader2_exitcond13_reg == 1'd0))) begin
		sha_transform_preheader2_A117_reg <= sha_transform_preheader2_A117;
		if (start == 1'b0 && ^(sha_transform_preheader2_A117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_A117_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %66 = add i32 %indvar11, 20*/
		sha_transform_preheader2_66 = (sha_transform_preheader2_indvar11_reg + 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %66 = add i32 %indvar11, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_66_reg <= sha_transform_preheader2_66;
		if (start == 1'b0 && ^(sha_transform_preheader2_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_66_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %scevgep14 = getelementptr [80 x i32]* %W, i32 0, i32 %66*/
		sha_transform_preheader2_scevgep14 = (1'd0 | (4 * sha_transform_preheader2_66_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %scevgep14 = getelementptr [80 x i32]* %W, i32 0, i32 %66*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_26)) begin
		sha_transform_preheader2_scevgep14_reg <= sha_transform_preheader2_scevgep14;
		if (start == 1'b0 && ^(sha_transform_preheader2_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %67 = shl i32 %A.117, 5*/
		sha_transform_preheader2_67 = (sha_transform_preheader2_A117_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %67 = shl i32 %A.117, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_67_reg <= sha_transform_preheader2_67;
		if (start == 1'b0 && ^(sha_transform_preheader2_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_67_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %68 = lshr i32 %A.117, 27*/
		sha_transform_preheader2_68 = (sha_transform_preheader2_A117_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %68 = lshr i32 %A.117, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_68_reg <= sha_transform_preheader2_68;
		if (start == 1'b0 && ^(sha_transform_preheader2_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_68_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %69 = or i32 %67, %68*/
		sha_transform_preheader2_69 = (sha_transform_preheader2_67 | sha_transform_preheader2_68);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %69 = or i32 %67, %68*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_69_reg <= sha_transform_preheader2_69;
		if (start == 1'b0 && ^(sha_transform_preheader2_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_69_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %70 = xor i32 %C.119, %B.118*/
		sha_transform_preheader2_70 = (sha_transform_preheader2_C119_reg ^ sha_transform_preheader2_B118_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %70 = xor i32 %C.119, %B.118*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_70_reg <= sha_transform_preheader2_70;
		if (start == 1'b0 && ^(sha_transform_preheader2_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_70_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %71 = xor i32 %70, %D.120*/
		sha_transform_preheader2_71 = (sha_transform_preheader2_70 ^ sha_transform_preheader2_D120_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %71 = xor i32 %70, %D.120*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_71_reg <= sha_transform_preheader2_71;
		if (start == 1'b0 && ^(sha_transform_preheader2_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_71_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %72 = load i32* %scevgep14, align 4, !tbaa !1*/
		sha_transform_preheader2_72 = sha_transform_preheader342_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %72 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_27)) begin
		sha_transform_preheader2_72_reg <= sha_transform_preheader2_72;
		if (start == 1'b0 && ^(sha_transform_preheader2_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_72_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %73 = add i32 %69, 1859775393*/
		sha_transform_preheader2_73 = (sha_transform_preheader2_69 + 32'd1859775393);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %73 = add i32 %69, 1859775393*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_73_reg <= sha_transform_preheader2_73;
		if (start == 1'b0 && ^(sha_transform_preheader2_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_73_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %74 = add i32 %73, %71*/
		sha_transform_preheader2_74 = (sha_transform_preheader2_73 + sha_transform_preheader2_71);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %74 = add i32 %73, %71*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_74_reg <= sha_transform_preheader2_74;
		if (start == 1'b0 && ^(sha_transform_preheader2_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_74_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %75 = add i32 %74, %E.121*/
		sha_transform_preheader2_75 = (sha_transform_preheader2_74 + sha_transform_preheader2_E121_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %75 = add i32 %74, %E.121*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_75_reg <= sha_transform_preheader2_75;
		if (start == 1'b0 && ^(sha_transform_preheader2_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_75_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %76 = add i32 %75, %72*/
		sha_transform_preheader2_76 = (sha_transform_preheader2_75_reg + sha_transform_preheader2_72);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %76 = add i32 %75, %72*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_27)) begin
		sha_transform_preheader2_76_reg <= sha_transform_preheader2_76;
		if (start == 1'b0 && ^(sha_transform_preheader2_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_76_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %77 = shl i32 %B.118, 30*/
		sha_transform_preheader2_77 = (sha_transform_preheader2_B118_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %77 = shl i32 %B.118, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_77_reg <= sha_transform_preheader2_77;
		if (start == 1'b0 && ^(sha_transform_preheader2_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_77_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %78 = lshr i32 %B.118, 2*/
		sha_transform_preheader2_78 = (sha_transform_preheader2_B118_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %78 = lshr i32 %B.118, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_78_reg <= sha_transform_preheader2_78;
		if (start == 1'b0 && ^(sha_transform_preheader2_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_78_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %79 = or i32 %77, %78*/
		sha_transform_preheader2_79 = (sha_transform_preheader2_77 | sha_transform_preheader2_78);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %79 = or i32 %77, %78*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_79_reg <= sha_transform_preheader2_79;
		if (start == 1'b0 && ^(sha_transform_preheader2_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_79_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
		sha_transform_preheader2_indvarnext12 = (sha_transform_preheader2_indvar11_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %indvar.next12 = add i32 %indvar11, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_indvarnext12_reg <= sha_transform_preheader2_indvarnext12;
		if (start == 1'b0 && ^(sha_transform_preheader2_indvarnext12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_indvarnext12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader2*/
	/*   %exitcond13 = icmp eq i32 %indvar.next12, 20*/
		sha_transform_preheader2_exitcond13 = (sha_transform_preheader2_indvarnext12 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader2*/
	/*   %exitcond13 = icmp eq i32 %indvar.next12, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_25)) begin
		sha_transform_preheader2_exitcond13_reg <= sha_transform_preheader2_exitcond13;
		if (start == 1'b0 && ^(sha_transform_preheader2_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader2_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_indvar8 = 32'd0;
	end
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_indvar8 = sha_transform_preheader1_indvarnext9_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_indvar8_reg <= sha_transform_preheader1_indvar8;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvar8_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %indvar8 = phi i32 [ 0, %.preheader1.preheader ], [ %indvar.next9, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_indvar8_reg <= sha_transform_preheader1_indvar8;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvar8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_E215 = sha_transform_preheader2_D120_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_E215 = sha_transform_preheader1_D214_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_E215_reg <= sha_transform_preheader1_E215;
		if (start == 1'b0 && ^(sha_transform_preheader1_E215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_E215_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %E.215 = phi i32 [ %D.120, %.preheader1.preheader ], [ %D.214, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_E215_reg <= sha_transform_preheader1_E215;
		if (start == 1'b0 && ^(sha_transform_preheader1_E215) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_E215_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_D214 = sha_transform_preheader2_C119_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_D214 = sha_transform_preheader1_C213_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_D214_reg <= sha_transform_preheader1_D214;
		if (start == 1'b0 && ^(sha_transform_preheader1_D214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_D214_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %D.214 = phi i32 [ %C.119, %.preheader1.preheader ], [ %C.213, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_D214_reg <= sha_transform_preheader1_D214;
		if (start == 1'b0 && ^(sha_transform_preheader1_D214) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_D214_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %79, %.preheader1.preheader ], [ %95, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_C213 = sha_transform_preheader2_79_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %79, %.preheader1.preheader ], [ %95, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_C213 = sha_transform_preheader1_95_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %79, %.preheader1.preheader ], [ %95, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_C213_reg <= sha_transform_preheader1_C213;
		if (start == 1'b0 && ^(sha_transform_preheader1_C213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_C213_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %C.213 = phi i32 [ %79, %.preheader1.preheader ], [ %95, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_C213_reg <= sha_transform_preheader1_C213;
		if (start == 1'b0 && ^(sha_transform_preheader1_C213) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_C213_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_B212 = sha_transform_preheader2_A117_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_B212 = sha_transform_preheader1_A211_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_B212_reg <= sha_transform_preheader1_B212;
		if (start == 1'b0 && ^(sha_transform_preheader1_B212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_B212_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %B.212 = phi i32 [ %A.117, %.preheader1.preheader ], [ %A.211, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_B212_reg <= sha_transform_preheader1_B212;
		if (start == 1'b0 && ^(sha_transform_preheader1_B212) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_B212_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %76, %.preheader1.preheader ], [ %92, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_A211 = sha_transform_preheader2_76_reg;
	end
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %76, %.preheader1.preheader ], [ %92, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) */ begin
		sha_transform_preheader1_A211 = sha_transform_preheader1_92;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %76, %.preheader1.preheader ], [ %92, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheader1preheader_28) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader1_A211_reg <= sha_transform_preheader1_A211;
		if (start == 1'b0 && ^(sha_transform_preheader1_A211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_A211_reg"); $finish; end
	end
	/* sha_transform: %.preheader1*/
	/*   %A.211 = phi i32 [ %76, %.preheader1.preheader ], [ %92, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader1_31) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader1_exitcond_reg == 1'd0))) begin
		sha_transform_preheader1_A211_reg <= sha_transform_preheader1_A211;
		if (start == 1'b0 && ^(sha_transform_preheader1_A211) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_A211_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %80 = add i32 %indvar8, 40*/
		sha_transform_preheader1_80 = (sha_transform_preheader1_indvar8_reg + 32'd40);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %80 = add i32 %indvar8, 40*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_80_reg <= sha_transform_preheader1_80;
		if (start == 1'b0 && ^(sha_transform_preheader1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_80_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %scevgep10 = getelementptr [80 x i32]* %W, i32 0, i32 %80*/
		sha_transform_preheader1_scevgep10 = (1'd0 | (4 * sha_transform_preheader1_80_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %scevgep10 = getelementptr [80 x i32]* %W, i32 0, i32 %80*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_30)) begin
		sha_transform_preheader1_scevgep10_reg <= sha_transform_preheader1_scevgep10;
		if (start == 1'b0 && ^(sha_transform_preheader1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %81 = shl i32 %A.211, 5*/
		sha_transform_preheader1_81 = (sha_transform_preheader1_A211_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %81 = shl i32 %A.211, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_81_reg <= sha_transform_preheader1_81;
		if (start == 1'b0 && ^(sha_transform_preheader1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_81_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %82 = lshr i32 %A.211, 27*/
		sha_transform_preheader1_82 = (sha_transform_preheader1_A211_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %82 = lshr i32 %A.211, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_82_reg <= sha_transform_preheader1_82;
		if (start == 1'b0 && ^(sha_transform_preheader1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_82_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %83 = or i32 %81, %82*/
		sha_transform_preheader1_83 = (sha_transform_preheader1_81 | sha_transform_preheader1_82);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %83 = or i32 %81, %82*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_83_reg <= sha_transform_preheader1_83;
		if (start == 1'b0 && ^(sha_transform_preheader1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_83_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %84 = or i32 %D.214, %C.213*/
		sha_transform_preheader1_84 = (sha_transform_preheader1_D214_reg | sha_transform_preheader1_C213_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %84 = or i32 %D.214, %C.213*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_84_reg <= sha_transform_preheader1_84;
		if (start == 1'b0 && ^(sha_transform_preheader1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_84_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %85 = and i32 %84, %B.212*/
		sha_transform_preheader1_85 = (sha_transform_preheader1_84 & sha_transform_preheader1_B212_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %85 = and i32 %84, %B.212*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_85_reg <= sha_transform_preheader1_85;
		if (start == 1'b0 && ^(sha_transform_preheader1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_85_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %86 = and i32 %D.214, %C.213*/
		sha_transform_preheader1_86 = (sha_transform_preheader1_D214_reg & sha_transform_preheader1_C213_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %86 = and i32 %D.214, %C.213*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_86_reg <= sha_transform_preheader1_86;
		if (start == 1'b0 && ^(sha_transform_preheader1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_86_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %87 = or i32 %85, %86*/
		sha_transform_preheader1_87 = (sha_transform_preheader1_85 | sha_transform_preheader1_86);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %87 = or i32 %85, %86*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_87_reg <= sha_transform_preheader1_87;
		if (start == 1'b0 && ^(sha_transform_preheader1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_87_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %88 = load i32* %scevgep10, align 4, !tbaa !1*/
		sha_transform_preheader1_88 = sha_transform_preheader342_W_out_a;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %88 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_31)) begin
		sha_transform_preheader1_88_reg <= sha_transform_preheader1_88;
		if (start == 1'b0 && ^(sha_transform_preheader1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_88_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %89 = add i32 %83, -1894007588*/
		sha_transform_preheader1_89 = (sha_transform_preheader1_83 + -32'd1894007588);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %89 = add i32 %83, -1894007588*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_89_reg <= sha_transform_preheader1_89;
		if (start == 1'b0 && ^(sha_transform_preheader1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_89_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %90 = add i32 %89, %E.215*/
		sha_transform_preheader1_90 = (sha_transform_preheader1_89 + sha_transform_preheader1_E215_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %90 = add i32 %89, %E.215*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_90_reg <= sha_transform_preheader1_90;
		if (start == 1'b0 && ^(sha_transform_preheader1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_90_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %91 = add i32 %90, %87*/
		sha_transform_preheader1_91 = (sha_transform_preheader1_90 + sha_transform_preheader1_87);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %91 = add i32 %90, %87*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_91_reg <= sha_transform_preheader1_91;
		if (start == 1'b0 && ^(sha_transform_preheader1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_91_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %92 = add i32 %91, %88*/
		sha_transform_preheader1_92 = (sha_transform_preheader1_91_reg + sha_transform_preheader1_88);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %92 = add i32 %91, %88*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_31)) begin
		sha_transform_preheader1_92_reg <= sha_transform_preheader1_92;
		if (start == 1'b0 && ^(sha_transform_preheader1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_92_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %93 = shl i32 %B.212, 30*/
		sha_transform_preheader1_93 = (sha_transform_preheader1_B212_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %93 = shl i32 %B.212, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_93_reg <= sha_transform_preheader1_93;
		if (start == 1'b0 && ^(sha_transform_preheader1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_93_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %94 = lshr i32 %B.212, 2*/
		sha_transform_preheader1_94 = (sha_transform_preheader1_B212_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %94 = lshr i32 %B.212, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_94_reg <= sha_transform_preheader1_94;
		if (start == 1'b0 && ^(sha_transform_preheader1_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_94_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %95 = or i32 %93, %94*/
		sha_transform_preheader1_95 = (sha_transform_preheader1_93 | sha_transform_preheader1_94);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %95 = or i32 %93, %94*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_95_reg <= sha_transform_preheader1_95;
		if (start == 1'b0 && ^(sha_transform_preheader1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_95_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
		sha_transform_preheader1_indvarnext9 = (sha_transform_preheader1_indvar8_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_indvarnext9_reg <= sha_transform_preheader1_indvarnext9;
		if (start == 1'b0 && ^(sha_transform_preheader1_indvarnext9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_indvarnext9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader1*/
	/*   %exitcond = icmp eq i32 %indvar.next9, 20*/
		sha_transform_preheader1_exitcond = (sha_transform_preheader1_indvarnext9 == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader1*/
	/*   %exitcond = icmp eq i32 %indvar.next9, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_29)) begin
		sha_transform_preheader1_exitcond_reg <= sha_transform_preheader1_exitcond;
		if (start == 1'b0 && ^(sha_transform_preheader1_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader1_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_indvar = 32'd0;
	end
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_indvar = sha_transform_preheader_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_indvar_reg <= sha_transform_preheader_indvar;
		if (start == 1'b0 && ^(sha_transform_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvar_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %indvar = phi i32 [ 0, %.preheader.preheader ], [ %indvar.next, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_indvar_reg <= sha_transform_preheader_indvar;
		if (start == 1'b0 && ^(sha_transform_preheader_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_E39 = sha_transform_preheader1_D214_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_E39 = sha_transform_preheader_D38_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_E39_reg <= sha_transform_preheader_E39;
		if (start == 1'b0 && ^(sha_transform_preheader_E39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_E39_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %E.39 = phi i32 [ %D.214, %.preheader.preheader ], [ %D.38, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_E39_reg <= sha_transform_preheader_E39;
		if (start == 1'b0 && ^(sha_transform_preheader_E39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_E39_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_D38 = sha_transform_preheader1_C213_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_D38 = sha_transform_preheader_C37_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_D38_reg <= sha_transform_preheader_D38;
		if (start == 1'b0 && ^(sha_transform_preheader_D38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_D38_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %D.38 = phi i32 [ %C.213, %.preheader.preheader ], [ %C.37, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_D38_reg <= sha_transform_preheader_D38;
		if (start == 1'b0 && ^(sha_transform_preheader_D38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_D38_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %95, %.preheader.preheader ], [ %109, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_C37 = sha_transform_preheader1_95_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %95, %.preheader.preheader ], [ %109, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_C37 = sha_transform_preheader_109_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %95, %.preheader.preheader ], [ %109, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_C37_reg <= sha_transform_preheader_C37;
		if (start == 1'b0 && ^(sha_transform_preheader_C37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_C37_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %C.37 = phi i32 [ %95, %.preheader.preheader ], [ %109, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_C37_reg <= sha_transform_preheader_C37;
		if (start == 1'b0 && ^(sha_transform_preheader_C37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_C37_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_B36 = sha_transform_preheader1_A211_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_B36 = sha_transform_preheader_A35_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_B36_reg <= sha_transform_preheader_B36;
		if (start == 1'b0 && ^(sha_transform_preheader_B36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_B36_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %B.36 = phi i32 [ %A.211, %.preheader.preheader ], [ %A.35, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_B36_reg <= sha_transform_preheader_B36;
		if (start == 1'b0 && ^(sha_transform_preheader_B36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_B36_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %92, %.preheader.preheader ], [ %106, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_A35 = sha_transform_preheader1_92_reg;
	end
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %92, %.preheader.preheader ], [ %106, %.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) */ begin
		sha_transform_preheader_A35 = sha_transform_preheader_106;
	end
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %92, %.preheader.preheader ], [ %106, %.preheader ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_preheaderpreheader_32) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_preheader_A35_reg <= sha_transform_preheader_A35;
		if (start == 1'b0 && ^(sha_transform_preheader_A35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_A35_reg"); $finish; end
	end
	/* sha_transform: %.preheader*/
	/*   %A.35 = phi i32 [ %92, %.preheader.preheader ], [ %106, %.preheader ]*/
	if ((((cur_state == LEGUP_F_sha_transform_BB_preheader_35) & (memory_controller_waitrequest == 1'd0)) & (sha_transform_preheader_exitcond7_reg == 1'd0))) begin
		sha_transform_preheader_A35_reg <= sha_transform_preheader_A35;
		if (start == 1'b0 && ^(sha_transform_preheader_A35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_A35_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %96 = add i32 %indvar, 60*/
		sha_transform_preheader_96 = (sha_transform_preheader_indvar_reg + 32'd60);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %96 = add i32 %indvar, 60*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_96_reg <= sha_transform_preheader_96;
		if (start == 1'b0 && ^(sha_transform_preheader_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_96_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %scevgep = getelementptr [80 x i32]* %W, i32 0, i32 %96*/
		sha_transform_preheader_scevgep = (1'd0 | (4 * sha_transform_preheader_96_reg));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %scevgep = getelementptr [80 x i32]* %W, i32 0, i32 %96*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_34)) begin
		sha_transform_preheader_scevgep_reg <= sha_transform_preheader_scevgep;
		if (start == 1'b0 && ^(sha_transform_preheader_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %97 = shl i32 %A.35, 5*/
		sha_transform_preheader_97 = (sha_transform_preheader_A35_reg <<< (32'd5 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %97 = shl i32 %A.35, 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_97_reg <= sha_transform_preheader_97;
		if (start == 1'b0 && ^(sha_transform_preheader_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_97_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %98 = lshr i32 %A.35, 27*/
		sha_transform_preheader_98 = (sha_transform_preheader_A35_reg >>> (32'd27 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %98 = lshr i32 %A.35, 27*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_98_reg <= sha_transform_preheader_98;
		if (start == 1'b0 && ^(sha_transform_preheader_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_98_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %99 = or i32 %97, %98*/
		sha_transform_preheader_99 = (sha_transform_preheader_97 | sha_transform_preheader_98);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %99 = or i32 %97, %98*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_99_reg <= sha_transform_preheader_99;
		if (start == 1'b0 && ^(sha_transform_preheader_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_99_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %100 = xor i32 %C.37, %B.36*/
		sha_transform_preheader_100 = (sha_transform_preheader_C37_reg ^ sha_transform_preheader_B36_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %100 = xor i32 %C.37, %B.36*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_100_reg <= sha_transform_preheader_100;
		if (start == 1'b0 && ^(sha_transform_preheader_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_100_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %101 = xor i32 %100, %D.38*/
		sha_transform_preheader_101 = (sha_transform_preheader_100 ^ sha_transform_preheader_D38_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %101 = xor i32 %100, %D.38*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_101_reg <= sha_transform_preheader_101;
		if (start == 1'b0 && ^(sha_transform_preheader_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_101_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %102 = load i32* %scevgep, align 4, !tbaa !1*/
		sha_transform_preheader_102 = sha_transform_preheader342_W_out_b;
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %102 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_35)) begin
		sha_transform_preheader_102_reg <= sha_transform_preheader_102;
		if (start == 1'b0 && ^(sha_transform_preheader_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_102_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %103 = add i32 %99, -899497514*/
		sha_transform_preheader_103 = (sha_transform_preheader_99 + -32'd899497514);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %103 = add i32 %99, -899497514*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_103_reg <= sha_transform_preheader_103;
		if (start == 1'b0 && ^(sha_transform_preheader_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_103_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %104 = add i32 %103, %101*/
		sha_transform_preheader_104 = (sha_transform_preheader_103 + sha_transform_preheader_101);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %104 = add i32 %103, %101*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_104_reg <= sha_transform_preheader_104;
		if (start == 1'b0 && ^(sha_transform_preheader_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_104_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %105 = add i32 %104, %E.39*/
		sha_transform_preheader_105 = (sha_transform_preheader_104 + sha_transform_preheader_E39_reg);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %105 = add i32 %104, %E.39*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_105_reg <= sha_transform_preheader_105;
		if (start == 1'b0 && ^(sha_transform_preheader_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_105_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %106 = add i32 %105, %102*/
		sha_transform_preheader_106 = (sha_transform_preheader_105_reg + sha_transform_preheader_102);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %106 = add i32 %105, %102*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_35)) begin
		sha_transform_preheader_106_reg <= sha_transform_preheader_106;
		if (start == 1'b0 && ^(sha_transform_preheader_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_106_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %107 = shl i32 %B.36, 30*/
		sha_transform_preheader_107 = (sha_transform_preheader_B36_reg <<< (32'd30 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %107 = shl i32 %B.36, 30*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_107_reg <= sha_transform_preheader_107;
		if (start == 1'b0 && ^(sha_transform_preheader_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_107_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %108 = lshr i32 %B.36, 2*/
		sha_transform_preheader_108 = (sha_transform_preheader_B36_reg >>> (32'd2 % 32));
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %108 = lshr i32 %B.36, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_108_reg <= sha_transform_preheader_108;
		if (start == 1'b0 && ^(sha_transform_preheader_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_108_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %109 = or i32 %107, %108*/
		sha_transform_preheader_109 = (sha_transform_preheader_107 | sha_transform_preheader_108);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %109 = or i32 %107, %108*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_109_reg <= sha_transform_preheader_109;
		if (start == 1'b0 && ^(sha_transform_preheader_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_109_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
		sha_transform_preheader_indvarnext = (sha_transform_preheader_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_indvarnext_reg <= sha_transform_preheader_indvarnext;
		if (start == 1'b0 && ^(sha_transform_preheader_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %.preheader*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 20*/
		sha_transform_preheader_exitcond7 = (sha_transform_preheader_indvarnext == 32'd20);
end
always @(posedge clk) begin
	/* sha_transform: %.preheader*/
	/*   %exitcond7 = icmp eq i32 %indvar.next, 20*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_33)) begin
		sha_transform_preheader_exitcond7_reg <= sha_transform_preheader_exitcond7;
		if (start == 1'b0 && ^(sha_transform_preheader_exitcond7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_preheader_exitcond7_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %110*/
	/*   %111 = add i32 %44, %106*/
		sha_transform_110_111 = (sha_transform_43_44_reg + sha_transform_preheader_106_reg);
end
always @(posedge clk) begin
	/* sha_transform: %110*/
	/*   %111 = add i32 %44, %106*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		sha_transform_110_111_reg <= sha_transform_110_111;
		if (start == 1'b0 && ^(sha_transform_110_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_110_111_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %110*/
	/*   %112 = add i32 %45, %A.35*/
		sha_transform_110_112 = (sha_transform_43_45_reg + sha_transform_preheader_A35_reg);
end
always @(posedge clk) begin
	/* sha_transform: %110*/
	/*   %112 = add i32 %45, %A.35*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		sha_transform_110_112_reg <= sha_transform_110_112;
		if (start == 1'b0 && ^(sha_transform_110_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_110_112_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %110*/
	/*   %113 = add i32 %46, %109*/
		sha_transform_110_113 = (sha_transform_43_46_reg + sha_transform_preheader_109_reg);
end
always @(posedge clk) begin
	/* sha_transform: %110*/
	/*   %113 = add i32 %46, %109*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		sha_transform_110_113_reg <= sha_transform_110_113;
		if (start == 1'b0 && ^(sha_transform_110_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_110_113_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %110*/
	/*   %114 = add i32 %47, %C.37*/
		sha_transform_110_114 = (sha_transform_43_47_reg + sha_transform_preheader_C37_reg);
end
always @(posedge clk) begin
	/* sha_transform: %110*/
	/*   %114 = add i32 %47, %C.37*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		sha_transform_110_114_reg <= sha_transform_110_114;
		if (start == 1'b0 && ^(sha_transform_110_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_110_114_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %110*/
	/*   %115 = add i32 %48, %D.38*/
		sha_transform_110_115 = (sha_transform_43_48_reg + sha_transform_preheader_D38_reg);
end
always @(posedge clk) begin
	/* sha_transform: %110*/
	/*   %115 = add i32 %48, %D.38*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		sha_transform_110_115_reg <= sha_transform_110_115;
		if (start == 1'b0 && ^(sha_transform_110_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_110_115_reg"); $finish; end
	end
end
always @(*) begin
	sha_transform_preheader342_W_address_a = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %0, i32* %1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_1_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %4, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_5_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %8, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_9_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %12, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_13_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %16, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_17_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %20, i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_21_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_25_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %28, i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader342_29_reg >>> 3'd2);
	end
	/* sha_transform: %._crit_edge*/
	/*   %36 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform_preheader342_W_address_a = (sha_transform__crit_edge_scevgep24 >>> 3'd2);
	end
	/* sha_transform: %._crit_edge*/
	/*   %39 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform_preheader342_W_address_a = (sha_transform__crit_edge_scevgep22_reg >>> 3'd2);
	end
	/* sha_transform: %._crit_edge*/
	/*   store i32 %42, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform_preheader342_W_address_a = (sha_transform__crit_edge_scevgep20_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader1*/
	/*   %88 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_30)) begin
		sha_transform_preheader342_W_address_a = (sha_transform_preheader1_scevgep10 >>> 3'd2);
	end
end
always @(*) begin
	sha_transform_preheader342_W_write_enable_a = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %0, i32* %1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %4, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %8, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %12, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %16, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %20, i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %28, i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %._crit_edge*/
	/*   %36 = load i32* %scevgep24, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd0;
	end
	/* sha_transform: %._crit_edge*/
	/*   %39 = load i32* %scevgep22, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd0;
	end
	/* sha_transform: %._crit_edge*/
	/*   store i32 %42, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader1*/
	/*   %88 = load i32* %scevgep10, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader1_30)) begin
		sha_transform_preheader342_W_write_enable_a = 1'd0;
	end
end
always @(*) begin
	sha_transform_preheader342_W_in_a = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %0, i32* %1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_0;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %4, i32* %5, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_4;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %8, i32* %9, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_8;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %12, i32* %13, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_12;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %16, i32* %17, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_16;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %20, i32* %21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_20;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %24, i32* %25, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_24;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %28, i32* %29, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_in_a = sha_transform_preheader342_28;
	end
	/* sha_transform: %._crit_edge*/
	/*   store i32 %42, i32* %scevgep20, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_15)) begin
		sha_transform_preheader342_W_in_a = sha_transform__crit_edge_42;
	end
end
always @(*) begin
	sha_transform_preheader342_W_address_b = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %2, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_3_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %6, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_7_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %10, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_11_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_15_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %18, i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_19_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %22, i32* %23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_23_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %26, i32* %27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_27_reg >>> 3'd2);
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %30, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader342_31_reg >>> 3'd2);
	end
	/* sha_transform: %._crit_edge*/
	/*   %37 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform_preheader342_W_address_b = (sha_transform__crit_edge_scevgep23 >>> 3'd2);
	end
	/* sha_transform: %._crit_edge*/
	/*   %41 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform_preheader342_W_address_b = (sha_transform__crit_edge_scevgep21_reg >>> 3'd2);
	end
	/* sha_transform: %49*/
	/*   %57 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_49_scevgep16 >>> 3'd2);
	end
	/* sha_transform: %.preheader2*/
	/*   %72 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_26)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader2_scevgep14 >>> 3'd2);
	end
	/* sha_transform: %.preheader*/
	/*   %102 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_34)) begin
		sha_transform_preheader342_W_address_b = (sha_transform_preheader_scevgep >>> 3'd2);
	end
end
always @(*) begin
	sha_transform_preheader342_W_write_enable_b = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %2, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %6, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %10, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %18, i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %22, i32* %23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %26, i32* %27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %30, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd1;
	end
	/* sha_transform: %._crit_edge*/
	/*   %37 = load i32* %scevgep23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_13)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %._crit_edge*/
	/*   %41 = load i32* %scevgep21, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__crit_edge_14)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %49*/
	/*   %57 = load i32* %scevgep16, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__49_22)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader2*/
	/*   %72 = load i32* %scevgep14, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader2_26)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader*/
	/*   %102 = load i32* %scevgep, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader_34)) begin
		sha_transform_preheader342_W_write_enable_b = 1'd0;
	end
end
always @(*) begin
	sha_transform_preheader342_W_in_b = 1'd0;
	/* sha_transform: %.preheader342*/
	/*   store i32 %2, i32* %3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_2;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %6, i32* %7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_6;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %10, i32* %11, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_10;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %14, i32* %15, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_14;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %18, i32* %19, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_18;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %22, i32* %23, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_22;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %26, i32* %27, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_9)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_26;
	end
	/* sha_transform: %.preheader342*/
	/*   store i32 %30, i32* %31, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_10)) begin
		sha_transform_preheader342_W_in_b = sha_transform_preheader342_30;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* sha_transform: %110*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_39)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %111, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %113, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %115, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_38)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_data_a;
	end
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd2));
	end
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd4));
	end
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd6));
	end
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd8));
	end
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd10));
	end
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd12));
	end
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd14));
	end
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* sha_transform: %110*/
	/*   store i32 %111, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %110*/
	/*   store i32 %113, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %110*/
	/*   store i32 %115, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_38)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %110*/
	/*   store i32 %111, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %113, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %115, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_38)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* sha_transform: %110*/
	/*   store i32 %111, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_in_a = sha_transform_110_111;
	end
	/* sha_transform: %110*/
	/*   store i32 %113, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_in_a = sha_transform_110_113_reg;
	end
	/* sha_transform: %110*/
	/*   store i32 %115, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_38)) begin
		memory_controller_in_a = sha_transform_110_115_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %16 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %20 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %24 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %28 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %43*/
	/*   %44 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %43*/
	/*   %46 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %43*/
	/*   %48 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %110*/
	/*   store i32 %111, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %110*/
	/*   store i32 %113, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %110*/
	/*   store i32 %115, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_38)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %112, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %114, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd1));
	end
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd3));
	end
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd5));
	end
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd7));
	end
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd9));
	end
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd11));
	end
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd13));
	end
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd15));
	end
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* sha_transform: %110*/
	/*   store i32 %112, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %110*/
	/*   store i32 %114, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %110*/
	/*   store i32 %112, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %110*/
	/*   store i32 %114, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* sha_transform: %110*/
	/*   store i32 %112, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_in_b = sha_transform_110_112;
	end
	/* sha_transform: %110*/
	/*   store i32 %114, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_in_b = sha_transform_110_114_reg;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* sha_transform: %.preheader342*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %18 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %22 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %26 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %.preheader342*/
	/*   %30 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_preheader342_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %43*/
	/*   %45 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %43*/
	/*   %47 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__43_18)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %110*/
	/*   store i32 %112, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_36)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %110*/
	/*   store i32 %114, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_sha_transform_BB__110_37)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__crit_edge10i_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_preheaderi_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__4_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__4_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__4_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__4_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__4_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB_preheaderi5preheader_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_preheaderi5_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__28_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__28_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__28_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__28_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__28_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti9_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti9_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderi_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB_lrphi8preheaderi_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_lrphi8i_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__70_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__72_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__74_39 = 6'd39;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_12 = 6'd12;
parameter [5:0] LEGUP_function_call_22 = 6'd22;
parameter [5:0] LEGUP_function_call_31 = 6'd31;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_preheaderi_indvar18;
reg [31:0] main_preheaderi_indvar18_reg;
reg [31:0] main_preheaderi_0;
reg [31:0] main_preheaderi_0_reg;
reg [31:0] main_preheaderi_1;
reg [31:0] main_preheaderi_1_reg;
reg [31:0] main_preheaderi_2;
reg [31:0] main_preheaderi_2_reg;
reg [31:0] main_preheaderi_3;
reg [31:0] main_preheaderi_3_reg;
reg [31:0] main_4_indvar14;
reg [31:0] main_4_indvar14_reg;
reg [31:0] main_4_5;
reg [31:0] main_4_5_reg;
reg [31:0] main_4_6;
reg [31:0] main_4_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep23_reg;
reg [31:0] main_4_7;
reg [31:0] main_4_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p201ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p201ii_reg;
reg [31:0] main_4_8;
reg [31:0] main_4_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep21_reg;
reg [31:0] main_4_9;
reg [31:0] main_4_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p102ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_4_p102ii_reg;
reg [7:0] main_4_10;
reg [7:0] main_4_10_reg;
reg [31:0] main_4_11;
reg [31:0] main_4_11_reg;
reg [7:0] main_4_12;
reg [7:0] main_4_12_reg;
reg [31:0] main_4_13;
reg [31:0] main_4_13_reg;
reg [31:0] main_4_14;
reg [31:0] main_4_14_reg;
reg [31:0] main_4_15;
reg [31:0] main_4_15_reg;
reg [7:0] main_4_16;
reg [7:0] main_4_16_reg;
reg [31:0] main_4_17;
reg [31:0] main_4_17_reg;
reg [31:0] main_4_18;
reg [31:0] main_4_18_reg;
reg [31:0] main_4_19;
reg [31:0] main_4_19_reg;
reg [7:0] main_4_20;
reg [7:0] main_4_20_reg;
reg [31:0] main_4_21;
reg [31:0] main_4_21_reg;
reg [31:0] main_4_22;
reg [31:0] main_4_22_reg;
reg [31:0] main_4_23;
reg [31:0] main_4_23_reg;
reg [31:0] main_4_indvarnext15;
reg [31:0] main_4_indvarnext15_reg;
reg  main_4_exitcond16;
reg  main_4_exitcond16_reg;
reg [31:0] main_memcpyexiti_indvarnext19;
reg [31:0] main_memcpyexiti_indvarnext19_reg;
reg  main_memcpyexiti_exitcond24;
reg  main_memcpyexiti_exitcond24_reg;
reg [31:0] main_preheaderi5_indvar4;
reg [31:0] main_preheaderi5_indvar4_reg;
reg [31:0] main_preheaderi5_24;
reg [31:0] main_preheaderi5_24_reg;
reg [31:0] main_preheaderi5_25;
reg [31:0] main_preheaderi5_25_reg;
reg [31:0] main_preheaderi5_26;
reg [31:0] main_preheaderi5_26_reg;
reg [31:0] main_preheaderi5_27;
reg [31:0] main_preheaderi5_27_reg;
reg [31:0] main_28_indvar1;
reg [31:0] main_28_indvar1_reg;
reg [31:0] main_28_29;
reg [31:0] main_28_29_reg;
reg [31:0] main_28_30;
reg [31:0] main_28_30_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep8_reg;
reg [31:0] main_28_31;
reg [31:0] main_28_31_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p201ii8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p201ii8_reg;
reg [31:0] main_28_32;
reg [31:0] main_28_32_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep6_reg;
reg [31:0] main_28_33;
reg [31:0] main_28_33_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p102ii7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_28_p102ii7_reg;
reg [7:0] main_28_34;
reg [7:0] main_28_34_reg;
reg [31:0] main_28_35;
reg [31:0] main_28_35_reg;
reg [7:0] main_28_36;
reg [7:0] main_28_36_reg;
reg [31:0] main_28_37;
reg [31:0] main_28_37_reg;
reg [31:0] main_28_38;
reg [31:0] main_28_38_reg;
reg [31:0] main_28_39;
reg [31:0] main_28_39_reg;
reg [7:0] main_28_40;
reg [7:0] main_28_40_reg;
reg [31:0] main_28_41;
reg [31:0] main_28_41_reg;
reg [31:0] main_28_42;
reg [31:0] main_28_42_reg;
reg [31:0] main_28_43;
reg [31:0] main_28_43_reg;
reg [7:0] main_28_44;
reg [7:0] main_28_44_reg;
reg [31:0] main_28_45;
reg [31:0] main_28_45_reg;
reg [31:0] main_28_46;
reg [31:0] main_28_46_reg;
reg [31:0] main_28_47;
reg [31:0] main_28_47_reg;
reg [31:0] main_28_indvarnext2;
reg [31:0] main_28_indvarnext2_reg;
reg  main_28_exitcond3;
reg  main_28_exitcond3_reg;
reg [31:0] main_memcpyexiti9_indvarnext5;
reg [31:0] main_memcpyexiti9_indvarnext5_reg;
reg  main_memcpyexiti9_exitcond9;
reg  main_memcpyexiti9_exitcond9_reg;
reg [31:0] main_lrphi8i_indvar;
reg [31:0] main_lrphi8i_indvar_reg;
reg [31:0] main_lrphi8i_48;
reg [31:0] main_lrphi8i_48_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8i_p11i7i;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_lrphi8i_p11i7i_reg;
reg [31:0] main_lrphi8i_indvarnext;
reg [31:0] main_lrphi8i_indvarnext_reg;
reg  main_lrphi8i_exitcond;
reg  main_lrphi8i_exitcond_reg;
reg [31:0] main_sha_finalexit_49;
reg [31:0] main_sha_finalexit_49_reg;
reg  main_sha_finalexit_50;
reg  main_sha_finalexit_50_reg;
reg [31:0] main_sha_finalexit_51;
reg [31:0] main_sha_finalexit_51_reg;
reg [31:0] main_sha_finalexit_52;
reg [31:0] main_sha_finalexit_52_reg;
reg  main_sha_finalexit_53;
reg  main_sha_finalexit_53_reg;
reg [31:0] main_sha_finalexit_54;
reg [31:0] main_sha_finalexit_54_reg;
reg [31:0] main_sha_finalexit_55;
reg [31:0] main_sha_finalexit_55_reg;
reg [31:0] main_sha_finalexit_56;
reg [31:0] main_sha_finalexit_56_reg;
reg  main_sha_finalexit_57;
reg  main_sha_finalexit_57_reg;
reg [31:0] main_sha_finalexit_58;
reg [31:0] main_sha_finalexit_58_reg;
reg [31:0] main_sha_finalexit_59;
reg [31:0] main_sha_finalexit_59_reg;
reg [31:0] main_sha_finalexit_60;
reg [31:0] main_sha_finalexit_60_reg;
reg  main_sha_finalexit_61;
reg  main_sha_finalexit_61_reg;
reg [31:0] main_sha_finalexit_62;
reg [31:0] main_sha_finalexit_62_reg;
reg [31:0] main_sha_finalexit_63;
reg [31:0] main_sha_finalexit_63_reg;
reg [31:0] main_sha_finalexit_64;
reg [31:0] main_sha_finalexit_64_reg;
reg  main_sha_finalexit_65;
reg  main_sha_finalexit_65_reg;
reg [31:0] main_sha_finalexit_66;
reg [31:0] main_sha_finalexit_66_reg;
reg [31:0] main_sha_finalexit_67;
reg [31:0] main_sha_finalexit_67_reg;
reg  main_sha_finalexit_69;
reg  main_sha_finalexit_69_reg;
reg [13:0] indata_address_a;
reg  indata_write_enable_a;
wire [7:0] indata_in_a;
wire [7:0] indata_out_a;
reg [13:0] indata_address_b;
reg  indata_write_enable_b;
wire [7:0] indata_in_b;
wire [7:0] indata_out_b;
wire [3:0] ram_32_address_a;
wire  ram_32_write_enable_a;
wire [31:0] ram_32_in_a;
wire [31:0] ram_32_out_a;
wire [3:0] ram_32_address_b;
wire  ram_32_write_enable_b;
wire [31:0] ram_32_in_b;
wire [31:0] ram_32_out_b;
wire [6:0] sha_transform_preheader342_W_address_a;
wire  sha_transform_preheader342_W_write_enable_a;
wire [31:0] sha_transform_preheader342_W_in_a;
wire [31:0] sha_transform_preheader342_W_out_a;
wire [6:0] sha_transform_preheader342_W_address_b;
wire  sha_transform_preheader342_W_write_enable_b;
wire [31:0] sha_transform_preheader342_W_in_b;
wire [31:0] sha_transform_preheader342_W_out_b;
reg  sha_transform_start;
wire  sha_transform_memory_controller_enable_a;
wire  sha_transform_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_a;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_out_a;
wire [1:0] sha_transform_memory_controller_size_a;
wire  sha_transform_memory_controller_enable_b;
wire  sha_transform_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_b;
reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_out_b;
wire [1:0] sha_transform_memory_controller_size_b;
reg  sha_transform_memory_controller_waitrequest;
reg  sha_transform_finish_final;
reg  sha_transform_finish_reg;
wire  sha_transform_finish;
reg  legup_function_call;
wire [15:0] legup_pthreadpoll_threadID;
wire [15:0] legup_pthreadpoll_functionID;


sha_transform sha_transform (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (sha_transform_memory_controller_enable_a),
	.memory_controller_address_a (sha_transform_memory_controller_address_a),
	.memory_controller_write_enable_a (sha_transform_memory_controller_write_enable_a),
	.memory_controller_in_a (sha_transform_memory_controller_in_a),
	.memory_controller_size_a (sha_transform_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (sha_transform_memory_controller_enable_b),
	.memory_controller_address_b (sha_transform_memory_controller_address_b),
	.memory_controller_write_enable_b (sha_transform_memory_controller_write_enable_b),
	.memory_controller_in_b (sha_transform_memory_controller_in_b),
	.memory_controller_size_b (sha_transform_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (sha_transform_start),
	.finish (sha_transform_finish)
);

defparam
	sha_transform.tag_offset = tag_offset;

// Local Rams


// @indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscr...
rom_dual_port indata (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( indata_address_a ),
	.address_b( indata_address_b ),
	.q_a( indata_out_a ),
	.q_b( indata_out_b)
);
defparam indata.width_a = 8;
defparam indata.width_b = 8;
defparam indata.widthad_a = 14;
defparam indata.widthad_b = 14;
defparam indata.numwords_a = 16384;
defparam indata.numwords_b = 16384;
defparam indata.latency = 1;
defparam indata.init_file = "indata.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sha_final.exit*/
	/*   %68 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %67) #1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		$write("Result: %d\n", $signed(main_sha_finalexit_67));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_sha_finalexit_67) === 1'bX) finish <= 0;
	end
	/* main: %70*/
	/*   %71 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__70_37)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %72*/
	/*   %73 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__72_38)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__crit_edge10i_1;
LEGUP_F_main_BB__28_16:
		next_state = LEGUP_F_main_BB__28_17;
LEGUP_F_main_BB__28_17:
		next_state = LEGUP_F_main_BB__28_18;
LEGUP_F_main_BB__28_18:
		next_state = LEGUP_F_main_BB__28_19;
LEGUP_F_main_BB__28_19:
		next_state = LEGUP_F_main_BB__28_20;
LEGUP_F_main_BB__28_20:
	if ((main_28_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti9_21;
	else if ((main_28_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB__28_16;
LEGUP_F_main_BB__4_10:
	if ((main_4_exitcond16_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_11;
	else if ((main_4_exitcond16_reg == 1'd0))
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB__4_6:
		next_state = LEGUP_F_main_BB__4_7;
LEGUP_F_main_BB__4_7:
		next_state = LEGUP_F_main_BB__4_8;
LEGUP_F_main_BB__4_8:
		next_state = LEGUP_F_main_BB__4_9;
LEGUP_F_main_BB__4_9:
		next_state = LEGUP_F_main_BB__4_10;
LEGUP_F_main_BB__70_37:
		next_state = LEGUP_F_main_BB__74_39;
LEGUP_F_main_BB__72_38:
		next_state = LEGUP_F_main_BB__74_39;
LEGUP_F_main_BB__74_39:
		next_state = LEGUP_0;
LEGUP_F_main_BB__crit_edge10i_1:
		next_state = LEGUP_F_main_BB__crit_edge10i_2;
LEGUP_F_main_BB__crit_edge10i_2:
		next_state = LEGUP_F_main_BB__crit_edge10i_3;
LEGUP_F_main_BB__crit_edge10i_3:
		next_state = LEGUP_F_main_BB__crit_edge10i_4;
LEGUP_F_main_BB__crit_edge10i_4:
		next_state = LEGUP_F_main_BB_preheaderi_5;
LEGUP_F_main_BB_lrphi8i_26:
		next_state = LEGUP_F_main_BB_lrphi8i_27;
LEGUP_F_main_BB_lrphi8i_27:
		next_state = LEGUP_F_main_BB_lrphi8i_28;
LEGUP_F_main_BB_lrphi8i_28:
	if ((main_lrphi8i_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_sha_finalexit_29;
	else if ((main_lrphi8i_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_lrphi8i_26;
LEGUP_F_main_BB_lrphi8preheaderi_24:
		next_state = LEGUP_F_main_BB_lrphi8preheaderi_25;
LEGUP_F_main_BB_lrphi8preheaderi_25:
		next_state = LEGUP_F_main_BB_lrphi8i_26;
LEGUP_F_main_BB_memcpyexiti9_21:
		next_state = LEGUP_function_call_22;
LEGUP_F_main_BB_memcpyexiti9_23:
	if ((main_memcpyexiti9_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_lrphi8preheaderi_24;
	else if ((main_memcpyexiti9_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi5_15;
LEGUP_F_main_BB_memcpyexiti_11:
		next_state = LEGUP_function_call_12;
LEGUP_F_main_BB_memcpyexiti_13:
	if ((main_memcpyexiti_exitcond24_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderi5preheader_14;
	else if ((main_memcpyexiti_exitcond24_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheaderi_5;
LEGUP_F_main_BB_preheaderi5_15:
		next_state = LEGUP_F_main_BB__28_16;
LEGUP_F_main_BB_preheaderi5preheader_14:
		next_state = LEGUP_F_main_BB_preheaderi5_15;
LEGUP_F_main_BB_preheaderi_5:
		next_state = LEGUP_F_main_BB__4_6;
LEGUP_F_main_BB_sha_finalexit_29:
		next_state = LEGUP_F_main_BB_sha_finalexit_30;
LEGUP_F_main_BB_sha_finalexit_30:
		next_state = LEGUP_function_call_31;
LEGUP_F_main_BB_sha_finalexit_32:
		next_state = LEGUP_F_main_BB_sha_finalexit_33;
LEGUP_F_main_BB_sha_finalexit_33:
		next_state = LEGUP_F_main_BB_sha_finalexit_34;
LEGUP_F_main_BB_sha_finalexit_34:
		next_state = LEGUP_F_main_BB_sha_finalexit_35;
LEGUP_F_main_BB_sha_finalexit_35:
		next_state = LEGUP_F_main_BB_sha_finalexit_36;
LEGUP_F_main_BB_sha_finalexit_36:
	if ((main_sha_finalexit_69 == 1'd1))
		next_state = LEGUP_F_main_BB__70_37;
	else if ((main_sha_finalexit_69 == 1'd0))
		next_state = LEGUP_F_main_BB__72_38;
LEGUP_function_call_12:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_13;
LEGUP_function_call_22:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti9_23;
LEGUP_function_call_31:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_sha_finalexit_32;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge10i_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar18 = 32'd0;
	end
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_13) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond24_reg == 1'd0))) */ begin
		main_preheaderi_indvar18 = main_memcpyexiti_indvarnext19_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if (((cur_state == LEGUP_F_main_BB__crit_edge10i_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi_indvar18_reg <= main_preheaderi_indvar18;
		if (start == 1'b0 && ^(main_preheaderi_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar18_reg"); $finish; end
	end
	/* main: %.preheader.i*/
	/*   %indvar18 = phi i32 [ %indvar.next19, %memcpy.exit.i ], [ 0, %._crit_edge10.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_13) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond24_reg == 1'd0))) begin
		main_preheaderi_indvar18_reg <= main_preheaderi_indvar18;
		if (start == 1'b0 && ^(main_preheaderi_indvar18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_indvar18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %0 = shl i32 %indvar18, 6*/
		main_preheaderi_0 = (main_preheaderi_indvar18_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %0 = shl i32 %indvar18, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_0_reg <= main_preheaderi_0;
		if (start == 1'b0 && ^(main_preheaderi_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %1 = or i32 %0, 1*/
		main_preheaderi_1 = (main_preheaderi_0 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %1 = or i32 %0, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_1_reg <= main_preheaderi_1;
		if (start == 1'b0 && ^(main_preheaderi_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %2 = or i32 %0, 2*/
		main_preheaderi_2 = (main_preheaderi_0 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %2 = or i32 %0, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_2_reg <= main_preheaderi_2;
		if (start == 1'b0 && ^(main_preheaderi_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i*/
	/*   %3 = or i32 %0, 3*/
		main_preheaderi_3 = (main_preheaderi_0 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i*/
	/*   %3 = or i32 %0, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi_5)) begin
		main_preheaderi_3_reg <= main_preheaderi_3;
		if (start == 1'b0 && ^(main_preheaderi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar14 = 32'd0;
	end
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__4_10) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond16_reg == 1'd0))) */ begin
		main_4_indvar14 = main_4_indvarnext15_reg;
	end
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_4_indvar14_reg <= main_4_indvar14;
		if (start == 1'b0 && ^(main_4_indvar14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar14_reg"); $finish; end
	end
	/* main: %4*/
	/*   %indvar14 = phi i32 [ %indvar.next15, %4 ], [ 0, %.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB__4_10) & (memory_controller_waitrequest == 1'd0)) & (main_4_exitcond16_reg == 1'd0))) begin
		main_4_indvar14_reg <= main_4_indvar14;
		if (start == 1'b0 && ^(main_4_indvar14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvar14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %5 = shl i32 %indvar14, 2*/
		main_4_5 = (main_4_indvar14_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %5 = shl i32 %indvar14, 2*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_5_reg <= main_4_5;
		if (start == 1'b0 && ^(main_4_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %6 = add i32 %1, %5*/
		main_4_6 = (main_preheaderi_1_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %6 = add i32 %1, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_6_reg <= main_4_6;
		if (start == 1'b0 && ^(main_4_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep23 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %6*/
		main_4_scevgep23 = (1'd0 | (1 * main_4_6_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep23 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %6*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep23_reg <= main_4_scevgep23;
		if (start == 1'b0 && ^(main_4_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %7 = add i32 %0, %5*/
		main_4_7 = (main_preheaderi_0_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %7 = add i32 %0, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_7_reg <= main_4_7;
		if (start == 1'b0 && ^(main_4_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %p2.01.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
		main_4_p201ii = (1'd0 | (1 * main_4_7_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %p2.01.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_p201ii_reg <= main_4_p201ii;
		if (start == 1'b0 && ^(main_4_p201ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_p201ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %8 = add i32 %2, %5*/
		main_4_8 = (main_preheaderi_2_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %8 = add i32 %2, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_8_reg <= main_4_8;
		if (start == 1'b0 && ^(main_4_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep21 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %8*/
		main_4_scevgep21 = (1'd0 | (1 * main_4_8_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep21 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %8*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep21_reg <= main_4_scevgep21;
		if (start == 1'b0 && ^(main_4_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %9 = add i32 %3, %5*/
		main_4_9 = (main_preheaderi_3_reg + main_4_5);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %9 = add i32 %3, %5*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_9_reg <= main_4_9;
		if (start == 1'b0 && ^(main_4_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %scevgep20 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %9*/
		main_4_scevgep20 = (1'd0 | (1 * main_4_9_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %scevgep20 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %9*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		main_4_scevgep20_reg <= main_4_scevgep20;
		if (start == 1'b0 && ^(main_4_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %p1.02.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar14*/
		main_4_p102ii = (`TAG_g_sha_info_data_a | (4 * main_4_indvar14_reg));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %p1.02.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar14*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_p102ii_reg <= main_4_p102ii;
		if (start == 1'b0 && ^(main_4_p102ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_p102ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
		main_4_10 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_10_reg <= main_4_10;
		if (start == 1'b0 && ^(main_4_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %11 = zext i8 %10 to i32*/
		main_4_11 = main_4_10;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %11 = zext i8 %10 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_11_reg <= main_4_11;
		if (start == 1'b0 && ^(main_4_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
		main_4_12 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_12_reg <= main_4_12;
		if (start == 1'b0 && ^(main_4_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %13 = zext i8 %12 to i32*/
		main_4_13 = main_4_12;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %13 = zext i8 %12 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_13_reg <= main_4_13;
		if (start == 1'b0 && ^(main_4_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %14 = shl nuw nsw i32 %13, 8*/
		main_4_14 = (main_4_13 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %14 = shl nuw nsw i32 %13, 8*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_14_reg <= main_4_14;
		if (start == 1'b0 && ^(main_4_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %15 = or i32 %14, %11*/
		main_4_15 = (main_4_14 | main_4_11);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %15 = or i32 %14, %11*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		main_4_15_reg <= main_4_15;
		if (start == 1'b0 && ^(main_4_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
		main_4_16 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_16_reg <= main_4_16;
		if (start == 1'b0 && ^(main_4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %17 = zext i8 %16 to i32*/
		main_4_17 = main_4_16;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %17 = zext i8 %16 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_17_reg <= main_4_17;
		if (start == 1'b0 && ^(main_4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %18 = shl nuw nsw i32 %17, 16*/
		main_4_18 = (main_4_17 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %18 = shl nuw nsw i32 %17, 16*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_18_reg <= main_4_18;
		if (start == 1'b0 && ^(main_4_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %19 = or i32 %15, %18*/
		main_4_19 = (main_4_15_reg | main_4_18);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %19 = or i32 %15, %18*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_19_reg <= main_4_19;
		if (start == 1'b0 && ^(main_4_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
		main_4_20 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_20_reg <= main_4_20;
		if (start == 1'b0 && ^(main_4_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %21 = zext i8 %20 to i32*/
		main_4_21 = main_4_20;
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %21 = zext i8 %20 to i32*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_21_reg <= main_4_21;
		if (start == 1'b0 && ^(main_4_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %22 = shl nuw i32 %21, 24*/
		main_4_22 = (main_4_21 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %22 = shl nuw i32 %21, 24*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_22_reg <= main_4_22;
		if (start == 1'b0 && ^(main_4_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %23 = or i32 %19, %22*/
		main_4_23 = (main_4_19 | main_4_22);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %23 = or i32 %19, %22*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		main_4_23_reg <= main_4_23;
		if (start == 1'b0 && ^(main_4_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %indvar.next15 = add i32 %indvar14, 1*/
		main_4_indvarnext15 = (main_4_indvar14_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %indvar.next15 = add i32 %indvar14, 1*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_indvarnext15_reg <= main_4_indvarnext15;
		if (start == 1'b0 && ^(main_4_indvarnext15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_indvarnext15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %4*/
	/*   %exitcond16 = icmp eq i32 %indvar.next15, 16*/
		main_4_exitcond16 = (main_4_indvarnext15 == 32'd16);
end
always @(posedge clk) begin
	/* main: %4*/
	/*   %exitcond16 = icmp eq i32 %indvar.next15, 16*/
	if ((cur_state == LEGUP_F_main_BB__4_6)) begin
		main_4_exitcond16_reg <= main_4_exitcond16;
		if (start == 1'b0 && ^(main_4_exitcond16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_4_exitcond16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
		main_memcpyexiti_indvarnext19 = (main_preheaderi_indvar18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next19 = add i32 %indvar18, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		main_memcpyexiti_indvarnext19_reg <= main_memcpyexiti_indvarnext19;
		if (start == 1'b0 && ^(main_memcpyexiti_indvarnext19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_indvarnext19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond24 = icmp eq i32 %indvar.next19, 128*/
		main_memcpyexiti_exitcond24 = (main_memcpyexiti_indvarnext19 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond24 = icmp eq i32 %indvar.next19, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		main_memcpyexiti_exitcond24_reg <= main_memcpyexiti_exitcond24;
		if (start == 1'b0 && ^(main_memcpyexiti_exitcond24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_exitcond24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i5.preheader ], [ %indvar.next5, %memcpy.exit.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5preheader_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi5_indvar4 = 32'd0;
	end
	/* main: %.preheader.i5*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i5.preheader ], [ %indvar.next5, %memcpy.exit.i9 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti9_23) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti9_exitcond9_reg == 1'd0))) */ begin
		main_preheaderi5_indvar4 = main_memcpyexiti9_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i5.preheader ], [ %indvar.next5, %memcpy.exit.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5preheader_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheaderi5_indvar4_reg <= main_preheaderi5_indvar4;
		if (start == 1'b0 && ^(main_preheaderi5_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_indvar4_reg"); $finish; end
	end
	/* main: %.preheader.i5*/
	/*   %indvar4 = phi i32 [ 0, %.preheader.i5.preheader ], [ %indvar.next5, %memcpy.exit.i9 ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti9_23) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti9_exitcond9_reg == 1'd0))) begin
		main_preheaderi5_indvar4_reg <= main_preheaderi5_indvar4;
		if (start == 1'b0 && ^(main_preheaderi5_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %24 = shl i32 %indvar4, 6*/
		main_preheaderi5_24 = (main_preheaderi5_indvar4_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %24 = shl i32 %indvar4, 6*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_15)) begin
		main_preheaderi5_24_reg <= main_preheaderi5_24;
		if (start == 1'b0 && ^(main_preheaderi5_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %25 = or i32 %24, 1*/
		main_preheaderi5_25 = (main_preheaderi5_24 | 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %25 = or i32 %24, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_15)) begin
		main_preheaderi5_25_reg <= main_preheaderi5_25;
		if (start == 1'b0 && ^(main_preheaderi5_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %26 = or i32 %24, 2*/
		main_preheaderi5_26 = (main_preheaderi5_24 | 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %26 = or i32 %24, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_15)) begin
		main_preheaderi5_26_reg <= main_preheaderi5_26;
		if (start == 1'b0 && ^(main_preheaderi5_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader.i5*/
	/*   %27 = or i32 %24, 3*/
		main_preheaderi5_27 = (main_preheaderi5_24 | 32'd3);
end
always @(posedge clk) begin
	/* main: %.preheader.i5*/
	/*   %27 = or i32 %24, 3*/
	if ((cur_state == LEGUP_F_main_BB_preheaderi5_15)) begin
		main_preheaderi5_27_reg <= main_preheaderi5_27;
		if (start == 1'b0 && ^(main_preheaderi5_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheaderi5_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i5 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_28_indvar1 = 32'd0;
	end
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i5 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__28_20) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond3_reg == 1'd0))) */ begin
		main_28_indvar1 = main_28_indvarnext2_reg;
	end
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i5 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderi5_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_28_indvar1_reg <= main_28_indvar1;
		if (start == 1'b0 && ^(main_28_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvar1_reg"); $finish; end
	end
	/* main: %28*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %28 ], [ 0, %.preheader.i5 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_20) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond3_reg == 1'd0))) begin
		main_28_indvar1_reg <= main_28_indvar1;
		if (start == 1'b0 && ^(main_28_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %29 = shl i32 %indvar1, 2*/
		main_28_29 = (main_28_indvar1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %29 = shl i32 %indvar1, 2*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_29_reg <= main_28_29;
		if (start == 1'b0 && ^(main_28_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %30 = add i32 %25, %29*/
		main_28_30 = (main_preheaderi5_25_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %30 = add i32 %25, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_30_reg <= main_28_30;
		if (start == 1'b0 && ^(main_28_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %30*/
		main_28_scevgep8 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_30_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %30*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep8_reg <= main_28_scevgep8;
		if (start == 1'b0 && ^(main_28_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %31 = add i32 %24, %29*/
		main_28_31 = (main_preheaderi5_24_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %31 = add i32 %24, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_31_reg <= main_28_31;
		if (start == 1'b0 && ^(main_28_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %p2.01.i.i8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %31*/
		main_28_p201ii8 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_31_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %p2.01.i.i8 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %31*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_p201ii8_reg <= main_28_p201ii8;
		if (start == 1'b0 && ^(main_28_p201ii8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_p201ii8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %32 = add i32 %26, %29*/
		main_28_32 = (main_preheaderi5_26_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %32 = add i32 %26, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_32_reg <= main_28_32;
		if (start == 1'b0 && ^(main_28_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %32*/
		main_28_scevgep6 = (1'd0 | ((8192 * 32'd1) + (1 * main_28_32_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep6 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %32*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep6_reg <= main_28_scevgep6;
		if (start == 1'b0 && ^(main_28_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %33 = add i32 %27, %29*/
		main_28_33 = (main_preheaderi5_27_reg + main_28_29);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %33 = add i32 %27, %29*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_33_reg <= main_28_33;
		if (start == 1'b0 && ^(main_28_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %33*/
		main_28_scevgep = (1'd0 | ((8192 * 32'd1) + (1 * main_28_33_reg)));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %scevgep = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %33*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		main_28_scevgep_reg <= main_28_scevgep;
		if (start == 1'b0 && ^(main_28_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %p1.02.i.i7 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
		main_28_p102ii7 = (`TAG_g_sha_info_data_a | (4 * main_28_indvar1_reg));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %p1.02.i.i7 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_p102ii7_reg <= main_28_p102ii7;
		if (start == 1'b0 && ^(main_28_p102ii7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_p102ii7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i8, align 1, !tbaa !5*/
		main_28_34 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_34_reg <= main_28_34;
		if (start == 1'b0 && ^(main_28_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %35 = zext i8 %34 to i32*/
		main_28_35 = main_28_34;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %35 = zext i8 %34 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_35_reg <= main_28_35;
		if (start == 1'b0 && ^(main_28_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
		main_28_36 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_36_reg <= main_28_36;
		if (start == 1'b0 && ^(main_28_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %37 = zext i8 %36 to i32*/
		main_28_37 = main_28_36;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %37 = zext i8 %36 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_37_reg <= main_28_37;
		if (start == 1'b0 && ^(main_28_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %38 = shl nuw nsw i32 %37, 8*/
		main_28_38 = (main_28_37 <<< (32'd8 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %38 = shl nuw nsw i32 %37, 8*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_38_reg <= main_28_38;
		if (start == 1'b0 && ^(main_28_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %39 = or i32 %38, %35*/
		main_28_39 = (main_28_38 | main_28_35);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %39 = or i32 %38, %35*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		main_28_39_reg <= main_28_39;
		if (start == 1'b0 && ^(main_28_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
		main_28_40 = indata_out_a;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_40_reg <= main_28_40;
		if (start == 1'b0 && ^(main_28_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %41 = zext i8 %40 to i32*/
		main_28_41 = main_28_40;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %41 = zext i8 %40 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_41_reg <= main_28_41;
		if (start == 1'b0 && ^(main_28_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %42 = shl nuw nsw i32 %41, 16*/
		main_28_42 = (main_28_41 <<< (32'd16 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %42 = shl nuw nsw i32 %41, 16*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_42_reg <= main_28_42;
		if (start == 1'b0 && ^(main_28_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %43 = or i32 %39, %42*/
		main_28_43 = (main_28_39_reg | main_28_42);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %43 = or i32 %39, %42*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_43_reg <= main_28_43;
		if (start == 1'b0 && ^(main_28_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
		main_28_44 = indata_out_b;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_44_reg <= main_28_44;
		if (start == 1'b0 && ^(main_28_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %45 = zext i8 %44 to i32*/
		main_28_45 = main_28_44;
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %45 = zext i8 %44 to i32*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_45_reg <= main_28_45;
		if (start == 1'b0 && ^(main_28_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %46 = shl nuw i32 %45, 24*/
		main_28_46 = (main_28_45 <<< (32'd24 % 32));
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %46 = shl nuw i32 %45, 24*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_46_reg <= main_28_46;
		if (start == 1'b0 && ^(main_28_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %47 = or i32 %43, %46*/
		main_28_47 = (main_28_43 | main_28_46);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %47 = or i32 %43, %46*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		main_28_47_reg <= main_28_47;
		if (start == 1'b0 && ^(main_28_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		main_28_indvarnext2 = (main_28_indvar1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_indvarnext2_reg <= main_28_indvarnext2;
		if (start == 1'b0 && ^(main_28_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
		main_28_exitcond3 = (main_28_indvarnext2 == 32'd16);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
	if ((cur_state == LEGUP_F_main_BB__28_16)) begin
		main_28_exitcond3_reg <= main_28_exitcond3;
		if (start == 1'b0 && ^(main_28_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i9*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_memcpyexiti9_indvarnext5 = (main_preheaderi5_indvar4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i9*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti9_21)) begin
		main_memcpyexiti9_indvarnext5_reg <= main_memcpyexiti9_indvarnext5;
		if (start == 1'b0 && ^(main_memcpyexiti9_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti9_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i9*/
	/*   %exitcond9 = icmp eq i32 %indvar.next5, 128*/
		main_memcpyexiti9_exitcond9 = (main_memcpyexiti9_indvarnext5 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i9*/
	/*   %exitcond9 = icmp eq i32 %indvar.next5, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti9_21)) begin
		main_memcpyexiti9_exitcond9_reg <= main_memcpyexiti9_exitcond9;
		if (start == 1'b0 && ^(main_memcpyexiti9_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti9_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8i_indvar = 32'd0;
	end
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_lrphi8i_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8i_exitcond_reg == 1'd0))) */ begin
		main_lrphi8i_indvar = main_lrphi8i_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_25) & (memory_controller_waitrequest == 1'd0))) begin
		main_lrphi8i_indvar_reg <= main_lrphi8i_indvar;
		if (start == 1'b0 && ^(main_lrphi8i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvar_reg"); $finish; end
	end
	/* main: %.lr.ph.i8.i*/
	/*   %indvar = phi i32 [ %indvar.next, %.lr.ph.i8.i ], [ 0, %.lr.ph.i8.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_lrphi8i_28) & (memory_controller_waitrequest == 1'd0)) & (main_lrphi8i_exitcond_reg == 1'd0))) begin
		main_lrphi8i_indvar_reg <= main_lrphi8i_indvar;
		if (start == 1'b0 && ^(main_lrphi8i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %48 = add i32 %indvar, 1*/
		main_lrphi8i_48 = (main_lrphi8i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %48 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_48_reg <= main_lrphi8i_48;
		if (start == 1'b0 && ^(main_lrphi8i_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %p.11.i7.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %48*/
		main_lrphi8i_p11i7i = (`TAG_g_sha_info_data_a | (4 * main_lrphi8i_48_reg));
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %p.11.i7.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %48*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		main_lrphi8i_p11i7i_reg <= main_lrphi8i_p11i7i;
		if (start == 1'b0 && ^(main_lrphi8i_p11i7i) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_p11i7i_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_lrphi8i_indvarnext = (main_lrphi8i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_indvarnext_reg <= main_lrphi8i_indvarnext;
		if (start == 1'b0 && ^(main_lrphi8i_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.lr.ph.i8.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
		main_lrphi8i_exitcond = (main_lrphi8i_indvarnext == 32'd13);
end
always @(posedge clk) begin
	/* main: %.lr.ph.i8.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_26)) begin
		main_lrphi8i_exitcond_reg <= main_lrphi8i_exitcond;
		if (start == 1'b0 && ^(main_lrphi8i_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_lrphi8i_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
		main_sha_finalexit_49 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_49_reg <= main_sha_finalexit_49;
		if (start == 1'b0 && ^(main_sha_finalexit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %50 = icmp eq i32 %49, 6969911*/
		main_sha_finalexit_50 = (main_sha_finalexit_49 == 32'd6969911);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %50 = icmp eq i32 %49, 6969911*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_50_reg <= main_sha_finalexit_50;
		if (start == 1'b0 && ^(main_sha_finalexit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %51 = zext i1 %50 to i32*/
		main_sha_finalexit_51 = main_sha_finalexit_50;
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %51 = zext i1 %50 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_51_reg <= main_sha_finalexit_51;
		if (start == 1'b0 && ^(main_sha_finalexit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
		main_sha_finalexit_52 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_52_reg <= main_sha_finalexit_52;
		if (start == 1'b0 && ^(main_sha_finalexit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %53 = icmp eq i32 %52, -1814260603*/
		main_sha_finalexit_53 = (main_sha_finalexit_52 == -32'd1814260603);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %53 = icmp eq i32 %52, -1814260603*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_53_reg <= main_sha_finalexit_53;
		if (start == 1'b0 && ^(main_sha_finalexit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %54 = zext i1 %53 to i32*/
		main_sha_finalexit_54 = main_sha_finalexit_53;
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %54 = zext i1 %53 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_54_reg <= main_sha_finalexit_54;
		if (start == 1'b0 && ^(main_sha_finalexit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %55 = add nuw nsw i32 %54, %51*/
		main_sha_finalexit_55 = (main_sha_finalexit_54 + main_sha_finalexit_51);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %55 = add nuw nsw i32 %54, %51*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		main_sha_finalexit_55_reg <= main_sha_finalexit_55;
		if (start == 1'b0 && ^(main_sha_finalexit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
		main_sha_finalexit_56 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_56_reg <= main_sha_finalexit_56;
		if (start == 1'b0 && ^(main_sha_finalexit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %57 = icmp eq i32 %56, 742465810*/
		main_sha_finalexit_57 = (main_sha_finalexit_56 == 32'd742465810);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %57 = icmp eq i32 %56, 742465810*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_57_reg <= main_sha_finalexit_57;
		if (start == 1'b0 && ^(main_sha_finalexit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %58 = zext i1 %57 to i32*/
		main_sha_finalexit_58 = main_sha_finalexit_57;
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %58 = zext i1 %57 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_58_reg <= main_sha_finalexit_58;
		if (start == 1'b0 && ^(main_sha_finalexit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %59 = add nuw nsw i32 %58, %55*/
		main_sha_finalexit_59 = (main_sha_finalexit_58 + main_sha_finalexit_55_reg);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %59 = add nuw nsw i32 %58, %55*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_59_reg <= main_sha_finalexit_59;
		if (start == 1'b0 && ^(main_sha_finalexit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
		main_sha_finalexit_60 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_60_reg <= main_sha_finalexit_60;
		if (start == 1'b0 && ^(main_sha_finalexit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %61 = icmp eq i32 %60, 1677179459*/
		main_sha_finalexit_61 = (main_sha_finalexit_60 == 32'd1677179459);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %61 = icmp eq i32 %60, 1677179459*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_61_reg <= main_sha_finalexit_61;
		if (start == 1'b0 && ^(main_sha_finalexit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %62 = zext i1 %61 to i32*/
		main_sha_finalexit_62 = main_sha_finalexit_61;
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %62 = zext i1 %61 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_62_reg <= main_sha_finalexit_62;
		if (start == 1'b0 && ^(main_sha_finalexit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %63 = add nuw nsw i32 %62, %59*/
		main_sha_finalexit_63 = (main_sha_finalexit_62 + main_sha_finalexit_59);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %63 = add nuw nsw i32 %62, %59*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		main_sha_finalexit_63_reg <= main_sha_finalexit_63;
		if (start == 1'b0 && ^(main_sha_finalexit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
		main_sha_finalexit_64 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_64_reg <= main_sha_finalexit_64;
		if (start == 1'b0 && ^(main_sha_finalexit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %65 = icmp eq i32 %64, -1384908510*/
		main_sha_finalexit_65 = (main_sha_finalexit_64 == -32'd1384908510);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %65 = icmp eq i32 %64, -1384908510*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_65_reg <= main_sha_finalexit_65;
		if (start == 1'b0 && ^(main_sha_finalexit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %66 = zext i1 %65 to i32*/
		main_sha_finalexit_66 = main_sha_finalexit_65;
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %66 = zext i1 %65 to i32*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_66_reg <= main_sha_finalexit_66;
		if (start == 1'b0 && ^(main_sha_finalexit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %67 = add nuw nsw i32 %66, %63*/
		main_sha_finalexit_67 = (main_sha_finalexit_66 + main_sha_finalexit_63_reg);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %67 = add nuw nsw i32 %66, %63*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_67_reg <= main_sha_finalexit_67;
		if (start == 1'b0 && ^(main_sha_finalexit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %69 = icmp eq i32 %67, 5*/
		main_sha_finalexit_69 = (main_sha_finalexit_67 == 32'd5);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %69 = icmp eq i32 %67, 5*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_69_reg <= main_sha_finalexit_69;
		if (start == 1'b0 && ^(main_sha_finalexit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_69_reg"); $finish; end
	end
end
always @(*) begin
	indata_address_a = 1'd0;
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_address_a = (main_4_p201ii >>> 3'd0);
	end
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_address_a = (main_4_scevgep21_reg >>> 3'd0);
	end
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_address_a = (main_28_p201ii8 >>> 3'd0);
	end
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_address_a = (main_28_scevgep6_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_a = 1'd0;
	/* main: %4*/
	/*   %10 = load i8* %p2.01.i.i, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %4*/
	/*   %16 = load i8* %scevgep21, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %34 = load i8* %p2.01.i.i8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_write_enable_a = 1'd0;
	end
	/* main: %28*/
	/*   %40 = load i8* %scevgep6, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_write_enable_a = 1'd0;
	end
end
always @(*) begin
	indata_address_b = 1'd0;
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_address_b = (main_4_scevgep23 >>> 3'd0);
	end
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_address_b = (main_4_scevgep20_reg >>> 3'd0);
	end
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_address_b = (main_28_scevgep8 >>> 3'd0);
	end
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_address_b = (main_28_scevgep_reg >>> 3'd0);
	end
end
always @(*) begin
	indata_write_enable_b = 1'd0;
	/* main: %4*/
	/*   %12 = load i8* %scevgep23, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_7)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %4*/
	/*   %20 = load i8* %scevgep20, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__4_8)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %28*/
	/*   %36 = load i8* %scevgep8, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_17)) begin
		indata_write_enable_b = 1'd0;
	end
	/* main: %28*/
	/*   %44 = load i8* %scevgep, align 1, !tbaa !5*/
	if ((cur_state == LEGUP_F_main_BB__28_18)) begin
		indata_write_enable_b = 1'd0;
	end
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_11)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_12)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti9_21)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_30)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		sha_transform_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	else if ((cur_state == LEGUP_function_call_22)) begin
		sha_transform_memory_controller_out_a = memory_controller_out_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	else /* if ((cur_state == LEGUP_function_call_31)) */ begin
		sha_transform_memory_controller_out_a = memory_controller_out_a;
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		sha_transform_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	else if ((cur_state == LEGUP_function_call_22)) begin
		sha_transform_memory_controller_out_b = memory_controller_out_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	else /* if ((cur_state == LEGUP_function_call_31)) */ begin
		sha_transform_memory_controller_out_b = memory_controller_out_b;
	end
end
always @(*) begin
	sha_transform_memory_controller_waitrequest = memory_controller_waitrequest;
end
always @(*) begin
	sha_transform_finish_final = sha_transform_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti_11))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti9_21))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_sha_finalexit_30))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
end
always @(*) begin
	legup_function_call = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		legup_function_call = 1'd1;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		legup_function_call = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		legup_function_call = 1'd1;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %74*/
	/*   ret i32 %67*/
	if ((cur_state == LEGUP_F_main_BB__74_39)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_address_a = main_4_p102ii_reg;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_address_a = `TAG_g_sha_info_data_a;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_address_a = main_lrphi8i_p11i7i;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a | (4 * 32'd14));
	end
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_in_a = 32'd1732584193;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_in_a = -32'd1732584194;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_in_a = -32'd1009589776;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_in_a = main_4_23;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_in_a = 32'd128;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %4*/
	/*   store i32 %23, i32* %p1.02.i.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__4_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i8.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8preheaderi_24)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.lr.ph.i8.i*/
	/*   store i32 0, i32* %p.11.i7.i, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_lrphi8i_27)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %49 = load i32* @sha_info_digest.0, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %56 = load i32* @sha_info_digest.2, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_address_b = main_28_p102ii7_reg;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a | (4 * 32'd15));
	end
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_in_b = -32'd271733879;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_in_b = 32'd271733878;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_in_b = main_28_47;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_in_b = 32'd131072;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_12)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %memcpy.exit.i9*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_22)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #1*/
	if ((cur_state == LEGUP_function_call_31)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %._crit_edge10.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__crit_edge10i_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %28*/
	/*   store i32 %47, i32* %p1.02.i.i7, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB__28_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_29)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %52 = load i32* @sha_info_digest.1, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %60 = load i32* @sha_info_digest.3, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_33)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %64 = load i32* @sha_info_digest.4, align 4, !tbaa !1*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %74*/
	/*   ret i32 %67*/
	if ((cur_state == LEGUP_F_main_BB__74_39)) begin
		return_val <= main_sha_finalexit_67_reg;
		if (start == 1'b0 && ^(main_sha_finalexit_67_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: ../../../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: ../../../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: ../../../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
